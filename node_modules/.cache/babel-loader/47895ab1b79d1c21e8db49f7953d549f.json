{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"curve\", \"oversample\"];\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport var createNativeWaveShaperNodeFakerFactory = function createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections) {\n  return function (nativeContext, _ref) {\n    var curve = _ref.curve,\n        oversample = _ref.oversample,\n        audioNodeOptions = _objectWithoutProperties(_ref, _excluded);\n\n    var negativeWaveShaperNode = nativeContext.createWaveShaper();\n    var positiveWaveShaperNode = nativeContext.createWaveShaper();\n    assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n    assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n    var inputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      gain: 1\n    }));\n    var invertGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      gain: -1\n    }));\n    var outputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      gain: 1\n    }));\n    var revertGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      gain: -1\n    }));\n    var disconnectNativeAudioBufferSourceNode = null;\n    var isConnected = false;\n    var unmodifiedCurve = null;\n    var nativeWaveShaperNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return negativeWaveShaperNode.channelCount;\n      },\n\n      set channelCount(value) {\n        inputGainNode.channelCount = value;\n        invertGainNode.channelCount = value;\n        negativeWaveShaperNode.channelCount = value;\n        outputGainNode.channelCount = value;\n        positiveWaveShaperNode.channelCount = value;\n        revertGainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return negativeWaveShaperNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        inputGainNode.channelCountMode = value;\n        invertGainNode.channelCountMode = value;\n        negativeWaveShaperNode.channelCountMode = value;\n        outputGainNode.channelCountMode = value;\n        positiveWaveShaperNode.channelCountMode = value;\n        revertGainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return negativeWaveShaperNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n        invertGainNode.channelInterpretation = value;\n        negativeWaveShaperNode.channelInterpretation = value;\n        outputGainNode.channelInterpretation = value;\n        positiveWaveShaperNode.channelInterpretation = value;\n        revertGainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return negativeWaveShaperNode.context;\n      },\n\n      get curve() {\n        return unmodifiedCurve;\n      },\n\n      set curve(value) {\n        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n        if (value !== null && value.length < 2) {\n          throw createInvalidStateError();\n        }\n\n        if (value === null) {\n          negativeWaveShaperNode.curve = value;\n          positiveWaveShaperNode.curve = value;\n        } else {\n          var curveLength = value.length;\n          var negativeCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n          var positiveCurve = new Float32Array(curveLength + 2 - curveLength % 2);\n          negativeCurve[0] = value[0];\n          positiveCurve[0] = -value[curveLength - 1];\n          var length = Math.ceil((curveLength + 1) / 2);\n          var centerIndex = (curveLength + 1) / 2 - 1;\n\n          for (var i = 1; i < length; i += 1) {\n            var theoreticIndex = i / length * centerIndex;\n            var lowerIndex = Math.floor(theoreticIndex);\n            var upperIndex = Math.ceil(theoreticIndex);\n            negativeCurve[i] = lowerIndex === upperIndex ? value[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * value[upperIndex];\n            positiveCurve[i] = lowerIndex === upperIndex ? -value[curveLength - 1 - lowerIndex] : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) - (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];\n          }\n\n          negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n          negativeWaveShaperNode.curve = negativeCurve;\n          positiveWaveShaperNode.curve = positiveCurve;\n        }\n\n        unmodifiedCurve = value;\n\n        if (isConnected) {\n          if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n          } else if (disconnectNativeAudioBufferSourceNode !== null) {\n            disconnectNativeAudioBufferSourceNode();\n            disconnectNativeAudioBufferSourceNode = null;\n          }\n        }\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get numberOfInputs() {\n        return negativeWaveShaperNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return negativeWaveShaperNode.numberOfOutputs;\n      },\n\n      get oversample() {\n        return negativeWaveShaperNode.oversample;\n      },\n\n      set oversample(value) {\n        negativeWaveShaperNode.oversample = value;\n        positiveWaveShaperNode.oversample = value;\n      },\n\n      addEventListener: function addEventListener() {\n        return inputGainNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return inputGainNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return inputGainNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n\n    if (curve !== null) {\n      // Only values of type Float32Array can be assigned to the curve property.\n      nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);\n    }\n\n    if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n      nativeWaveShaperNodeFaker.oversample = oversample;\n    }\n\n    var whenConnected = function whenConnected() {\n      inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);\n      inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);\n      isConnected = true;\n\n      if (isDCCurve(unmodifiedCurve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n      }\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      inputGainNode.disconnect(negativeWaveShaperNode);\n      negativeWaveShaperNode.disconnect(outputGainNode);\n      inputGainNode.disconnect(invertGainNode);\n      invertGainNode.disconnect(positiveWaveShaperNode);\n      positiveWaveShaperNode.disconnect(revertGainNode);\n      revertGainNode.disconnect(outputGainNode);\n      isConnected = false;\n\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n\n    return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"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","names":["assignNativeAudioNodeOptions","interceptConnections","createNativeWaveShaperNodeFakerFactory","createConnectedNativeAudioBufferSourceNode","createInvalidStateError","createNativeGainNode","isDCCurve","monitorConnections","nativeContext","curve","oversample","audioNodeOptions","negativeWaveShaperNode","createWaveShaper","positiveWaveShaperNode","inputGainNode","gain","invertGainNode","outputGainNode","revertGainNode","disconnectNativeAudioBufferSourceNode","isConnected","unmodifiedCurve","nativeWaveShaperNodeFaker","bufferSize","undefined","channelCount","value","channelCountMode","channelInterpretation","context","length","curveLength","negativeCurve","Float32Array","positiveCurve","Math","ceil","centerIndex","i","theoreticIndex","lowerIndex","floor","upperIndex","inputs","numberOfInputs","numberOfOutputs","addEventListener","dispatchEvent","removeEventListener","whenConnected","connect","whenDisconnected","disconnect"],"sourceRoot":"","sources":["../../../src/factories/native-wave-shaper-node-faker-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}