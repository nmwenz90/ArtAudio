{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { GreaterThan } from \"../../signal/GreaterThan\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Follower } from \"../analysis/Follower\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { dbToGain, gainToDb } from \"../../core/type/Conversions\";\n/**\n * Gate only passes a signal through when the incoming\n * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude\n * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].\n *\n * @example\n * const gate = new Tone.Gate(-30, 0.2).toDestination();\n * const mic = new Tone.UserMedia().connect(gate);\n * // the gate will only pass through the incoming\n * // signal when it's louder than -30db\n * @category Component\n */\n\nexport var Gate = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Gate, _ToneAudioNode);\n\n  var _super = _createSuper(Gate);\n\n  function Gate() {\n    var _this;\n\n    _classCallCheck(this, Gate);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"])));\n    _this.name = \"Gate\";\n    var options = optionsFromArguments(Gate.getDefaults(), arguments, [\"threshold\", \"smoothing\"]);\n    _this._follower = new Follower({\n      context: _this.context,\n      smoothing: options.smoothing\n    });\n    _this._gt = new GreaterThan({\n      context: _this.context,\n      value: dbToGain(options.threshold)\n    });\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this._gate = _this.output = new Gain({\n      context: _this.context\n    }); // connections\n\n    _this.input.connect(_this._gate); // the control signal\n\n\n    _this.input.chain(_this._follower, _this._gt, _this._gate.gain);\n\n    return _this;\n  }\n\n  _createClass(Gate, [{\n    key: \"threshold\",\n    get:\n    /**\n     * The threshold of the gate in decibels\n     */\n    function get() {\n      return gainToDb(this._gt.value);\n    },\n    set: function set(thresh) {\n      this._gt.value = dbToGain(thresh);\n    }\n    /**\n     * The attack/decay speed of the gate. See [[Follower.smoothing]]\n     */\n\n  }, {\n    key: \"smoothing\",\n    get: function get() {\n      return this._follower.smoothing;\n    },\n    set: function set(smoothingTime) {\n      this._follower.smoothing = smoothingTime;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Gate.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n\n      this._follower.dispose();\n\n      this._gt.dispose();\n\n      this._gate.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        smoothing: 0.1,\n        threshold: -40\n      });\n    }\n  }]);\n\n  return Gate;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,aAAT,QAAoD,kCAApD;AAEA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,EAAmBC,QAAnB,QAAmC,6BAAnC;AAOA;;;;;;;;;;;;;AAYA,WAAaC,IAAb;AAAA;;AAAA;;AA4BC;AAAA;;AAAA;;AACC,8BAAMC,MAAM,CAACC,MAAP,CAAcL,oBAAoB,CAACG,IAAI,CAACG,WAAL,EAAD,EAAqBC,SAArB,EAAgC,CAAC,WAAD,EAAc,WAAd,CAAhC,CAAlC,CAAN;AA3BQ,iBAAe,MAAf;AA4BR,QAAMC,OAAO,GAAGR,oBAAoB,CAACG,IAAI,CAACG,WAAL,EAAD,EAAqBC,SAArB,EAAgC,CAAC,WAAD,EAAc,WAAd,CAAhC,CAApC;AAEA,UAAKE,SAAL,GAAiB,IAAIV,QAAJ,CAAa;AAC7BW,aAAO,EAAE,MAAKA,OADe;AAE7BC,eAAS,EAAEH,OAAO,CAACG;AAFU,KAAb,CAAjB;AAIA,UAAKC,GAAL,GAAW,IAAIf,WAAJ,CAAgB;AAC1Ba,aAAO,EAAE,MAAKA,OADY;AAE1BG,WAAK,EAAEZ,QAAQ,CAACO,OAAO,CAACM,SAAT;AAFW,KAAhB,CAAX;AAIA,UAAKC,KAAL,GAAa,IAAIjB,IAAJ,CAAS;AAAEY,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAb;AACA,UAAKM,KAAL,GAAa,MAAKC,MAAL,GAAc,IAAInB,IAAJ,CAAS;AAAEY,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAA3B,CAbD,CAeC;;AACA,UAAKK,KAAL,CAAWG,OAAX,CAAmB,MAAKF,KAAxB,EAhBD,CAiBC;;;AACA,UAAKD,KAAL,CAAWI,KAAX,CAAiB,MAAKV,SAAtB,EAAiC,MAAKG,GAAtC,EAA2C,MAAKI,KAAL,CAAWI,IAAtD;;AAlBD;AAmBC;;AA/CF;AAAA;AAAA;AAwDC;;;AAGA,mBAAa;AACZ,aAAOlB,QAAQ,CAAC,KAAKU,GAAL,CAASC,KAAV,CAAf;AACA,KA7DF;AAAA,SA8DC,aAAcQ,MAAd,EAAoB;AACnB,WAAKT,GAAL,CAASC,KAAT,GAAiBZ,QAAQ,CAACoB,MAAD,CAAzB;AACA;AAED;;;;AAlED;AAAA;AAAA,SAqEC,eAAa;AACZ,aAAO,KAAKZ,SAAL,CAAeE,SAAtB;AACA,KAvEF;AAAA,SAwEC,aAAcW,aAAd,EAA2B;AAC1B,WAAKb,SAAL,CAAeE,SAAf,GAA2BW,aAA3B;AACA;AA1EF;AAAA;AAAA,WA4EC,mBAAO;AACN;;AACA,WAAKP,KAAL,CAAWQ,OAAX;;AACA,WAAKd,SAAL,CAAec,OAAf;;AACA,WAAKX,GAAL,CAASW,OAAT;;AACA,WAAKP,KAAL,CAAWO,OAAX;;AACA,aAAO,IAAP;AACA;AAnFF;AAAA;AAAA,WAiDC,uBAAkB;AACjB,aAAOnB,MAAM,CAACC,MAAP,CAAcT,aAAa,CAACU,WAAd,EAAd,EAA2C;AACjDK,iBAAS,EAAE,GADsC;AAEjDG,iBAAS,EAAE,CAAC;AAFqC,OAA3C,CAAP;AAIA;AAtDF;;AAAA;AAAA,EAA0BlB,aAA1B","names":["ToneAudioNode","GreaterThan","Gain","Follower","optionsFromArguments","dbToGain","gainToDb","Gate","Object","assign","getDefaults","arguments","options","_follower","context","smoothing","_gt","value","threshold","input","_gate","output","connect","chain","gain","thresh","smoothingTime","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/dynamics/Gate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}