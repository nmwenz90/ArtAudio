{"ast":null,"code":"import _slicedToArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { isNativeAudioNode } from '../guards/native-audio-node';\nexport var wrapAudioNodeDisconnectMethod = function wrapAudioNodeDisconnectMethod(nativeAudioNode) {\n  var connections = new Map();\n\n  nativeAudioNode.connect = function (connect) {\n    // tslint:disable-next-line:invalid-void no-inferrable-types\n    return function (destination) {\n      var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var returnValue = isNativeAudioNode(destination) ? connect(destination, output, input) : connect(destination, output); // Save the new connection only if the calls to connect above didn't throw an error.\n\n      var connectionsToDestination = connections.get(destination);\n\n      if (connectionsToDestination === undefined) {\n        connections.set(destination, [{\n          input: input,\n          output: output\n        }]);\n      } else {\n        if (connectionsToDestination.every(function (connection) {\n          return connection.input !== input || connection.output !== output;\n        })) {\n          connectionsToDestination.push({\n            input: input,\n            output: output\n          });\n        }\n      }\n\n      return returnValue;\n    };\n  }(nativeAudioNode.connect.bind(nativeAudioNode));\n\n  nativeAudioNode.disconnect = function (disconnect) {\n    return function (destinationOrOutput, output, input) {\n      disconnect.apply(nativeAudioNode);\n\n      if (destinationOrOutput === undefined) {\n        connections.clear();\n      } else if (typeof destinationOrOutput === 'number') {\n        var _iterator = _createForOfIteratorHelper(connections),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                destination = _step$value[0],\n                connectionsToDestination = _step$value[1];\n\n            var filteredConnections = connectionsToDestination.filter(function (connection) {\n              return connection.output !== destinationOrOutput;\n            });\n\n            if (filteredConnections.length === 0) {\n              connections.delete(destination);\n            } else {\n              connections.set(destination, filteredConnections);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else if (connections.has(destinationOrOutput)) {\n        if (output === undefined) {\n          connections.delete(destinationOrOutput);\n        } else {\n          var _connectionsToDestination = connections.get(destinationOrOutput);\n\n          if (_connectionsToDestination !== undefined) {\n            var _filteredConnections = _connectionsToDestination.filter(function (connection) {\n              return connection.output !== output && (connection.input !== input || input === undefined);\n            });\n\n            if (_filteredConnections.length === 0) {\n              connections.delete(destinationOrOutput);\n            } else {\n              connections.set(destinationOrOutput, _filteredConnections);\n            }\n          }\n        }\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(connections),\n          _step2;\n\n      try {\n        var _loop = function _loop() {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              destination = _step2$value[0],\n              connectionsToDestination = _step2$value[1];\n\n          connectionsToDestination.forEach(function (connection) {\n            if (isNativeAudioNode(destination)) {\n              nativeAudioNode.connect(destination, connection.output, connection.input);\n            } else {\n              nativeAudioNode.connect(destination, connection.output);\n            }\n          });\n        };\n\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n  }(nativeAudioNode.disconnect);\n};","map":{"version":3,"mappings":";;AAAA,SAASA,iBAAT,QAAkC,6BAAlC;AAGA,OAAO,IAAMC,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACC,eAAD,EAA4C;AACrF,MAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;;AAEAF,iBAAe,CAACG,OAAhB,GAAwD,UAACA,OAAD,EAAY;AAChE;AACA,WAAO,UAACC,WAAD,EAA8G;AAAA,UAA1DC,MAA0D,uEAAjD,CAAiD;AAAA,UAA9CC,KAA8C,uEAA9B,CAA8B;AACjH,UAAMC,WAAW,GAAGT,iBAAiB,CAACM,WAAD,CAAjB,GAAiCD,OAAO,CAACC,WAAD,EAAcC,MAAd,EAAsBC,KAAtB,CAAxC,GAAuEH,OAAO,CAACC,WAAD,EAAcC,MAAd,CAAlG,CADiH,CAGjH;;AACA,UAAMG,wBAAwB,GAAGP,WAAW,CAACQ,GAAZ,CAAgBL,WAAhB,CAAjC;;AAEA,UAAII,wBAAwB,KAAKE,SAAjC,EAA4C;AACxCT,mBAAW,CAACU,GAAZ,CAAgBP,WAAhB,EAA6B,CAAC;AAAEE,eAAK,EAALA,KAAF;AAASD,gBAAM,EAANA;AAAT,SAAD,CAA7B;AACH,OAFD,MAEO;AACH,YAAIG,wBAAwB,CAACI,KAAzB,CAA+B,UAACC,UAAD;AAAA,iBAAgBA,UAAU,CAACP,KAAX,KAAqBA,KAArB,IAA8BO,UAAU,CAACR,MAAX,KAAsBA,MAApE;AAAA,SAA/B,CAAJ,EAAgH;AAC5GG,kCAAwB,CAACM,IAAzB,CAA8B;AAAER,iBAAK,EAALA,KAAF;AAASD,kBAAM,EAANA;AAAT,WAA9B;AACH;AACJ;;AAED,aAAOE,WAAP;AACH,KAfD;AAgBH,GAlBsD,CAkBpDP,eAAe,CAACG,OAAhB,CAAwBY,IAAxB,CAA6Bf,eAA7B,CAlBoD,CAAvD;;AAoBAA,iBAAe,CAACgB,UAAhB,GAA8B,UAACA,UAAD,EAAe;AACzC,WAAO,UAACC,mBAAD,EAAsEZ,MAAtE,EAAuFC,KAAvF,EAA+G;AAClHU,gBAAU,CAACE,KAAX,CAAiBlB,eAAjB;;AAEA,UAAIiB,mBAAmB,KAAKP,SAA5B,EAAuC;AACnCT,mBAAW,CAACkB,KAAZ;AACH,OAFD,MAEO,IAAI,OAAOF,mBAAP,KAA+B,QAAnC,EAA6C;AAAA,mDACMhB,WADN;AAAA;;AAAA;AAChD,8DAAmE;AAAA;AAAA,gBAAvDG,WAAuD;AAAA,gBAA1CI,wBAA0C;;AAC/D,gBAAMY,mBAAmB,GAAGZ,wBAAwB,CAACa,MAAzB,CAAgC,UAACR,UAAD;AAAA,qBAAgBA,UAAU,CAACR,MAAX,KAAsBY,mBAAtC;AAAA,aAAhC,CAA5B;;AAEA,gBAAIG,mBAAmB,CAACE,MAApB,KAA+B,CAAnC,EAAsC;AAClCrB,yBAAW,CAACsB,MAAZ,CAAmBnB,WAAnB;AACH,aAFD,MAEO;AACHH,yBAAW,CAACU,GAAZ,CAAgBP,WAAhB,EAA6BgB,mBAA7B;AACH;AACJ;AAT+C;AAAA;AAAA;AAAA;AAAA;AAUnD,OAVM,MAUA,IAAInB,WAAW,CAACuB,GAAZ,CAAgBP,mBAAhB,CAAJ,EAA0C;AAC7C,YAAIZ,MAAM,KAAKK,SAAf,EAA0B;AACtBT,qBAAW,CAACsB,MAAZ,CAAmBN,mBAAnB;AACH,SAFD,MAEO;AACH,cAAMT,yBAAwB,GAAGP,WAAW,CAACQ,GAAZ,CAAgBQ,mBAAhB,CAAjC;;AAEA,cAAIT,yBAAwB,KAAKE,SAAjC,EAA4C;AACxC,gBAAMU,oBAAmB,GAAGZ,yBAAwB,CAACa,MAAzB,CACxB,UAACR,UAAD;AAAA,qBAAgBA,UAAU,CAACR,MAAX,KAAsBA,MAAtB,KAAiCQ,UAAU,CAACP,KAAX,KAAqBA,KAArB,IAA8BA,KAAK,KAAKI,SAAzE,CAAhB;AAAA,aADwB,CAA5B;;AAIA,gBAAIU,oBAAmB,CAACE,MAApB,KAA+B,CAAnC,EAAsC;AAClCrB,yBAAW,CAACsB,MAAZ,CAAmBN,mBAAnB;AACH,aAFD,MAEO;AACHhB,yBAAW,CAACU,GAAZ,CAAgBM,mBAAhB,EAAqCG,oBAArC;AACH;AACJ;AACJ;AACJ;;AAjCiH,kDAmC5DnB,WAnC4D;AAAA;;AAAA;AAAA;AAAA;AAAA,cAmCtGG,WAnCsG;AAAA,cAmCzFI,wBAnCyF;;AAoC9GA,kCAAwB,CAACiB,OAAzB,CAAiC,UAACZ,UAAD,EAAe;AAC5C,gBAAIf,iBAAiB,CAACM,WAAD,CAArB,EAAoC;AAChCJ,6BAAe,CAACG,OAAhB,CAAwBC,WAAxB,EAAqCS,UAAU,CAACR,MAAhD,EAAwDQ,UAAU,CAACP,KAAnE;AACH,aAFD,MAEO;AACHN,6BAAe,CAACG,OAAhB,CAAwBC,WAAxB,EAAqCS,UAAU,CAACR,MAAhD;AACH;AACJ,WAND;AApC8G;;AAmClH,+DAAmE;AAAA;AAQlE;AA3CiH;AAAA;AAAA;AAAA;AAAA;AA4CrH,KA5CD;AA6CH,GA9C4B,CA8C1BL,eAAe,CAACgB,UA9CU,CAA7B;AA+CH,CAtEM","names":["isNativeAudioNode","wrapAudioNodeDisconnectMethod","nativeAudioNode","connections","Map","connect","destination","output","input","returnValue","connectionsToDestination","get","undefined","set","every","connection","push","bind","disconnect","destinationOrOutput","apply","clear","filteredConnections","filter","length","delete","has","forEach"],"sourceRoot":"","sources":["../../../src/helpers/wrap-audio-node-disconnect-method.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}