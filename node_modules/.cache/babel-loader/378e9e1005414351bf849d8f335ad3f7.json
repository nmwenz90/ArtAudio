{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\n\nexport var MidSideEffect = /*#__PURE__*/function (_Effect) {\n  _inherits(MidSideEffect, _Effect);\n\n  var _super = _createSuper(MidSideEffect);\n\n  function MidSideEffect(options) {\n    var _this;\n\n    _classCallCheck(this, MidSideEffect);\n\n    _this = _super.call(this, options);\n    _this.name = \"MidSideEffect\";\n    _this._midSideMerge = new MidSideMerge({\n      context: _this.context\n    });\n    _this._midSideSplit = new MidSideSplit({\n      context: _this.context\n    });\n    _this._midSend = _this._midSideSplit.mid;\n    _this._sideSend = _this._midSideSplit.side;\n    _this._midReturn = _this._midSideMerge.mid;\n    _this._sideReturn = _this._midSideMerge.side; // the connections\n\n    _this.effectSend.connect(_this._midSideSplit);\n\n    _this._midSideMerge.connect(_this.effectReturn);\n\n    return _this;\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n\n\n  _createClass(MidSideEffect, [{\n    key: \"connectEffectMid\",\n    value: function connectEffectMid() {\n      var _this$_midSend;\n\n      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n        nodes[_key] = arguments[_key];\n      }\n\n      (_this$_midSend = this._midSend).chain.apply(_this$_midSend, nodes.concat([this._midReturn]));\n    }\n    /**\n     * Connect the side chain of the effect\n     */\n\n  }, {\n    key: \"connectEffectSide\",\n    value: function connectEffectSide() {\n      var _this$_sideSend;\n\n      for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nodes[_key2] = arguments[_key2];\n      }\n\n      (_this$_sideSend = this._sideSend).chain.apply(_this$_sideSend, nodes.concat([this._sideReturn]));\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideEffect.prototype), \"dispose\", this).call(this);\n\n      this._midSideSplit.dispose();\n\n      this._midSideMerge.dispose();\n\n      this._midSend.dispose();\n\n      this._sideSend.dispose();\n\n      this._midReturn.dispose();\n\n      this._sideReturn.dispose();\n\n      return this;\n    }\n  }]);\n\n  return MidSideEffect;\n}(Effect);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAT,QAAsC,UAAtC;AACA,SAASC,YAAT,QAA6B,mCAA7B;AACA,SAASC,YAAT,QAA6B,mCAA7B;AAKA;;;;;;;;;;;AAUA,WAAsBC,aAAtB;AAAA;;AAAA;;AAkCC,yBAAYC,OAAZ,EAAyC;AAAA;;AAAA;;AAExC,8BAAMA,OAAN;AAlCQ,iBAAe,eAAf;AAoCR,UAAKC,aAAL,GAAqB,IAAIH,YAAJ,CAAiB;AAAEI,aAAO,EAAE,MAAKA;AAAhB,KAAjB,CAArB;AACA,UAAKC,aAAL,GAAqB,IAAIN,YAAJ,CAAiB;AAAEK,aAAO,EAAE,MAAKA;AAAhB,KAAjB,CAArB;AACA,UAAKE,QAAL,GAAgB,MAAKD,aAAL,CAAmBE,GAAnC;AACA,UAAKC,SAAL,GAAiB,MAAKH,aAAL,CAAmBI,IAApC;AACA,UAAKC,UAAL,GAAkB,MAAKP,aAAL,CAAmBI,GAArC;AACA,UAAKI,WAAL,GAAmB,MAAKR,aAAL,CAAmBM,IAAtC,CATwC,CAWxC;;AACA,UAAKG,UAAL,CAAgBC,OAAhB,CAAwB,MAAKR,aAA7B;;AACA,UAAKF,aAAL,CAAmBU,OAAnB,CAA2B,MAAKC,YAAhC;;AAbwC;AAcxC;AAED;;;;;AAlDD;AAAA;AAAA,WAqDW,4BAAuC;AAAA;;AAAA,wCAAnBC,KAAmB;AAAnBA,aAAmB;AAAA;;AAChD,6BAAKT,QAAL,EAAcU,KAAd,uBAAuBD,KAAvB,SAA8B,KAAKL,UAAnC;AACA;AAED;;;;AAzDD;AAAA;AAAA,WA4DW,6BAAwC;AAAA;;AAAA,yCAAnBK,KAAmB;AAAnBA,aAAmB;AAAA;;AACjD,8BAAKP,SAAL,EAAeQ,KAAf,wBAAwBD,KAAxB,SAA+B,KAAKJ,WAApC;AACA;AA9DF;AAAA;AAAA,WAgEC,mBAAO;AACN;;AACA,WAAKN,aAAL,CAAmBY,OAAnB;;AACA,WAAKd,aAAL,CAAmBc,OAAnB;;AACA,WAAKX,QAAL,CAAcW,OAAd;;AACA,WAAKT,SAAL,CAAeS,OAAf;;AACA,WAAKP,UAAL,CAAgBO,OAAhB;;AACA,WAAKN,WAAL,CAAiBM,OAAjB;;AACA,aAAO,IAAP;AACA;AAzEF;;AAAA;AAAA,EAAkFnB,MAAlF","names":["Effect","MidSideSplit","MidSideMerge","MidSideEffect","options","_midSideMerge","context","_midSideSplit","_midSend","mid","_sideSend","side","_midReturn","_sideReturn","effectSend","connect","effectReturn","nodes","chain","dispose"],"sourceRoot":"","sources":["../../../Tone/effect/MidSideEffect.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}