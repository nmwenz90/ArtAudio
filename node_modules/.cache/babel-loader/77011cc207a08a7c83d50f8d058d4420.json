{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Split } from \"../channel/Split\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert, assertRange } from \"../../core/util/Debug\";\n/**\n * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n * Extracts FFT or Waveform data from the incoming signal.\n * @category Component\n */\n\nexport var Analyser = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Analyser, _ToneAudioNode);\n\n  var _super = _createSuper(Analyser);\n\n  function Analyser() {\n    var _this;\n\n    _classCallCheck(this, Analyser);\n\n    _this = _super.call(this, optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]));\n    _this.name = \"Analyser\";\n    /**\n     * The analyser node.\n     */\n\n    _this._analysers = [];\n    /**\n     * The buffer that the FFT data is written to\n     */\n\n    _this._buffers = [];\n    var options = optionsFromArguments(Analyser.getDefaults(), arguments, [\"type\", \"size\"]);\n    _this.input = _this.output = _this._gain = new Gain({\n      context: _this.context\n    });\n    _this._split = new Split({\n      context: _this.context,\n      channels: options.channels\n    });\n\n    _this.input.connect(_this._split);\n\n    assertRange(options.channels, 1); // create the analysers\n\n    for (var channel = 0; channel < options.channels; channel++) {\n      _this._analysers[channel] = _this.context.createAnalyser();\n\n      _this._split.connect(_this._analysers[channel], channel, 0);\n    } // set the values initially\n\n\n    _this.size = options.size;\n    _this.type = options.type;\n    return _this;\n  }\n\n  _createClass(Analyser, [{\n    key: \"getValue\",\n    value:\n    /**\n     * Run the analysis given the current settings. If [[channels]] = 1,\n     * it will return a Float32Array. If [[channels]] > 1, it will\n     * return an array of Float32Arrays where each index in the array\n     * represents the analysis done on a channel.\n     */\n    function getValue() {\n      var _this2 = this;\n\n      this._analysers.forEach(function (analyser, index) {\n        var buffer = _this2._buffers[index];\n\n        if (_this2._type === \"fft\") {\n          analyser.getFloatFrequencyData(buffer);\n        } else if (_this2._type === \"waveform\") {\n          analyser.getFloatTimeDomainData(buffer);\n        }\n      });\n\n      if (this.channels === 1) {\n        return this._buffers[0];\n      } else {\n        return this._buffers;\n      }\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._analysers[0].frequencyBinCount;\n    },\n    set: function set(size) {\n      var _this3 = this;\n\n      this._analysers.forEach(function (analyser, index) {\n        analyser.fftSize = size * 2;\n        _this3._buffers[index] = new Float32Array(size);\n      });\n    }\n    /**\n     * The number of channels the analyser does the analysis on. Channel\n     * separation is done using [[Split]]\n     */\n\n  }, {\n    key: \"channels\",\n    get: function get() {\n      return this._analysers.length;\n    }\n    /**\n     * The analysis function returned by analyser.getValue(), either \"fft\" or \"waveform\".\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      assert(type === \"waveform\" || type === \"fft\", \"Analyser: invalid type: \".concat(type));\n      this._type = type;\n    }\n    /**\n     * 0 represents no time averaging with the last analysis frame.\n     */\n\n  }, {\n    key: \"smoothing\",\n    get: function get() {\n      return this._analysers[0].smoothingTimeConstant;\n    },\n    set: function set(val) {\n      this._analysers.forEach(function (a) {\n        return a.smoothingTimeConstant = val;\n      });\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Analyser.prototype), \"dispose\", this).call(this);\n\n      this._analysers.forEach(function (a) {\n        return a.disconnect();\n      });\n\n      this._split.dispose();\n\n      this._gain.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        size: 1024,\n        smoothing: 0.8,\n        type: \"fft\",\n        channels: 1\n      });\n    }\n  }]);\n\n  return Analyser;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Split","Gain","assert","assertRange","Analyser","getDefaults","arguments","options","input","output","_gain","context","_split","channels","connect","channel","_analysers","createAnalyser","size","type","forEach","analyser","index","buffer","_buffers","_type","getFloatFrequencyData","getFloatTimeDomainData","frequencyBinCount","fftSize","Float32Array","length","smoothingTimeConstant","val","a","disconnect","dispose","Object","assign","smoothing"],"sourceRoot":"","sources":["../../../../Tone/component/analysis/Analyser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}