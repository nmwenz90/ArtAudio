{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\n\nexport var Compressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Compressor, _ToneAudioNode);\n\n  var _super = _createSuper(Compressor);\n\n  function Compressor() {\n    var _this;\n\n    _classCallCheck(this, Compressor);\n\n    _this = _super.call(this, optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n    _this.name = \"Compressor\";\n    /**\n     * the compressor node\n     */\n\n    _this._compressor = _this.context.createDynamicsCompressor();\n    _this.input = _this._compressor;\n    _this.output = _this._compressor;\n    var options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n    _this.threshold = new Param({\n      minValue: _this._compressor.threshold.minValue,\n      maxValue: _this._compressor.threshold.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.threshold,\n      units: \"decibels\",\n      value: options.threshold\n    });\n    _this.attack = new Param({\n      minValue: _this._compressor.attack.minValue,\n      maxValue: _this._compressor.attack.maxValue,\n      context: _this.context,\n      param: _this._compressor.attack,\n      units: \"time\",\n      value: options.attack\n    });\n    _this.release = new Param({\n      minValue: _this._compressor.release.minValue,\n      maxValue: _this._compressor.release.maxValue,\n      context: _this.context,\n      param: _this._compressor.release,\n      units: \"time\",\n      value: options.release\n    });\n    _this.knee = new Param({\n      minValue: _this._compressor.knee.minValue,\n      maxValue: _this._compressor.knee.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.knee,\n      units: \"decibels\",\n      value: options.knee\n    });\n    _this.ratio = new Param({\n      minValue: _this._compressor.ratio.minValue,\n      maxValue: _this._compressor.ratio.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.ratio,\n      units: \"positive\",\n      value: options.ratio\n    }); // set the defaults\n\n    readOnly(_assertThisInitialized(_this), [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n    return _this;\n  }\n\n  _createClass(Compressor, [{\n    key: \"reduction\",\n    get:\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n     */\n    function get() {\n      return this._compressor.reduction;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Compressor.prototype), \"dispose\", this).call(this);\n\n      this._compressor.disconnect();\n\n      this.attack.dispose();\n      this.release.dispose();\n      this.threshold.dispose();\n      this.ratio.dispose();\n      this.knee.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        attack: 0.003,\n        knee: 30,\n        ratio: 12,\n        release: 0.25,\n        threshold: -24\n      });\n    }\n  }]);\n\n  return Compressor;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Param","ToneAudioNode","optionsFromArguments","readOnly","Compressor","getDefaults","arguments","context","createDynamicsCompressor","_compressor","options","threshold","minValue","maxValue","convert","param","units","value","attack","release","knee","ratio","reduction","disconnect","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/dynamics/Compressor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}