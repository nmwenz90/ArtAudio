{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate } from \"tslib\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers\";\nimport { ftomf, intervalToFrequencyRatio } from \"../core/type/Conversions\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument } from \"../instrument/Instrument\";\nimport { ToneBufferSource } from \"../source/buffer/ToneBufferSource\";\nimport { timeRange } from \"../core/util/Decorator\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use [[Player]].\n * @example\n * const sampler = new Tone.Sampler({\n * \turls: {\n * \t\tA1: \"A1.mp3\",\n * \t\tA2: \"A2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t}\n * }).toDestination();\n * @category Instrument\n */\n\nexport var Sampler = /*#__PURE__*/function (_Instrument) {\n  _inherits(Sampler, _Instrument);\n\n  var _super = _createSuper(Sampler);\n\n  function Sampler() {\n    var _this;\n\n    _classCallCheck(this, Sampler);\n\n    _this = _super.call(this, optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\"));\n    _this.name = \"Sampler\";\n    /**\n     * The object of all currently playing BufferSources\n     */\n\n    _this._activeSources = new Map();\n    var options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    var urlMap = {};\n    Object.keys(options.urls).forEach(function (note) {\n      var noteNumber = parseInt(note, 10);\n      assert(isNote(note) || isNumber(noteNumber) && isFinite(noteNumber), \"url key is neither a note or midi pitch: \".concat(note));\n\n      if (isNote(note)) {\n        // convert the note name to MIDI\n        var mid = new FrequencyClass(_this.context, note).toMidi();\n        urlMap[mid] = options.urls[note];\n      } else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n        // otherwise if it's numbers assume it's midi\n        urlMap[noteNumber] = options.urls[noteNumber];\n      }\n    });\n    _this._buffers = new ToneAudioBuffers({\n      urls: urlMap,\n      onload: options.onload,\n      baseUrl: options.baseUrl,\n      onerror: options.onerror\n    });\n    _this.attack = options.attack;\n    _this.release = options.release;\n    _this.curve = options.curve; // invoke the callback if it's already loaded\n\n    if (_this._buffers.loaded) {\n      // invoke onload deferred\n      Promise.resolve().then(options.onload);\n    }\n\n    return _this;\n  }\n\n  _createClass(Sampler, [{\n    key: \"_findClosest\",\n    value:\n    /**\n     * Returns the difference in steps between the given midi note at the closets sample.\n     */\n    function _findClosest(midi) {\n      // searches within 8 octaves of the given midi note\n      var MAX_INTERVAL = 96;\n      var interval = 0;\n\n      while (interval < MAX_INTERVAL) {\n        // check above and below\n        if (this._buffers.has(midi + interval)) {\n          return -interval;\n        } else if (this._buffers.has(midi - interval)) {\n          return interval;\n        }\n\n        interval++;\n      }\n\n      throw new Error(\"No available buffers for note: \".concat(midi));\n    }\n    /**\n     * @param  notes\tThe note to play, or an array of notes.\n     * @param  time     When to play the note\n     * @param  velocity The velocity to play the sample back.\n     */\n\n  }, {\n    key: \"triggerAttack\",\n    value: function triggerAttack(notes, time) {\n      var _this2 = this;\n\n      var velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      this.log(\"triggerAttack\", notes, time, velocity);\n\n      if (!Array.isArray(notes)) {\n        notes = [notes];\n      }\n\n      notes.forEach(function (note) {\n        var midiFloat = ftomf(new FrequencyClass(_this2.context, note).toFrequency());\n        var midi = Math.round(midiFloat);\n        var remainder = midiFloat - midi; // find the closest note pitch\n\n        var difference = _this2._findClosest(midi);\n\n        var closestNote = midi - difference;\n\n        var buffer = _this2._buffers.get(closestNote);\n\n        var playbackRate = intervalToFrequencyRatio(difference + remainder); // play that note\n\n        var source = new ToneBufferSource({\n          url: buffer,\n          context: _this2.context,\n          curve: _this2.curve,\n          fadeIn: _this2.attack,\n          fadeOut: _this2.release,\n          playbackRate: playbackRate\n        }).connect(_this2.output);\n        source.start(time, 0, buffer.duration / playbackRate, velocity); // add it to the active sources\n\n        if (!isArray(_this2._activeSources.get(midi))) {\n          _this2._activeSources.set(midi, []);\n        }\n\n        _this2._activeSources.get(midi).push(source); // remove it when it's done\n\n\n        source.onended = function () {\n          if (_this2._activeSources && _this2._activeSources.has(midi)) {\n            var sources = _this2._activeSources.get(midi);\n\n            var index = sources.indexOf(source);\n\n            if (index !== -1) {\n              sources.splice(index, 1);\n            }\n          }\n        };\n      });\n      return this;\n    }\n    /**\n     * @param  notes\tThe note to release, or an array of notes.\n     * @param  time     \tWhen to release the note.\n     */\n\n  }, {\n    key: \"triggerRelease\",\n    value: function triggerRelease(notes, time) {\n      var _this3 = this;\n\n      this.log(\"triggerRelease\", notes, time);\n\n      if (!Array.isArray(notes)) {\n        notes = [notes];\n      }\n\n      notes.forEach(function (note) {\n        var midi = new FrequencyClass(_this3.context, note).toMidi(); // find the note\n\n        if (_this3._activeSources.has(midi) && _this3._activeSources.get(midi).length) {\n          var sources = _this3._activeSources.get(midi);\n\n          time = _this3.toSeconds(time);\n          sources.forEach(function (source) {\n            source.stop(time);\n          });\n\n          _this3._activeSources.set(midi, []);\n        }\n      });\n      return this;\n    }\n    /**\n     * Release all currently active notes.\n     * @param  time     \tWhen to release the notes.\n     */\n\n  }, {\n    key: \"releaseAll\",\n    value: function releaseAll(time) {\n      var computedTime = this.toSeconds(time);\n\n      this._activeSources.forEach(function (sources) {\n        while (sources.length) {\n          var source = sources.shift();\n          source.stop(computedTime);\n        }\n      });\n\n      return this;\n    }\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      if (this._syncState()) {\n        this._syncMethod(\"triggerAttack\", 1);\n\n        this._syncMethod(\"triggerRelease\", 1);\n      }\n\n      return this;\n    }\n    /**\n     * Invoke the attack phase, then after the duration, invoke the release.\n     * @param  notes\tThe note to play and release, or an array of notes.\n     * @param  duration The time the note should be held\n     * @param  time     When to start the attack\n     * @param  velocity The velocity of the attack\n     */\n\n  }, {\n    key: \"triggerAttackRelease\",\n    value: function triggerAttackRelease(notes, duration, time) {\n      var _this4 = this;\n\n      var velocity = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var computedTime = this.toSeconds(time);\n      this.triggerAttack(notes, computedTime, velocity);\n\n      if (isArray(duration)) {\n        assert(isArray(notes), \"notes must be an array when duration is array\");\n        notes.forEach(function (note, index) {\n          var d = duration[Math.min(index, duration.length - 1)];\n\n          _this4.triggerRelease(note, computedTime + _this4.toSeconds(d));\n        });\n      } else {\n        this.triggerRelease(notes, computedTime + this.toSeconds(duration));\n      }\n\n      return this;\n    }\n    /**\n     * Add a note to the sampler.\n     * @param  note      The buffer's pitch.\n     * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n     * @param  callback  The callback to invoke when the url is loaded.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(note, url, callback) {\n      assert(isNote(note) || isFinite(note), \"note must be a pitch or midi: \".concat(note));\n\n      if (isNote(note)) {\n        // convert the note name to MIDI\n        var mid = new FrequencyClass(this.context, note).toMidi();\n\n        this._buffers.add(mid, url, callback);\n      } else {\n        // otherwise if it's numbers assume it's midi\n        this._buffers.add(note, url, callback);\n      }\n\n      return this;\n    }\n    /**\n     * If the buffers are loaded or not\n     */\n\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this._buffers.loaded;\n    }\n    /**\n     * Clean up\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Sampler.prototype), \"dispose\", this).call(this);\n\n      this._buffers.dispose();\n\n      this._activeSources.forEach(function (sources) {\n        sources.forEach(function (source) {\n          return source.dispose();\n        });\n      });\n\n      this._activeSources.clear();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Instrument.getDefaults(), {\n        attack: 0,\n        baseUrl: \"\",\n        curve: \"exponential\",\n        onload: noOp,\n        onerror: noOp,\n        release: 0.1,\n        urls: {}\n      });\n    }\n  }]);\n\n  return Sampler;\n}(Instrument);\n\n__decorate([timeRange(0)], Sampler.prototype, \"attack\", void 0);\n\n__decorate([timeRange(0)], Sampler.prototype, \"release\", void 0);","map":{"version":3,"mappings":"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","names":["ToneAudioBuffers","ftomf","intervalToFrequencyRatio","FrequencyClass","optionsFromArguments","noOp","isArray","isNote","isNumber","Instrument","ToneBufferSource","timeRange","assert","Sampler","getDefaults","arguments","Map","options","urlMap","Object","keys","urls","forEach","note","noteNumber","parseInt","isFinite","mid","context","toMidi","_buffers","onload","baseUrl","onerror","attack","release","curve","loaded","Promise","resolve","then","midi","MAX_INTERVAL","interval","has","Error","notes","time","velocity","log","Array","midiFloat","toFrequency","Math","round","remainder","difference","_findClosest","closestNote","buffer","get","playbackRate","source","url","fadeIn","fadeOut","connect","output","start","duration","_activeSources","set","push","onended","sources","index","indexOf","splice","length","toSeconds","stop","computedTime","shift","_syncState","_syncMethod","triggerAttack","d","min","triggerRelease","callback","add","dispose","clear","assign","__decorate"],"sourceRoot":"","sources":["../../../Tone/instrument/Sampler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}