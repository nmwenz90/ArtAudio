{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Tone } from \"../Tone\";\nimport { isDefined } from \"./TypeCheck\";\nimport { assert } from \"./Debug\";\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n */\n\nexport var IntervalTimeline = /*#__PURE__*/function (_Tone) {\n  _inherits(IntervalTimeline, _Tone);\n\n  var _super = _createSuper(IntervalTimeline);\n\n  function IntervalTimeline() {\n    var _this;\n\n    _classCallCheck(this, IntervalTimeline);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"IntervalTimeline\";\n    /**\n     * The root node of the inteval tree\n     */\n\n    _this._root = null;\n    /**\n     * Keep track of the length of the timeline.\n     */\n\n    _this._length = 0;\n    return _this;\n  }\n  /**\n   * The event to add to the timeline. All events must\n   * have a time and duration value\n   * @param  event  The event to add to the timeline\n   */\n\n\n  _createClass(IntervalTimeline, [{\n    key: \"add\",\n    value: function add(event) {\n      assert(isDefined(event.time), \"Events must have a time property\");\n      assert(isDefined(event.duration), \"Events must have a duration parameter\");\n      event.time = event.time.valueOf();\n      var node = new IntervalNode(event.time, event.time + event.duration, event);\n\n      if (this._root === null) {\n        this._root = node;\n      } else {\n        this._root.insert(node);\n      }\n\n      this._length++; // Restructure tree to be balanced\n\n      while (node !== null) {\n        node.updateHeight();\n        node.updateMax();\n\n        this._rebalance(node);\n\n        node = node.parent;\n      }\n\n      return this;\n    }\n    /**\n     * Remove an event from the timeline.\n     * @param  event  The event to remove from the timeline\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(event) {\n      if (this._root !== null) {\n        var results = [];\n\n        this._root.search(event.time, results);\n\n        for (var _i = 0, _results = results; _i < _results.length; _i++) {\n          var node = _results[_i];\n\n          if (node.event === event) {\n            this._removeNode(node);\n\n            this._length--;\n            break;\n          }\n        }\n      }\n\n      return this;\n    }\n    /**\n     * The number of items in the timeline.\n     * @readOnly\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._length;\n    }\n    /**\n     * Remove events whose time time is after the given time\n     * @param  after  The time to query.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(after) {\n      var _this2 = this;\n\n      this.forEachFrom(after, function (event) {\n        return _this2.remove(event);\n      });\n      return this;\n    }\n    /**\n     * Set the root node as the given node\n     */\n\n  }, {\n    key: \"_setRoot\",\n    value: function _setRoot(node) {\n      this._root = node;\n\n      if (this._root !== null) {\n        this._root.parent = null;\n      }\n    }\n    /**\n     * Replace the references to the node in the node's parent\n     * with the replacement node.\n     */\n\n  }, {\n    key: \"_replaceNodeInParent\",\n    value: function _replaceNodeInParent(node, replacement) {\n      if (node.parent !== null) {\n        if (node.isLeftChild()) {\n          node.parent.left = replacement;\n        } else {\n          node.parent.right = replacement;\n        }\n\n        this._rebalance(node.parent);\n      } else {\n        this._setRoot(replacement);\n      }\n    }\n    /**\n     * Remove the node from the tree and replace it with\n     * a successor which follows the schema.\n     */\n\n  }, {\n    key: \"_removeNode\",\n    value: function _removeNode(node) {\n      if (node.left === null && node.right === null) {\n        this._replaceNodeInParent(node, null);\n      } else if (node.right === null) {\n        this._replaceNodeInParent(node, node.left);\n      } else if (node.left === null) {\n        this._replaceNodeInParent(node, node.right);\n      } else {\n        var balance = node.getBalance();\n        var replacement;\n        var temp = null;\n\n        if (balance > 0) {\n          if (node.left.right === null) {\n            replacement = node.left;\n            replacement.right = node.right;\n            temp = replacement;\n          } else {\n            replacement = node.left.right;\n\n            while (replacement.right !== null) {\n              replacement = replacement.right;\n            }\n\n            if (replacement.parent) {\n              replacement.parent.right = replacement.left;\n              temp = replacement.parent;\n              replacement.left = node.left;\n              replacement.right = node.right;\n            }\n          }\n        } else if (node.right.left === null) {\n          replacement = node.right;\n          replacement.left = node.left;\n          temp = replacement;\n        } else {\n          replacement = node.right.left;\n\n          while (replacement.left !== null) {\n            replacement = replacement.left;\n          }\n\n          if (replacement.parent) {\n            replacement.parent.left = replacement.right;\n            temp = replacement.parent;\n            replacement.left = node.left;\n            replacement.right = node.right;\n          }\n        }\n\n        if (node.parent !== null) {\n          if (node.isLeftChild()) {\n            node.parent.left = replacement;\n          } else {\n            node.parent.right = replacement;\n          }\n        } else {\n          this._setRoot(replacement);\n        }\n\n        if (temp) {\n          this._rebalance(temp);\n        }\n      }\n\n      node.dispose();\n    }\n    /**\n     * Rotate the tree to the left\n     */\n\n  }, {\n    key: \"_rotateLeft\",\n    value: function _rotateLeft(node) {\n      var parent = node.parent;\n      var isLeftChild = node.isLeftChild(); // Make node.right the new root of this sub tree (instead of node)\n\n      var pivotNode = node.right;\n\n      if (pivotNode) {\n        node.right = pivotNode.left;\n        pivotNode.left = node;\n      }\n\n      if (parent !== null) {\n        if (isLeftChild) {\n          parent.left = pivotNode;\n        } else {\n          parent.right = pivotNode;\n        }\n      } else {\n        this._setRoot(pivotNode);\n      }\n    }\n    /**\n     * Rotate the tree to the right\n     */\n\n  }, {\n    key: \"_rotateRight\",\n    value: function _rotateRight(node) {\n      var parent = node.parent;\n      var isLeftChild = node.isLeftChild(); // Make node.left the new root of this sub tree (instead of node)\n\n      var pivotNode = node.left;\n\n      if (pivotNode) {\n        node.left = pivotNode.right;\n        pivotNode.right = node;\n      }\n\n      if (parent !== null) {\n        if (isLeftChild) {\n          parent.left = pivotNode;\n        } else {\n          parent.right = pivotNode;\n        }\n      } else {\n        this._setRoot(pivotNode);\n      }\n    }\n    /**\n     * Balance the BST\n     */\n\n  }, {\n    key: \"_rebalance\",\n    value: function _rebalance(node) {\n      var balance = node.getBalance();\n\n      if (balance > 1 && node.left) {\n        if (node.left.getBalance() < 0) {\n          this._rotateLeft(node.left);\n        } else {\n          this._rotateRight(node);\n        }\n      } else if (balance < -1 && node.right) {\n        if (node.right.getBalance() > 0) {\n          this._rotateRight(node.right);\n        } else {\n          this._rotateLeft(node);\n        }\n      }\n    }\n    /**\n     * Get an event whose time and duration span the give time. Will\n     * return the match whose \"time\" value is closest to the given time.\n     * @return  The event which spans the desired time\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(time) {\n      if (this._root !== null) {\n        var results = [];\n\n        this._root.search(time, results);\n\n        if (results.length > 0) {\n          var max = results[0];\n\n          for (var i = 1; i < results.length; i++) {\n            if (results[i].low > max.low) {\n              max = results[i];\n            }\n          }\n\n          return max.event;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Iterate over everything in the timeline.\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      if (this._root !== null) {\n        var allNodes = [];\n\n        this._root.traverse(function (node) {\n          return allNodes.push(node);\n        });\n\n        allNodes.forEach(function (node) {\n          if (node.event) {\n            callback(node.event);\n          }\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Iterate over everything in the array in which the given time\n     * overlaps with the time and duration time of the event.\n     * @param  time The time to check if items are overlapping\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEachAtTime\",\n    value: function forEachAtTime(time, callback) {\n      if (this._root !== null) {\n        var results = [];\n\n        this._root.search(time, results);\n\n        results.forEach(function (node) {\n          if (node.event) {\n            callback(node.event);\n          }\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Iterate over everything in the array in which the time is greater\n     * than or equal to the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n\n  }, {\n    key: \"forEachFrom\",\n    value: function forEachFrom(time, callback) {\n      if (this._root !== null) {\n        var results = [];\n\n        this._root.searchAfter(time, results);\n\n        results.forEach(function (node) {\n          if (node.event) {\n            callback(node.event);\n          }\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Clean up\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(IntervalTimeline.prototype), \"dispose\", this).call(this);\n\n      if (this._root !== null) {\n        this._root.traverse(function (node) {\n          return node.dispose();\n        });\n      }\n\n      this._root = null;\n      return this;\n    }\n  }]);\n\n  return IntervalTimeline;\n}(Tone); //-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\n\nvar IntervalNode = /*#__PURE__*/function () {\n  function IntervalNode(low, high, event) {\n    _classCallCheck(this, IntervalNode);\n\n    // the nodes to the left\n    this._left = null; // the nodes to the right\n\n    this._right = null; // the parent node\n\n    this.parent = null; // the number of child nodes\n\n    this.height = 0;\n    this.event = event; // the low value\n\n    this.low = low; // the high value\n\n    this.high = high; // the high value for this and all child nodes\n\n    this.max = this.high;\n  }\n  /**\n   * Insert a node into the correct spot in the tree\n   */\n\n\n  _createClass(IntervalNode, [{\n    key: \"insert\",\n    value: function insert(node) {\n      if (node.low <= this.low) {\n        if (this.left === null) {\n          this.left = node;\n        } else {\n          this.left.insert(node);\n        }\n      } else if (this.right === null) {\n        this.right = node;\n      } else {\n        this.right.insert(node);\n      }\n    }\n    /**\n     * Search the tree for nodes which overlap\n     * with the given point\n     * @param  point  The point to query\n     * @param  results  The array to put the results\n     */\n\n  }, {\n    key: \"search\",\n    value: function search(point, results) {\n      // If p is to the right of the rightmost point of any interval\n      // in this node and all children, there won't be any matches.\n      if (point > this.max) {\n        return;\n      } // Search left children\n\n\n      if (this.left !== null) {\n        this.left.search(point, results);\n      } // Check this node\n\n\n      if (this.low <= point && this.high > point) {\n        results.push(this);\n      } // If p is to the left of the time of this interval,\n      // then it can't be in any child to the right.\n\n\n      if (this.low > point) {\n        return;\n      } // Search right children\n\n\n      if (this.right !== null) {\n        this.right.search(point, results);\n      }\n    }\n    /**\n     * Search the tree for nodes which are less\n     * than the given point\n     * @param  point  The point to query\n     * @param  results  The array to put the results\n     */\n\n  }, {\n    key: \"searchAfter\",\n    value: function searchAfter(point, results) {\n      // Check this node\n      if (this.low >= point) {\n        results.push(this);\n\n        if (this.left !== null) {\n          this.left.searchAfter(point, results);\n        }\n      } // search the right side\n\n\n      if (this.right !== null) {\n        this.right.searchAfter(point, results);\n      }\n    }\n    /**\n     * Invoke the callback on this element and both it's branches\n     * @param  {Function}  callback\n     */\n\n  }, {\n    key: \"traverse\",\n    value: function traverse(callback) {\n      callback(this);\n\n      if (this.left !== null) {\n        this.left.traverse(callback);\n      }\n\n      if (this.right !== null) {\n        this.right.traverse(callback);\n      }\n    }\n    /**\n     * Update the height of the node\n     */\n\n  }, {\n    key: \"updateHeight\",\n    value: function updateHeight() {\n      if (this.left !== null && this.right !== null) {\n        this.height = Math.max(this.left.height, this.right.height) + 1;\n      } else if (this.right !== null) {\n        this.height = this.right.height + 1;\n      } else if (this.left !== null) {\n        this.height = this.left.height + 1;\n      } else {\n        this.height = 0;\n      }\n    }\n    /**\n     * Update the height of the node\n     */\n\n  }, {\n    key: \"updateMax\",\n    value: function updateMax() {\n      this.max = this.high;\n\n      if (this.left !== null) {\n        this.max = Math.max(this.max, this.left.max);\n      }\n\n      if (this.right !== null) {\n        this.max = Math.max(this.max, this.right.max);\n      }\n    }\n    /**\n     * The balance is how the leafs are distributed on the node\n     * @return  Negative numbers are balanced to the right\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function getBalance() {\n      var balance = 0;\n\n      if (this.left !== null && this.right !== null) {\n        balance = this.left.height - this.right.height;\n      } else if (this.left !== null) {\n        balance = this.left.height + 1;\n      } else if (this.right !== null) {\n        balance = -(this.right.height + 1);\n      }\n\n      return balance;\n    }\n    /**\n     * @returns true if this node is the left child of its parent\n     */\n\n  }, {\n    key: \"isLeftChild\",\n    value: function isLeftChild() {\n      return this.parent !== null && this.parent.left === this;\n    }\n    /**\n     * get/set the left node\n     */\n\n  }, {\n    key: \"left\",\n    get: function get() {\n      return this._left;\n    },\n    set: function set(node) {\n      this._left = node;\n\n      if (node !== null) {\n        node.parent = this;\n      }\n\n      this.updateHeight();\n      this.updateMax();\n    }\n    /**\n     * get/set the right node\n     */\n\n  }, {\n    key: \"right\",\n    get: function get() {\n      return this._right;\n    },\n    set: function set(node) {\n      this._right = node;\n\n      if (node !== null) {\n        node.parent = this;\n      }\n\n      this.updateHeight();\n      this.updateMax();\n    }\n    /**\n     * null out references.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.parent = null;\n      this._left = null;\n      this._right = null;\n      this.event = null;\n    }\n  }]);\n\n  return IntervalNode;\n}();","map":{"version":3,"mappings":"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","names":["Tone","isDefined","assert","IntervalTimeline","event","time","duration","valueOf","node","IntervalNode","_root","insert","_length","updateHeight","updateMax","_rebalance","parent","results","search","_removeNode","after","forEachFrom","remove","replacement","isLeftChild","left","right","_setRoot","_replaceNodeInParent","balance","getBalance","temp","dispose","pivotNode","_rotateLeft","_rotateRight","length","max","i","low","callback","allNodes","traverse","push","forEach","searchAfter","high","point","height","Math","_left","_right"],"sourceRoot":"","sources":["../../../../Tone/core/util/IntervalTimeline.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}