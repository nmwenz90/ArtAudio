{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\n\nexport var MembraneSynth = /*#__PURE__*/function (_Synth) {\n  _inherits(MembraneSynth, _Synth);\n\n  var _super = _createSuper(MembraneSynth);\n\n  function MembraneSynth() {\n    var _this;\n\n    _classCallCheck(this, MembraneSynth);\n\n    _this = _super.call(this, optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n    _this.name = \"MembraneSynth\";\n    /**\n     * Portamento is ignored in this synth. use pitch decay instead.\n     */\n\n    _this.portamento = 0;\n    var options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n    _this.pitchDecay = options.pitchDecay;\n    _this.octaves = options.octaves;\n    readOnly(_assertThisInitialized(_this), [\"oscillator\", \"envelope\"]);\n    return _this;\n  }\n\n  _createClass(MembraneSynth, [{\n    key: \"setNote\",\n    value: function setNote(note, time) {\n      var seconds = this.toSeconds(time);\n      var hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n      var maxNote = hertz * this.octaves;\n      this.oscillator.frequency.setValueAtTime(maxNote, seconds);\n      this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MembraneSynth.prototype), \"dispose\", this).call(this);\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n        envelope: {\n          attack: 0.001,\n          attackCurve: \"exponential\",\n          decay: 0.4,\n          release: 1.4,\n          sustain: 0.01\n        },\n        octaves: 10,\n        oscillator: {\n          type: \"sine\"\n        },\n        pitchDecay: 0.05\n      });\n    }\n  }]);\n\n  return MembraneSynth;\n}(Synth);\n\n__decorate([range(0)], MembraneSynth.prototype, \"octaves\", void 0);\n\n__decorate([timeRange(0)], MembraneSynth.prototype, \"pitchDecay\", void 0);","map":{"version":3,"mappings":";;;;;;;;AAAA,SAASA,cAAT,QAA+B,wBAA/B;AAEA,SAASC,SAAT,EAAoBC,oBAApB,QAAgD,uBAAhD;AACA,SAASC,QAAT,QAA2C,wBAA3C;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,KAAT,QAAoC,SAApC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,wBAAjC;AAOA;;;;;;;;;;;;;;AAaA,WAAaC,aAAb;AAAA;;AAAA;;AA6BC;AAAA;;AAAA;;AAEC,8BAAMN,oBAAoB,CAACM,aAAa,CAACC,WAAd,EAAD,EAA8BC,SAA9B,CAA1B;AA7BQ,iBAAe,eAAf;AAkBT;;;;AAGS,uBAAa,CAAb;AASR,QAAMC,OAAO,GAAGT,oBAAoB,CAACM,aAAa,CAACC,WAAd,EAAD,EAA8BC,SAA9B,CAApC;AAEA,UAAKE,UAAL,GAAkBD,OAAO,CAACC,UAA1B;AACA,UAAKC,OAAL,GAAeF,OAAO,CAACE,OAAvB;AACAV,YAAQ,gCAAO,CAAC,YAAD,EAAe,UAAf,CAAP,CAAR;AAPD;AAQC;;AArCF;AAAA;AAAA,WAwDC,iBAAQW,IAAR,EAA0CC,IAA1C,EAAqD;AACpD,UAAMC,OAAO,GAAG,KAAKC,SAAL,CAAeF,IAAf,CAAhB;AACA,UAAMG,KAAK,GAAG,KAAKC,WAAL,CAAiBL,IAAI,YAAYd,cAAhB,GAAiCc,IAAI,CAACK,WAAL,EAAjC,GAAsDL,IAAvE,CAAd;AACA,UAAMM,OAAO,GAAGF,KAAK,GAAG,KAAKL,OAA7B;AACA,WAAKQ,UAAL,CAAgBC,SAAhB,CAA0BC,cAA1B,CAAyCH,OAAzC,EAAkDJ,OAAlD;AACA,WAAKK,UAAL,CAAgBC,SAAhB,CAA0BE,4BAA1B,CAAuDN,KAAvD,EAA8DF,OAAO,GAAG,KAAKC,SAAL,CAAe,KAAKL,UAApB,CAAxE;AACA,aAAO,IAAP;AACA;AA/DF;AAAA;AAAA,WAiEC,mBAAO;AACN;;AACA,aAAO,IAAP;AACA;AApEF;AAAA;AAAA,WAuCC,uBAAkB;AACjB,aAAOX,SAAS,CAACG,UAAU,CAACK,WAAX,EAAD,EAA2BJ,KAAK,CAACI,WAAN,EAA3B,EAAgD;AAC/DgB,gBAAQ,EAAE;AACTC,gBAAM,EAAE,KADC;AAETC,qBAAW,EAAE,aAFJ;AAGTC,eAAK,EAAE,GAHE;AAITC,iBAAO,EAAE,GAJA;AAKTC,iBAAO,EAAE;AALA,SADqD;AAQ/DjB,eAAO,EAAE,EARsD;AAS/DQ,kBAAU,EAAE;AACXU,cAAI,EAAE;AADK,SATmD;AAY/DnB,kBAAU,EAAE;AAZmD,OAAhD,CAAhB;AAcA;AAtDF;;AAAA;AAAA,EAAmCP,KAAnC;;AAUC2B,YADC1B,KAAK,CAAC,CAAD,CACN;;AAQA0B,YADCzB,SAAS,CAAC,CAAD,CACV","names":["FrequencyClass","deepMerge","optionsFromArguments","readOnly","Monophonic","Synth","range","timeRange","MembraneSynth","getDefaults","arguments","options","pitchDecay","octaves","note","time","seconds","toSeconds","hertz","toFrequency","maxNote","oscillator","frequency","setValueAtTime","exponentialRampToValueAtTime","envelope","attack","attackCurve","decay","release","sustain","type","__decorate"],"sourceRoot":"","sources":["../../../Tone/instrument/MembraneSynth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}