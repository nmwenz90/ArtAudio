{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { AMOscillator } from \"./AMOscillator\";\nimport { FatOscillator } from \"./FatOscillator\";\nimport { FMOscillator } from \"./FMOscillator\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\nimport { PWMOscillator } from \"./PWMOscillator\";\nvar OmniOscillatorSourceMap = {\n  am: AMOscillator,\n  fat: FatOscillator,\n  fm: FMOscillator,\n  oscillator: Oscillator,\n  pulse: PulseOscillator,\n  pwm: PWMOscillator\n};\n/**\n * OmniOscillator aggregates all of the oscillator types into one.\n * @example\n * return Tone.Offline(() => {\n * \tconst omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\").toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\n\nexport var OmniOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(OmniOscillator, _Source);\n\n  var _super = _createSuper(OmniOscillator);\n\n  function OmniOscillator() {\n    var _this;\n\n    _classCallCheck(this, OmniOscillator);\n\n    _this = _super.call(this, optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"OmniOscillator\";\n    var options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"detune\"]); // set the options\n\n    _this.set(options);\n\n    return _this;\n  }\n\n  _createClass(OmniOscillator, [{\n    key: \"_start\",\n    value:\n    /**\n     * start the oscillator\n     */\n    function _start(time) {\n      this._oscillator.start(time);\n    }\n    /**\n     * start the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      this._oscillator.stop(time);\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._oscillator.restart(time);\n\n      return this;\n    }\n    /**\n     * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n     * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n     * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n     * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n     * when it's not.\n     * @example\n     * const omniOsc = new Tone.OmniOscillator().toDestination().start();\n     * omniOsc.type = \"pwm\";\n     * // modulationFrequency is parameter which is available\n     * // only when the type is \"pwm\".\n     * omniOsc.modulationFrequency.value = 0.5;\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      var _this2 = this;\n\n      var prefix = \"\";\n\n      if ([\"am\", \"fm\", \"fat\"].some(function (p) {\n        return _this2._sourceType === p;\n      })) {\n        prefix = this._sourceType;\n      }\n\n      return prefix + this._oscillator.type;\n    },\n    set: function set(type) {\n      if (type.substr(0, 2) === \"fm\") {\n        this._createNewOscillator(\"fm\");\n\n        this._oscillator = this._oscillator;\n        this._oscillator.type = type.substr(2);\n      } else if (type.substr(0, 2) === \"am\") {\n        this._createNewOscillator(\"am\");\n\n        this._oscillator = this._oscillator;\n        this._oscillator.type = type.substr(2);\n      } else if (type.substr(0, 3) === \"fat\") {\n        this._createNewOscillator(\"fat\");\n\n        this._oscillator = this._oscillator;\n        this._oscillator.type = type.substr(3);\n      } else if (type === \"pwm\") {\n        this._createNewOscillator(\"pwm\");\n\n        this._oscillator = this._oscillator;\n      } else if (type === \"pulse\") {\n        this._createNewOscillator(\"pulse\");\n      } else {\n        this._createNewOscillator(\"oscillator\");\n\n        this._oscillator = this._oscillator;\n        this._oscillator.type = type;\n      }\n    }\n    /**\n     * The value is an empty array when the type is not \"custom\".\n     * This is not available on \"pwm\" and \"pulse\" oscillator types.\n     * See [[Oscillator.partials]]\n     */\n\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return this._oscillator.partials;\n    },\n    set: function set(partials) {\n      if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n        this._oscillator.partials = partials;\n      }\n    }\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return this._oscillator.partialCount;\n    },\n    set: function set(partialCount) {\n      if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\")) {\n        this._oscillator.partialCount = partialCount;\n      }\n    }\n  }, {\n    key: \"set\",\n    value: function set(props) {\n      // make sure the type is set first\n      if (Reflect.has(props, \"type\") && props.type) {\n        this.type = props.type;\n      } // then set the rest\n\n\n      _get(_getPrototypeOf(OmniOscillator.prototype), \"set\", this).call(this, props);\n\n      return this;\n    }\n    /**\n     * connect the oscillator to the frequency and detune signals\n     */\n\n  }, {\n    key: \"_createNewOscillator\",\n    value: function _createNewOscillator(oscType) {\n      var _this3 = this;\n\n      if (oscType !== this._sourceType) {\n        this._sourceType = oscType;\n        var OscConstructor = OmniOscillatorSourceMap[oscType]; // short delay to avoid clicks on the change\n\n        var now = this.now();\n\n        if (this._oscillator) {\n          var oldOsc = this._oscillator;\n          oldOsc.stop(now); // dispose the old one\n\n          this.context.setTimeout(function () {\n            return oldOsc.dispose();\n          }, this.blockTime);\n        }\n\n        this._oscillator = new OscConstructor({\n          context: this.context\n        });\n        this.frequency.connect(this._oscillator.frequency);\n        this.detune.connect(this._oscillator.detune);\n\n        this._oscillator.connect(this.output);\n\n        this._oscillator.onstop = function () {\n          return _this3.onstop(_this3);\n        };\n\n        if (this.state === \"started\") {\n          this._oscillator.start(now);\n        }\n      }\n    }\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._oscillator.phase;\n    },\n    set: function set(phase) {\n      this._oscillator.phase = phase;\n    }\n    /**\n     * The source type of the oscillator.\n     * @example\n     * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare\");\n     * console.log(omniOsc.sourceType); // 'fm'\n     */\n\n  }, {\n    key: \"sourceType\",\n    get: function get() {\n      return this._sourceType;\n    },\n    set: function set(sType) {\n      // the basetype defaults to sine\n      var baseType = \"sine\";\n\n      if (this._oscillator.type !== \"pwm\" && this._oscillator.type !== \"pulse\") {\n        baseType = this._oscillator.type;\n      } // set the type\n\n\n      if (sType === \"fm\") {\n        this.type = \"fm\" + baseType;\n      } else if (sType === \"am\") {\n        this.type = \"am\" + baseType;\n      } else if (sType === \"fat\") {\n        this.type = \"fat\" + baseType;\n      } else if (sType === \"oscillator\") {\n        this.type = baseType;\n      } else if (sType === \"pulse\") {\n        this.type = \"pulse\";\n      } else if (sType === \"pwm\") {\n        this.type = \"pwm\";\n      }\n    }\n  }, {\n    key: \"_getOscType\",\n    value: function _getOscType(osc, sourceType) {\n      return osc instanceof OmniOscillatorSourceMap[sourceType];\n    }\n    /**\n     * The base type of the oscillator. See [[Oscillator.baseType]]\n     * @example\n     * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare4\");\n     * console.log(omniOsc.sourceType, omniOsc.baseType, omniOsc.partialCount);\n     */\n\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return this._oscillator.baseType;\n    },\n    set: function set(baseType) {\n      if (!this._getOscType(this._oscillator, \"pulse\") && !this._getOscType(this._oscillator, \"pwm\") && baseType !== \"pulse\" && baseType !== \"pwm\") {\n        this._oscillator.baseType = baseType;\n      }\n    }\n    /**\n     * The width of the oscillator when sourceType === \"pulse\".\n     * See [[PWMOscillator.width]]\n     */\n\n  }, {\n    key: \"width\",\n    get: function get() {\n      if (this._getOscType(this._oscillator, \"pulse\")) {\n        return this._oscillator.width;\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * The number of detuned oscillators when sourceType === \"fat\".\n     * See [[FatOscillator.count]]\n     */\n\n  }, {\n    key: \"count\",\n    get: function get() {\n      if (this._getOscType(this._oscillator, \"fat\")) {\n        return this._oscillator.count;\n      } else {\n        return undefined;\n      }\n    },\n    set: function set(count) {\n      if (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n        this._oscillator.count = count;\n      }\n    }\n    /**\n     * The detune spread between the oscillators when sourceType === \"fat\".\n     * See [[FatOscillator.count]]\n     */\n\n  }, {\n    key: \"spread\",\n    get: function get() {\n      if (this._getOscType(this._oscillator, \"fat\")) {\n        return this._oscillator.spread;\n      } else {\n        return undefined;\n      }\n    },\n    set: function set(spread) {\n      if (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n        this._oscillator.spread = spread;\n      }\n    }\n    /**\n     * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types.\n     * See [[AMOscillator]] or [[FMOscillator]]\n     */\n\n  }, {\n    key: \"modulationType\",\n    get: function get() {\n      if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n        return this._oscillator.modulationType;\n      } else {\n        return undefined;\n      }\n    },\n    set: function set(mType) {\n      if ((this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) && isString(mType)) {\n        this._oscillator.modulationType = mType;\n      }\n    }\n    /**\n     * The modulation index when the sourceType === \"fm\"\n     * See [[FMOscillator]].\n     */\n\n  }, {\n    key: \"modulationIndex\",\n    get: function get() {\n      if (this._getOscType(this._oscillator, \"fm\")) {\n        return this._oscillator.modulationIndex;\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n     * See [[AMOscillator]] or [[FMOscillator]]\n     */\n\n  }, {\n    key: \"harmonicity\",\n    get: function get() {\n      if (this._getOscType(this._oscillator, \"fm\") || this._getOscType(this._oscillator, \"am\")) {\n        return this._oscillator.harmonicity;\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n     * see [[PWMOscillator]]\n     * @min 0.1\n     * @max 5\n     */\n\n  }, {\n    key: \"modulationFrequency\",\n    get: function get() {\n      if (this._getOscType(this._oscillator, \"pwm\")) {\n        return this._oscillator.modulationFrequency;\n      } else {\n        return undefined;\n      }\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(OmniOscillator.prototype), \"dispose\", this).call(this);\n\n      this.detune.dispose();\n      this.frequency.dispose();\n\n      this._oscillator.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Oscillator.getDefaults(), FMOscillator.getDefaults(), AMOscillator.getDefaults(), FatOscillator.getDefaults(), PulseOscillator.getDefaults(), PWMOscillator.getDefaults());\n    }\n  }]);\n\n  return OmniOscillator;\n}(Source);","map":{"version":3,"mappings":"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","names":["optionsFromArguments","readOnly","isNumber","isString","Signal","Source","AMOscillator","FatOscillator","FMOscillator","Oscillator","generateWaveform","PulseOscillator","PWMOscillator","OmniOscillatorSourceMap","am","fat","fm","oscillator","pulse","pwm","OmniOscillator","getDefaults","arguments","options","frequency","context","units","value","detune","set","time","_oscillator","start","stop","restart","prefix","some","_sourceType","p","type","substr","_createNewOscillator","partials","_getOscType","partialCount","props","Reflect","has","oscType","OscConstructor","now","oldOsc","setTimeout","dispose","blockTime","connect","output","onstop","state","phase","sType","baseType","osc","sourceType","width","undefined","count","spread","modulationType","mType","modulationIndex","harmonicity","modulationFrequency","length","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/source/oscillator/OmniOscillator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}