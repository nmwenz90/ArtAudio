{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getContext } from \"../Global\";\nimport { Tone } from \"../Tone\";\nimport { FrequencyClass } from \"../type/Frequency\";\nimport { TimeClass } from \"../type/Time\";\nimport { TransportTimeClass } from \"../type/TransportTime\";\nimport { getDefaultsFromInstance, optionsFromArguments } from \"../util/Defaults\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\n\nexport var ToneWithContext = /*#__PURE__*/function (_Tone) {\n  _inherits(ToneWithContext, _Tone);\n\n  var _super = _createSuper(ToneWithContext);\n\n  function ToneWithContext() {\n    var _this;\n\n    _classCallCheck(this, ToneWithContext);\n\n    _this = _super.call(this);\n    var options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n\n    if (_this.defaultContext) {\n      _this.context = _this.defaultContext;\n    } else {\n      _this.context = options.context;\n    }\n\n    return _this;\n  }\n\n  _createClass(ToneWithContext, [{\n    key: \"now\",\n    value:\n    /**\n     * Return the current time of the Context clock plus the lookAhead.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(Tone.now());\n     * }, 100);\n     */\n    function now() {\n      return this.context.currentTime + this.context.lookAhead;\n    }\n    /**\n     * Return the current time of the Context clock without any lookAhead.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(Tone.immediate());\n     * }, 100);\n     */\n\n  }, {\n    key: \"immediate\",\n    value: function immediate() {\n      return this.context.currentTime;\n    }\n    /**\n     * The duration in seconds of one sample.\n     * @example\n     * console.log(Tone.Transport.sampleTime);\n     */\n\n  }, {\n    key: \"sampleTime\",\n    get: function get() {\n      return 1 / this.context.sampleRate;\n    }\n    /**\n     * The number of seconds of 1 processing block (128 samples)\n     * @example\n     * console.log(Tone.Destination.blockTime);\n     */\n\n  }, {\n    key: \"blockTime\",\n    get: function get() {\n      return 128 / this.context.sampleRate;\n    }\n    /**\n     * Convert the incoming time to seconds.\n     * This is calculated against the current [[Tone.Transport]] bpm\n     * @example\n     * const gain = new Tone.Gain();\n     * setInterval(() => console.log(gain.toSeconds(\"4n\")), 100);\n     * // ramp the tempo to 60 bpm over 30 seconds\n     * Tone.getTransport().bpm.rampTo(60, 30);\n     */\n\n  }, {\n    key: \"toSeconds\",\n    value: function toSeconds(time) {\n      return new TimeClass(this.context, time).toSeconds();\n    }\n    /**\n     * Convert the input to a frequency number\n     * @example\n     * const gain = new Tone.Gain();\n     * console.log(gain.toFrequency(\"4n\"));\n     */\n\n  }, {\n    key: \"toFrequency\",\n    value: function toFrequency(freq) {\n      return new FrequencyClass(this.context, freq).toFrequency();\n    }\n    /**\n     * Convert the input time into ticks\n     * @example\n     * const gain = new Tone.Gain();\n     * console.log(gain.toTicks(\"4n\"));\n     */\n\n  }, {\n    key: \"toTicks\",\n    value: function toTicks(time) {\n      return new TransportTimeClass(this.context, time).toTicks();\n    } //-------------------------------------\n    // \tGET/SET\n    //-------------------------------------\n\n    /**\n     * Get a subset of the properties which are in the partial props\n     */\n\n  }, {\n    key: \"_getPartialProperties\",\n    value: function _getPartialProperties(props) {\n      var options = this.get(); // remove attributes from the prop that are not in the partial\n\n      Object.keys(options).forEach(function (name) {\n        if (isUndef(props[name])) {\n          delete options[name];\n        }\n      });\n      return options;\n    }\n    /**\n     * Get the object's attributes.\n     * @example\n     * const osc = new Tone.Oscillator();\n     * console.log(osc.get());\n     */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      var _this2 = this;\n\n      var defaults = getDefaultsFromInstance(this);\n      Object.keys(defaults).forEach(function (attribute) {\n        if (Reflect.has(_this2, attribute)) {\n          var member = _this2[attribute];\n\n          if (isDefined(member) && isDefined(member.value) && isDefined(member.setValueAtTime)) {\n            defaults[attribute] = member.value;\n          } else if (member instanceof ToneWithContext) {\n            defaults[attribute] = member._getPartialProperties(defaults[attribute]); // otherwise make sure it's a serializable type\n          } else if (isArray(member) || isNumber(member) || isString(member) || isBoolean(member)) {\n            defaults[attribute] = member;\n          } else {\n            // remove all undefined and unserializable attributes\n            delete defaults[attribute];\n          }\n        }\n      });\n      return defaults;\n    }\n    /**\n     * Set multiple properties at once with an object.\n     * @example\n     * const filter = new Tone.Filter().toDestination();\n     * // set values using an object\n     * filter.set({\n     * \tfrequency: \"C6\",\n     * \ttype: \"highpass\"\n     * });\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3\").connect(filter);\n     * player.autostart = true;\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(props) {\n      var _this3 = this;\n\n      Object.keys(props).forEach(function (attribute) {\n        if (Reflect.has(_this3, attribute) && isDefined(_this3[attribute])) {\n          if (_this3[attribute] && isDefined(_this3[attribute].value) && isDefined(_this3[attribute].setValueAtTime)) {\n            // small optimization\n            if (_this3[attribute].value !== props[attribute]) {\n              _this3[attribute].value = props[attribute];\n            }\n          } else if (_this3[attribute] instanceof ToneWithContext) {\n            _this3[attribute].set(props[attribute]);\n          } else {\n            _this3[attribute] = props[attribute];\n          }\n        }\n      });\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return {\n        context: getContext()\n      };\n    }\n  }]);\n\n  return ToneWithContext;\n}(Tone);","map":{"version":3,"mappings":"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","names":["getContext","Tone","FrequencyClass","TimeClass","TransportTimeClass","getDefaultsFromInstance","optionsFromArguments","isArray","isBoolean","isDefined","isNumber","isString","isUndef","ToneWithContext","options","getDefaults","arguments","defaultContext","context","currentTime","lookAhead","sampleRate","time","toSeconds","freq","toFrequency","toTicks","props","get","Object","keys","forEach","name","defaults","Reflect","has","attribute","member","value","setValueAtTime","_getPartialProperties","set"],"sourceRoot":"","sources":["../../../../Tone/core/context/ToneWithContext.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}