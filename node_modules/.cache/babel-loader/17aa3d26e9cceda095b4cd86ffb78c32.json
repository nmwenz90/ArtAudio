{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\nimport { deepMerge } from \"../core/util/Defaults\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\n/**\n * Karplus-String string synthesis.\n * @example\n * const plucky = new Tone.PluckSynth().toDestination();\n * plucky.triggerAttack(\"C4\", \"+0.5\");\n * plucky.triggerAttack(\"C3\", \"+1\");\n * plucky.triggerAttack(\"C2\", \"+1.5\");\n * plucky.triggerAttack(\"C1\", \"+2\");\n * @category Instrument\n */\n\nexport var PluckSynth = /*#__PURE__*/function (_Instrument) {\n  _inherits(PluckSynth, _Instrument);\n\n  var _super = _createSuper(PluckSynth);\n\n  function PluckSynth() {\n    var _this;\n\n    _classCallCheck(this, PluckSynth);\n\n    _this = _super.call(this, optionsFromArguments(PluckSynth.getDefaults(), arguments));\n    _this.name = \"PluckSynth\";\n    var options = optionsFromArguments(PluckSynth.getDefaults(), arguments);\n    _this._noise = new Noise({\n      context: _this.context,\n      type: \"pink\"\n    });\n    _this.attackNoise = options.attackNoise;\n    _this._lfcf = new LowpassCombFilter({\n      context: _this.context,\n      dampening: options.dampening,\n      resonance: options.resonance\n    });\n    _this.resonance = options.resonance;\n    _this.release = options.release;\n\n    _this._noise.connect(_this._lfcf);\n\n    _this._lfcf.connect(_this.output);\n\n    return _this;\n  }\n\n  _createClass(PluckSynth, [{\n    key: \"dampening\",\n    get:\n    /**\n     * The dampening control. i.e. the lowpass filter frequency of the comb filter\n     * @min 0\n     * @max 7000\n     */\n    function get() {\n      return this._lfcf.dampening;\n    },\n    set: function set(fq) {\n      this._lfcf.dampening = fq;\n    }\n  }, {\n    key: \"triggerAttack\",\n    value: function triggerAttack(note, time) {\n      var freq = this.toFrequency(note);\n      time = this.toSeconds(time);\n      var delayAmount = 1 / freq;\n\n      this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\n      this._noise.start(time);\n\n      this._noise.stop(time + delayAmount * this.attackNoise);\n\n      this._lfcf.resonance.cancelScheduledValues(time);\n\n      this._lfcf.resonance.setValueAtTime(this.resonance, time);\n\n      return this;\n    }\n    /**\n     * Ramp down the [[resonance]] to 0 over the duration of the release time.\n     */\n\n  }, {\n    key: \"triggerRelease\",\n    value: function triggerRelease(time) {\n      this._lfcf.resonance.linearRampTo(0, this.release, time);\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PluckSynth.prototype), \"dispose\", this).call(this);\n\n      this._noise.dispose();\n\n      this._lfcf.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Instrument.getDefaults(), {\n        attackNoise: 1,\n        dampening: 4000,\n        resonance: 0.7,\n        release: 1\n      });\n    }\n  }]);\n\n  return PluckSynth;\n}(Instrument);","map":{"version":3,"mappings":";;;;;;AACA,SAASA,iBAAT,QAAkC,uCAAlC;AACA,SAASC,SAAT,QAA0B,uBAA1B;AACA,SAASC,oBAAT,QAAqC,uBAArC;AAEA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,UAAT,QAA8C,cAA9C;AASA;;;;;;;;;;;AAUA,WAAaC,UAAb;AAAA;;AAAA;;AA6BC;AAAA;;AAAA;;AAEC,8BAAMH,oBAAoB,CAACG,UAAU,CAACC,WAAX,EAAD,EAA2BC,SAA3B,CAA1B;AA7BQ,iBAAO,YAAP;AA8BR,QAAMC,OAAO,GAAGN,oBAAoB,CAACG,UAAU,CAACC,WAAX,EAAD,EAA2BC,SAA3B,CAApC;AAEA,UAAKE,MAAL,GAAc,IAAIN,KAAJ,CAAU;AACvBO,aAAO,EAAE,MAAKA,OADS;AAEvBC,UAAI,EAAE;AAFiB,KAAV,CAAd;AAKA,UAAKC,WAAL,GAAmBJ,OAAO,CAACI,WAA3B;AAEA,UAAKC,KAAL,GAAa,IAAIb,iBAAJ,CAAsB;AAClCU,aAAO,EAAE,MAAKA,OADoB;AAElCI,eAAS,EAAEN,OAAO,CAACM,SAFe;AAGlCC,eAAS,EAAEP,OAAO,CAACO;AAHe,KAAtB,CAAb;AAMA,UAAKA,SAAL,GAAiBP,OAAO,CAACO,SAAzB;AACA,UAAKC,OAAL,GAAeR,OAAO,CAACQ,OAAvB;;AAEA,UAAKP,MAAL,CAAYQ,OAAZ,CAAoB,MAAKJ,KAAzB;;AACA,UAAKA,KAAL,CAAWI,OAAX,CAAmB,MAAKC,MAAxB;;AAtBD;AAuBC;;AApDF;AAAA;AAAA;AA+DC;;;;;AAKA,mBAAa;AACZ,aAAO,KAAKL,KAAL,CAAWC,SAAlB;AACA,KAtEF;AAAA,SAuEC,aAAcK,EAAd,EAAgB;AACf,WAAKN,KAAL,CAAWC,SAAX,GAAuBK,EAAvB;AACA;AAzEF;AAAA;AAAA,WA2EC,uBAAcC,IAAd,EAA+BC,IAA/B,EAA0C;AACzC,UAAMC,IAAI,GAAG,KAAKC,WAAL,CAAiBH,IAAjB,CAAb;AACAC,UAAI,GAAG,KAAKG,SAAL,CAAeH,IAAf,CAAP;AACA,UAAMI,WAAW,GAAG,IAAIH,IAAxB;;AACA,WAAKT,KAAL,CAAWa,SAAX,CAAqBC,cAArB,CAAoCF,WAApC,EAAiDJ,IAAjD;;AACA,WAAKZ,MAAL,CAAYmB,KAAZ,CAAkBP,IAAlB;;AACA,WAAKZ,MAAL,CAAYoB,IAAZ,CAAiBR,IAAI,GAAGI,WAAW,GAAG,KAAKb,WAA3C;;AACA,WAAKC,KAAL,CAAWE,SAAX,CAAqBe,qBAArB,CAA2CT,IAA3C;;AACA,WAAKR,KAAL,CAAWE,SAAX,CAAqBY,cAArB,CAAoC,KAAKZ,SAAzC,EAAoDM,IAApD;;AACA,aAAO,IAAP;AACA;AAED;;;;AAvFD;AAAA;AAAA,WA0FC,wBAAeA,IAAf,EAA0B;AACzB,WAAKR,KAAL,CAAWE,SAAX,CAAqBgB,YAArB,CAAkC,CAAlC,EAAqC,KAAKf,OAA1C,EAAmDK,IAAnD;;AACA,aAAO,IAAP;AACA;AA7FF;AAAA;AAAA,WA+FC,mBAAO;AACN;;AACA,WAAKZ,MAAL,CAAYuB,OAAZ;;AACA,WAAKnB,KAAL,CAAWmB,OAAX;;AACA,aAAO,IAAP;AACA;AApGF;AAAA;AAAA,WAsDC,uBAAkB;AACjB,aAAO/B,SAAS,CAACG,UAAU,CAACE,WAAX,EAAD,EAA2B;AAC1CM,mBAAW,EAAE,CAD6B;AAE1CE,iBAAS,EAAE,IAF+B;AAG1CC,iBAAS,EAAE,GAH+B;AAI1CC,eAAO,EAAE;AAJiC,OAA3B,CAAhB;AAMA;AA7DF;;AAAA;AAAA,EAAgCZ,UAAhC","names":["LowpassCombFilter","deepMerge","optionsFromArguments","Noise","Instrument","PluckSynth","getDefaults","arguments","options","_noise","context","type","attackNoise","_lfcf","dampening","resonance","release","connect","output","fq","note","time","freq","toFrequency","toSeconds","delayAmount","delayTime","setValueAtTime","start","stop","cancelScheduledValues","linearRampTo","dispose"],"sourceRoot":"","sources":["../../../Tone/instrument/PluckSynth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}