{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport var createNativeAudioWorkletNodeFactory = function createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) {\n  return function (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) {\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      try {\n        var nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeContext, name, options);\n        var patchedEventListeners = new Map();\n        var onprocessorerror = null;\n        Object.defineProperties(nativeAudioWorkletNode, {\n          /*\n           * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n           * browsers have no native implementation to achieve a consistent behavior.\n           */\n          channelCount: {\n            get: function get() {\n              return options.channelCount;\n            },\n            set: function set() {\n              throw createInvalidStateError();\n            }\n          },\n          channelCountMode: {\n            get: function get() {\n              return 'explicit';\n            },\n            set: function set() {\n              throw createInvalidStateError();\n            }\n          },\n          // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.\n          onprocessorerror: {\n            get: function get() {\n              return onprocessorerror;\n            },\n            set: function set(value) {\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n              }\n\n              onprocessorerror = typeof value === 'function' ? value : null;\n\n              if (typeof onprocessorerror === 'function') {\n                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n              }\n            }\n          }\n        });\n\n        nativeAudioWorkletNode.addEventListener = function (addEventListener) {\n          return function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            if (args[0] === 'processorerror') {\n              var unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n\n              if (unpatchedEventListener !== null) {\n                var patchedEventListener = patchedEventListeners.get(args[1]);\n\n                if (patchedEventListener !== undefined) {\n                  args[1] = patchedEventListener;\n                } else {\n                  args[1] = function (event) {\n                    // Bug #178: Chrome, Edge and Opera do fire an event of type error.\n                    if (event.type === 'error') {\n                      Object.defineProperties(event, {\n                        type: {\n                          value: 'processorerror'\n                        }\n                      });\n                      unpatchedEventListener(event);\n                    } else {\n                      unpatchedEventListener(new ErrorEvent(args[0], _objectSpread({}, event)));\n                    }\n                  };\n\n                  patchedEventListeners.set(unpatchedEventListener, args[1]);\n                }\n              }\n            } // Bug #178: Chrome, Edge and Opera do fire an event of type error.\n\n\n            addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n            return addEventListener.call.apply(addEventListener, [nativeAudioWorkletNode].concat(args));\n          };\n        }(nativeAudioWorkletNode.addEventListener);\n\n        nativeAudioWorkletNode.removeEventListener = function (removeEventListener) {\n          return function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            if (args[0] === 'processorerror') {\n              var patchedEventListener = patchedEventListeners.get(args[1]);\n\n              if (patchedEventListener !== undefined) {\n                patchedEventListeners.delete(args[1]);\n                args[1] = patchedEventListener;\n              }\n            } // Bug #178: Chrome, Edge and Opera do fire an event of type error.\n\n\n            removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n            return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n          };\n        }(nativeAudioWorkletNode.removeEventListener);\n        /*\n         * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but\n         * has an output.\n         */\n\n\n        if (options.numberOfOutputs !== 0) {\n          var nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n          });\n          nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);\n\n          var whenConnected = function whenConnected() {\n            return nativeGainNode.disconnect();\n          };\n\n          var whenDisconnected = function whenDisconnected() {\n            return nativeGainNode.connect(nativeContext.destination);\n          }; // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n\n\n          return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n        }\n\n        return nativeAudioWorkletNode;\n      } catch (err) {\n        // Bug #60: Chrome, Edge & Opera throw an InvalidStateError instead of a NotSupportedError.\n        if (err.code === 11) {\n          throw createNotSupportedError();\n        }\n\n        throw err;\n      }\n    } // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.\n\n\n    if (processorConstructor === undefined) {\n      throw createNotSupportedError();\n    }\n\n    testClonabilityOfAudioWorkletNodeOptions(options);\n    return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n  };\n};","map":{"version":3,"mappings":"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","names":["testClonabilityOfAudioWorkletNodeOptions","createNativeAudioWorkletNodeFactory","createInvalidStateError","createNativeAudioWorkletNodeFaker","createNativeGainNode","createNotSupportedError","monitorConnections","nativeContext","baseLatency","nativeAudioWorkletNodeConstructor","name","processorConstructor","options","nativeAudioWorkletNode","patchedEventListeners","Map","onprocessorerror","Object","defineProperties","channelCount","get","set","channelCountMode","value","removeEventListener","addEventListener","args","unpatchedEventListener","handleEvent","patchedEventListener","undefined","event","type","ErrorEvent","call","delete","numberOfOutputs","nativeGainNode","channelInterpretation","gain","connect","destination","whenConnected","disconnect","whenDisconnected","err","code"],"sourceRoot":"","sources":["../../../src/factories/native-audio-worklet-node-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}