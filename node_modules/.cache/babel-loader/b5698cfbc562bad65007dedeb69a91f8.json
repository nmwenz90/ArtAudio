{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport var createIncrementCycleCounterFactory = function createIncrementCycleCounterFactory(cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) {\n  return function (isOffline) {\n    return function (audioNode, count) {\n      var cycleCounter = cycleCounters.get(audioNode);\n\n      if (cycleCounter === undefined) {\n        if (!isOffline && isActiveAudioNode(audioNode)) {\n          var nativeSourceAudioNode = getNativeAudioNode(audioNode);\n\n          var _getAudioNodeConnecti = getAudioNodeConnections(audioNode),\n              outputs = _getAudioNodeConnecti.outputs;\n\n          var _iterator = _createForOfIteratorHelper(outputs),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var output = _step.value;\n\n              if (isAudioNodeOutputConnection(output)) {\n                var nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n              } else {\n                var nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n\n        cycleCounters.set(audioNode, count);\n      } else {\n        cycleCounters.set(audioNode, cycleCounter + count);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";AAAA,SAASA,2BAAT,QAA4C,wCAA5C;AAGA,OAAO,IAAMC,kCAAkC,GAAyC,SAA3EA,kCAA2E,CACpFC,aADoF,EAEpFC,4CAFoF,EAGpFC,uBAHoF,EAIpFC,kBAJoF,EAKpFC,mBALoF,EAMpFC,iBANoF,EAOpF;AACA,SAAO,UAACC,SAAD,EAAc;AACjB,WAAO,UAACC,SAAD,EAAYC,KAAZ,EAAqB;AACxB,UAAMC,YAAY,GAAGT,aAAa,CAACU,GAAd,CAAkBH,SAAlB,CAArB;;AAEA,UAAIE,YAAY,KAAKE,SAArB,EAAgC;AAC5B,YAAI,CAACL,SAAD,IAAcD,iBAAiB,CAACE,SAAD,CAAnC,EAAgD;AAC5C,cAAMK,qBAAqB,GAAGT,kBAAkB,CAACI,SAAD,CAAhD;;AACA,sCAAoBL,uBAAuB,CAACK,SAAD,CAA3C;AAAA,cAAQM,OAAR,yBAAQA,OAAR;;AAF4C,qDAIvBA,OAJuB;AAAA;;AAAA;AAI5C,gEAA8B;AAAA,kBAAnBC,MAAmB;;AAC1B,kBAAIhB,2BAA2B,CAACgB,MAAD,CAA/B,EAAyC;AACrC,oBAAMC,0BAA0B,GAAGZ,kBAAkB,CAACW,MAAM,CAAC,CAAD,CAAP,CAArD;AAEAb,4DAA4C,CACxCW,qBADwC,EAExCG,0BAFwC,EAGxCD,MAAM,CAAC,CAAD,CAHkC,EAIxCA,MAAM,CAAC,CAAD,CAJkC,CAA5C;AAMH,eATD,MASO;AACH,oBAAME,2BAA2B,GAAGZ,mBAAmB,CAACU,MAAM,CAAC,CAAD,CAAP,CAAvD;AAEAF,qCAAqB,CAACK,UAAtB,CAAiCD,2BAAjC,EAA8DF,MAAM,CAAC,CAAD,CAApE;AACH;AACJ;AAnB2C;AAAA;AAAA;AAAA;AAAA;AAoB/C;;AAEDd,qBAAa,CAACkB,GAAd,CAAkBX,SAAlB,EAA6BC,KAA7B;AACH,OAxBD,MAwBO;AACHR,qBAAa,CAACkB,GAAd,CAAkBX,SAAlB,EAA6BE,YAAY,GAAGD,KAA5C;AACH;AACJ,KA9BD;AA+BH,GAhCD;AAiCH,CAzCM","names":["isAudioNodeOutputConnection","createIncrementCycleCounterFactory","cycleCounters","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getNativeAudioNode","getNativeAudioParam","isActiveAudioNode","isOffline","audioNode","count","cycleCounter","get","undefined","nativeSourceAudioNode","outputs","output","nativeDestinationAudioNode","nativeDestinationAudioParam","disconnect","set"],"sourceRoot":"","sources":["../../../src/factories/increment-cycle-counter-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}