{"ast":null,"code":"/*!\n * @pixi/text - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/text is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { hex2string, hex2rgb, string2hex, trimCanvas, sign } from '@pixi/utils';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\n\n\nvar TEXT_GRADIENT;\n\n(function (TEXT_GRADIENT) {\n  TEXT_GRADIENT[TEXT_GRADIENT[\"LINEAR_VERTICAL\"] = 0] = \"LINEAR_VERTICAL\";\n  TEXT_GRADIENT[TEXT_GRADIENT[\"LINEAR_HORIZONTAL\"] = 1] = \"LINEAR_HORIZONTAL\";\n})(TEXT_GRADIENT || (TEXT_GRADIENT = {})); // disabling eslint for now, going to rewrite this in v5\n\n\nvar defaultStyle = {\n  align: 'left',\n  breakWords: false,\n  dropShadow: false,\n  dropShadowAlpha: 1,\n  dropShadowAngle: Math.PI / 6,\n  dropShadowBlur: 0,\n  dropShadowColor: 'black',\n  dropShadowDistance: 5,\n  fill: 'black',\n  fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n  fillGradientStops: [],\n  fontFamily: 'Arial',\n  fontSize: 26,\n  fontStyle: 'normal',\n  fontVariant: 'normal',\n  fontWeight: 'normal',\n  letterSpacing: 0,\n  lineHeight: 0,\n  lineJoin: 'miter',\n  miterLimit: 10,\n  padding: 0,\n  stroke: 'black',\n  strokeThickness: 0,\n  textBaseline: 'alphabetic',\n  trim: false,\n  whiteSpace: 'pre',\n  wordWrap: false,\n  wordWrapWidth: 100,\n  leading: 0\n};\nvar genericFontFamilies = ['serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'];\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @memberof PIXI\n */\n\nvar TextStyle =\n/** @class */\nfunction () {\n  /**\n   * @param {object} [style] - The style parameters\n   * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n   *  does not affect single line text\n   * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n   *  needs wordWrap to be set to true\n   * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n   * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n   * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n   * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n   * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n   * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n   * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n   *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n   *  eg ['#000000','#FFFFFF']\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n   * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n   *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n   * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n   * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n   * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n   * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n   *  equivalents are '26px','20pt','160%' or '1.6em')\n   * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n   * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n   * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n   *  '200', '300', '400', '500', '600', '700', '800' or '900')\n   * @param {number} [style.leading=0] - The space between lines\n   * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n   * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n   * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n   *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n   *      (creates a squared corner).\n   * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n   *      or increase the spikiness of rendered text.\n   * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n   *     happening by adding padding to all sides of the text.\n   * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n   *  e.g 'blue', '#FCFF00'\n   * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n   *  Default is 0 (no stroke)\n   * @param {boolean} [style.trim=false] - Trim transparent borders\n   * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n   * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n   *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n   * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n   * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n   */\n  function TextStyle(style) {\n    this.styleID = 0;\n    this.reset();\n    deepCopyProperties(this, style, style);\n  }\n  /**\n   * Creates a new TextStyle object with the same values as this one.\n   * Note that the only the properties of the object are cloned.\n   *\n   * @return New cloned TextStyle object\n   */\n\n\n  TextStyle.prototype.clone = function () {\n    var clonedProperties = {};\n    deepCopyProperties(clonedProperties, this, defaultStyle);\n    return new TextStyle(clonedProperties);\n  };\n  /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n\n\n  TextStyle.prototype.reset = function () {\n    deepCopyProperties(this, defaultStyle, defaultStyle);\n  };\n\n  Object.defineProperty(TextStyle.prototype, \"align\", {\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get: function get() {\n      return this._align;\n    },\n    set: function set(align) {\n      if (this._align !== align) {\n        this._align = align;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"breakWords\", {\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get: function get() {\n      return this._breakWords;\n    },\n    set: function set(breakWords) {\n      if (this._breakWords !== breakWords) {\n        this._breakWords = breakWords;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadow\", {\n    /** Set a drop shadow for the text. */\n    get: function get() {\n      return this._dropShadow;\n    },\n    set: function set(dropShadow) {\n      if (this._dropShadow !== dropShadow) {\n        this._dropShadow = dropShadow;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadowAlpha\", {\n    /** Set alpha for the drop shadow. */\n    get: function get() {\n      return this._dropShadowAlpha;\n    },\n    set: function set(dropShadowAlpha) {\n      if (this._dropShadowAlpha !== dropShadowAlpha) {\n        this._dropShadowAlpha = dropShadowAlpha;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadowAngle\", {\n    /** Set a angle of the drop shadow. */\n    get: function get() {\n      return this._dropShadowAngle;\n    },\n    set: function set(dropShadowAngle) {\n      if (this._dropShadowAngle !== dropShadowAngle) {\n        this._dropShadowAngle = dropShadowAngle;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadowBlur\", {\n    /** Set a shadow blur radius. */\n    get: function get() {\n      return this._dropShadowBlur;\n    },\n    set: function set(dropShadowBlur) {\n      if (this._dropShadowBlur !== dropShadowBlur) {\n        this._dropShadowBlur = dropShadowBlur;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadowColor\", {\n    /** A fill style to be used on the dropshadow e.g 'red', '#00FF00'. */\n    get: function get() {\n      return this._dropShadowColor;\n    },\n    set: function set(dropShadowColor) {\n      var outputColor = getColor(dropShadowColor);\n\n      if (this._dropShadowColor !== outputColor) {\n        this._dropShadowColor = outputColor;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"dropShadowDistance\", {\n    /** Set a distance of the drop shadow. */\n    get: function get() {\n      return this._dropShadowDistance;\n    },\n    set: function set(dropShadowDistance) {\n      if (this._dropShadowDistance !== dropShadowDistance) {\n        this._dropShadowDistance = dropShadowDistance;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fill\", {\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     *\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get: function get() {\n      return this._fill;\n    },\n    set: function set(fill) {\n      // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n      //       the setter converts to string. See this thread for more details:\n      //       https://github.com/microsoft/TypeScript/issues/2521\n      // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n      //       without casting here.\n      var outputColor = getColor(fill);\n\n      if (this._fill !== outputColor) {\n        this._fill = outputColor;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fillGradientType\", {\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     *\n     * @see PIXI.TEXT_GRADIENT\n     */\n    get: function get() {\n      return this._fillGradientType;\n    },\n    set: function set(fillGradientType) {\n      if (this._fillGradientType !== fillGradientType) {\n        this._fillGradientType = fillGradientType;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fillGradientStops\", {\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     */\n    get: function get() {\n      return this._fillGradientStops;\n    },\n    set: function set(fillGradientStops) {\n      if (!areArraysEqual(this._fillGradientStops, fillGradientStops)) {\n        this._fillGradientStops = fillGradientStops;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fontFamily\", {\n    /** The font family. */\n    get: function get() {\n      return this._fontFamily;\n    },\n    set: function set(fontFamily) {\n      if (this.fontFamily !== fontFamily) {\n        this._fontFamily = fontFamily;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fontSize\", {\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     */\n    get: function get() {\n      return this._fontSize;\n    },\n    set: function set(fontSize) {\n      if (this._fontSize !== fontSize) {\n        this._fontSize = fontSize;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fontStyle\", {\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get: function get() {\n      return this._fontStyle;\n    },\n    set: function set(fontStyle) {\n      if (this._fontStyle !== fontStyle) {\n        this._fontStyle = fontStyle;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fontVariant\", {\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get: function get() {\n      return this._fontVariant;\n    },\n    set: function set(fontVariant) {\n      if (this._fontVariant !== fontVariant) {\n        this._fontVariant = fontVariant;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"fontWeight\", {\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get: function get() {\n      return this._fontWeight;\n    },\n    set: function set(fontWeight) {\n      if (this._fontWeight !== fontWeight) {\n        this._fontWeight = fontWeight;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"letterSpacing\", {\n    /** The amount of spacing between letters, default is 0. */\n    get: function get() {\n      return this._letterSpacing;\n    },\n    set: function set(letterSpacing) {\n      if (this._letterSpacing !== letterSpacing) {\n        this._letterSpacing = letterSpacing;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"lineHeight\", {\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get: function get() {\n      return this._lineHeight;\n    },\n    set: function set(lineHeight) {\n      if (this._lineHeight !== lineHeight) {\n        this._lineHeight = lineHeight;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"leading\", {\n    /** The space between lines. */\n    get: function get() {\n      return this._leading;\n    },\n    set: function set(leading) {\n      if (this._leading !== leading) {\n        this._leading = leading;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"lineJoin\", {\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get: function get() {\n      return this._lineJoin;\n    },\n    set: function set(lineJoin) {\n      if (this._lineJoin !== lineJoin) {\n        this._lineJoin = lineJoin;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"miterLimit\", {\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode.\n     *\n     * This can reduce or increase the spikiness of rendered text.\n     */\n    get: function get() {\n      return this._miterLimit;\n    },\n    set: function set(miterLimit) {\n      if (this._miterLimit !== miterLimit) {\n        this._miterLimit = miterLimit;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"padding\", {\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get: function get() {\n      return this._padding;\n    },\n    set: function set(padding) {\n      if (this._padding !== padding) {\n        this._padding = padding;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"stroke\", {\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     */\n    get: function get() {\n      return this._stroke;\n    },\n    set: function set(stroke) {\n      // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n      //       the setter converts to string. See this thread for more details:\n      //       https://github.com/microsoft/TypeScript/issues/2521\n      var outputColor = getColor(stroke);\n\n      if (this._stroke !== outputColor) {\n        this._stroke = outputColor;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"strokeThickness\", {\n    /**\n     * A number that represents the thickness of the stroke.\n     *\n     * @default 0\n     */\n    get: function get() {\n      return this._strokeThickness;\n    },\n    set: function set(strokeThickness) {\n      if (this._strokeThickness !== strokeThickness) {\n        this._strokeThickness = strokeThickness;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"textBaseline\", {\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get: function get() {\n      return this._textBaseline;\n    },\n    set: function set(textBaseline) {\n      if (this._textBaseline !== textBaseline) {\n        this._textBaseline = textBaseline;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"trim\", {\n    /** Trim transparent borders. */\n    get: function get() {\n      return this._trim;\n    },\n    set: function set(trim) {\n      if (this._trim !== trim) {\n        this._trim = trim;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"whiteSpace\", {\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get: function get() {\n      return this._whiteSpace;\n    },\n    set: function set(whiteSpace) {\n      if (this._whiteSpace !== whiteSpace) {\n        this._whiteSpace = whiteSpace;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"wordWrap\", {\n    /** Indicates if word wrap should be used. */\n    get: function get() {\n      return this._wordWrap;\n    },\n    set: function set(wordWrap) {\n      if (this._wordWrap !== wordWrap) {\n        this._wordWrap = wordWrap;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TextStyle.prototype, \"wordWrapWidth\", {\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get: function get() {\n      return this._wordWrapWidth;\n    },\n    set: function set(wordWrapWidth) {\n      if (this._wordWrapWidth !== wordWrapWidth) {\n        this._wordWrapWidth = wordWrapWidth;\n        this.styleID++;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Generates a font style string to use for `TextMetrics.measureFont()`.\n   *\n   * @return Font style string, for passing to `TextMetrics.measureFont()`\n   */\n\n  TextStyle.prototype.toFontString = function () {\n    // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n    var fontSizeString = typeof this.fontSize === 'number' ? this.fontSize + \"px\" : this.fontSize; // Clean-up fontFamily property by quoting each font name\n    // this will support font names with spaces\n\n    var fontFamilies = this.fontFamily;\n\n    if (!Array.isArray(this.fontFamily)) {\n      fontFamilies = this.fontFamily.split(',');\n    }\n\n    for (var i = fontFamilies.length - 1; i >= 0; i--) {\n      // Trim any extra white-space\n      var fontFamily = fontFamilies[i].trim(); // Check if font already contains strings\n\n      if (!/([\\\"\\'])[^\\'\\\"]+\\1/.test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0) {\n        fontFamily = \"\\\"\" + fontFamily + \"\\\"\";\n      }\n\n      fontFamilies[i] = fontFamily;\n    }\n\n    return this.fontStyle + \" \" + this.fontVariant + \" \" + this.fontWeight + \" \" + fontSizeString + \" \" + fontFamilies.join(',');\n  };\n\n  return TextStyle;\n}();\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param color\n * @return The color as a string.\n */\n\n\nfunction getSingleColor(color) {\n  if (typeof color === 'number') {\n    return hex2string(color);\n  } else if (typeof color === 'string') {\n    if (color.indexOf('0x') === 0) {\n      color = color.replace('0x', '#');\n    }\n  }\n\n  return color;\n}\n\nfunction getColor(color) {\n  if (!Array.isArray(color)) {\n    return getSingleColor(color);\n  } else {\n    for (var i = 0; i < color.length; ++i) {\n      color[i] = getSingleColor(color[i]);\n    }\n\n    return color;\n  }\n}\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @return Do the arrays contain the same values in the same order\n */\n\n\nfunction areArraysEqual(array1, array2) {\n  if (!Array.isArray(array1) || !Array.isArray(array2)) {\n    return false;\n  }\n\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  for (var i = 0; i < array1.length; ++i) {\n    if (array1[i] !== array2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param target - Target object to copy properties into\n * @param source - Source object for the properties to copy\n * @param propertyObj - Object containing properties names we want to loop over\n */\n\n\nfunction deepCopyProperties(target, source, propertyObj) {\n  for (var prop in propertyObj) {\n    if (Array.isArray(source[prop])) {\n      target[prop] = source[prop].slice();\n    } else {\n      target[prop] = source[prop];\n    }\n  }\n}\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @memberof PIXI\n */\n\n\nvar TextMetrics =\n/** @class */\nfunction () {\n  /**\n   * @param text - the text that was measured\n   * @param style - the style that was measured\n   * @param width - the measured width of the text\n   * @param height - the measured height of the text\n   * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n   * @param lineWidths - an array of the line widths for each line matched to `lines`\n   * @param lineHeight - the measured line height for this style\n   * @param maxLineWidth - the maximum line width for all measured lines\n   * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n   */\n  function TextMetrics(text, style, width, height, lines, lineWidths, lineHeight, maxLineWidth, fontProperties) {\n    this.text = text;\n    this.style = style;\n    this.width = width;\n    this.height = height;\n    this.lines = lines;\n    this.lineWidths = lineWidths;\n    this.lineHeight = lineHeight;\n    this.maxLineWidth = maxLineWidth;\n    this.fontProperties = fontProperties;\n  }\n  /**\n   * Measures the supplied string of text and returns a Rectangle.\n   *\n   * @param text - The text to measure.\n   * @param style - The text style to use for measuring\n   * @param wordWrap - Override for if word-wrap should be applied to the text.\n   * @param canvas - optional specification of the canvas to use for measuring.\n   * @return Measured width and height of the text.\n   */\n\n\n  TextMetrics.measureText = function (text, style, wordWrap, canvas) {\n    if (canvas === void 0) {\n      canvas = TextMetrics._canvas;\n    }\n\n    wordWrap = wordWrap === undefined || wordWrap === null ? style.wordWrap : wordWrap;\n    var font = style.toFontString();\n    var fontProperties = TextMetrics.measureFont(font); // fallback in case UA disallow canvas data extraction\n    // (toDataURI, getImageData functions)\n\n    if (fontProperties.fontSize === 0) {\n      fontProperties.fontSize = style.fontSize;\n      fontProperties.ascent = style.fontSize;\n    }\n\n    var context = canvas.getContext('2d');\n    context.font = font;\n    var outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n    var lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n    var lineWidths = new Array(lines.length);\n    var maxLineWidth = 0;\n\n    for (var i = 0; i < lines.length; i++) {\n      var lineWidth = context.measureText(lines[i]).width + (lines[i].length - 1) * style.letterSpacing;\n      lineWidths[i] = lineWidth;\n      maxLineWidth = Math.max(maxLineWidth, lineWidth);\n    }\n\n    var width = maxLineWidth + style.strokeThickness;\n\n    if (style.dropShadow) {\n      width += style.dropShadowDistance;\n    }\n\n    var lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n    var height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness) + (lines.length - 1) * (lineHeight + style.leading);\n\n    if (style.dropShadow) {\n      height += style.dropShadowDistance;\n    }\n\n    return new TextMetrics(text, style, width, height, lines, lineWidths, lineHeight + style.leading, maxLineWidth, fontProperties);\n  };\n  /**\n   * Applies newlines to a string to have it optimally fit into the horizontal\n   * bounds set by the Text object's wordWrapWidth property.\n   *\n   * @param text - String to apply word wrapping to\n   * @param style - the style to use when wrapping\n   * @param canvas - optional specification of the canvas to use for measuring.\n   * @return New string with new lines applied where required\n   */\n\n\n  TextMetrics.wordWrap = function (text, style, canvas) {\n    if (canvas === void 0) {\n      canvas = TextMetrics._canvas;\n    }\n\n    var context = canvas.getContext('2d');\n    var width = 0;\n    var line = '';\n    var lines = '';\n    var cache = Object.create(null);\n    var letterSpacing = style.letterSpacing,\n        whiteSpace = style.whiteSpace; // How to handle whitespaces\n\n    var collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n    var collapseNewlines = TextMetrics.collapseNewlines(whiteSpace); // whether or not spaces may be added to the beginning of lines\n\n    var canPrependSpaces = !collapseSpaces; // There is letterSpacing after every char except the last one\n    // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n    // so for convenience the above needs to be compared to width + 1 extra letterSpace\n    // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n    // ________________________________________________\n    // And then the final space is simply no appended to each line\n\n    var wordWrapWidth = style.wordWrapWidth + letterSpacing; // break text into words, spaces and newline chars\n\n    var tokens = TextMetrics.tokenize(text);\n\n    for (var i = 0; i < tokens.length; i++) {\n      // get the word, space or newlineChar\n      var token = tokens[i]; // if word is a new line\n\n      if (TextMetrics.isNewline(token)) {\n        // keep the new line\n        if (!collapseNewlines) {\n          lines += TextMetrics.addLine(line);\n          canPrependSpaces = !collapseSpaces;\n          line = '';\n          width = 0;\n          continue;\n        } // if we should collapse new lines\n        // we simply convert it into a space\n\n\n        token = ' ';\n      } // if we should collapse repeated whitespaces\n\n\n      if (collapseSpaces) {\n        // check both this and the last tokens for spaces\n        var currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n        var lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n        if (currIsBreakingSpace && lastIsBreakingSpace) {\n          continue;\n        }\n      } // get word width from cache if possible\n\n\n      var tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context); // word is longer than desired bounds\n\n      if (tokenWidth > wordWrapWidth) {\n        // if we are not already at the beginning of a line\n        if (line !== '') {\n          // start newlines for overflow words\n          lines += TextMetrics.addLine(line);\n          line = '';\n          width = 0;\n        } // break large word over multiple lines\n\n\n        if (TextMetrics.canBreakWords(token, style.breakWords)) {\n          // break word into characters\n          var characters = TextMetrics.wordWrapSplit(token); // loop the characters\n\n          for (var j = 0; j < characters.length; j++) {\n            var char = characters[j];\n            var k = 1; // we are not at the end of the token\n\n            while (characters[j + k]) {\n              var nextChar = characters[j + k];\n              var lastChar = char[char.length - 1]; // should not split chars\n\n              if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords)) {\n                // combine chars & move forward one\n                char += nextChar;\n              } else {\n                break;\n              }\n\n              k++;\n            }\n\n            j += char.length - 1;\n            var characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n            if (characterWidth + width > wordWrapWidth) {\n              lines += TextMetrics.addLine(line);\n              canPrependSpaces = false;\n              line = '';\n              width = 0;\n            }\n\n            line += char;\n            width += characterWidth;\n          }\n        } // run word out of the bounds\n        else {\n          // if there are words in this line already\n          // finish that line and start a new one\n          if (line.length > 0) {\n            lines += TextMetrics.addLine(line);\n            line = '';\n            width = 0;\n          }\n\n          var isLastToken = i === tokens.length - 1; // give it its own line if it's not the end\n\n          lines += TextMetrics.addLine(token, !isLastToken);\n          canPrependSpaces = false;\n          line = '';\n          width = 0;\n        }\n      } // word could fit\n      else {\n        // word won't fit because of existing words\n        // start a new line\n        if (tokenWidth + width > wordWrapWidth) {\n          // if its a space we don't want it\n          canPrependSpaces = false; // add a new line\n\n          lines += TextMetrics.addLine(line); // start a new line\n\n          line = '';\n          width = 0;\n        } // don't add spaces to the beginning of lines\n\n\n        if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces) {\n          // add the word to the current line\n          line += token; // update width counter\n\n          width += tokenWidth;\n        }\n      }\n    }\n\n    lines += TextMetrics.addLine(line, false);\n    return lines;\n  };\n  /**\n   * Convienience function for logging each line added during the wordWrap method.\n   *\n   * @param line    - The line of text to add\n   * @param newLine - Add new line character to end\n   * @return A formatted line\n   */\n\n\n  TextMetrics.addLine = function (line, newLine) {\n    if (newLine === void 0) {\n      newLine = true;\n    }\n\n    line = TextMetrics.trimRight(line);\n    line = newLine ? line + \"\\n\" : line;\n    return line;\n  };\n  /**\n   * Gets & sets the widths of calculated characters in a cache object\n   *\n   * @param key            - The key\n   * @param letterSpacing  - The letter spacing\n   * @param cache          - The cache\n   * @param context        - The canvas context\n   * @return The from cache.\n   */\n\n\n  TextMetrics.getFromCache = function (key, letterSpacing, cache, context) {\n    var width = cache[key];\n\n    if (typeof width !== 'number') {\n      var spacing = key.length * letterSpacing;\n      width = context.measureText(key).width + spacing;\n      cache[key] = width;\n    }\n\n    return width;\n  };\n  /**\n   * Determines whether we should collapse breaking spaces.\n   *\n   * @param whiteSpace - The TextStyle property whiteSpace\n   * @return Should collapse\n   */\n\n\n  TextMetrics.collapseSpaces = function (whiteSpace) {\n    return whiteSpace === 'normal' || whiteSpace === 'pre-line';\n  };\n  /**\n   * Determines whether we should collapse newLine chars.\n   *\n   * @param whiteSpace - The white space\n   * @return  should collapse\n   */\n\n\n  TextMetrics.collapseNewlines = function (whiteSpace) {\n    return whiteSpace === 'normal';\n  };\n  /**\n   * Trims breaking whitespaces from string.\n   *\n   * @param  text - The text\n   * @return Trimmed string\n   */\n\n\n  TextMetrics.trimRight = function (text) {\n    if (typeof text !== 'string') {\n      return '';\n    }\n\n    for (var i = text.length - 1; i >= 0; i--) {\n      var char = text[i];\n\n      if (!TextMetrics.isBreakingSpace(char)) {\n        break;\n      }\n\n      text = text.slice(0, -1);\n    }\n\n    return text;\n  };\n  /**\n   * Determines if char is a newline.\n   *\n   * @param  char - The character\n   * @return True if newline, False otherwise.\n   */\n\n\n  TextMetrics.isNewline = function (char) {\n    if (typeof char !== 'string') {\n      return false;\n    }\n\n    return TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0;\n  };\n  /**\n   * Determines if char is a breaking whitespace.\n   *\n   * It allows one to determine whether char should be a breaking whitespace\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   *\n   * @param char     - The character\n   * @param [nextChar] - The next character\n   * @return True if whitespace, False otherwise.\n   */\n\n\n  TextMetrics.isBreakingSpace = function (char, _nextChar) {\n    if (typeof char !== 'string') {\n      return false;\n    }\n\n    return TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0;\n  };\n  /**\n   * Splits a string into words, breaking-spaces and newLine characters\n   *\n   * @param  text - The text\n   * @return  A tokenized array\n   */\n\n\n  TextMetrics.tokenize = function (text) {\n    var tokens = [];\n    var token = '';\n\n    if (typeof text !== 'string') {\n      return tokens;\n    }\n\n    for (var i = 0; i < text.length; i++) {\n      var char = text[i];\n      var nextChar = text[i + 1];\n\n      if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char)) {\n        if (token !== '') {\n          tokens.push(token);\n          token = '';\n        }\n\n        tokens.push(char);\n        continue;\n      }\n\n      token += char;\n    }\n\n    if (token !== '') {\n      tokens.push(token);\n    }\n\n    return tokens;\n  };\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to customise which words should break\n   * Examples are if the token is CJK or numbers.\n   * It must return a boolean.\n   *\n   * @param  token       - The token\n   * @param  breakWords - The style attr break words\n   * @return Whether to break word or not\n   */\n\n\n  TextMetrics.canBreakWords = function (_token, breakWords) {\n    return breakWords;\n  };\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It allows one to determine whether a pair of characters\n   * should be broken by newlines\n   * For example certain characters in CJK langs or numbers.\n   * It must return a boolean.\n   *\n   * @param  char        - The character\n   * @param  nextChar    - The next character\n   * @param  token       - The token/word the characters are from\n   * @param  index       - The index in the token of the char\n   * @param  breakWords - The style attr break words\n   * @return whether to break word or not\n   */\n\n\n  TextMetrics.canBreakChars = function (_char, _nextChar, _token, _index, _breakWords) {\n    return true;\n  };\n  /**\n   * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n   *\n   * It is called when a token (usually a word) has to be split into separate pieces\n   * in order to determine the point to break a word.\n   * It must return an array of characters.\n   *\n   * @example\n   * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n   * TextMetrics.wordWrapSplit = (token) => [...token];\n   *\n   * @param  token - The token to split\n   * @return The characters of the token\n   */\n\n\n  TextMetrics.wordWrapSplit = function (token) {\n    return token.split('');\n  };\n  /**\n   * Calculates the ascent, descent and fontSize of a given font-style\n   *\n   * @param font - String representing the style of the font\n   * @return Font properties object\n   */\n\n\n  TextMetrics.measureFont = function (font) {\n    // as this method is used for preparing assets, don't recalculate things if we don't need to\n    if (TextMetrics._fonts[font]) {\n      return TextMetrics._fonts[font];\n    }\n\n    var properties = {\n      ascent: 0,\n      descent: 0,\n      fontSize: 0\n    };\n    var canvas = TextMetrics._canvas;\n    var context = TextMetrics._context;\n    context.font = font;\n    var metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n    var width = Math.ceil(context.measureText(metricsString).width);\n    var baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n    var height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n    baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n    canvas.width = width;\n    canvas.height = height;\n    context.fillStyle = '#f00';\n    context.fillRect(0, 0, width, height);\n    context.font = font;\n    context.textBaseline = 'alphabetic';\n    context.fillStyle = '#000';\n    context.fillText(metricsString, 0, baseline);\n    var imagedata = context.getImageData(0, 0, width, height).data;\n    var pixels = imagedata.length;\n    var line = width * 4;\n    var i = 0;\n    var idx = 0;\n    var stop = false; // ascent. scan from top to bottom until we find a non red pixel\n\n    for (i = 0; i < baseline; ++i) {\n      for (var j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n\n      if (!stop) {\n        idx += line;\n      } else {\n        break;\n      }\n    }\n\n    properties.ascent = baseline - i;\n    idx = pixels - line;\n    stop = false; // descent. scan from bottom to top until we find a non red pixel\n\n    for (i = height; i > baseline; --i) {\n      for (var j = 0; j < line; j += 4) {\n        if (imagedata[idx + j] !== 255) {\n          stop = true;\n          break;\n        }\n      }\n\n      if (!stop) {\n        idx -= line;\n      } else {\n        break;\n      }\n    }\n\n    properties.descent = i - baseline;\n    properties.fontSize = properties.ascent + properties.descent;\n    TextMetrics._fonts[font] = properties;\n    return properties;\n  };\n  /**\n   * Clear font metrics in metrics cache.\n   *\n   * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n   */\n\n\n  TextMetrics.clearMetrics = function (font) {\n    if (font === void 0) {\n      font = '';\n    }\n\n    if (font) {\n      delete TextMetrics._fonts[font];\n    } else {\n      TextMetrics._fonts = {};\n    }\n  };\n\n  return TextMetrics;\n}();\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\n\nvar canvas = function () {\n  try {\n    // OffscreenCanvas2D measureText can be up to 40% faster.\n    var c = new OffscreenCanvas(0, 0);\n    var context = c.getContext('2d');\n\n    if (context && context.measureText) {\n      return c;\n    }\n\n    return document.createElement('canvas');\n  } catch (ex) {\n    return document.createElement('canvas');\n  }\n}();\n\ncanvas.width = canvas.height = 10;\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\n\nTextMetrics._canvas = canvas;\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\n\nTextMetrics._context = canvas.getContext('2d');\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\n\nTextMetrics._fonts = {};\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\n\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\n\nTextMetrics.BASELINE_SYMBOL = 'M';\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\n\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n/**\n * Height multiplier for setting height of canvas to calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name HEIGHT_MULTIPLIER\n * @type {number}\n * @default 2.00\n */\n\nTextMetrics.HEIGHT_MULTIPLIER = 2.0;\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\n\nTextMetrics._newlines = [0x000A, 0x000D];\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\n\nTextMetrics._breakingSpaces = [0x0009, 0x0020, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2008, 0x2009, 0x200A, 0x205F, 0x3000];\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n\nvar defaultDestroyOptions = {\n  texture: true,\n  children: false,\n  baseTexture: true\n};\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the text,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @memberof PIXI\n */\n\nvar Text =\n/** @class */\nfunction (_super) {\n  __extends(Text, _super);\n  /**\n   * @param text - The string that you would like the text to display\n   * @param {object|PIXI.TextStyle} [style] - The style parameters\n   * @param canvas - The canvas element for drawing text\n   */\n\n\n  function Text(text, style, canvas) {\n    var _this = this;\n\n    var ownCanvas = false;\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      ownCanvas = true;\n    }\n\n    canvas.width = 3;\n    canvas.height = 3;\n    var texture = Texture.from(canvas);\n    texture.orig = new Rectangle();\n    texture.trim = new Rectangle();\n    _this = _super.call(this, texture) || this;\n    _this._ownCanvas = ownCanvas;\n    _this.canvas = canvas;\n    _this.context = _this.canvas.getContext('2d');\n    _this._resolution = settings.RESOLUTION;\n    _this._autoResolution = true;\n    _this._text = null;\n    _this._style = null;\n    _this._styleListener = null;\n    _this._font = '';\n    _this.text = text;\n    _this.style = style;\n    _this.localStyleID = -1;\n    return _this;\n  }\n  /**\n   * Renders text to its canvas, and updates its texture.\n   *\n   * By default this is used internally to ensure the texture is correct before rendering,\n   * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n   * and then shared across multiple Sprites.\n   *\n   * @param respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n   */\n\n\n  Text.prototype.updateText = function (respectDirty) {\n    var style = this._style; // check if style has changed..\n\n    if (this.localStyleID !== style.styleID) {\n      this.dirty = true;\n      this.localStyleID = style.styleID;\n    }\n\n    if (!this.dirty && respectDirty) {\n      return;\n    }\n\n    this._font = this._style.toFontString();\n    var context = this.context;\n    var measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n    var width = measured.width;\n    var height = measured.height;\n    var lines = measured.lines;\n    var lineHeight = measured.lineHeight;\n    var lineWidths = measured.lineWidths;\n    var maxLineWidth = measured.maxLineWidth;\n    var fontProperties = measured.fontProperties;\n    this.canvas.width = Math.ceil(Math.ceil(Math.max(1, width) + style.padding * 2) * this._resolution);\n    this.canvas.height = Math.ceil(Math.ceil(Math.max(1, height) + style.padding * 2) * this._resolution);\n    context.scale(this._resolution, this._resolution);\n    context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    context.font = this._font;\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n    var linePositionX;\n    var linePositionY; // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n\n    var passesCount = style.dropShadow ? 2 : 1; // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n    // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n    //\n    // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n    // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n    // and the stroke; and fill drop shadows would appear over the top of the stroke.\n    //\n    // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n    // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n    // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n    // beneath the text, whilst also having the proper text shadow styling.\n\n    for (var i = 0; i < passesCount; ++i) {\n      var isShadowPass = style.dropShadow && i === 0; // we only want the drop shadow, so put text way off-screen\n\n      var dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + style.padding * 2) : 0;\n      var dsOffsetShadow = dsOffsetText * this._resolution;\n\n      if (isShadowPass) {\n        // On Safari, text with gradient and drop shadows together do not position correctly\n        // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n        // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n        context.fillStyle = 'black';\n        context.strokeStyle = 'black';\n        var dropShadowColor = style.dropShadowColor;\n        var rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n        var dropShadowBlur = style.dropShadowBlur * this._resolution;\n        var dropShadowDistance = style.dropShadowDistance * this._resolution;\n        context.shadowColor = \"rgba(\" + rgb[0] * 255 + \",\" + rgb[1] * 255 + \",\" + rgb[2] * 255 + \",\" + style.dropShadowAlpha + \")\";\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance + dsOffsetShadow;\n      } else {\n        // set canvas text styles\n        context.fillStyle = this._generateFillStyle(style, lines, measured); // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n\n        context.strokeStyle = style.stroke;\n        context.shadowColor = 'black';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n      }\n\n      var linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n      if (!Text.nextLineHeightBehavior || lineHeight - fontProperties.fontSize < 0) {\n        linePositionYShift = 0;\n      } // draw lines line by line\n\n\n      for (var i_1 = 0; i_1 < lines.length; i_1++) {\n        linePositionX = style.strokeThickness / 2;\n        linePositionY = style.strokeThickness / 2 + i_1 * lineHeight + fontProperties.ascent + linePositionYShift;\n\n        if (style.align === 'right') {\n          linePositionX += maxLineWidth - lineWidths[i_1];\n        } else if (style.align === 'center') {\n          linePositionX += (maxLineWidth - lineWidths[i_1]) / 2;\n        }\n\n        if (style.stroke && style.strokeThickness) {\n          this.drawLetterSpacing(lines[i_1], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText, true);\n        }\n\n        if (style.fill) {\n          this.drawLetterSpacing(lines[i_1], linePositionX + style.padding, linePositionY + style.padding - dsOffsetText);\n        }\n      }\n    }\n\n    this.updateTexture();\n  };\n  /**\n   * Render the text with letter-spacing.\n   *\n   * @param text - The text to draw\n   * @param x - Horizontal position to draw the text\n   * @param y - Vertical position to draw the text\n   * @param isStroke - Is this drawing for the outside stroke of the\n   *  text? If not, it's for the inside fill\n   */\n\n\n  Text.prototype.drawLetterSpacing = function (text, x, y, isStroke) {\n    if (isStroke === void 0) {\n      isStroke = false;\n    }\n\n    var style = this._style; // letterSpacing of 0 means normal\n\n    var letterSpacing = style.letterSpacing; // Checking that we can use moddern canvas2D api\n    // https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n    // note: this is unstable API, Chrome less 94 use a `textLetterSpacing`, newest use a letterSpacing\n    // eslint-disable-next-line max-len\n\n    var supportLetterSpacing = Text.experimentalLetterSpacing && ('letterSpacing' in CanvasRenderingContext2D.prototype || 'textLetterSpacing' in CanvasRenderingContext2D.prototype);\n\n    if (letterSpacing === 0 || supportLetterSpacing) {\n      if (supportLetterSpacing) {\n        this.context.letterSpacing = letterSpacing;\n        this.context.textLetterSpacing = letterSpacing;\n      }\n\n      if (isStroke) {\n        this.context.strokeText(text, x, y);\n      } else {\n        this.context.fillText(text, x, y);\n      }\n\n      return;\n    }\n\n    var currentPosition = x; // Using Array.from correctly splits characters whilst keeping emoji together.\n    // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n    // This also doesn't account for emoji that are multiple emoji put together to make something else.\n    // Handling all of this would require a big library itself.\n    // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n    // https://github.com/orling/grapheme-splitter\n\n    var stringArray = Array.from ? Array.from(text) : text.split('');\n    var previousWidth = this.context.measureText(text).width;\n    var currentWidth = 0;\n\n    for (var i = 0; i < stringArray.length; ++i) {\n      var currentChar = stringArray[i];\n\n      if (isStroke) {\n        this.context.strokeText(currentChar, currentPosition, y);\n      } else {\n        this.context.fillText(currentChar, currentPosition, y);\n      }\n\n      var textStr = '';\n\n      for (var j = i + 1; j < stringArray.length; ++j) {\n        textStr += stringArray[j];\n      }\n\n      currentWidth = this.context.measureText(textStr).width;\n      currentPosition += previousWidth - currentWidth + letterSpacing;\n      previousWidth = currentWidth;\n    }\n  };\n  /** Updates texture size based on canvas size. */\n\n\n  Text.prototype.updateTexture = function () {\n    var canvas = this.canvas;\n\n    if (this._style.trim) {\n      var trimmed = trimCanvas(canvas);\n\n      if (trimmed.data) {\n        canvas.width = trimmed.width;\n        canvas.height = trimmed.height;\n        this.context.putImageData(trimmed.data, 0, 0);\n      }\n    }\n\n    var texture = this._texture;\n    var style = this._style;\n    var padding = style.trim ? 0 : style.padding;\n    var baseTexture = texture.baseTexture;\n    texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n    texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n    texture.trim.x = -padding;\n    texture.trim.y = -padding;\n    texture.orig.width = texture._frame.width - padding * 2;\n    texture.orig.height = texture._frame.height - padding * 2; // call sprite onTextureUpdate to update scale if _width or _height were set\n\n    this._onTextureUpdate();\n\n    baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n    texture.updateUvs(); // Recursively updates transform of all objects from the root to this one\n\n    this._recursivePostUpdateTransform();\n\n    this.dirty = false;\n  };\n  /**\n   * Renders the object using the WebGL renderer\n   *\n   * @param renderer - The renderer\n   */\n\n\n  Text.prototype._render = function (renderer) {\n    if (this._autoResolution && this._resolution !== renderer.resolution) {\n      this._resolution = renderer.resolution;\n      this.dirty = true;\n    }\n\n    this.updateText(true);\n\n    _super.prototype._render.call(this, renderer);\n  };\n  /**\n   * Gets the local bounds of the text object.\n   *\n   * @param rect - The output rectangle.\n   * @return The bounds.\n   */\n\n\n  Text.prototype.getLocalBounds = function (rect) {\n    this.updateText(true);\n    return _super.prototype.getLocalBounds.call(this, rect);\n  };\n  /** Calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account. */\n\n\n  Text.prototype._calculateBounds = function () {\n    this.updateText(true);\n    this.calculateVertices(); // if we have already done this on THIS frame.\n\n    this._bounds.addQuad(this.vertexData);\n  };\n  /**\n   * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n   *\n   * @param style - The style.\n   * @param lines - The lines of text.\n   * @return The fill style\n   */\n\n\n  Text.prototype._generateFillStyle = function (style, lines, metrics) {\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    var fillStyle = style.fill;\n\n    if (!Array.isArray(fillStyle)) {\n      return fillStyle;\n    } else if (fillStyle.length === 1) {\n      return fillStyle[0];\n    } // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n\n\n    var gradient; // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n\n    var dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0; // should also take padding into account, padding can offset the gradient\n\n    var padding = style.padding || 0;\n    var width = this.canvas.width / this._resolution - dropShadowCorrection - padding * 2;\n    var height = this.canvas.height / this._resolution - dropShadowCorrection - padding * 2; // make a copy of the style settings, so we can manipulate them later\n\n    var fill = fillStyle.slice();\n    var fillGradientStops = style.fillGradientStops.slice(); // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n\n    if (!fillGradientStops.length) {\n      var lengthPlus1 = fill.length + 1;\n\n      for (var i = 1; i < lengthPlus1; ++i) {\n        fillGradientStops.push(i / lengthPlus1);\n      }\n    } // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n\n\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL) {\n      // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n      gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding); // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n      // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n      // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n\n      var textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n      for (var i = 0; i < lines.length; i++) {\n        var lastLineBottom = metrics.lineHeight * (i - 1) + textHeight;\n        var thisLineTop = metrics.lineHeight * i;\n        var thisLineGradientStart = thisLineTop; // Handle case where last & this line overlap\n\n        if (i > 0 && lastLineBottom > thisLineTop) {\n          thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n        }\n\n        var thisLineBottom = thisLineTop + textHeight;\n        var nextLineTop = metrics.lineHeight * (i + 1);\n        var thisLineGradientEnd = thisLineBottom; // Handle case where this & next line overlap\n\n        if (i + 1 < lines.length && nextLineTop < thisLineBottom) {\n          thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n        } // textHeight, but as a 0-1 size in global gradient stop space\n\n\n        var gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n\n        for (var j = 0; j < fill.length; j++) {\n          // 0-1 stop point for the current line, multiplied to global space afterwards\n          var lineStop = 0;\n\n          if (typeof fillGradientStops[j] === 'number') {\n            lineStop = fillGradientStops[j];\n          } else {\n            lineStop = j / fill.length;\n          }\n\n          var globalStop = Math.min(1, Math.max(0, thisLineGradientStart / height + lineStop * gradStopLineHeight)); // There's potential for floating point precision issues at the seams between gradient repeats.\n\n          globalStop = Number(globalStop.toFixed(5));\n          gradient.addColorStop(globalStop, fill[j]);\n        }\n      }\n    } else {\n      // start the gradient at the center left of the canvas, and end at the center right of the canvas\n      gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2); // can just evenly space out the gradients in this case, as multiple lines makes no difference\n      // to an even left to right gradient\n\n      var totalIterations = fill.length + 1;\n      var currentIteration = 1;\n\n      for (var i = 0; i < fill.length; i++) {\n        var stop = void 0;\n\n        if (typeof fillGradientStops[i] === 'number') {\n          stop = fillGradientStops[i];\n        } else {\n          stop = currentIteration / totalIterations;\n        }\n\n        gradient.addColorStop(stop, fill[i]);\n        currentIteration++;\n      }\n    }\n\n    return gradient;\n  };\n  /**\n   * Destroys this text object.\n   *\n   * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n   * the majority of the time the texture will not be shared with any other Sprites.\n   *\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their\n   *  destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n   */\n\n\n  Text.prototype.destroy = function (options) {\n    if (typeof options === 'boolean') {\n      options = {\n        children: options\n      };\n    }\n\n    options = Object.assign({}, defaultDestroyOptions, options);\n\n    _super.prototype.destroy.call(this, options); // set canvas width and height to 0 to workaround memory leak in Safari < 13\n    // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n\n\n    if (this._ownCanvas) {\n      this.canvas.height = this.canvas.width = 0;\n    } // make sure to reset the context and canvas.. dont want this hanging around in memory!\n\n\n    this.context = null;\n    this.canvas = null;\n    this._style = null;\n  };\n\n  Object.defineProperty(Text.prototype, \"width\", {\n    /** The width of the Text, setting this will actually modify the scale to achieve the value set. */\n    get: function get() {\n      this.updateText(true);\n      return Math.abs(this.scale.x) * this._texture.orig.width;\n    },\n    set: function set(value) {\n      this.updateText(true);\n      var s = sign(this.scale.x) || 1;\n      this.scale.x = s * value / this._texture.orig.width;\n      this._width = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"height\", {\n    /** The height of the Text, setting this will actually modify the scale to achieve the value set. */\n    get: function get() {\n      this.updateText(true);\n      return Math.abs(this.scale.y) * this._texture.orig.height;\n    },\n    set: function set(value) {\n      this.updateText(true);\n      var s = sign(this.scale.y) || 1;\n      this.scale.y = s * value / this._texture.orig.height;\n      this._height = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"style\", {\n    /**\n     * Set the style of the text.\n     *\n     * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n     */\n    get: function get() {\n      // TODO: Can't have different types for getter and setter. The getter shouldn't have the ITextStyle\n      //       since the setter creates the TextStyle. See this thread for more details:\n      //       https://github.com/microsoft/TypeScript/issues/2521\n      return this._style;\n    },\n    set: function set(style) {\n      style = style || {};\n\n      if (style instanceof TextStyle) {\n        this._style = style;\n      } else {\n        this._style = new TextStyle(style);\n      }\n\n      this.localStyleID = -1;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"text\", {\n    /** Set the copy for the text object. To split a line you can use '\\n'. */\n    get: function get() {\n      return this._text;\n    },\n    set: function set(text) {\n      text = String(text === null || text === undefined ? '' : text);\n\n      if (this._text === text) {\n        return;\n      }\n\n      this._text = text;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"resolution\", {\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     *\n     * @default 1\n     */\n    get: function get() {\n      return this._resolution;\n    },\n    set: function set(value) {\n      this._autoResolution = false;\n\n      if (this._resolution === value) {\n        return;\n      }\n\n      this._resolution = value;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * New behavior for `lineHeight` that's meant to mimic HTML text. A value of `true` will\n   * make sure the first baseline is offset by the `lineHeight` value if it is greater than `fontSize`.\n   * A value of `false` will use the legacy behavior and not change the baseline of the first line.\n   * In the next major release, we'll enable this by default.\n   */\n\n  Text.nextLineHeightBehavior = false;\n  /**\n   * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n   * lead to more accurate letter-spacing results because it does not try to manually draw\n   * each character. However, this Chrome API is experimental and may not serve all cases yet.\n   */\n\n  Text.experimentalLetterSpacing = false;\n  return Text;\n}(Sprite);\n\nexport { TEXT_GRADIENT, Text, TextMetrics, TextStyle };","map":{"version":3,"mappings":"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","names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","TEXT_GRADIENT","defaultStyle","align","breakWords","dropShadow","dropShadowAlpha","dropShadowAngle","Math","PI","dropShadowBlur","dropShadowColor","dropShadowDistance","fill","fillGradientType","LINEAR_VERTICAL","fillGradientStops","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","lineHeight","lineJoin","miterLimit","padding","stroke","strokeThickness","textBaseline","trim","whiteSpace","wordWrap","wordWrapWidth","leading","genericFontFamilies","style","styleID","reset","deepCopyProperties","TextStyle","clonedProperties","_align","_breakWords","_dropShadow","_dropShadowAlpha","_dropShadowAngle","_dropShadowBlur","_dropShadowColor","outputColor","getColor","_dropShadowDistance","_fill","_fillGradientType","_fillGradientStops","areArraysEqual","_fontFamily","_fontSize","_fontStyle","_fontVariant","_fontWeight","_letterSpacing","_lineHeight","_leading","_lineJoin","_miterLimit","_padding","_stroke","_strokeThickness","_textBaseline","_trim","_whiteSpace","_wordWrap","_wordWrapWidth","fontSizeString","fontFamilies","isArray","split","i","length","test","indexOf","join","getSingleColor","color","hex2string","replace","array1","array2","target","source","propertyObj","prop","slice","text","width","height","lines","lineWidths","maxLineWidth","fontProperties","TextMetrics","canvas","_canvas","undefined","font","toFontString","measureFont","ascent","context","getContext","outputText","lineWidth","measureText","max","line","cache","collapseSpaces","collapseNewlines","canPrependSpaces","tokens","tokenize","token","isNewline","addLine","currIsBreakingSpace","isBreakingSpace","lastIsBreakingSpace","tokenWidth","getFromCache","canBreakWords","characters","wordWrapSplit","j","char","k","nextChar","lastChar","canBreakChars","characterWidth","isLastToken","newLine","trimRight","key","spacing","_newlines","charCodeAt","_nextChar","_breakingSpaces","push","_token","_char","_index","_fonts","properties","descent","_context","metricsString","METRICS_STRING","BASELINE_SYMBOL","ceil","baseline","HEIGHT_MULTIPLIER","BASELINE_MULTIPLIER","fillStyle","fillRect","fillText","imagedata","getImageData","data","pixels","idx","stop","c","OffscreenCanvas","document","createElement","ex","defaultDestroyOptions","texture","children","baseTexture","ownCanvas","Texture","from","orig","Rectangle","_this","_ownCanvas","_resolution","settings","RESOLUTION","_autoResolution","_text","_style","_styleListener","_font","localStyleID","Text","respectDirty","dirty","measured","scale","clearRect","linePositionX","linePositionY","passesCount","isShadowPass","dsOffsetText","dsOffsetShadow","strokeStyle","rgb","hex2rgb","string2hex","shadowColor","shadowBlur","shadowOffsetX","cos","shadowOffsetY","sin","_generateFillStyle","linePositionYShift","nextLineHeightBehavior","i_1","drawLetterSpacing","updateTexture","x","y","isStroke","supportLetterSpacing","experimentalLetterSpacing","CanvasRenderingContext2D","textLetterSpacing","strokeText","currentPosition","stringArray","previousWidth","currentWidth","currentChar","textStr","trimmed","trimCanvas","putImageData","_texture","_frame","_onTextureUpdate","setRealSize","updateUvs","_recursivePostUpdateTransform","renderer","resolution","updateText","_super","_render","call","rect","getLocalBounds","calculateVertices","_bounds","addQuad","vertexData","metrics","gradient","dropShadowCorrection","lengthPlus1","unshift","createLinearGradient","textHeight","lastLineBottom","thisLineTop","thisLineGradientStart","thisLineBottom","nextLineTop","thisLineGradientEnd","gradStopLineHeight","lineStop","globalStop","min","Number","toFixed","addColorStop","totalIterations","currentIteration","options","assign","destroy","abs","value","s","sign","_width","_height","String","Sprite"],"sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/const.ts","../../src/TextStyle.ts","../../src/TextMetrics.ts","../../src/Text.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Constants that define the type of gradient on text.\n *\n * @static\n * @constant\n * @name TEXT_GRADIENT\n * @memberof PIXI\n * @type {object}\n * @property {number} LINEAR_VERTICAL Vertical gradient\n * @property {number} LINEAR_HORIZONTAL Linear gradient\n */\nexport enum TEXT_GRADIENT {\n    LINEAR_VERTICAL = 0,\n    LINEAR_HORIZONTAL = 1\n}\n","// disabling eslint for now, going to rewrite this in v5\n/* eslint-disable */\n\nimport { TEXT_GRADIENT } from './const';\nimport { hex2string } from '@pixi/utils';\n\nexport type TextStyleAlign = 'left'|'center'|'right'|'justify';\nexport type TextStyleFill = string|string[]|number|number[]|CanvasGradient|CanvasPattern;\nexport type TextStyleFontStyle = 'normal'|'italic'|'oblique';\nexport type TextStyleFontVariant = 'normal'|'small-caps';\nexport type TextStyleFontWeight = 'normal'|'bold'|'bolder'|'lighter'|'100'|'200'|'300'|'400'|'500'|'600'|'700'|'800'|'900';\nexport type TextStyleLineJoin = 'miter'|'round'|'bevel';\nexport type TextStyleTextBaseline = 'alphabetic'|'top'|'hanging'|'middle'|'ideographic'|'bottom';\nexport type TextStyleWhiteSpace = 'normal'|'pre'|'pre-line';\n\nexport interface ITextStyle {\n    align: TextStyleAlign;\n    breakWords: boolean;\n    dropShadow: boolean;\n    dropShadowAlpha: number;\n    dropShadowAngle: number;\n    dropShadowBlur: number;\n    dropShadowColor: string|number;\n    dropShadowDistance: number;\n    fill: TextStyleFill;\n    fillGradientType: TEXT_GRADIENT;\n    fillGradientStops: number[];\n    fontFamily: string | string[];\n    fontSize: number | string;\n    fontStyle: TextStyleFontStyle;\n    fontVariant: TextStyleFontVariant;\n    fontWeight: TextStyleFontWeight;\n    letterSpacing: number;\n    lineHeight: number;\n    lineJoin: TextStyleLineJoin;\n    miterLimit: number;\n    padding: number;\n    stroke: string|number;\n    strokeThickness: number;\n    textBaseline: TextStyleTextBaseline;\n    trim: boolean;\n    whiteSpace: TextStyleWhiteSpace;\n    wordWrap: boolean;\n    wordWrapWidth: number;\n    leading: number;\n}\n\nconst defaultStyle: ITextStyle = {\n    align: 'left',\n    breakWords: false,\n    dropShadow: false,\n    dropShadowAlpha: 1,\n    dropShadowAngle: Math.PI / 6,\n    dropShadowBlur: 0,\n    dropShadowColor: 'black',\n    dropShadowDistance: 5,\n    fill: 'black',\n    fillGradientType: TEXT_GRADIENT.LINEAR_VERTICAL,\n    fillGradientStops: [],\n    fontFamily: 'Arial',\n    fontSize: 26,\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    letterSpacing: 0,\n    lineHeight: 0,\n    lineJoin: 'miter',\n    miterLimit: 10,\n    padding: 0,\n    stroke: 'black',\n    strokeThickness: 0,\n    textBaseline: 'alphabetic',\n    trim: false,\n    whiteSpace: 'pre',\n    wordWrap: false,\n    wordWrapWidth: 100,\n    leading: 0,\n};\n\nconst genericFontFamilies = [\n    'serif',\n    'sans-serif',\n    'monospace',\n    'cursive',\n    'fantasy',\n    'system-ui',\n];\n\n/**\n * A TextStyle Object contains information to decorate a Text objects.\n *\n * An instance can be shared between multiple Text objects; then changing the style will update all text objects using it.\n *\n * A tool can be used to generate a text style [here](https://pixijs.io/pixi-text-style).\n *\n * @memberof PIXI\n */\nexport class TextStyle implements ITextStyle\n{\n    public styleID: number;\n\n    protected _align: TextStyleAlign;\n    protected _breakWords: boolean;\n    protected _dropShadow: boolean;\n    protected _dropShadowAlpha: number;\n    protected _dropShadowAngle: number;\n    protected _dropShadowBlur: number;\n    protected _dropShadowColor: string|number;\n    protected _dropShadowDistance: number;\n    protected _fill: TextStyleFill;\n    protected _fillGradientType: TEXT_GRADIENT;\n    protected _fillGradientStops: number[];\n    protected _fontFamily: string|string[];\n    protected _fontSize: number|string;\n    protected _fontStyle: TextStyleFontStyle;\n    protected _fontVariant: TextStyleFontVariant;\n    protected _fontWeight: TextStyleFontWeight;\n    protected _letterSpacing: number;\n    protected _lineHeight: number;\n    protected _lineJoin: TextStyleLineJoin;\n    protected _miterLimit: number;\n    protected _padding: number;\n    protected _stroke: string|number;\n    protected _strokeThickness: number;\n    protected _textBaseline: TextStyleTextBaseline;\n    protected _trim: boolean;\n    protected _whiteSpace: TextStyleWhiteSpace;\n    protected _wordWrap: boolean;\n    protected _wordWrapWidth: number;\n    protected _leading: number;\n\n    /**\n     * @param {object} [style] - The style parameters\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center' or 'right'),\n     *  does not affect single line text\n     * @param {boolean} [style.breakWords=false] - Indicates if lines can be wrapped within words, it\n     *  needs wordWrap to be set to true\n     * @param {boolean} [style.dropShadow=false] - Set a drop shadow for the text\n     * @param {number} [style.dropShadowAlpha=1] - Set alpha for the drop shadow\n     * @param {number} [style.dropShadowAngle=Math.PI/6] - Set a angle of the drop shadow\n     * @param {number} [style.dropShadowBlur=0] - Set a shadow blur radius\n     * @param {string|number} [style.dropShadowColor='black'] - A fill style to be used on the dropshadow e.g 'red', '#00FF00'\n     * @param {number} [style.dropShadowDistance=5] - Set a distance of the drop shadow\n     * @param {string|string[]|number|number[]|CanvasGradient|CanvasPattern} [style.fill='black'] - A canvas\n     *  fillstyle that will be used on the text e.g 'red', '#00FF00'. Can be an array to create a gradient\n     *  eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     * @param {number} [style.fillGradientType=PIXI.TEXT_GRADIENT.LINEAR_VERTICAL] - If fill is an array of colours\n     *  to create a gradient, this can change the type/direction of the gradient. See {@link PIXI.TEXT_GRADIENT}\n     * @param {number[]} [style.fillGradientStops] - If fill is an array of colours to create a gradient, this array can set\n     * the stop points (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     * @param {string|string[]} [style.fontFamily='Arial'] - The font family\n     * @param {number|string} [style.fontSize=26] - The font size (as a number it converts to px, but as a string,\n     *  equivalents are '26px','20pt','160%' or '1.6em')\n     * @param {string} [style.fontStyle='normal'] - The font style ('normal', 'italic' or 'oblique')\n     * @param {string} [style.fontVariant='normal'] - The font variant ('normal' or 'small-caps')\n     * @param {string} [style.fontWeight='normal'] - The font weight ('normal', 'bold', 'bolder', 'lighter' and '100',\n     *  '200', '300', '400', '500', '600', '700', '800' or '900')\n     * @param {number} [style.leading=0] - The space between lines\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters, default is 0\n     * @param {number} [style.lineHeight] - The line height, a number that represents the vertical space that a letter uses\n     * @param {string} [style.lineJoin='miter'] - The lineJoin property sets the type of corner created, it can resolve\n     *      spiked text issues. Possible values \"miter\" (creates a sharp corner), \"round\" (creates a round corner) or \"bevel\"\n     *      (creates a squared corner).\n     * @param {number} [style.miterLimit=10] - The miter limit to use when using the 'miter' lineJoin mode. This can reduce\n     *      or increase the spikiness of rendered text.\n     * @param {number} [style.padding=0] - Occasionally some fonts are cropped. Adding some padding will prevent this from\n     *     happening by adding padding to all sides of the text.\n     * @param {string|number} [style.stroke='black'] - A canvas fillstyle that will be used on the text stroke\n     *  e.g 'blue', '#FCFF00'\n     * @param {number} [style.strokeThickness=0] - A number that represents the thickness of the stroke.\n     *  Default is 0 (no stroke)\n     * @param {boolean} [style.trim=false] - Trim transparent borders\n     * @param {string} [style.textBaseline='alphabetic'] - The baseline of the text that is rendered.\n     * @param {string} [style.whiteSpace='pre'] - Determines whether newlines & spaces are collapsed or preserved \"normal\"\n     *      (collapse, collapse), \"pre\" (preserve, preserve) | \"pre-line\" (preserve, collapse). It needs wordWrap to be set to true\n     * @param {boolean} [style.wordWrap=false] - Indicates if word wrap should be used\n     * @param {number} [style.wordWrapWidth=100] - The width at which text will wrap, it needs wordWrap to be set to true\n     */\n    constructor(style?: Partial<ITextStyle>)\n    {\n        this.styleID = 0;\n\n        this.reset();\n\n        deepCopyProperties(this, style, style);\n    }\n\n    /**\n     * Creates a new TextStyle object with the same values as this one.\n     * Note that the only the properties of the object are cloned.\n     *\n     * @return New cloned TextStyle object\n     */\n    public clone(): TextStyle\n    {\n        const clonedProperties: Partial<ITextStyle> = {};\n\n        deepCopyProperties(clonedProperties, this, defaultStyle);\n\n        return new TextStyle(clonedProperties);\n    }\n\n    /** Resets all properties to the defaults specified in TextStyle.prototype._default */\n    public reset(): void\n    {\n        deepCopyProperties(this, defaultStyle, defaultStyle);\n    }\n\n    /**\n     * Alignment for multiline text ('left', 'center' or 'right'), does not affect single line text\n     *\n     * @member {string}\n     */\n    get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n    set align(align: TextStyleAlign)\n    {\n        if (this._align !== align)\n        {\n            this._align = align;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if lines can be wrapped within words, it needs wordWrap to be set to true. */\n    get breakWords(): boolean\n    {\n        return this._breakWords;\n    }\n    set breakWords(breakWords: boolean)\n    {\n        if (this._breakWords !== breakWords)\n        {\n            this._breakWords = breakWords;\n            this.styleID++;\n        }\n    }\n\n    /** Set a drop shadow for the text. */\n    get dropShadow(): boolean\n    {\n        return this._dropShadow;\n    }\n    set dropShadow(dropShadow: boolean)\n    {\n        if (this._dropShadow !== dropShadow)\n        {\n            this._dropShadow = dropShadow;\n            this.styleID++;\n        }\n    }\n\n    /** Set alpha for the drop shadow. */\n    get dropShadowAlpha(): number\n    {\n        return this._dropShadowAlpha;\n    }\n    set dropShadowAlpha(dropShadowAlpha: number)\n    {\n        if (this._dropShadowAlpha !== dropShadowAlpha)\n        {\n            this._dropShadowAlpha = dropShadowAlpha;\n            this.styleID++;\n        }\n    }\n\n    /** Set a angle of the drop shadow. */\n    get dropShadowAngle(): number\n    {\n        return this._dropShadowAngle;\n    }\n    set dropShadowAngle(dropShadowAngle: number)\n    {\n        if (this._dropShadowAngle !== dropShadowAngle)\n        {\n            this._dropShadowAngle = dropShadowAngle;\n            this.styleID++;\n        }\n    }\n\n    /** Set a shadow blur radius. */\n    get dropShadowBlur(): number\n    {\n        return this._dropShadowBlur;\n    }\n    set dropShadowBlur(dropShadowBlur: number)\n    {\n        if (this._dropShadowBlur !== dropShadowBlur)\n        {\n            this._dropShadowBlur = dropShadowBlur;\n            this.styleID++;\n        }\n    }\n\n    /** A fill style to be used on the dropshadow e.g 'red', '#00FF00'. */\n    get dropShadowColor(): number | string\n    {\n        return this._dropShadowColor;\n    }\n    set dropShadowColor(dropShadowColor: number | string)\n    {\n        const outputColor = getColor(dropShadowColor);\n        if (this._dropShadowColor !== outputColor)\n        {\n            this._dropShadowColor = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /** Set a distance of the drop shadow. */\n    get dropShadowDistance(): number\n    {\n        return this._dropShadowDistance;\n    }\n    set dropShadowDistance(dropShadowDistance: number)\n    {\n        if (this._dropShadowDistance !== dropShadowDistance)\n        {\n            this._dropShadowDistance = dropShadowDistance;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text e.g 'red', '#00FF00'.\n     *\n     * Can be an array to create a gradient eg ['#000000','#FFFFFF']\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle|MDN}\n     *\n     * @member {string|string[]|number|number[]|CanvasGradient|CanvasPattern}\n     */\n    get fill(): TextStyleFill\n    {\n        return this._fill;\n    }\n    set fill(fill: TextStyleFill)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        // TODO: Not sure if getColor works properly with CanvasGradient and/or CanvasPattern, can't pass in\n        //       without casting here.\n        const outputColor = getColor(fill as any);\n        if (this._fill !== outputColor)\n        {\n            this._fill = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this can change the type/direction of the gradient.\n     *\n     * @see PIXI.TEXT_GRADIENT\n     */\n    get fillGradientType(): TEXT_GRADIENT\n    {\n        return this._fillGradientType;\n    }\n    set fillGradientType(fillGradientType: TEXT_GRADIENT)\n    {\n        if (this._fillGradientType !== fillGradientType)\n        {\n            this._fillGradientType = fillGradientType;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * If fill is an array of colours to create a gradient, this array can set the stop points\n     * (numbers between 0 and 1) for the color, overriding the default behaviour of evenly spacing them.\n     */\n    get fillGradientStops(): number[]\n    {\n        return this._fillGradientStops;\n    }\n    set fillGradientStops(fillGradientStops: number[])\n    {\n        if (!areArraysEqual(this._fillGradientStops,fillGradientStops))\n        {\n            this._fillGradientStops = fillGradientStops;\n            this.styleID++;\n        }\n    }\n\n    /** The font family. */\n    get fontFamily(): string | string[]\n    {\n        return this._fontFamily;\n    }\n    set fontFamily(fontFamily: string | string[])\n    {\n        if (this.fontFamily !== fontFamily)\n        {\n            this._fontFamily = fontFamily;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font size\n     * (as a number it converts to px, but as a string, equivalents are '26px','20pt','160%' or '1.6em')\n     */\n    get fontSize(): number | string\n    {\n        return this._fontSize;\n    }\n    set fontSize(fontSize: number | string)\n    {\n        if (this._fontSize !== fontSize)\n        {\n            this._fontSize = fontSize;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font style\n     * ('normal', 'italic' or 'oblique')\n     *\n     * @member {string}\n     */\n    get fontStyle(): TextStyleFontStyle\n    {\n        return this._fontStyle;\n    }\n    set fontStyle(fontStyle: TextStyleFontStyle)\n    {\n        if (this._fontStyle !== fontStyle)\n        {\n            this._fontStyle = fontStyle;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font variant\n     * ('normal' or 'small-caps')\n     *\n     * @member {string}\n     */\n    get fontVariant(): TextStyleFontVariant\n    {\n        return this._fontVariant;\n    }\n    set fontVariant(fontVariant: TextStyleFontVariant)\n    {\n        if (this._fontVariant !== fontVariant)\n        {\n            this._fontVariant = fontVariant;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The font weight\n     * ('normal', 'bold', 'bolder', 'lighter' and '100', '200', '300', '400', '500', '600', '700', 800' or '900')\n     *\n     * @member {string}\n     */\n    get fontWeight(): TextStyleFontWeight\n    {\n        return this._fontWeight;\n    }\n    set fontWeight(fontWeight: TextStyleFontWeight)\n    {\n        if (this._fontWeight !== fontWeight)\n        {\n            this._fontWeight = fontWeight;\n            this.styleID++;\n        }\n    }\n\n    /** The amount of spacing between letters, default is 0. */\n    get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n    set letterSpacing(letterSpacing: number)\n    {\n        if (this._letterSpacing !== letterSpacing)\n        {\n            this._letterSpacing = letterSpacing;\n            this.styleID++;\n        }\n    }\n\n    /** The line height, a number that represents the vertical space that a letter uses. */\n    get lineHeight(): number\n    {\n        return this._lineHeight;\n    }\n    set lineHeight(lineHeight: number)\n    {\n        if (this._lineHeight !== lineHeight)\n        {\n            this._lineHeight = lineHeight;\n            this.styleID++;\n        }\n    }\n\n    /** The space between lines. */\n    get leading(): number\n    {\n        return this._leading;\n    }\n    set leading(leading: number)\n    {\n        if (this._leading !== leading)\n        {\n            this._leading = leading;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The lineJoin property sets the type of corner created, it can resolve spiked text issues.\n     * Default is 'miter' (creates a sharp corner).\n     *\n     * @member {string}\n     */\n    get lineJoin(): TextStyleLineJoin\n    {\n        return this._lineJoin;\n    }\n    set lineJoin(lineJoin: TextStyleLineJoin)\n    {\n        if (this._lineJoin !== lineJoin)\n        {\n            this._lineJoin = lineJoin;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The miter limit to use when using the 'miter' lineJoin mode.\n     *\n     * This can reduce or increase the spikiness of rendered text.\n     */\n    get miterLimit(): number\n    {\n        return this._miterLimit;\n    }\n    set miterLimit(miterLimit: number)\n    {\n        if (this._miterLimit !== miterLimit)\n        {\n            this._miterLimit = miterLimit;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Occasionally some fonts are cropped. Adding some padding will prevent this from happening\n     * by adding padding to all sides of the text.\n     */\n    get padding(): number\n    {\n        return this._padding;\n    }\n    set padding(padding: number)\n    {\n        if (this._padding !== padding)\n        {\n            this._padding = padding;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A canvas fillstyle that will be used on the text stroke\n     * e.g 'blue', '#FCFF00'\n     */\n    get stroke(): string | number\n    {\n        return this._stroke;\n    }\n    set stroke(stroke: string | number)\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const outputColor = getColor(stroke);\n        if (this._stroke !== outputColor)\n        {\n            this._stroke = outputColor;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * A number that represents the thickness of the stroke.\n     *\n     * @default 0\n     */\n    get strokeThickness(): number\n    {\n        return this._strokeThickness;\n    }\n    set strokeThickness(strokeThickness: number)\n    {\n        if (this._strokeThickness !== strokeThickness)\n        {\n            this._strokeThickness = strokeThickness;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * The baseline of the text that is rendered.\n     *\n     * @member {string}\n     */\n    get textBaseline(): TextStyleTextBaseline\n    {\n        return this._textBaseline;\n    }\n    set textBaseline(textBaseline: TextStyleTextBaseline)\n    {\n        if (this._textBaseline !== textBaseline)\n        {\n            this._textBaseline = textBaseline;\n            this.styleID++;\n        }\n    }\n\n    /** Trim transparent borders. */\n    get trim(): boolean\n    {\n        return this._trim;\n    }\n    set trim(trim: boolean)\n    {\n        if (this._trim !== trim)\n        {\n            this._trim = trim;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * How newlines and spaces should be handled.\n     * Default is 'pre' (preserve, preserve).\n     *\n     *  value       | New lines     |   Spaces\n     *  ---         | ---           |   ---\n     * 'normal'     | Collapse      |   Collapse\n     * 'pre'        | Preserve      |   Preserve\n     * 'pre-line'   | Preserve      |   Collapse\n     *\n     * @member {string}\n     */\n    get whiteSpace(): TextStyleWhiteSpace\n    {\n        return this._whiteSpace;\n    }\n    set whiteSpace(whiteSpace: TextStyleWhiteSpace)\n    {\n        if (this._whiteSpace !== whiteSpace)\n        {\n            this._whiteSpace = whiteSpace;\n            this.styleID++;\n        }\n    }\n\n    /** Indicates if word wrap should be used. */\n    get wordWrap(): boolean\n    {\n        return this._wordWrap;\n    }\n    set wordWrap(wordWrap: boolean)\n    {\n        if (this._wordWrap !== wordWrap)\n        {\n            this._wordWrap = wordWrap;\n            this.styleID++;\n        }\n    }\n\n    /** The width at which text will wrap, it needs wordWrap to be set to true. */\n    get wordWrapWidth(): number\n    {\n        return this._wordWrapWidth;\n    }\n    set wordWrapWidth(wordWrapWidth: number)\n    {\n        if (this._wordWrapWidth !== wordWrapWidth)\n        {\n            this._wordWrapWidth = wordWrapWidth;\n            this.styleID++;\n        }\n    }\n\n    /**\n     * Generates a font style string to use for `TextMetrics.measureFont()`.\n     *\n     * @return Font style string, for passing to `TextMetrics.measureFont()`\n     */\n    public toFontString(): string\n    {\n        // build canvas api font setting from individual components. Convert a numeric this.fontSize to px\n        const fontSizeString = (typeof this.fontSize === 'number') ? `${this.fontSize}px` : this.fontSize;\n\n        // Clean-up fontFamily property by quoting each font name\n        // this will support font names with spaces\n        let fontFamilies: string|string[] = this.fontFamily;\n\n        if (!Array.isArray(this.fontFamily))\n        {\n            fontFamilies = this.fontFamily.split(',');\n        }\n\n        for (let i = fontFamilies.length - 1; i >= 0; i--)\n        {\n            // Trim any extra white-space\n            let fontFamily = fontFamilies[i].trim();\n\n            // Check if font already contains strings\n            if (!(/([\\\"\\'])[^\\'\\\"]+\\1/).test(fontFamily) && genericFontFamilies.indexOf(fontFamily) < 0)\n            {\n                fontFamily = `\"${fontFamily}\"`;\n            }\n            (fontFamilies as string[])[i] = fontFamily;\n        }\n\n        return `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${fontSizeString} ${(fontFamilies as string[]).join(',')}`;\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getSingleColor(color: string|number): string\n{\n    if (typeof color === 'number')\n    {\n        return hex2string(color);\n    }\n    else if (typeof color === 'string')\n    {\n        if ( color.indexOf('0x') === 0 )\n        {\n            color = color.replace('0x', '#');\n        }\n    }\n\n    return color;\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param color\n * @return The color as a string.\n */\nfunction getColor(color: (string|number)[]): string[];\nfunction getColor(color: string|number): string;\nfunction getColor(color: string|number|(string|number)[]): string|string[]\n{\n    if (!Array.isArray(color))\n    {\n        return getSingleColor(color);\n    }\n    else\n    {\n        for (let i = 0; i < color.length; ++i)\n        {\n            color[i] = getSingleColor(color[i]);\n        }\n\n        return color as string[];\n    }\n}\n\n/**\n * Utility function to convert hexadecimal colors to strings, and simply return the color if it's a string.\n * This version can also convert array of colors\n * @private\n * @param array1 - First array to compare\n * @param array2 - Second array to compare\n * @return Do the arrays contain the same values in the same order\n */\nfunction areArraysEqual<T>(array1: T[], array2: T[]): boolean\n{\n    if (!Array.isArray(array1) || !Array.isArray(array2))\n    {\n        return false;\n    }\n\n    if (array1.length !== array2.length)\n    {\n        return false;\n    }\n\n    for (let i = 0; i < array1.length; ++i)\n    {\n        if (array1[i] !== array2[i])\n        {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Utility function to ensure that object properties are copied by value, and not by reference\n * @private\n * @param target - Target object to copy properties into\n * @param source - Source object for the properties to copy\n * @param propertyObj - Object containing properties names we want to loop over\n */\nfunction deepCopyProperties(target: Record<string, any>, source: Record<string, any>, propertyObj: Record<string, any>): void {\n    for (const prop in propertyObj) {\n        if (Array.isArray(source[prop])) {\n            target[prop] = source[prop].slice();\n        } else {\n            target[prop] = source[prop];\n        }\n    }\n}\n","import { TextStyle, TextStyleWhiteSpace } from './TextStyle';\n\ninterface IFontMetrics {\n    ascent: number;\n    descent: number;\n    fontSize: number;\n}\n\ntype CharacterWidthCache = { [key: string]: number };\n\n/**\n * The TextMetrics object represents the measurement of a block of text with a specified style.\n *\n * ```js\n * let style = new PIXI.TextStyle({fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})\n * let textMetrics = PIXI.TextMetrics.measureText('Your text', style)\n * ```\n *\n * @memberof PIXI\n */\nexport class TextMetrics\n{\n    /** The text that was measured. */\n    public text: string;\n\n    /** The style that was measured. */\n    public style: TextStyle;\n\n    /** The measured width of the text. */\n    public width: number;\n\n    /** The measured height of the text. */\n    public height: number;\n\n    /** An array of lines of the text broken by new lines and wrapping is specified in style. */\n    public lines: string[];\n\n    /** An array of the line widths for each line matched to `lines`. */\n    public lineWidths: number[];\n\n    /** The measured line height for this style. */\n    public lineHeight: number;\n\n    /** The maximum line width for all measured lines. */\n    public maxLineWidth: number;\n\n    /**\n     * The font properties object from TextMetrics.measureFont.\n     *\n     * @type {PIXI.IFontMetrics}\n     */\n    public fontProperties: IFontMetrics;\n\n    public static METRICS_STRING: string;\n    public static BASELINE_SYMBOL: string;\n    public static BASELINE_MULTIPLIER: number;\n    public static HEIGHT_MULTIPLIER: number;\n\n    // TODO: These should be protected but they're initialized outside of the class.\n    public static _canvas: HTMLCanvasElement|OffscreenCanvas;\n    public static _context: CanvasRenderingContext2D|OffscreenCanvasRenderingContext2D;\n    public static _fonts: { [font: string]: IFontMetrics };\n    public static _newlines: number[];\n    public static _breakingSpaces: number[];\n\n    /**\n     * @param text - the text that was measured\n     * @param style - the style that was measured\n     * @param width - the measured width of the text\n     * @param height - the measured height of the text\n     * @param lines - an array of the lines of text broken by new lines and wrapping if specified in style\n     * @param lineWidths - an array of the line widths for each line matched to `lines`\n     * @param lineHeight - the measured line height for this style\n     * @param maxLineWidth - the maximum line width for all measured lines\n     * @param {PIXI.IFontMetrics} fontProperties - the font properties object from TextMetrics.measureFont\n     */\n    constructor(text: string, style: TextStyle, width: number, height: number, lines: string[], lineWidths: number[],\n        lineHeight: number, maxLineWidth: number, fontProperties: IFontMetrics)\n    {\n        this.text = text;\n        this.style = style;\n        this.width = width;\n        this.height = height;\n        this.lines = lines;\n        this.lineWidths = lineWidths;\n        this.lineHeight = lineHeight;\n        this.maxLineWidth = maxLineWidth;\n        this.fontProperties = fontProperties;\n    }\n\n    /**\n     * Measures the supplied string of text and returns a Rectangle.\n     *\n     * @param text - The text to measure.\n     * @param style - The text style to use for measuring\n     * @param wordWrap - Override for if word-wrap should be applied to the text.\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @return Measured width and height of the text.\n     */\n    public static measureText(\n        text: string,\n        style: TextStyle,\n        wordWrap?: boolean,\n        canvas: HTMLCanvasElement | OffscreenCanvas = TextMetrics._canvas\n    ): TextMetrics\n    {\n        wordWrap = (wordWrap === undefined || wordWrap === null) ? style.wordWrap : wordWrap;\n        const font = style.toFontString();\n        const fontProperties = TextMetrics.measureFont(font);\n\n        // fallback in case UA disallow canvas data extraction\n        // (toDataURI, getImageData functions)\n        if (fontProperties.fontSize === 0)\n        {\n            fontProperties.fontSize = style.fontSize as number;\n            fontProperties.ascent = style.fontSize as number;\n        }\n\n        const context = canvas.getContext('2d');\n\n        context.font = font;\n\n        const outputText = wordWrap ? TextMetrics.wordWrap(text, style, canvas) : text;\n        const lines = outputText.split(/(?:\\r\\n|\\r|\\n)/);\n        const lineWidths = new Array<number>(lines.length);\n        let maxLineWidth = 0;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const lineWidth = context.measureText(lines[i]).width + ((lines[i].length - 1) * style.letterSpacing);\n\n            lineWidths[i] = lineWidth;\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n        let width = maxLineWidth + style.strokeThickness;\n\n        if (style.dropShadow)\n        {\n            width += style.dropShadowDistance;\n        }\n\n        const lineHeight = style.lineHeight || fontProperties.fontSize + style.strokeThickness;\n        let height = Math.max(lineHeight, fontProperties.fontSize + style.strokeThickness)\n            + ((lines.length - 1) * (lineHeight + style.leading));\n\n        if (style.dropShadow)\n        {\n            height += style.dropShadowDistance;\n        }\n\n        return new TextMetrics(\n            text,\n            style,\n            width,\n            height,\n            lines,\n            lineWidths,\n            lineHeight + style.leading,\n            maxLineWidth,\n            fontProperties\n        );\n    }\n\n    /**\n     * Applies newlines to a string to have it optimally fit into the horizontal\n     * bounds set by the Text object's wordWrapWidth property.\n     *\n     * @param text - String to apply word wrapping to\n     * @param style - the style to use when wrapping\n     * @param canvas - optional specification of the canvas to use for measuring.\n     * @return New string with new lines applied where required\n     */\n    private static wordWrap(\n        text: string,\n        style: TextStyle,\n        canvas: HTMLCanvasElement | OffscreenCanvas = TextMetrics._canvas\n    ): string\n    {\n        const context = canvas.getContext('2d');\n\n        let width = 0;\n        let line = '';\n        let lines = '';\n\n        const cache: CharacterWidthCache = Object.create(null);\n        const { letterSpacing, whiteSpace } = style;\n\n        // How to handle whitespaces\n        const collapseSpaces = TextMetrics.collapseSpaces(whiteSpace);\n        const collapseNewlines = TextMetrics.collapseNewlines(whiteSpace);\n\n        // whether or not spaces may be added to the beginning of lines\n        let canPrependSpaces = !collapseSpaces;\n\n        // There is letterSpacing after every char except the last one\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!\n        // so for convenience the above needs to be compared to width + 1 extra letterSpace\n        // t_h_i_s_' '_i_s_' '_a_n_' '_e_x_a_m_p_l_e_' '_!_\n        // ________________________________________________\n        // And then the final space is simply no appended to each line\n        const wordWrapWidth = style.wordWrapWidth + letterSpacing;\n\n        // break text into words, spaces and newline chars\n        const tokens = TextMetrics.tokenize(text);\n\n        for (let i = 0; i < tokens.length; i++)\n        {\n            // get the word, space or newlineChar\n            let token = tokens[i];\n\n            // if word is a new line\n            if (TextMetrics.isNewline(token))\n            {\n                // keep the new line\n                if (!collapseNewlines)\n                {\n                    lines += TextMetrics.addLine(line);\n                    canPrependSpaces = !collapseSpaces;\n                    line = '';\n                    width = 0;\n                    continue;\n                }\n\n                // if we should collapse new lines\n                // we simply convert it into a space\n                token = ' ';\n            }\n\n            // if we should collapse repeated whitespaces\n            if (collapseSpaces)\n            {\n                // check both this and the last tokens for spaces\n                const currIsBreakingSpace = TextMetrics.isBreakingSpace(token);\n                const lastIsBreakingSpace = TextMetrics.isBreakingSpace(line[line.length - 1]);\n\n                if (currIsBreakingSpace && lastIsBreakingSpace)\n                {\n                    continue;\n                }\n            }\n\n            // get word width from cache if possible\n            const tokenWidth = TextMetrics.getFromCache(token, letterSpacing, cache, context);\n\n            // word is longer than desired bounds\n            if (tokenWidth > wordWrapWidth)\n            {\n                // if we are not already at the beginning of a line\n                if (line !== '')\n                {\n                    // start newlines for overflow words\n                    lines += TextMetrics.addLine(line);\n                    line = '';\n                    width = 0;\n                }\n\n                // break large word over multiple lines\n                if (TextMetrics.canBreakWords(token, style.breakWords))\n                {\n                    // break word into characters\n                    const characters = TextMetrics.wordWrapSplit(token);\n\n                    // loop the characters\n                    for (let j = 0; j < characters.length; j++)\n                    {\n                        let char = characters[j];\n\n                        let k = 1;\n                        // we are not at the end of the token\n\n                        while (characters[j + k])\n                        {\n                            const nextChar = characters[j + k];\n                            const lastChar = char[char.length - 1];\n\n                            // should not split chars\n                            if (!TextMetrics.canBreakChars(lastChar, nextChar, token, j, style.breakWords))\n                            {\n                                // combine chars & move forward one\n                                char += nextChar;\n                            }\n                            else\n                            {\n                                break;\n                            }\n\n                            k++;\n                        }\n\n                        j += char.length - 1;\n\n                        const characterWidth = TextMetrics.getFromCache(char, letterSpacing, cache, context);\n\n                        if (characterWidth + width > wordWrapWidth)\n                        {\n                            lines += TextMetrics.addLine(line);\n                            canPrependSpaces = false;\n                            line = '';\n                            width = 0;\n                        }\n\n                        line += char;\n                        width += characterWidth;\n                    }\n                }\n\n                // run word out of the bounds\n                else\n                {\n                    // if there are words in this line already\n                    // finish that line and start a new one\n                    if (line.length > 0)\n                    {\n                        lines += TextMetrics.addLine(line);\n                        line = '';\n                        width = 0;\n                    }\n\n                    const isLastToken = i === tokens.length - 1;\n\n                    // give it its own line if it's not the end\n                    lines += TextMetrics.addLine(token, !isLastToken);\n                    canPrependSpaces = false;\n                    line = '';\n                    width = 0;\n                }\n            }\n\n            // word could fit\n            else\n            {\n                // word won't fit because of existing words\n                // start a new line\n                if (tokenWidth + width > wordWrapWidth)\n                {\n                    // if its a space we don't want it\n                    canPrependSpaces = false;\n\n                    // add a new line\n                    lines += TextMetrics.addLine(line);\n\n                    // start a new line\n                    line = '';\n                    width = 0;\n                }\n\n                // don't add spaces to the beginning of lines\n                if (line.length > 0 || !TextMetrics.isBreakingSpace(token) || canPrependSpaces)\n                {\n                    // add the word to the current line\n                    line += token;\n\n                    // update width counter\n                    width += tokenWidth;\n                }\n            }\n        }\n\n        lines += TextMetrics.addLine(line, false);\n\n        return lines;\n    }\n\n    /**\n     * Convienience function for logging each line added during the wordWrap method.\n     *\n     * @param line    - The line of text to add\n     * @param newLine - Add new line character to end\n     * @return A formatted line\n     */\n    private static addLine(line: string, newLine = true): string\n    {\n        line = TextMetrics.trimRight(line);\n\n        line = (newLine) ? `${line}\\n` : line;\n\n        return line;\n    }\n\n    /**\n     * Gets & sets the widths of calculated characters in a cache object\n     *\n     * @param key            - The key\n     * @param letterSpacing  - The letter spacing\n     * @param cache          - The cache\n     * @param context        - The canvas context\n     * @return The from cache.\n     */\n    private static getFromCache(key: string, letterSpacing: number, cache: CharacterWidthCache,\n        context: CanvasRenderingContext2D|OffscreenCanvasRenderingContext2D): number\n    {\n        let width = cache[key];\n\n        if (typeof width !== 'number')\n        {\n            const spacing = ((key.length) * letterSpacing);\n\n            width = context.measureText(key).width + spacing;\n            cache[key] = width;\n        }\n\n        return width;\n    }\n\n    /**\n     * Determines whether we should collapse breaking spaces.\n     *\n     * @param whiteSpace - The TextStyle property whiteSpace\n     * @return Should collapse\n     */\n    private static collapseSpaces(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal' || whiteSpace === 'pre-line');\n    }\n\n    /**\n     * Determines whether we should collapse newLine chars.\n     *\n     * @param whiteSpace - The white space\n     * @return  should collapse\n     */\n    private static collapseNewlines(whiteSpace: TextStyleWhiteSpace): boolean\n    {\n        return (whiteSpace === 'normal');\n    }\n\n    /**\n     * Trims breaking whitespaces from string.\n     *\n     * @param  text - The text\n     * @return Trimmed string\n     */\n    private static trimRight(text: string): string\n    {\n        if (typeof text !== 'string')\n        {\n            return '';\n        }\n\n        for (let i = text.length - 1; i >= 0; i--)\n        {\n            const char = text[i];\n\n            if (!TextMetrics.isBreakingSpace(char))\n            {\n                break;\n            }\n\n            text = text.slice(0, -1);\n        }\n\n        return text;\n    }\n\n    /**\n     * Determines if char is a newline.\n     *\n     * @param  char - The character\n     * @return True if newline, False otherwise.\n     */\n    private static isNewline(char: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._newlines.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Determines if char is a breaking whitespace.\n     *\n     * It allows one to determine whether char should be a breaking whitespace\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param char     - The character\n     * @param [nextChar] - The next character\n     * @return True if whitespace, False otherwise.\n     */\n    static isBreakingSpace(char: string, _nextChar?: string): boolean\n    {\n        if (typeof char !== 'string')\n        {\n            return false;\n        }\n\n        return (TextMetrics._breakingSpaces.indexOf(char.charCodeAt(0)) >= 0);\n    }\n\n    /**\n     * Splits a string into words, breaking-spaces and newLine characters\n     *\n     * @param  text - The text\n     * @return  A tokenized array\n     */\n    private static tokenize(text: string): string[]\n    {\n        const tokens: string[] = [];\n        let token = '';\n\n        if (typeof text !== 'string')\n        {\n            return tokens;\n        }\n\n        for (let i = 0; i < text.length; i++)\n        {\n            const char = text[i];\n            const nextChar = text[i + 1];\n\n            if (TextMetrics.isBreakingSpace(char, nextChar) || TextMetrics.isNewline(char))\n            {\n                if (token !== '')\n                {\n                    tokens.push(token);\n                    token = '';\n                }\n\n                tokens.push(char);\n\n                continue;\n            }\n\n            token += char;\n        }\n\n        if (token !== '')\n        {\n            tokens.push(token);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to customise which words should break\n     * Examples are if the token is CJK or numbers.\n     * It must return a boolean.\n     *\n     * @param  token       - The token\n     * @param  breakWords - The style attr break words\n     * @return Whether to break word or not\n     */\n    static canBreakWords(_token: string, breakWords: boolean): boolean\n    {\n        return breakWords;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It allows one to determine whether a pair of characters\n     * should be broken by newlines\n     * For example certain characters in CJK langs or numbers.\n     * It must return a boolean.\n     *\n     * @param  char        - The character\n     * @param  nextChar    - The next character\n     * @param  token       - The token/word the characters are from\n     * @param  index       - The index in the token of the char\n     * @param  breakWords - The style attr break words\n     * @return whether to break word or not\n     */\n    static canBreakChars(_char: string, _nextChar: string, _token: string, _index: number,\n        _breakWords: boolean): boolean\n    {\n        return true;\n    }\n\n    /**\n     * Overridable helper method used internally by TextMetrics, exposed to allow customizing the class's behavior.\n     *\n     * It is called when a token (usually a word) has to be split into separate pieces\n     * in order to determine the point to break a word.\n     * It must return an array of characters.\n     *\n     * @example\n     * // Correctly splits emojis, eg \"🤪🤪\" will result in two element array, each with one emoji.\n     * TextMetrics.wordWrapSplit = (token) => [...token];\n     *\n     * @param  token - The token to split\n     * @return The characters of the token\n     */\n    static wordWrapSplit(token: string): string[]\n    {\n        return token.split('');\n    }\n\n    /**\n     * Calculates the ascent, descent and fontSize of a given font-style\n     *\n     * @param font - String representing the style of the font\n     * @return Font properties object\n     */\n    public static measureFont(font: string): IFontMetrics\n    {\n        // as this method is used for preparing assets, don't recalculate things if we don't need to\n        if (TextMetrics._fonts[font])\n        {\n            return TextMetrics._fonts[font];\n        }\n\n        const properties: IFontMetrics = {\n            ascent: 0,\n            descent: 0,\n            fontSize: 0,\n        };\n\n        const canvas = TextMetrics._canvas;\n        const context = TextMetrics._context;\n\n        context.font = font;\n\n        const metricsString = TextMetrics.METRICS_STRING + TextMetrics.BASELINE_SYMBOL;\n        const width = Math.ceil(context.measureText(metricsString).width);\n        let baseline = Math.ceil(context.measureText(TextMetrics.BASELINE_SYMBOL).width);\n        const height = Math.ceil(TextMetrics.HEIGHT_MULTIPLIER * baseline);\n\n        baseline = baseline * TextMetrics.BASELINE_MULTIPLIER | 0;\n\n        canvas.width = width;\n        canvas.height = height;\n\n        context.fillStyle = '#f00';\n        context.fillRect(0, 0, width, height);\n\n        context.font = font;\n\n        context.textBaseline = 'alphabetic';\n        context.fillStyle = '#000';\n        context.fillText(metricsString, 0, baseline);\n\n        const imagedata = context.getImageData(0, 0, width, height).data;\n        const pixels = imagedata.length;\n        const line = width * 4;\n\n        let i = 0;\n        let idx = 0;\n        let stop = false;\n\n        // ascent. scan from top to bottom until we find a non red pixel\n        for (i = 0; i < baseline; ++i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n            if (!stop)\n            {\n                idx += line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.ascent = baseline - i;\n\n        idx = pixels - line;\n        stop = false;\n\n        // descent. scan from bottom to top until we find a non red pixel\n        for (i = height; i > baseline; --i)\n        {\n            for (let j = 0; j < line; j += 4)\n            {\n                if (imagedata[idx + j] !== 255)\n                {\n                    stop = true;\n                    break;\n                }\n            }\n\n            if (!stop)\n            {\n                idx -= line;\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        properties.descent = i - baseline;\n        properties.fontSize = properties.ascent + properties.descent;\n\n        TextMetrics._fonts[font] = properties;\n\n        return properties;\n    }\n\n    /**\n     * Clear font metrics in metrics cache.\n     *\n     * @param {string} [font] - font name. If font name not set then clear cache for all fonts.\n     */\n    public static clearMetrics(font = ''): void\n    {\n        if (font)\n        {\n            delete TextMetrics._fonts[font];\n        }\n        else\n        {\n            TextMetrics._fonts = {};\n        }\n    }\n}\n\n/**\n * Internal return object for {@link PIXI.TextMetrics.measureFont `TextMetrics.measureFont`}.\n *\n * @typedef {object} FontMetrics\n * @property {number} ascent - The ascent distance\n * @property {number} descent - The descent distance\n * @property {number} fontSize - Font size from ascent to descent\n * @memberof PIXI.TextMetrics\n * @private\n */\n\nconst canvas = ((): HTMLCanvasElement|OffscreenCanvas =>\n{\n    try\n    {\n        // OffscreenCanvas2D measureText can be up to 40% faster.\n        const c = new OffscreenCanvas(0, 0);\n        const context = c.getContext('2d');\n\n        if (context && context.measureText)\n        {\n            return c;\n        }\n\n        return document.createElement('canvas');\n    }\n    catch (ex)\n    {\n        return document.createElement('canvas');\n    }\n})();\n\ncanvas.width = canvas.height = 10;\n\n/**\n * Cached canvas element for measuring text\n *\n * @memberof PIXI.TextMetrics\n * @type {HTMLCanvasElement}\n * @private\n */\nTextMetrics._canvas = canvas;\n\n/**\n * Cache for context to use.\n *\n * @memberof PIXI.TextMetrics\n * @type {CanvasRenderingContext2D}\n * @private\n */\nTextMetrics._context = canvas.getContext('2d');\n\n/**\n * Cache of {@see PIXI.TextMetrics.FontMetrics} objects.\n *\n * @memberof PIXI.TextMetrics\n * @type {Object}\n * @private\n */\nTextMetrics._fonts = {};\n\n/**\n * String used for calculate font metrics.\n * These characters are all tall to help calculate the height required for text.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name METRICS_STRING\n * @type {string}\n * @default |ÉqÅ\n */\nTextMetrics.METRICS_STRING = '|ÉqÅ';\n\n/**\n * Baseline symbol for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_SYMBOL\n * @type {string}\n * @default M\n */\nTextMetrics.BASELINE_SYMBOL = 'M';\n\n/**\n * Baseline multiplier for calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name BASELINE_MULTIPLIER\n * @type {number}\n * @default 1.4\n */\nTextMetrics.BASELINE_MULTIPLIER = 1.4;\n\n/**\n * Height multiplier for setting height of canvas to calculate font metrics.\n *\n * @static\n * @memberof PIXI.TextMetrics\n * @name HEIGHT_MULTIPLIER\n * @type {number}\n * @default 2.00\n */\nTextMetrics.HEIGHT_MULTIPLIER = 2.0;\n\n/**\n * Cache of new line chars.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._newlines = [\n    0x000A, // line feed\n    0x000D, // carriage return\n];\n\n/**\n * Cache of breaking spaces.\n *\n * @memberof PIXI.TextMetrics\n * @type {number[]}\n * @private\n */\nTextMetrics._breakingSpaces = [\n    0x0009, // character tabulation\n    0x0020, // space\n    0x2000, // en quad\n    0x2001, // em quad\n    0x2002, // en space\n    0x2003, // em space\n    0x2004, // three-per-em space\n    0x2005, // four-per-em space\n    0x2006, // six-per-em space\n    0x2008, // punctuation space\n    0x2009, // thin space\n    0x200A, // hair space\n    0x205F, // medium mathematical space\n    0x3000, // ideographic space\n];\n\n/**\n * A number, or a string containing a number.\n *\n * @memberof PIXI\n * @typedef {object} IFontMetrics\n * @property {number} ascent - Font ascent\n * @property {number} descent - Font descent\n * @property {number} fontSize - Font size\n */\n","/* eslint max-depth: [2, 8] */\nimport { Sprite } from '@pixi/sprite';\nimport { Texture  } from '@pixi/core';\nimport { settings } from '@pixi/settings';\nimport { Rectangle } from '@pixi/math';\nimport { sign, trimCanvas, hex2rgb, string2hex } from '@pixi/utils';\nimport { TEXT_GRADIENT } from './const';\nimport { TextStyle } from './TextStyle';\nimport { TextMetrics } from './TextMetrics';\n\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Renderer } from '@pixi/core';\nimport type { ITextStyle } from './TextStyle';\n\nconst defaultDestroyOptions: IDestroyOptions = {\n    texture: true,\n    children: false,\n    baseTexture: true,\n};\n\ninterface ModernContext2D extends CanvasRenderingContext2D {\n   // for chrome less 94\n   textLetterSpacing?: number;\n   // for chrome greater 94\n   letterSpacing?: number;\n}\n\n/**\n * A Text Object will create a line or multiple lines of text.\n *\n * The text is created using the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API).\n *\n * The primary advantage of this class over BitmapText is that you have great control over the style of the text,\n * which you can change at runtime.\n *\n * The primary disadvantages is that each piece of text has it's own texture, which can use more memory.\n * When text changes, this texture has to be re-generated and re-uploaded to the GPU, taking up time.\n *\n * To split a line you can use '\\n' in your text string, or, on the `style` object,\n * change its `wordWrap` property to true and and give the `wordWrapWidth` property a value.\n *\n * A Text can be created directly from a string and a style object,\n * which can be generated [here](https://pixijs.io/pixi-text-style).\n *\n * ```js\n * let text = new PIXI.Text('This is a PixiJS text',{fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'});\n * ```\n *\n * @memberof PIXI\n */\nexport class Text extends Sprite\n{\n    /**\n     * New behavior for `lineHeight` that's meant to mimic HTML text. A value of `true` will\n     * make sure the first baseline is offset by the `lineHeight` value if it is greater than `fontSize`.\n     * A value of `false` will use the legacy behavior and not change the baseline of the first line.\n     * In the next major release, we'll enable this by default.\n     */\n    public static nextLineHeightBehavior = false;\n\n    /**\n     * New rendering behavior for letter-spacing which uses Chrome's new native API. This will\n     * lead to more accurate letter-spacing results because it does not try to manually draw\n     * each character. However, this Chrome API is experimental and may not serve all cases yet.\n     */\n    public static experimentalLetterSpacing = false;\n\n    /** The canvas element that everything is drawn to. */\n    public canvas: HTMLCanvasElement;\n    /** The canvas 2d context that everything is drawn with. */\n    public context: ModernContext2D;\n    public localStyleID: number;\n    public dirty: boolean;\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     *\n     * @default PIXI.settings.RESOLUTION\n     */\n    _resolution: number;\n    _autoResolution: boolean;\n\n    /**\n     * Private tracker for the current text.\n     *\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * Private tracker for the current font.\n     *\n     * @private\n     */\n    protected _font: string;\n\n    /**\n     * Private tracker for the current style.\n     *\n     * @private\n     */\n    protected _style: TextStyle;\n\n    /**\n     * Private listener to track style changes.\n     *\n     * @private\n     */\n    protected _styleListener: () => void;\n\n    /**\n     * Keep track if this Text object created it's own canvas\n     * element (`true`) or uses the constructor argument (`false`).\n     * Used to workaround a GC issues with Safari < 13 when\n     * destroying Text. See `destroy` for more info.\n     */\n    private _ownCanvas: boolean;\n\n    /**\n     * @param text - The string that you would like the text to display\n     * @param {object|PIXI.TextStyle} [style] - The style parameters\n     * @param canvas - The canvas element for drawing text\n     */\n    constructor(text: string, style?: Partial<ITextStyle>|TextStyle, canvas?: HTMLCanvasElement)\n    {\n        let ownCanvas = false;\n\n        if (!canvas)\n        {\n            canvas = document.createElement('canvas');\n            ownCanvas = true;\n        }\n\n        canvas.width = 3;\n        canvas.height = 3;\n\n        const texture = Texture.from(canvas);\n\n        texture.orig = new Rectangle();\n        texture.trim = new Rectangle();\n\n        super(texture);\n\n        this._ownCanvas = ownCanvas;\n        this.canvas = canvas;\n        this.context = this.canvas.getContext('2d');\n\n        this._resolution = settings.RESOLUTION;\n        this._autoResolution = true;\n        this._text = null;\n        this._style = null;\n        this._styleListener = null;\n        this._font = '';\n\n        this.text = text;\n        this.style = style;\n\n        this.localStyleID = -1;\n    }\n\n    /**\n     * Renders text to its canvas, and updates its texture.\n     *\n     * By default this is used internally to ensure the texture is correct before rendering,\n     * but it can be used called externally, for example from this class to 'pre-generate' the texture from a piece of text,\n     * and then shared across multiple Sprites.\n     *\n     * @param respectDirty - Whether to abort updating the text if the Text isn't dirty and the function is called.\n     */\n    public updateText(respectDirty: boolean): void\n    {\n        const style = this._style;\n\n        // check if style has changed..\n        if (this.localStyleID !== style.styleID)\n        {\n            this.dirty = true;\n            this.localStyleID = style.styleID;\n        }\n\n        if (!this.dirty && respectDirty)\n        {\n            return;\n        }\n\n        this._font = this._style.toFontString();\n\n        const context = this.context;\n        const measured = TextMetrics.measureText(this._text || ' ', this._style, this._style.wordWrap, this.canvas);\n        const width = measured.width;\n        const height = measured.height;\n        const lines = measured.lines;\n        const lineHeight = measured.lineHeight;\n        const lineWidths = measured.lineWidths;\n        const maxLineWidth = measured.maxLineWidth;\n        const fontProperties = measured.fontProperties;\n\n        this.canvas.width = Math.ceil(Math.ceil((Math.max(1, width) + (style.padding * 2))) * this._resolution);\n        this.canvas.height = Math.ceil(Math.ceil((Math.max(1, height) + (style.padding * 2))) * this._resolution);\n\n        context.scale(this._resolution, this._resolution);\n\n        context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        context.font = this._font;\n        context.lineWidth = style.strokeThickness;\n        context.textBaseline = style.textBaseline;\n        context.lineJoin = style.lineJoin;\n        context.miterLimit = style.miterLimit;\n\n        let linePositionX: number;\n        let linePositionY: number;\n\n        // require 2 passes if a shadow; the first to draw the drop shadow, the second to draw the text\n        const passesCount = style.dropShadow ? 2 : 1;\n\n        // For v4, we drew text at the colours of the drop shadow underneath the normal text. This gave the correct zIndex,\n        // but features such as alpha and shadowblur did not look right at all, since we were using actual text as a shadow.\n        //\n        // For v5.0.0, we moved over to just use the canvas API for drop shadows, which made them look much nicer and more\n        // visually please, but now because the stroke is drawn and then the fill, drop shadows would appear on both the fill\n        // and the stroke; and fill drop shadows would appear over the top of the stroke.\n        //\n        // For v5.1.1, the new route is to revert to v4 style of drawing text first to get the drop shadows underneath normal\n        // text, but instead drawing text in the correct location, we'll draw it off screen (-paddingY), and then adjust the\n        // drop shadow so only that appears on screen (+paddingY). Now we'll have the correct draw order of the shadow\n        // beneath the text, whilst also having the proper text shadow styling.\n        for (let i = 0; i < passesCount; ++i)\n        {\n            const isShadowPass = style.dropShadow && i === 0;\n            // we only want the drop shadow, so put text way off-screen\n            const dsOffsetText = isShadowPass ? Math.ceil(Math.max(1, height) + (style.padding * 2)) : 0;\n            const dsOffsetShadow = dsOffsetText * this._resolution;\n\n            if (isShadowPass)\n            {\n                // On Safari, text with gradient and drop shadows together do not position correctly\n                // if the scale of the canvas is not 1: https://bugs.webkit.org/show_bug.cgi?id=197689\n                // Therefore we'll set the styles to be a plain black whilst generating this drop shadow\n                context.fillStyle = 'black';\n                context.strokeStyle = 'black';\n\n                const dropShadowColor = style.dropShadowColor;\n                const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n                const dropShadowBlur = style.dropShadowBlur * this._resolution;\n                const dropShadowDistance = style.dropShadowDistance * this._resolution;\n\n                context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n                context.shadowBlur = dropShadowBlur;\n                context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n                context.shadowOffsetY = (Math.sin(style.dropShadowAngle) * dropShadowDistance) + dsOffsetShadow;\n            }\n            else\n            {\n                // set canvas text styles\n                context.fillStyle = this._generateFillStyle(style, lines, measured);\n                // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n                //       the setter converts to string. See this thread for more details:\n                //       https://github.com/microsoft/TypeScript/issues/2521\n                context.strokeStyle = style.stroke as string;\n\n                context.shadowColor = 'black';\n                context.shadowBlur = 0;\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n            }\n\n            let linePositionYShift = (lineHeight - fontProperties.fontSize) / 2;\n\n            if (!Text.nextLineHeightBehavior || lineHeight - fontProperties.fontSize < 0)\n            {\n                linePositionYShift = 0;\n            }\n\n            // draw lines line by line\n            for (let i = 0; i < lines.length; i++)\n            {\n                linePositionX = style.strokeThickness / 2;\n                linePositionY = ((style.strokeThickness / 2) + (i * lineHeight)) + fontProperties.ascent\n                    + linePositionYShift;\n\n                if (style.align === 'right')\n                {\n                    linePositionX += maxLineWidth - lineWidths[i];\n                }\n                else if (style.align === 'center')\n                {\n                    linePositionX += (maxLineWidth - lineWidths[i]) / 2;\n                }\n\n                if (style.stroke && style.strokeThickness)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText,\n                        true\n                    );\n                }\n\n                if (style.fill)\n                {\n                    this.drawLetterSpacing(\n                        lines[i],\n                        linePositionX + style.padding,\n                        linePositionY + style.padding - dsOffsetText\n                    );\n                }\n            }\n        }\n\n        this.updateTexture();\n    }\n\n    /**\n     * Render the text with letter-spacing.\n     *\n     * @param text - The text to draw\n     * @param x - Horizontal position to draw the text\n     * @param y - Vertical position to draw the text\n     * @param isStroke - Is this drawing for the outside stroke of the\n     *  text? If not, it's for the inside fill\n     */\n    private drawLetterSpacing(text: string, x: number, y: number, isStroke = false): void\n    {\n        const style = this._style;\n\n        // letterSpacing of 0 means normal\n        const letterSpacing = style.letterSpacing;\n\n        // Checking that we can use moddern canvas2D api\n        // https://developer.chrome.com/origintrials/#/view_trial/3585991203293757441\n        // note: this is unstable API, Chrome less 94 use a `textLetterSpacing`, newest use a letterSpacing\n        // eslint-disable-next-line max-len\n        const supportLetterSpacing = Text.experimentalLetterSpacing\n            && ('letterSpacing' in CanvasRenderingContext2D.prototype\n                || 'textLetterSpacing' in CanvasRenderingContext2D.prototype);\n\n        if (letterSpacing === 0 || supportLetterSpacing)\n        {\n            if (supportLetterSpacing)\n            {\n                this.context.letterSpacing = letterSpacing;\n                this.context.textLetterSpacing = letterSpacing;\n            }\n\n            if (isStroke)\n            {\n                this.context.strokeText(text, x, y);\n            }\n            else\n            {\n                this.context.fillText(text, x, y);\n            }\n\n            return;\n        }\n\n        let currentPosition = x;\n\n        // Using Array.from correctly splits characters whilst keeping emoji together.\n        // This is not supported on IE as it requires ES6, so regular text splitting occurs.\n        // This also doesn't account for emoji that are multiple emoji put together to make something else.\n        // Handling all of this would require a big library itself.\n        // https://medium.com/@giltayar/iterating-over-emoji-characters-the-es6-way-f06e4589516\n        // https://github.com/orling/grapheme-splitter\n        const stringArray = Array.from ? Array.from(text) : text.split('');\n        let previousWidth = this.context.measureText(text).width;\n        let currentWidth = 0;\n\n        for (let i = 0; i < stringArray.length; ++i)\n        {\n            const currentChar = stringArray[i];\n\n            if (isStroke)\n            {\n                this.context.strokeText(currentChar, currentPosition, y);\n            }\n            else\n            {\n                this.context.fillText(currentChar, currentPosition, y);\n            }\n            let textStr = '';\n\n            for (let j = i + 1; j < stringArray.length; ++j)\n            {\n                textStr += stringArray[j];\n            }\n            currentWidth = this.context.measureText(textStr).width;\n            currentPosition += previousWidth - currentWidth + letterSpacing;\n            previousWidth = currentWidth;\n        }\n    }\n\n    /** Updates texture size based on canvas size. */\n    private updateTexture(): void\n    {\n        const canvas = this.canvas;\n\n        if (this._style.trim)\n        {\n            const trimmed = trimCanvas(canvas);\n\n            if (trimmed.data)\n            {\n                canvas.width = trimmed.width;\n                canvas.height = trimmed.height;\n                this.context.putImageData(trimmed.data, 0, 0);\n            }\n        }\n\n        const texture = this._texture;\n        const style = this._style;\n        const padding = style.trim ? 0 : style.padding;\n        const baseTexture = texture.baseTexture;\n\n        texture.trim.width = texture._frame.width = canvas.width / this._resolution;\n        texture.trim.height = texture._frame.height = canvas.height / this._resolution;\n        texture.trim.x = -padding;\n        texture.trim.y = -padding;\n\n        texture.orig.width = texture._frame.width - (padding * 2);\n        texture.orig.height = texture._frame.height - (padding * 2);\n\n        // call sprite onTextureUpdate to update scale if _width or _height were set\n        this._onTextureUpdate();\n\n        baseTexture.setRealSize(canvas.width, canvas.height, this._resolution);\n\n        texture.updateUvs();\n\n        // Recursively updates transform of all objects from the root to this one\n        this._recursivePostUpdateTransform();\n\n        this.dirty = false;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        if (this._autoResolution && this._resolution !== renderer.resolution)\n        {\n            this._resolution = renderer.resolution;\n            this.dirty = true;\n        }\n\n        this.updateText(true);\n\n        super._render(renderer);\n    }\n\n    /**\n     * Gets the local bounds of the text object.\n     *\n     * @param rect - The output rectangle.\n     * @return The bounds.\n     */\n    public getLocalBounds(rect: Rectangle): Rectangle\n    {\n        this.updateText(true);\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /** Calculates the bounds of the Text as a rectangle. The bounds calculation takes the worldTransform into account. */\n    protected _calculateBounds(): void\n    {\n        this.updateText(true);\n        this.calculateVertices();\n        // if we have already done this on THIS frame.\n        this._bounds.addQuad(this.vertexData);\n    }\n\n    /**\n     * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n     *\n     * @param style - The style.\n     * @param lines - The lines of text.\n     * @return The fill style\n     */\n    private _generateFillStyle(style: TextStyle, lines: string[], metrics: TextMetrics): string|CanvasGradient|CanvasPattern\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n        //       the setter converts to string. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        const fillStyle: string|string[]|CanvasGradient|CanvasPattern = style.fill as any;\n\n        if (!Array.isArray(fillStyle))\n        {\n            return fillStyle;\n        }\n        else if (fillStyle.length === 1)\n        {\n            return fillStyle[0];\n        }\n\n        // the gradient will be evenly spaced out according to how large the array is.\n        // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n        let gradient: string[]|CanvasGradient;\n\n        // a dropshadow will enlarge the canvas and result in the gradient being\n        // generated with the incorrect dimensions\n        const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n        // should also take padding into account, padding can offset the gradient\n        const padding = style.padding || 0;\n\n        const width = (this.canvas.width / this._resolution) - dropShadowCorrection - (padding * 2);\n        const height = (this.canvas.height / this._resolution) - dropShadowCorrection - (padding * 2);\n\n        // make a copy of the style settings, so we can manipulate them later\n        const fill = fillStyle.slice();\n        const fillGradientStops = style.fillGradientStops.slice();\n\n        // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n        if (!fillGradientStops.length)\n        {\n            const lengthPlus1 = fill.length + 1;\n\n            for (let i = 1; i < lengthPlus1; ++i)\n            {\n                fillGradientStops.push(i / lengthPlus1);\n            }\n        }\n\n        // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n        // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n        fill.unshift(fillStyle[0]);\n        fillGradientStops.unshift(0);\n\n        fill.push(fillStyle[fillStyle.length - 1]);\n        fillGradientStops.push(1);\n\n        if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n        {\n            // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n            gradient = this.context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n            // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n            // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n            // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n            const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n            for (let i = 0; i < lines.length; i++)\n            {\n                const lastLineBottom = (metrics.lineHeight * (i - 1)) + textHeight;\n                const thisLineTop = metrics.lineHeight * i;\n                let thisLineGradientStart = thisLineTop;\n\n                // Handle case where last & this line overlap\n                if (i > 0 && lastLineBottom > thisLineTop)\n                {\n                    thisLineGradientStart = (thisLineTop + lastLineBottom) / 2;\n                }\n\n                const thisLineBottom = thisLineTop + textHeight;\n                const nextLineTop = metrics.lineHeight * (i + 1);\n                let thisLineGradientEnd = thisLineBottom;\n\n                // Handle case where this & next line overlap\n                if (i + 1 < lines.length && nextLineTop < thisLineBottom)\n                {\n                    thisLineGradientEnd = (thisLineBottom + nextLineTop) / 2;\n                }\n\n                // textHeight, but as a 0-1 size in global gradient stop space\n                const gradStopLineHeight = (thisLineGradientEnd - thisLineGradientStart) / height;\n\n                for (let j = 0; j < fill.length; j++)\n                {\n                    // 0-1 stop point for the current line, multiplied to global space afterwards\n                    let lineStop = 0;\n\n                    if (typeof fillGradientStops[j] === 'number')\n                    {\n                        lineStop = fillGradientStops[j];\n                    }\n                    else\n                    {\n                        lineStop = j / fill.length;\n                    }\n\n                    let globalStop = Math.min(1, Math.max(0,\n                        (thisLineGradientStart / height) + (lineStop * gradStopLineHeight)));\n\n                    // There's potential for floating point precision issues at the seams between gradient repeats.\n                    globalStop = Number(globalStop.toFixed(5));\n                    gradient.addColorStop(globalStop, fill[j]);\n                }\n            }\n        }\n        else\n        {\n            // start the gradient at the center left of the canvas, and end at the center right of the canvas\n            gradient = this.context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n            // can just evenly space out the gradients in this case, as multiple lines makes no difference\n            // to an even left to right gradient\n            const totalIterations = fill.length + 1;\n            let currentIteration = 1;\n\n            for (let i = 0; i < fill.length; i++)\n            {\n                let stop: number;\n\n                if (typeof fillGradientStops[i] === 'number')\n                {\n                    stop = fillGradientStops[i];\n                }\n                else\n                {\n                    stop = currentIteration / totalIterations;\n                }\n                gradient.addColorStop(stop, fill[i]);\n                currentIteration++;\n            }\n        }\n\n        return gradient;\n    }\n\n    /**\n     * Destroys this text object.\n     *\n     * Note* Unlike a Sprite, a Text object will automatically destroy its baseTexture and texture as\n     * the majority of the time the texture will not be shared with any other Sprites.\n     *\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=true] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=true] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        if (typeof options === 'boolean')\n        {\n            options = { children: options };\n        }\n\n        options = Object.assign({}, defaultDestroyOptions, options);\n\n        super.destroy(options);\n\n        // set canvas width and height to 0 to workaround memory leak in Safari < 13\n        // https://stackoverflow.com/questions/52532614/total-canvas-memory-use-exceeds-the-maximum-limit-safari-12\n        if (this._ownCanvas)\n        {\n            this.canvas.height = this.canvas.width = 0;\n        }\n\n        // make sure to reset the context and canvas.. dont want this hanging around in memory!\n        this.context = null;\n        this.canvas = null;\n\n        this._style = null;\n    }\n\n    /** The width of the Text, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the Text, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        this.updateText(true);\n\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        this.updateText(true);\n\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * Set the style of the text.\n     *\n     * Set up an event listener to listen for changes on the style object and mark the text as dirty.\n     */\n    get style(): TextStyle|Partial<ITextStyle>\n    {\n        // TODO: Can't have different types for getter and setter. The getter shouldn't have the ITextStyle\n        //       since the setter creates the TextStyle. See this thread for more details:\n        //       https://github.com/microsoft/TypeScript/issues/2521\n        return this._style;\n    }\n\n    set style(style: TextStyle|Partial<ITextStyle>)\n    {\n        style = style || {};\n\n        if (style instanceof TextStyle)\n        {\n            this._style = style;\n        }\n        else\n        {\n            this._style = new TextStyle(style);\n        }\n\n        this.localStyleID = -1;\n        this.dirty = true;\n    }\n\n    /** Set the copy for the text object. To split a line you can use '\\n'. */\n    get text(): string\n    {\n        return this._text;\n    }\n\n    set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The resolution / device pixel ratio of the canvas.\n     *\n     * This is set to automatically match the renderer resolution by default, but can be overridden by setting manually.\n     *\n     * @default 1\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._autoResolution = false;\n\n        if (this._resolution === value)\n        {\n            return;\n        }\n\n        this._resolution = value;\n        this.dirty = true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}