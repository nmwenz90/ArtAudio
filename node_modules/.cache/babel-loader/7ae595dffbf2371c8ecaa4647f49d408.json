{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\n\nexport var GrainPlayer = /*#__PURE__*/function (_Source) {\n  _inherits(GrainPlayer, _Source);\n\n  var _super = _createSuper(GrainPlayer);\n\n  function GrainPlayer() {\n    var _this;\n\n    _classCallCheck(this, GrainPlayer);\n\n    _this = _super.call(this, optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"GrainPlayer\";\n    /**\n     * Internal loopStart value\n     */\n\n    _this._loopStart = 0;\n    /**\n     * Internal loopStart value\n     */\n\n    _this._loopEnd = 0;\n    /**\n     * All of the currently playing BufferSources\n     */\n\n    _this._activeSources = [];\n    var options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this.buffer = new ToneAudioBuffer({\n      onload: options.onload,\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    _this._clock = new Clock({\n      context: _this.context,\n      callback: _this._tick.bind(_assertThisInitialized(_this)),\n      frequency: 1 / options.grainSize\n    });\n    _this._playbackRate = options.playbackRate;\n    _this._grainSize = options.grainSize;\n    _this._overlap = options.overlap;\n    _this.detune = options.detune; // setup\n\n    _this.overlap = options.overlap;\n    _this.loop = options.loop;\n    _this.playbackRate = options.playbackRate;\n    _this.grainSize = options.grainSize;\n    _this.loopStart = options.loopStart;\n    _this.loopEnd = options.loopEnd;\n    _this.reverse = options.reverse;\n\n    _this._clock.on(\"stop\", _this._onstop.bind(_assertThisInitialized(_this)));\n\n    return _this;\n  }\n\n  _createClass(GrainPlayer, [{\n    key: \"_start\",\n    value:\n    /**\n     * Internal start method\n     */\n    function _start(time, offset, duration) {\n      offset = defaultArg(offset, 0);\n      offset = this.toSeconds(offset);\n      time = this.toSeconds(time);\n\n      var grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\n      this._clock.start(time, offset / grainSize);\n\n      if (duration) {\n        this.stop(time + this.toSeconds(duration));\n      }\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n\n  }, {\n    key: \"restart\",\n    value: function restart(time, offset, duration) {\n      _get(_getPrototypeOf(GrainPlayer.prototype), \"restart\", this).call(this, time, offset, duration);\n\n      return this;\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time, offset, duration) {\n      this._stop(time);\n\n      this._start(time, offset, duration);\n    }\n    /**\n     * Internal stop method\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      this._clock.stop(time);\n    }\n    /**\n     * Invoked when the clock is stopped\n     */\n\n  }, {\n    key: \"_onstop\",\n    value: function _onstop(time) {\n      // stop the players\n      this._activeSources.forEach(function (source) {\n        source.fadeOut = 0;\n        source.stop(time);\n      });\n\n      this.onstop(this);\n    }\n    /**\n     * Invoked on each clock tick. scheduled a new grain at this time.\n     */\n\n  }, {\n    key: \"_tick\",\n    value: function _tick(time) {\n      var _this2 = this;\n\n      // check if it should stop looping\n      var ticks = this._clock.getTicksAtTime(time);\n\n      var offset = ticks * this._grainSize;\n      this.log(\"offset\", offset);\n\n      if (!this.loop && offset > this.buffer.duration) {\n        this.stop(time);\n        return;\n      } // at the beginning of the file, the fade in should be 0\n\n\n      var fadeIn = offset < this._overlap ? 0 : this._overlap; // create a buffer source\n\n      var source = new ToneBufferSource({\n        context: this.context,\n        url: this.buffer,\n        fadeIn: fadeIn,\n        fadeOut: this._overlap,\n        loop: this.loop,\n        loopStart: this._loopStart,\n        loopEnd: this._loopEnd,\n        // compute the playbackRate based on the detune\n        playbackRate: intervalToFrequencyRatio(this.detune / 100)\n      }).connect(this.output);\n      source.start(time, this._grainSize * ticks);\n      source.stop(time + this._grainSize / this.playbackRate); // add it to the active sources\n\n      this._activeSources.push(source); // remove it when it's done\n\n\n      source.onended = function () {\n        var index = _this2._activeSources.indexOf(source);\n\n        if (index !== -1) {\n          _this2._activeSources.splice(index, 1);\n        }\n      };\n    }\n    /**\n     * The playback rate of the sample\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      assertRange(rate, 0.001);\n      this._playbackRate = rate;\n      this.grainSize = this._grainSize;\n    }\n    /**\n     * The loop start time.\n     */\n\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return this._loopStart;\n    },\n    set: function set(time) {\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(time), 0, this.buffer.duration);\n      }\n\n      this._loopStart = this.toSeconds(time);\n    }\n    /**\n     * The loop end time.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return this._loopEnd;\n    },\n    set: function set(time) {\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(time), 0, this.buffer.duration);\n      }\n\n      this._loopEnd = this.toSeconds(time);\n    }\n    /**\n     * The direction the buffer should play in\n     */\n\n  }, {\n    key: \"reverse\",\n    get: function get() {\n      return this.buffer.reverse;\n    },\n    set: function set(rev) {\n      this.buffer.reverse = rev;\n    }\n    /**\n     * The size of each chunk of audio that the\n     * buffer is chopped into and played back at.\n     */\n\n  }, {\n    key: \"grainSize\",\n    get: function get() {\n      return this._grainSize;\n    },\n    set: function set(size) {\n      this._grainSize = this.toSeconds(size);\n\n      this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n    }\n    /**\n     * The duration of the cross-fade between successive grains.\n     */\n\n  }, {\n    key: \"overlap\",\n    get: function get() {\n      return this._overlap;\n    },\n    set: function set(time) {\n      var computedTime = this.toSeconds(time);\n      assertRange(computedTime, 0);\n      this._overlap = computedTime;\n    }\n    /**\n     * If all the buffer is loaded\n     */\n\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this.buffer.loaded;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(GrainPlayer.prototype), \"dispose\", this).call(this);\n\n      this.buffer.dispose();\n\n      this._clock.dispose();\n\n      this._activeSources.forEach(function (source) {\n        return source.dispose();\n      });\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        onload: noOp,\n        onerror: noOp,\n        overlap: 0.1,\n        grainSize: 0.2,\n        playbackRate: 1,\n        detune: 0,\n        loop: false,\n        loopStart: 0,\n        loopEnd: 0,\n        reverse: false\n      });\n    }\n  }]);\n\n  return GrainPlayer;\n}(Source);","map":{"version":3,"mappings":"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","names":["Source","noOp","ToneAudioBuffer","defaultArg","optionsFromArguments","Clock","ToneBufferSource","intervalToFrequencyRatio","assertRange","GrainPlayer","getDefaults","arguments","options","buffer","onload","onerror","reverse","url","_clock","context","callback","_tick","bind","frequency","grainSize","_playbackRate","playbackRate","_grainSize","_overlap","overlap","detune","loop","loopStart","loopEnd","on","_onstop","time","offset","duration","toSeconds","getValueAtTime","start","stop","_stop","_start","_activeSources","forEach","source","fadeOut","onstop","ticks","getTicksAtTime","log","fadeIn","_loopStart","_loopEnd","connect","output","push","onended","index","indexOf","splice","rate","loaded","rev","size","setValueAtTime","now","computedTime","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/source/buffer/GrainPlayer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}