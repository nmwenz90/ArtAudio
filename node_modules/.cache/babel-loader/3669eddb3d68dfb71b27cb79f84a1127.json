{"ast":null,"code":"import { AutomationEventList } from 'automation-events';\nexport var createAudioParamFactory = function createAudioParamFactory(addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible) {\n  return function (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam) {\n    var maxValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var minValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var automationEventList = new AutomationEventList(nativeAudioParam.defaultValue);\n    var audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n    var audioParam = {\n      get defaultValue() {\n        return nativeAudioParam.defaultValue;\n      },\n\n      get maxValue() {\n        return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n      },\n\n      get minValue() {\n        return minValue === null ? nativeAudioParam.minValue : minValue;\n      },\n\n      get value() {\n        return nativeAudioParam.value;\n      },\n\n      set value(value) {\n        nativeAudioParam.value = value; // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n\n        audioParam.setValueAtTime(value, audioNode.context.currentTime);\n      },\n\n      cancelAndHoldAtTime: function cancelAndHoldAtTime(cancelTime) {\n        // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().\n        if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n        } else {\n          var previousLastEvent = Array.from(automationEventList).pop();\n\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n          var currentLastEvent = Array.from(automationEventList).pop();\n          nativeAudioParam.cancelScheduledValues(cancelTime);\n\n          if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n            if (currentLastEvent.type === 'exponentialRampToValue') {\n              nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'linearRampToValue') {\n              nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n            } else if (currentLastEvent.type === 'setValue') {\n              nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n            } else if (currentLastEvent.type === 'setValueCurve') {\n              nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n            }\n          }\n        }\n\n        return audioParam;\n      },\n      cancelScheduledValues: function cancelScheduledValues(cancelTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n        nativeAudioParam.cancelScheduledValues(cancelTime);\n        return audioParam;\n      },\n      exponentialRampToValueAtTime: function exponentialRampToValueAtTime(value, endTime) {\n        // Bug #45: Safari does not throw an error yet.\n        if (value === 0) {\n          throw new RangeError();\n        } // Bug #187: Safari does not throw an error yet.\n\n\n        if (!Number.isFinite(endTime) || endTime < 0) {\n          throw new RangeError();\n        }\n\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n      linearRampToValueAtTime: function linearRampToValueAtTime(value, endTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n        nativeAudioParam.linearRampToValueAtTime(value, endTime);\n        return audioParam;\n      },\n      setTargetAtTime: function setTargetAtTime(target, startTime, timeConstant) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n        nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n        return audioParam;\n      },\n      setValueAtTime: function setValueAtTime(value, startTime) {\n        if (audioParamRenderer === null) {\n          automationEventList.flush(audioNode.context.currentTime);\n        }\n\n        automationEventList.add(createSetValueAutomationEvent(value, startTime));\n        nativeAudioParam.setValueAtTime(value, startTime);\n        return audioParam;\n      },\n      setValueCurveAtTime: function setValueCurveAtTime(values, startTime, duration) {\n        // Bug 183: Safari only accepts a Float32Array.\n        var convertedValues = values instanceof Float32Array ? values : new Float32Array(values);\n        /*\n         * Bug #152: Safari does not correctly interpolate the values of the curve.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the\n         * existence of the webkitAudioContext is used as a workaround here.\n         */\n\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n          var endTime = startTime + duration;\n          var sampleRate = audioNode.context.sampleRate;\n          var firstSample = Math.ceil(startTime * sampleRate);\n          var lastSample = Math.floor(endTime * sampleRate);\n          var numberOfInterpolatedValues = lastSample - firstSample;\n          var interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n\n          for (var i = 0; i < numberOfInterpolatedValues; i += 1) {\n            var theoreticIndex = (convertedValues.length - 1) / duration * ((firstSample + i) / sampleRate - startTime);\n            var lowerIndex = Math.floor(theoreticIndex);\n            var upperIndex = Math.ceil(theoreticIndex);\n            interpolatedValues[i] = lowerIndex === upperIndex ? convertedValues[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];\n          }\n\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n          var timeOfLastSample = lastSample / sampleRate;\n\n          if (timeOfLastSample < endTime) {\n            setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n          }\n\n          setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);\n        } else {\n          if (audioParamRenderer === null) {\n            automationEventList.flush(audioNode.context.currentTime);\n          }\n\n          automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));\n          nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);\n        }\n\n        return audioParam;\n      }\n    };\n    audioParamStore.set(audioParam, nativeAudioParam);\n    audioParamAudioNodeStore.set(audioParam, audioNode);\n    addAudioParamConnections(audioParam, audioParamRenderer);\n    return audioParam;\n  };\n};","map":{"version":3,"mappings":"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","names":["AutomationEventList","createAudioParamFactory","addAudioParamConnections","audioParamAudioNodeStore","audioParamStore","createAudioParamRenderer","createCancelAndHoldAutomationEvent","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","createSetValueAutomationEvent","createSetValueCurveAutomationEvent","nativeAudioContextConstructor","setValueAtTimeUntilPossible","audioNode","isAudioParamOfOfflineAudioContext","nativeAudioParam","maxValue","minValue","automationEventList","defaultValue","audioParamRenderer","audioParam","value","setValueAtTime","context","currentTime","cancelAndHoldAtTime","cancelTime","flush","add","previousLastEvent","Array","from","pop","currentLastEvent","cancelScheduledValues","undefined","type","exponentialRampToValueAtTime","endTime","linearRampToValueAtTime","startTime","setValueCurveAtTime","values","duration","RangeError","Number","isFinite","setTargetAtTime","target","timeConstant","convertedValues","Float32Array","name","sampleRate","firstSample","Math","ceil","lastSample","floor","numberOfInterpolatedValues","interpolatedValues","i","theoreticIndex","length","lowerIndex","upperIndex","timeOfLastSample","set"],"sourceRoot":"","sources":["../../../src/factories/audio-param-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}