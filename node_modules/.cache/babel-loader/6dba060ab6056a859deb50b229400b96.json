{"ast":null,"code":"/*!\n * @pixi/mesh - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/mesh is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { State, Program, TextureMatrix, Shader, Buffer, Geometry } from '@pixi/core';\nimport { Point, Polygon, Matrix } from '@pixi/math';\nimport { DRAW_MODES, TYPES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { premultiplyTintToRgba } from '@pixi/utils';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @memberof PIXI\n */\n\n\nvar MeshBatchUvs =\n/** @class */\nfunction () {\n  /**\n   * @param uvBuffer - Buffer with normalized uv's\n   * @param uvMatrix - Material UV matrix\n   */\n  function MeshBatchUvs(uvBuffer, uvMatrix) {\n    this.uvBuffer = uvBuffer;\n    this.uvMatrix = uvMatrix;\n    this.data = null;\n    this._bufferUpdateId = -1;\n    this._textureUpdateId = -1;\n    this._updateID = 0;\n  }\n  /**\n   * Updates\n   *\n   * @param forceUpdate - force the update\n   */\n\n\n  MeshBatchUvs.prototype.update = function (forceUpdate) {\n    if (!forceUpdate && this._bufferUpdateId === this.uvBuffer._updateID && this._textureUpdateId === this.uvMatrix._updateID) {\n      return;\n    }\n\n    this._bufferUpdateId = this.uvBuffer._updateID;\n    this._textureUpdateId = this.uvMatrix._updateID;\n    var data = this.uvBuffer.data;\n\n    if (!this.data || this.data.length !== data.length) {\n      this.data = new Float32Array(data.length);\n    }\n\n    this.uvMatrix.multiplyUvs(data, this.data);\n    this._updateID++;\n  };\n\n  return MeshBatchUvs;\n}();\n\nvar tempPoint = new Point();\nvar tempPolygon = new Polygon();\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make your life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @memberof PIXI\n */\n\nvar Mesh =\n/** @class */\nfunction (_super) {\n  __extends(Mesh, _super);\n  /**\n   * @param geometry - The geometry the mesh will use.\n   * @param {PIXI.MeshMaterial} shader - The shader the mesh will use.\n   * @param state - The state that the WebGL context is required to be in to render the mesh\n   *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n   * @param drawMode - The drawMode, can be any of the {@link PIXI.DRAW_MODES} constants.\n   */\n\n\n  function Mesh(geometry, shader, state, drawMode) {\n    if (drawMode === void 0) {\n      drawMode = DRAW_MODES.TRIANGLES;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.geometry = geometry;\n    _this.shader = shader;\n    _this.state = state || State.for2d();\n    _this.drawMode = drawMode;\n    _this.start = 0;\n    _this.size = 0;\n    _this.uvs = null;\n    _this.indices = null;\n    _this.vertexData = new Float32Array(1);\n    _this.vertexDirty = -1;\n    _this._transformID = -1;\n    _this._roundPixels = settings.ROUND_PIXELS;\n    _this.batchUvs = null;\n    return _this;\n  }\n\n  Object.defineProperty(Mesh.prototype, \"geometry\", {\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh objects.\n     */\n    get: function get() {\n      return this._geometry;\n    },\n    set: function set(value) {\n      if (this._geometry === value) {\n        return;\n      }\n\n      if (this._geometry) {\n        this._geometry.refCount--;\n\n        if (this._geometry.refCount === 0) {\n          this._geometry.dispose();\n        }\n      }\n\n      this._geometry = value;\n\n      if (this._geometry) {\n        this._geometry.refCount++;\n      }\n\n      this.vertexDirty = -1;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"uvBuffer\", {\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     *\n     * @readonly\n     */\n    get: function get() {\n      return this.geometry.buffers[1];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"verticesBuffer\", {\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     *\n     * @readonly\n     */\n    get: function get() {\n      return this.geometry.buffers[0];\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"material\", {\n    get: function get() {\n      return this.shader;\n    },\n\n    /** Alias for {@link PIXI.Mesh#shader}. */\n    set: function set(value) {\n      this.shader = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"blendMode\", {\n    get: function get() {\n      return this.state.blendMode;\n    },\n\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @default PIXI.BLEND_MODES.NORMAL;\n     */\n    set: function set(value) {\n      this.state.blendMode = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"roundPixels\", {\n    get: function get() {\n      return this._roundPixels;\n    },\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @default false\n     */\n    set: function set(value) {\n      if (this._roundPixels !== value) {\n        this._transformID = -1;\n      }\n\n      this._roundPixels = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"tint\", {\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * Null for non-MeshMaterial shaders\n     *\n     * @default 0xFFFFFF\n     */\n    get: function get() {\n      return 'tint' in this.shader ? this.shader.tint : null;\n    },\n    set: function set(value) {\n      this.shader.tint = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Mesh.prototype, \"texture\", {\n    /**\n     * The texture that the Mesh uses.\n     *\n     * Null for non-MeshMaterial shaders\n     */\n    get: function get() {\n      return 'texture' in this.shader ? this.shader.texture : null;\n    },\n    set: function set(value) {\n      this.shader.texture = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Standard renderer draw.\n   *\n   * @param renderer - Instance to renderer.\n   */\n\n  Mesh.prototype._render = function (renderer) {\n    // set properties for batching..\n    // TODO could use a different way to grab verts?\n    var vertices = this.geometry.buffers[0].data;\n    var shader = this.shader; // TODO benchmark check for attribute size..\n\n    if (shader.batchable && this.drawMode === DRAW_MODES.TRIANGLES && vertices.length < Mesh.BATCHABLE_SIZE * 2) {\n      this._renderToBatch(renderer);\n    } else {\n      this._renderDefault(renderer);\n    }\n  };\n  /**\n   * Standard non-batching way of rendering.\n   *\n   * @param renderer - Instance to renderer.\n   */\n\n\n  Mesh.prototype._renderDefault = function (renderer) {\n    var shader = this.shader;\n    shader.alpha = this.worldAlpha;\n\n    if (shader.update) {\n      shader.update();\n    }\n\n    renderer.batch.flush(); // bind and sync uniforms..\n\n    shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n    renderer.shader.bind(shader); // set state..\n\n    renderer.state.set(this.state); // bind the geometry...\n\n    renderer.geometry.bind(this.geometry, shader); // then render it\n\n    renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n  };\n  /**\n   * Rendering by using the Batch system.\n   *\n   * @param renderer - Instance to renderer.\n   */\n\n\n  Mesh.prototype._renderToBatch = function (renderer) {\n    var geometry = this.geometry;\n    var shader = this.shader;\n\n    if (shader.uvMatrix) {\n      shader.uvMatrix.update();\n      this.calculateUvs();\n    } // set properties for batching..\n\n\n    this.calculateVertices();\n    this.indices = geometry.indexBuffer.data;\n    this._tintRGB = shader._tintRGB;\n    this._texture = shader.texture;\n    var pluginName = this.material.pluginName;\n    renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n    renderer.plugins[pluginName].render(this);\n  };\n  /** Updates vertexData field based on transform and vertices. */\n\n\n  Mesh.prototype.calculateVertices = function () {\n    var geometry = this.geometry;\n    var verticesBuffer = geometry.buffers[0];\n    var vertices = verticesBuffer.data;\n    var vertexDirtyId = verticesBuffer._updateID;\n\n    if (vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID) {\n      return;\n    }\n\n    this._transformID = this.transform._worldID;\n\n    if (this.vertexData.length !== vertices.length) {\n      this.vertexData = new Float32Array(vertices.length);\n    }\n\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var vertexData = this.vertexData;\n\n    for (var i = 0; i < vertexData.length / 2; i++) {\n      var x = vertices[i * 2];\n      var y = vertices[i * 2 + 1];\n      vertexData[i * 2] = a * x + c * y + tx;\n      vertexData[i * 2 + 1] = b * x + d * y + ty;\n    }\n\n    if (this._roundPixels) {\n      var resolution = settings.RESOLUTION;\n\n      for (var i = 0; i < vertexData.length; ++i) {\n        vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n      }\n    }\n\n    this.vertexDirty = vertexDirtyId;\n  };\n  /** Updates uv field based on from geometry uv's or batchUvs. */\n\n\n  Mesh.prototype.calculateUvs = function () {\n    var geomUvs = this.geometry.buffers[1];\n    var shader = this.shader;\n\n    if (!shader.uvMatrix.isSimple) {\n      if (!this.batchUvs) {\n        this.batchUvs = new MeshBatchUvs(geomUvs, shader.uvMatrix);\n      }\n\n      this.batchUvs.update();\n      this.uvs = this.batchUvs.data;\n    } else {\n      this.uvs = geomUvs.data;\n    }\n  };\n  /**\n   * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n   * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n   */\n\n\n  Mesh.prototype._calculateBounds = function () {\n    this.calculateVertices();\n\n    this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n  };\n  /**\n   * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n   *\n   * @param point - The point to test.\n   * @return - The result of the test.\n   */\n\n\n  Mesh.prototype.containsPoint = function (point) {\n    if (!this.getBounds().contains(point.x, point.y)) {\n      return false;\n    }\n\n    this.worldTransform.applyInverse(point, tempPoint);\n    var vertices = this.geometry.getBuffer('aVertexPosition').data;\n    var points = tempPolygon.points;\n    var indices = this.geometry.getIndex().data;\n    var len = indices.length;\n    var step = this.drawMode === 4 ? 3 : 1;\n\n    for (var i = 0; i + 2 < len; i += step) {\n      var ind0 = indices[i] * 2;\n      var ind1 = indices[i + 1] * 2;\n      var ind2 = indices[i + 2] * 2;\n      points[0] = vertices[ind0];\n      points[1] = vertices[ind0 + 1];\n      points[2] = vertices[ind1];\n      points[3] = vertices[ind1 + 1];\n      points[4] = vertices[ind2];\n      points[5] = vertices[ind2 + 1];\n\n      if (tempPolygon.contains(tempPoint.x, tempPoint.y)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Mesh.prototype.destroy = function (options) {\n    _super.prototype.destroy.call(this, options);\n\n    if (this._cachedTexture) {\n      this._cachedTexture.destroy();\n\n      this._cachedTexture = null;\n    }\n\n    this.geometry = null;\n    this.shader = null;\n    this.state = null;\n    this.uvs = null;\n    this.indices = null;\n    this.vertexData = null;\n  };\n  /**\n   * The maximum number of vertices to consider batchable. Generally, the complexity\n   * of the geometry.\n   */\n\n\n  Mesh.BATCHABLE_SIZE = 100;\n  return Mesh;\n}(Container);\n\nvar fragment = \"varying vec2 vTextureCoord;\\nuniform vec4 uColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void)\\n{\\n    gl_FragColor = texture2D(uSampler, vTextureCoord) * uColor;\\n}\\n\";\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTextureMatrix;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n *\n * @memberof PIXI\n */\n\nvar MeshMaterial =\n/** @class */\nfunction (_super) {\n  __extends(MeshMaterial, _super);\n  /**\n   * @param uSampler - Texture that material uses to render.\n   * @param options - Additional options\n   * @param {number} [options.alpha=1] - Default alpha.\n   * @param {number} [options.tint=0xFFFFFF] - Default tint.\n   * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n   * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n   * @param {object} [options.uniforms] - Custom uniforms.\n   */\n\n\n  function MeshMaterial(uSampler, options) {\n    var _this = this;\n\n    var uniforms = {\n      uSampler: uSampler,\n      alpha: 1,\n      uTextureMatrix: Matrix.IDENTITY,\n      uColor: new Float32Array([1, 1, 1, 1])\n    }; // Set defaults\n\n    options = Object.assign({\n      tint: 0xFFFFFF,\n      alpha: 1,\n      pluginName: 'batch'\n    }, options);\n\n    if (options.uniforms) {\n      Object.assign(uniforms, options.uniforms);\n    }\n\n    _this = _super.call(this, options.program || Program.from(vertex, fragment), uniforms) || this;\n    _this._colorDirty = false;\n    _this.uvMatrix = new TextureMatrix(uSampler);\n    _this.batchable = options.program === undefined;\n    _this.pluginName = options.pluginName;\n    _this.tint = options.tint;\n    _this.alpha = options.alpha;\n    return _this;\n  }\n\n  Object.defineProperty(MeshMaterial.prototype, \"texture\", {\n    /** Reference to the texture being rendered. */\n    get: function get() {\n      return this.uniforms.uSampler;\n    },\n    set: function set(value) {\n      if (this.uniforms.uSampler !== value) {\n        this.uniforms.uSampler = value;\n        this.uvMatrix.texture = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MeshMaterial.prototype, \"alpha\", {\n    get: function get() {\n      return this._alpha;\n    },\n\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     */\n    set: function set(value) {\n      if (value === this._alpha) {\n        return;\n      }\n\n      this._alpha = value;\n      this._colorDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MeshMaterial.prototype, \"tint\", {\n    get: function get() {\n      return this._tint;\n    },\n\n    /**\n     * Multiply tint for the material.\n     *\n     * @default 0xFFFFFF\n     */\n    set: function set(value) {\n      if (value === this._tint) {\n        return;\n      }\n\n      this._tint = value;\n      this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n      this._colorDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Gets called automatically by the Mesh. Intended to be overridden for custom\n   * {@link MeshMaterial} objects.\n   */\n\n  MeshMaterial.prototype.update = function () {\n    if (this._colorDirty) {\n      this._colorDirty = false;\n      var baseTexture = this.texture.baseTexture;\n      premultiplyTintToRgba(this._tint, this._alpha, this.uniforms.uColor, baseTexture.alphaMode);\n    }\n\n    if (this.uvMatrix.update()) {\n      this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n    }\n  };\n\n  return MeshMaterial;\n}(Shader);\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n *\n * @memberof PIXI\n */\n\n\nvar MeshGeometry =\n/** @class */\nfunction (_super) {\n  __extends(MeshGeometry, _super);\n  /**\n   * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n   * @param {Float32Array|number[]} [uvs] - Texture UVs.\n   * @param {Uint16Array|number[]} [index] - IndexBuffer\n   */\n\n\n  function MeshGeometry(vertices, uvs, index) {\n    var _this = _super.call(this) || this;\n\n    var verticesBuffer = new Buffer(vertices);\n    var uvsBuffer = new Buffer(uvs, true);\n    var indexBuffer = new Buffer(index, true, true);\n\n    _this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT).addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT).addIndex(indexBuffer);\n\n    _this._updateId = -1;\n    return _this;\n  }\n\n  Object.defineProperty(MeshGeometry.prototype, \"vertexDirtyId\", {\n    /**\n     * If the vertex position is updated.\n     *\n     * @readonly\n     * @private\n     */\n    get: function get() {\n      return this.buffers[0]._updateID;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return MeshGeometry;\n}(Geometry);\n\nexport { Mesh, MeshBatchUvs, MeshGeometry, MeshMaterial };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,cAAa,GAAG,uBAASC,CAAT,EAAYC,CAAZ,EAAe;AAC/BF,gBAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,aAAS,EAAE;AAAb,eAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,KAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,GAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,SAAK,IAAIK,CAAT,IAAcL,CAAd,EAAe;AAAE,UAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAuB;AAAEN,SAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAW;AAAC;AAAE,GAF9E;;AAGA,SAAOP,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,CALD;;AAOO,SAASO,SAAT,CAAmBR,CAAnB,EAAsBC,CAAtB,EAAyB;AAC5BF,gBAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,WAASQ,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBV,CAAnB;AAAuB;;AACvCA,GAAC,CAACW,SAAF,GAAcV,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACU,MAAP,CAAcX,CAAd,CAAb,IAAiCQ,EAAE,CAACE,SAAH,GAAeV,CAAC,CAACU,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACJ;ACzBA;;;;;;;AAKA;AAAA;AAAA;;;;;AAqBI,wBAAYI,QAAZ,EAA8BC,QAA9B,EAAqD;AAEjD,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAY,IAAZ;AAEA,SAAKC,eAAL,GAAuB,CAAC,CAAxB;AACA,SAAKC,gBAAL,GAAwB,CAAC,CAAzB;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACH;;;;;;;;AAOMC,kCAAP,UAAcC,WAAd,EAAmC;AAE/B,QAAI,CAACA,WAAD,IACG,KAAKJ,eAAL,KAAyB,KAAKH,QAAL,CAAcK,SAD1C,IAEG,KAAKD,gBAAL,KAA0B,KAAKH,QAAL,CAAcI,SAF/C,EAIA;AACI;AACH;;AAED,SAAKF,eAAL,GAAuB,KAAKH,QAAL,CAAcK,SAArC;AACA,SAAKD,gBAAL,GAAwB,KAAKH,QAAL,CAAcI,SAAtC;AAEA,QAAMH,IAAI,GAAG,KAAKF,QAAL,CAAcE,IAA3B;;AAEA,QAAI,CAAC,KAAKA,IAAN,IAAc,KAAKA,IAAL,CAAUM,MAAV,KAAqBN,IAAI,CAACM,MAA5C,EACA;AACK,WAAKN,IAAL,GAAoB,IAAIO,YAAJ,CAAiBP,IAAI,CAACM,MAAtB,CAApB;AACJ;;AAED,SAAKP,QAAL,CAAcS,WAAd,CAA0BR,IAA1B,EAAgC,KAAKA,IAArC;AAEA,SAAKG,SAAL;AACH,GAvBM;;AAwBX;AAAC,CA7DD;;ACKA,IAAMM,SAAS,GAAG,IAAIC,KAAJ,EAAlB;AACA,IAAMC,WAAW,GAAG,IAAIC,OAAJ,EAApB;AAKA;;;;;;;;;;;;;;;;;AAgBA;AAAA;AAAA;AAA2DnB;;;;;;;;;;AA2EvD,gBAAYoB,QAAZ,EAAgCC,MAAhC,EAA2CC,KAA3C,EAA0DC,QAA1D,EAAqG;AAA3C;AAAAA,iBAAuBC,UAAU,CAACC,SAAlC;AAA2C;;AAArG,gBAEIC,qBAAO,IAFX;;AAIIC,SAAI,CAACP,QAAL,GAAgBA,QAAhB;AACAO,SAAI,CAACN,MAAL,GAAcA,MAAd;AACAM,SAAI,CAACL,KAAL,GAAaA,KAAK,IAAIM,KAAK,CAACC,KAAN,EAAtB;AACAF,SAAI,CAACJ,QAAL,GAAgBA,QAAhB;AACAI,SAAI,CAACG,KAAL,GAAa,CAAb;AACAH,SAAI,CAACI,IAAL,GAAY,CAAZ;AAEAJ,SAAI,CAACK,GAAL,GAAW,IAAX;AACAL,SAAI,CAACM,OAAL,GAAe,IAAf;AACAN,SAAI,CAACO,UAAL,GAAkB,IAAIpB,YAAJ,CAAiB,CAAjB,CAAlB;AACAa,SAAI,CAACQ,WAAL,GAAmB,CAAC,CAApB;AAEAR,SAAI,CAACS,YAAL,GAAoB,CAAC,CAArB;AACAT,SAAI,CAACU,YAAL,GAAoBC,QAAQ,CAACC,YAA7B;AACAZ,SAAI,CAACa,QAAL,GAAgB,IAAhB;;AACH;;AAOD9C,wBAAI+C,cAAJ,EAAI,UAAJ,EAAY;;;;;;SAAZ;AAEI,aAAO,KAAKC,SAAZ;AACH,KAHW;SAKZ,aAAaC,KAAb,EAA4B;AAExB,UAAI,KAAKD,SAAL,KAAmBC,KAAvB,EACA;AACI;AACH;;AAED,UAAI,KAAKD,SAAT,EACA;AACI,aAAKA,SAAL,CAAeE,QAAf;;AAEA,YAAI,KAAKF,SAAL,CAAeE,QAAf,KAA4B,CAAhC,EACA;AACI,eAAKF,SAAL,CAAeG,OAAf;AACH;AACJ;;AAED,WAAKH,SAAL,GAAiBC,KAAjB;;AAEA,UAAI,KAAKD,SAAT,EACA;AACI,aAAKA,SAAL,CAAeE,QAAf;AACH;;AAED,WAAKT,WAAL,GAAmB,CAAC,CAApB;AACH,KA9BW;qBAAA;;AAAA,GAAZ;AAqCAzC,wBAAI+C,cAAJ,EAAI,UAAJ,EAAY;;;;;;SAAZ;AAEI,aAAO,KAAKrB,QAAL,CAAc0B,OAAd,CAAsB,CAAtB,CAAP;AACH,KAHW;qBAAA;;AAAA,GAAZ;AAWApD,wBAAI+C,cAAJ,EAAI,gBAAJ,EAAkB;;;;;;;SAAlB;AAEI,aAAO,KAAKrB,QAAL,CAAc0B,OAAd,CAAsB,CAAtB,CAAP;AACH,KAHiB;qBAAA;;AAAA,GAAlB;AAMApD,wBAAI+C,cAAJ,EAAI,UAAJ,EAAY;SAKZ;AAEI,aAAO,KAAKpB,MAAZ;AACH,KARW;;;SAAZ,aAAasB,KAAb,EAAqB;AAEjB,WAAKtB,MAAL,GAAcsB,KAAd;AACH,KAHW;qBAAA;;AAAA,GAAZ;AAgBAjD,wBAAI+C,cAAJ,EAAI,WAAJ,EAAa;SAKb;AAEI,aAAO,KAAKnB,KAAL,CAAWyB,SAAlB;AACH,KARY;;;;;;;;SAAb,aAAcJ,KAAd,EAAgC;AAE5B,WAAKrB,KAAL,CAAWyB,SAAX,GAAuBJ,KAAvB;AACH,KAHY;qBAAA;;AAAA,GAAb;AAkBAjD,wBAAI+C,cAAJ,EAAI,aAAJ,EAAe;SASf;AAEI,aAAO,KAAKJ,YAAZ;AACH,KAZc;;;;;;;;;;SAAf,aAAgBM,KAAhB,EAA8B;AAE1B,UAAI,KAAKN,YAAL,KAAsBM,KAA1B,EACA;AACI,aAAKP,YAAL,GAAoB,CAAC,CAArB;AACH;;AACD,WAAKC,YAAL,GAAoBM,KAApB;AACH,KAPc;qBAAA;;AAAA,GAAf;AAsBAjD,wBAAI+C,cAAJ,EAAI,MAAJ,EAAQ;;;;;;;;;SAAR;AAEI,aAAO,UAAU,KAAKpB,MAAf,GAAyB,KAAKA,MAAL,CAAwC2B,IAAjE,GAAwE,IAA/E;AACH,KAHO;SAKR,aAASL,KAAT,EAAsB;AAEjB,WAAKtB,MAAL,CAAwC2B,IAAxC,GAA+CL,KAA/C;AACJ,KARO;qBAAA;;AAAA,GAAR;AAeAjD,wBAAI+C,cAAJ,EAAI,SAAJ,EAAW;;;;;;SAAX;AAEI,aAAO,aAAa,KAAKpB,MAAlB,GAA4B,KAAKA,MAAL,CAAwC4B,OAApE,GAA8E,IAArF;AACH,KAHU;SAKX,aAAYN,KAAZ,EAA0B;AAErB,WAAKtB,MAAL,CAAwC4B,OAAxC,GAAkDN,KAAlD;AACJ,KARU;qBAAA;;AAAA,GAAX;;;;;;;AAeUF,2BAAV,UAAkBS,QAAlB,EAAoC;;;AAIhC,QAAMC,QAAQ,GAAG,KAAK/B,QAAL,CAAc0B,OAAd,CAAsB,CAAtB,EAAyBvC,IAA1C;AACA,QAAMc,MAAM,GAAG,KAAKA,MAApB,CALgC;;AAQhC,QACIA,MAAM,CAAC+B,SAAP,IACG,KAAK7B,QAAL,KAAkBC,UAAU,CAACC,SADhC,IAEG0B,QAAQ,CAACtC,MAAT,GAAkB4B,IAAI,CAACY,cAAL,GAAsB,CAH/C,EAKA;AACI,WAAKC,cAAL,CAAoBJ,QAApB;AACH,KAPD,MASA;AACI,WAAKK,cAAL,CAAoBL,QAApB;AACH;AACJ,GApBS;;;;;;;;AA2BAT,kCAAV,UAAyBS,QAAzB,EAA2C;AAEvC,QAAM7B,MAAM,GAAG,KAAKA,MAApB;AAEAA,UAAM,CAACmC,KAAP,GAAe,KAAKC,UAApB;;AACA,QAAIpC,MAAM,CAACqC,MAAX,EACA;AACIrC,YAAM,CAACqC,MAAP;AACH;;AAEDR,YAAQ,CAACS,KAAT,CAAeC,KAAf,GAVuC;;AAavCvC,UAAM,CAACwC,QAAP,CAAgBC,iBAAhB,GAAoC,KAAKC,SAAL,CAAeC,cAAf,CAA8BC,OAA9B,CAAsC,IAAtC,CAApC;AACAf,YAAQ,CAAC7B,MAAT,CAAgB6C,IAAhB,CAAqB7C,MAArB,EAduC;;AAiBvC6B,YAAQ,CAAC5B,KAAT,CAAe6C,GAAf,CAAmB,KAAK7C,KAAxB,EAjBuC;;AAoBvC4B,YAAQ,CAAC9B,QAAT,CAAkB8C,IAAlB,CAAuB,KAAK9C,QAA5B,EAAsCC,MAAtC,EApBuC;;AAuBvC6B,YAAQ,CAAC9B,QAAT,CAAkBgD,IAAlB,CAAuB,KAAK7C,QAA5B,EAAsC,KAAKQ,IAA3C,EAAiD,KAAKD,KAAtD,EAA6D,KAAKV,QAAL,CAAciD,aAA3E;AACH,GAxBS;;;;;;;;AA+BA5B,kCAAV,UAAyBS,QAAzB,EAA2C;AAEvC,QAAM9B,QAAQ,GAAG,KAAKA,QAAtB;AACA,QAAMC,MAAM,GAAG,KAAKA,MAApB;;AAEA,QAAIA,MAAM,CAACf,QAAX,EACA;AACIe,YAAM,CAACf,QAAP,CAAgBoD,MAAhB;AACA,WAAKY,YAAL;AACH,KATsC;;;AAYvC,SAAKC,iBAAL;AACA,SAAKtC,OAAL,GAAeb,QAAQ,CAACoD,WAAT,CAAqBjE,IAApC;AACA,SAAKkE,QAAL,GAAgBpD,MAAM,CAACoD,QAAvB;AACA,SAAKC,QAAL,GAAgBrD,MAAM,CAAC4B,OAAvB;AAEA,QAAM0B,UAAU,GAAI,KAAKC,QAAL,CAA0CD,UAA9D;AAEAzB,YAAQ,CAACS,KAAT,CAAekB,iBAAf,CAAiC3B,QAAQ,CAAC4B,OAAT,CAAiBH,UAAjB,CAAjC;AACAzB,YAAQ,CAAC4B,OAAT,CAAiBH,UAAjB,EAA6BI,MAA7B,CAAoC,IAApC;AACH,GArBS;;;;AAwBHtC,qCAAP;AAEI,QAAMrB,QAAQ,GAAG,KAAKA,QAAtB;AACA,QAAM4D,cAAc,GAAG5D,QAAQ,CAAC0B,OAAT,CAAiB,CAAjB,CAAvB;AACA,QAAMK,QAAQ,GAAG6B,cAAc,CAACzE,IAAhC;AACA,QAAM0E,aAAa,GAAGD,cAAc,CAACtE,SAArC;;AAEA,QAAIuE,aAAa,KAAK,KAAK9C,WAAvB,IAAsC,KAAKC,YAAL,KAAsB,KAAK2B,SAAL,CAAemB,QAA/E,EACA;AACI;AACH;;AAED,SAAK9C,YAAL,GAAoB,KAAK2B,SAAL,CAAemB,QAAnC;;AAEA,QAAI,KAAKhD,UAAL,CAAgBrB,MAAhB,KAA2BsC,QAAQ,CAACtC,MAAxC,EACA;AACI,WAAKqB,UAAL,GAAkB,IAAIpB,YAAJ,CAAiBqC,QAAQ,CAACtC,MAA1B,CAAlB;AACH;;AAED,QAAMsE,EAAE,GAAG,KAAKpB,SAAL,CAAeC,cAA1B;AACA,QAAMoB,CAAC,GAAGD,EAAE,CAACC,CAAb;AACA,QAAM3F,CAAC,GAAG0F,EAAE,CAAC1F,CAAb;AACA,QAAM4F,CAAC,GAAGF,EAAE,CAACE,CAAb;AACA,QAAM7F,CAAC,GAAG2F,EAAE,CAAC3F,CAAb;AACA,QAAM8F,EAAE,GAAGH,EAAE,CAACG,EAAd;AACA,QAAMC,EAAE,GAAGJ,EAAE,CAACI,EAAd;AAEA,QAAMrD,UAAU,GAAG,KAAKA,UAAxB;;AAEA,SAAK,IAAIsD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtD,UAAU,CAACrB,MAAX,GAAoB,CAAxC,EAA2C2E,CAAC,EAA5C,EACA;AACI,UAAMC,CAAC,GAAGtC,QAAQ,CAAEqC,CAAC,GAAG,CAAN,CAAlB;AACA,UAAME,CAAC,GAAGvC,QAAQ,CAAEqC,CAAC,GAAG,CAAL,GAAU,CAAX,CAAlB;AAEAtD,gBAAU,CAAEsD,CAAC,GAAG,CAAN,CAAV,GAAuBJ,CAAC,GAAGK,CAAL,GAAWJ,CAAC,GAAGK,CAAf,GAAoBJ,EAA1C;AACApD,gBAAU,CAAEsD,CAAC,GAAG,CAAL,GAAU,CAAX,CAAV,GAA2B/F,CAAC,GAAGgG,CAAL,GAAWjG,CAAC,GAAGkG,CAAf,GAAoBH,EAA9C;AACH;;AAED,QAAI,KAAKlD,YAAT,EACA;AACI,UAAMsD,UAAU,GAAGrD,QAAQ,CAACsD,UAA5B;;AAEA,WAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtD,UAAU,CAACrB,MAA/B,EAAuC,EAAE2E,CAAzC,EACA;AACItD,kBAAU,CAACsD,CAAD,CAAV,GAAgBK,IAAI,CAACC,KAAL,CAAW,CAAC5D,UAAU,CAACsD,CAAD,CAAV,GAAgBG,UAAhB,GAA6B,CAA9B,IAAmCA,UAA9C,CAAhB;AACH;AACJ;;AAED,SAAKxD,WAAL,GAAmB8C,aAAnB;AACH,GAjDM;;;;AAoDAxC,gCAAP;AAEI,QAAMsD,OAAO,GAAG,KAAK3E,QAAL,CAAc0B,OAAd,CAAsB,CAAtB,CAAhB;AACA,QAAMzB,MAAM,GAAG,KAAKA,MAApB;;AAEA,QAAI,CAACA,MAAM,CAACf,QAAP,CAAgB0F,QAArB,EACA;AACI,UAAI,CAAC,KAAKxD,QAAV,EACA;AACI,aAAKA,QAAL,GAAgB,IAAI7B,YAAJ,CAAiBoF,OAAjB,EAA0B1E,MAAM,CAACf,QAAjC,CAAhB;AACH;;AACD,WAAKkC,QAAL,CAAckB,MAAd;AACA,WAAK1B,GAAL,GAAW,KAAKQ,QAAL,CAAcjC,IAAzB;AACH,KARD,MAUA;AACI,WAAKyB,GAAL,GAAW+D,OAAO,CAACxF,IAAnB;AACH;AACJ,GAlBM;;;;;;;AAwBGkC,oCAAV;AAEI,SAAK8B,iBAAL;;AAEA,SAAK0B,OAAL,CAAaC,aAAb,CAA2B,KAAKhE,UAAhC,EAA4C,CAA5C,EAA+C,KAAKA,UAAL,CAAgBrB,MAA/D;AACH,GALS;;;;;;;;;AAaH4B,iCAAP,UAAqB0D,KAArB,EAAsC;AAElC,QAAI,CAAC,KAAKC,SAAL,GAAiBC,QAAjB,CAA0BF,KAAK,CAACV,CAAhC,EAAmCU,KAAK,CAACT,CAAzC,CAAL,EACA;AACI,aAAO,KAAP;AACH;;AAED,SAAK1B,cAAL,CAAoBsC,YAApB,CAAiCH,KAAjC,EAAwCnF,SAAxC;AAEA,QAAMmC,QAAQ,GAAG,KAAK/B,QAAL,CAAcmF,SAAd,CAAwB,iBAAxB,EAA2ChG,IAA5D;AAEA,QAAMiG,MAAM,GAAGtF,WAAW,CAACsF,MAA3B;AACA,QAAMvE,OAAO,GAAI,KAAKb,QAAL,CAAcqF,QAAd,GAAyBlG,IAA1C;AACA,QAAMmG,GAAG,GAAGzE,OAAO,CAACpB,MAApB;AACA,QAAM8F,IAAI,GAAG,KAAKpF,QAAL,KAAkB,CAAlB,GAAsB,CAAtB,GAA0B,CAAvC;;AAEA,SAAK,IAAIiE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAAJ,GAAQkB,GAAxB,EAA6BlB,CAAC,IAAImB,IAAlC,EACA;AACI,UAAMC,IAAI,GAAG3E,OAAO,CAACuD,CAAD,CAAP,GAAa,CAA1B;AACA,UAAMqB,IAAI,GAAG5E,OAAO,CAACuD,CAAC,GAAG,CAAL,CAAP,GAAiB,CAA9B;AACA,UAAMsB,IAAI,GAAG7E,OAAO,CAACuD,CAAC,GAAG,CAAL,CAAP,GAAiB,CAA9B;AAEAgB,YAAM,CAAC,CAAD,CAAN,GAAYrD,QAAQ,CAACyD,IAAD,CAApB;AACAJ,YAAM,CAAC,CAAD,CAAN,GAAYrD,QAAQ,CAACyD,IAAI,GAAG,CAAR,CAApB;AACAJ,YAAM,CAAC,CAAD,CAAN,GAAYrD,QAAQ,CAAC0D,IAAD,CAApB;AACAL,YAAM,CAAC,CAAD,CAAN,GAAYrD,QAAQ,CAAC0D,IAAI,GAAG,CAAR,CAApB;AACAL,YAAM,CAAC,CAAD,CAAN,GAAYrD,QAAQ,CAAC2D,IAAD,CAApB;AACAN,YAAM,CAAC,CAAD,CAAN,GAAYrD,QAAQ,CAAC2D,IAAI,GAAG,CAAR,CAApB;;AAEA,UAAI5F,WAAW,CAACmF,QAAZ,CAAqBrF,SAAS,CAACyE,CAA/B,EAAkCzE,SAAS,CAAC0E,CAA5C,CAAJ,EACA;AACI,eAAO,IAAP;AACH;AACJ;;AAED,WAAO,KAAP;AACH,GApCM;;AAsCAjD,2BAAP,UAAesE,OAAf,EAAgD;AAE5CrF,qBAAMsF,OAAN,CAAaC,IAAb,CAAa,IAAb,EAAcF,OAAd;;AAEA,QAAI,KAAKG,cAAT,EACA;AACI,WAAKA,cAAL,CAAoBF,OAApB;;AACA,WAAKE,cAAL,GAAsB,IAAtB;AACH;;AAED,SAAK9F,QAAL,GAAgB,IAAhB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKU,GAAL,GAAW,IAAX;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACH,GAhBM;;;;;;;AAsBOO,wBAAiB,GAAjB;AAClB;AAAC,CAzdD,CAA2D0E,SAA3D;;;;ACdA;;;;;;AAKA;AAAA;AAAA;AAAkCnH;;;;;;;;;;;;AA6C9B,wBAAYoH,QAAZ,EAA+BL,OAA/B,EAA6D;AAA7D;;AAEI,QAAMlD,QAAQ,GAAG;AACbuD,cAAQ,UADK;AAEb5D,WAAK,EAAE,CAFM;AAGb6D,oBAAc,EAAEC,MAAM,CAACC,QAHV;AAIbC,YAAM,EAAE,IAAI1G,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAjB;AAJK,KAAjB,CAFyD;;AAUzDiG,WAAO,GAAGrH,MAAM,CAAC+H,MAAP,CAAc;AACpBzE,UAAI,EAAE,QADc;AAEpBQ,WAAK,EAAE,CAFa;AAGpBmB,gBAAU,EAAE;AAHQ,KAAd,EAIPoC,OAJO,CAAV;;AAMA,QAAIA,OAAO,CAAClD,QAAZ,EACA;AACInE,YAAM,CAAC+H,MAAP,CAAc5D,QAAd,EAAwBkD,OAAO,CAAClD,QAAhC;AACH;;AAEDlC,8BAAMoF,OAAO,CAACW,OAAR,IAAmBC,OAAO,CAACC,IAAR,CAAaC,MAAb,EAAqBC,QAArB,CAAzB,EAAyDjE,QAAzD,KAAkE,IAAlE;AAEAlC,SAAI,CAACoG,WAAL,GAAmB,KAAnB;AAEApG,SAAI,CAACrB,QAAL,GAAgB,IAAI0H,aAAJ,CAAkBZ,QAAlB,CAAhB;AACAzF,SAAI,CAACyB,SAAL,GAAiB2D,OAAO,CAACW,OAAR,KAAoBO,SAArC;AACAtG,SAAI,CAACgD,UAAL,GAAkBoC,OAAO,CAACpC,UAA1B;AAEAhD,SAAI,CAACqB,IAAL,GAAY+D,OAAO,CAAC/D,IAApB;AACArB,SAAI,CAAC6B,KAAL,GAAauD,OAAO,CAACvD,KAArB;;AACH;;AAGD9D,wBAAIwI,sBAAJ,EAAI,SAAJ,EAAW;;SAAX;AAEI,aAAO,KAAKrE,QAAL,CAAcuD,QAArB;AACH,KAHU;SAIX,aAAYzE,KAAZ,EAA0B;AAEtB,UAAI,KAAKkB,QAAL,CAAcuD,QAAd,KAA2BzE,KAA/B,EACA;AACI,aAAKkB,QAAL,CAAcuD,QAAd,GAAyBzE,KAAzB;AACA,aAAKrC,QAAL,CAAc2C,OAAd,GAAwBN,KAAxB;AACH;AACJ,KAXU;qBAAA;;AAAA,GAAX;AAkBAjD,wBAAIwI,sBAAJ,EAAI,OAAJ,EAAS;SAOT;AAEI,aAAO,KAAKC,MAAZ;AACH,KAVQ;;;;;;;SAAT,aAAUxF,KAAV,EAAuB;AAEnB,UAAIA,KAAK,KAAK,KAAKwF,MAAnB;AAA2B;AAAO;;AAElC,WAAKA,MAAL,GAAcxF,KAAd;AACA,WAAKoF,WAAL,GAAmB,IAAnB;AACH,KANQ;qBAAA;;AAAA,GAAT;AAiBArI,wBAAIwI,sBAAJ,EAAI,MAAJ,EAAQ;SAQR;AAEI,aAAO,KAAKE,KAAZ;AACH,KAXO;;;;;;;SAAR,aAASzF,KAAT,EAAsB;AAElB,UAAIA,KAAK,KAAK,KAAKyF,KAAnB;AAA0B;AAAO;;AAEjC,WAAKA,KAAL,GAAazF,KAAb;AACA,WAAK8B,QAAL,GAAgB,CAAC9B,KAAK,IAAI,EAAV,KAAiBA,KAAK,GAAG,MAAzB,KAAoC,CAACA,KAAK,GAAG,IAAT,KAAkB,EAAtD,CAAhB;AACA,WAAKoF,WAAL,GAAmB,IAAnB;AACH,KAPO;qBAAA;;AAAA,GAAR;;;;;;AAiBOG,kCAAP;AAEI,QAAI,KAAKH,WAAT,EACA;AACI,WAAKA,WAAL,GAAmB,KAAnB;AACA,UAAMM,WAAW,GAAG,KAAKpF,OAAL,CAAaoF,WAAjC;AAEAC,2BAAqB,CACjB,KAAKF,KADY,EACL,KAAKD,MADA,EACQ,KAAKtE,QAAL,CAAc2D,MADtB,EAC+Ba,WAAW,CAACE,SAD3C,CAArB;AAGH;;AACD,QAAI,KAAKjI,QAAL,CAAcoD,MAAd,EAAJ,EACA;AACI,WAAKG,QAAL,CAAcwD,cAAd,GAA+B,KAAK/G,QAAL,CAAckI,QAA7C;AACH;AACJ,GAfM;;AAgBX;AAnJA,EAAkCC,MAAlC;ACpBA;;;;;;;;;;;;;;;;;;AAgBA;AAAA;AAAA;AAAkCzI;;;;;;;;AAkB9B,wBAAYmD,QAAZ,EAAqCnB,GAArC,EAAyD0G,KAAzD,EAA6E;AAA7E,gBAEIhH,qBAAO,IAFX;;AAII,QAAMsD,cAAc,GAAG,IAAI2D,MAAJ,CAAWxF,QAAX,CAAvB;AACA,QAAMyF,SAAS,GAAG,IAAID,MAAJ,CAAW3G,GAAX,EAAgB,IAAhB,CAAlB;AACA,QAAMwC,WAAW,GAAG,IAAImE,MAAJ,CAAWD,KAAX,EAAkB,IAAlB,EAAwB,IAAxB,CAApB;;AAEA/G,SAAI,CAACkH,YAAL,CAAkB,iBAAlB,EAAqC7D,cAArC,EAAqD,CAArD,EAAwD,KAAxD,EAA+D8D,KAAK,CAACC,KAArE,EACKF,YADL,CACkB,eADlB,EACmCD,SADnC,EAC8C,CAD9C,EACiD,KADjD,EACwDE,KAAK,CAACC,KAD9D,EAEKC,QAFL,CAEcxE,WAFd;;AAIA7C,SAAI,CAACsH,SAAL,GAAiB,CAAC,CAAlB;;AACH;;AAQDvJ,wBAAIwJ,sBAAJ,EAAI,eAAJ,EAAiB;;;;;;;SAAjB;AAEI,aAAO,KAAKpG,OAAL,CAAa,CAAb,EAAgBpC,SAAvB;AACH,KAHgB;qBAAA;;AAAA,GAAjB;AAIJ;AA3CA,EAAkCyI,QAAlC","names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","uvBuffer","uvMatrix","data","_bufferUpdateId","_textureUpdateId","_updateID","MeshBatchUvs","forceUpdate","length","Float32Array","multiplyUvs","tempPoint","Point","tempPolygon","Polygon","geometry","shader","state","drawMode","DRAW_MODES","TRIANGLES","_super","_this","State","for2d","start","size","uvs","indices","vertexData","vertexDirty","_transformID","_roundPixels","settings","ROUND_PIXELS","batchUvs","Mesh","_geometry","value","refCount","dispose","buffers","blendMode","tint","texture","renderer","vertices","batchable","BATCHABLE_SIZE","_renderToBatch","_renderDefault","alpha","worldAlpha","update","batch","flush","uniforms","translationMatrix","transform","worldTransform","toArray","bind","set","draw","instanceCount","calculateUvs","calculateVertices","indexBuffer","_tintRGB","_texture","pluginName","material","setObjectRenderer","plugins","render","verticesBuffer","vertexDirtyId","_worldID","wt","a","c","tx","ty","i","x","y","resolution","RESOLUTION","Math","round","geomUvs","isSimple","_bounds","addVertexData","point","getBounds","contains","applyInverse","getBuffer","points","getIndex","len","step","ind0","ind1","ind2","options","destroy","call","_cachedTexture","Container","uSampler","uTextureMatrix","Matrix","IDENTITY","uColor","assign","program","Program","from","vertex","fragment","_colorDirty","TextureMatrix","undefined","MeshMaterial","_alpha","_tint","baseTexture","premultiplyTintToRgba","alphaMode","mapCoord","Shader","index","Buffer","uvsBuffer","addAttribute","TYPES","FLOAT","addIndex","_updateId","MeshGeometry","Geometry"],"sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/MeshBatchUvs.ts","../../src/Mesh.ts","../../src/MeshMaterial.ts","../../src/MeshGeometry.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import type { TextureMatrix, Buffer } from '@pixi/core';\n\n/**\n * Class controls cache for UV mapping from Texture normal space to BaseTexture normal space.\n *\n * @memberof PIXI\n */\nexport class MeshBatchUvs\n{\n    /** UV Buffer data. */\n    public readonly data: Float32Array;\n\n    /** Buffer with normalized UV's. */\n    public uvBuffer: Buffer;\n\n    /** Material UV matrix. */\n    public uvMatrix: TextureMatrix;\n\n    private _bufferUpdateId: number;\n    private _textureUpdateId: number;\n\n    // Internal-only properties\n    _updateID: number;\n\n    /**\n     * @param uvBuffer - Buffer with normalized uv's\n     * @param uvMatrix - Material UV matrix\n     */\n    constructor(uvBuffer: Buffer, uvMatrix: TextureMatrix)\n    {\n        this.uvBuffer = uvBuffer;\n        this.uvMatrix = uvMatrix;\n        this.data = null;\n\n        this._bufferUpdateId = -1;\n        this._textureUpdateId = -1;\n        this._updateID = 0;\n    }\n\n    /**\n     * Updates\n     *\n     * @param forceUpdate - force the update\n     */\n    public update(forceUpdate?: boolean): void\n    {\n        if (!forceUpdate\n            && this._bufferUpdateId === this.uvBuffer._updateID\n            && this._textureUpdateId === this.uvMatrix._updateID\n        )\n        {\n            return;\n        }\n\n        this._bufferUpdateId = this.uvBuffer._updateID;\n        this._textureUpdateId = this.uvMatrix._updateID;\n\n        const data = this.uvBuffer.data as Float32Array;\n\n        if (!this.data || this.data.length !== data.length)\n        {\n            (this.data as any) = new Float32Array(data.length);\n        }\n\n        this.uvMatrix.multiplyUvs(data, this.data);\n\n        this._updateID++;\n    }\n}\n","import { Shader, State } from '@pixi/core';\nimport { Point, Polygon } from '@pixi/math';\nimport { BLEND_MODES, DRAW_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { settings } from '@pixi/settings';\nimport { MeshBatchUvs } from './MeshBatchUvs';\nimport { MeshMaterial } from './MeshMaterial';\n\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { Texture, Renderer, Geometry, Buffer } from '@pixi/core';\nimport type { IPointData } from '@pixi/math';\n\nconst tempPoint = new Point();\nconst tempPolygon = new Polygon();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Mesh extends GlobalMixins.Mesh {}\n\n/**\n * Base mesh class.\n *\n * This class empowers you to have maximum flexibility to render any kind of WebGL visuals you can think of.\n * This class assumes a certain level of WebGL knowledge.\n * If you know a bit this should abstract enough away to make your life easier!\n *\n * Pretty much ALL WebGL can be broken down into the following:\n * - Geometry - The structure and data for the mesh. This can include anything from positions, uvs, normals, colors etc..\n * - Shader - This is the shader that PixiJS will render the geometry with (attributes in the shader must match the geometry)\n * - State - This is the state of WebGL required to render the mesh.\n *\n * Through a combination of the above elements you can render anything you want, 2D or 3D!\n *\n * @memberof PIXI\n */\nexport class Mesh<T extends Shader = MeshMaterial> extends Container\n{\n    /**\n     * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n     * Can be shared between multiple Mesh objects.\n     *\n     * @type {PIXI.Shader|PIXI.MeshMaterial}\n     */\n    public shader: T;\n\n    /**\n     * Represents the WebGL state the Mesh required to render, excludes shader and geometry. E.g.,\n     * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n     */\n    public state: State;\n\n    /** The way the Mesh should be drawn, can be any of the {@link PIXI.DRAW_MODES} constants. */\n    public drawMode: DRAW_MODES;\n\n    /**\n     * Typically the index of the IndexBuffer where to start drawing.\n     *\n     * @default 0\n     */\n    public start: number;\n\n    /**\n     * How much of the geometry to draw, by default `0` renders everything.\n     *\n     * @default 0\n     */\n    public size: number;\n\n    private _geometry: Geometry;\n\n    /** This is the caching layer used by the batcher. */\n    private vertexData: Float32Array;\n\n    /**\n     * If geometry is changed used to decide to re-transform\n     * the vertexData.\n     */\n    private vertexDirty: number;\n    private _transformID: number;\n\n    /** Internal roundPixels field. */\n    private _roundPixels: boolean;\n\n    /** Batched UV's are cached for atlas textures. */\n    private batchUvs: MeshBatchUvs;\n\n    // Internal-only properties\n    /**\n     * These are used as easy access for batching.\n     *\n     * @private\n     */\n    uvs: Float32Array;\n\n    /**\n     * These are used as easy access for batching.\n     *\n     * @private\n     */\n    indices: Uint16Array;\n    _tintRGB: number;\n    _texture: Texture;\n\n    /**\n     * @param geometry - The geometry the mesh will use.\n     * @param {PIXI.MeshMaterial} shader - The shader the mesh will use.\n     * @param state - The state that the WebGL context is required to be in to render the mesh\n     *        if no state is provided, uses {@link PIXI.State.for2d} to create a 2D state for PixiJS.\n     * @param drawMode - The drawMode, can be any of the {@link PIXI.DRAW_MODES} constants.\n     */\n    constructor(geometry: Geometry, shader: T, state?: State, drawMode: DRAW_MODES = DRAW_MODES.TRIANGLES)\n    {\n        super();\n\n        this.geometry = geometry;\n        this.shader = shader;\n        this.state = state || State.for2d();\n        this.drawMode = drawMode;\n        this.start = 0;\n        this.size = 0;\n\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = new Float32Array(1);\n        this.vertexDirty = -1;\n\n        this._transformID = -1;\n        this._roundPixels = settings.ROUND_PIXELS;\n        this.batchUvs = null;\n    }\n\n    /**\n     * Includes vertex positions, face indices, normals, colors, UVs, and\n     * custom attributes within buffers, reducing the cost of passing all\n     * this data to the GPU. Can be shared between multiple Mesh objects.\n     */\n    get geometry(): Geometry\n    {\n        return this._geometry;\n    }\n\n    set geometry(value: Geometry)\n    {\n        if (this._geometry === value)\n        {\n            return;\n        }\n\n        if (this._geometry)\n        {\n            this._geometry.refCount--;\n\n            if (this._geometry.refCount === 0)\n            {\n                this._geometry.dispose();\n            }\n        }\n\n        this._geometry = value;\n\n        if (this._geometry)\n        {\n            this._geometry.refCount++;\n        }\n\n        this.vertexDirty = -1;\n    }\n\n    /**\n     * To change mesh uv's, change its uvBuffer data and increment its _updateID.\n     *\n     * @readonly\n     */\n    get uvBuffer(): Buffer\n    {\n        return this.geometry.buffers[1];\n    }\n\n    /**\n     * To change mesh vertices, change its uvBuffer data and increment its _updateID.\n     * Incrementing _updateID is optional because most of Mesh objects do it anyway.\n     *\n     * @readonly\n     */\n    get verticesBuffer(): Buffer\n    {\n        return this.geometry.buffers[0];\n    }\n\n    /** Alias for {@link PIXI.Mesh#shader}. */\n    set material(value: T)\n    {\n        this.shader = value;\n    }\n\n    get material(): T\n    {\n        return this.shader;\n    }\n\n    /**\n     * The blend mode to be applied to the Mesh. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @default PIXI.BLEND_MODES.NORMAL;\n     */\n    set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /**\n     * The multiply tint applied to the Mesh. This is a hex value. A value of\n     * `0xFFFFFF` will remove any tint effect.\n     *\n     * Null for non-MeshMaterial shaders\n     *\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return 'tint' in this.shader ? (this.shader as unknown as MeshMaterial).tint : null;\n    }\n\n    set tint(value: number)\n    {\n        (this.shader as unknown as MeshMaterial).tint = value;\n    }\n\n    /**\n     * The texture that the Mesh uses.\n     *\n     * Null for non-MeshMaterial shaders\n     */\n    get texture(): Texture\n    {\n        return 'texture' in this.shader ? (this.shader as unknown as MeshMaterial).texture : null;\n    }\n\n    set texture(value: Texture)\n    {\n        (this.shader as unknown as MeshMaterial).texture = value;\n    }\n\n    /**\n     * Standard renderer draw.\n     *\n     * @param renderer - Instance to renderer.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // set properties for batching..\n        // TODO could use a different way to grab verts?\n        const vertices = this.geometry.buffers[0].data;\n        const shader = this.shader as unknown as MeshMaterial;\n\n        // TODO benchmark check for attribute size..\n        if (\n            shader.batchable\n            && this.drawMode === DRAW_MODES.TRIANGLES\n            && vertices.length < Mesh.BATCHABLE_SIZE * 2\n        )\n        {\n            this._renderToBatch(renderer);\n        }\n        else\n        {\n            this._renderDefault(renderer);\n        }\n    }\n\n    /**\n     * Standard non-batching way of rendering.\n     *\n     * @param renderer - Instance to renderer.\n     */\n    protected _renderDefault(renderer: Renderer): void\n    {\n        const shader = this.shader as unknown as MeshMaterial;\n\n        shader.alpha = this.worldAlpha;\n        if (shader.update)\n        {\n            shader.update();\n        }\n\n        renderer.batch.flush();\n\n        // bind and sync uniforms..\n        shader.uniforms.translationMatrix = this.transform.worldTransform.toArray(true);\n        renderer.shader.bind(shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // bind the geometry...\n        renderer.geometry.bind(this.geometry, shader);\n\n        // then render it\n        renderer.geometry.draw(this.drawMode, this.size, this.start, this.geometry.instanceCount);\n    }\n\n    /**\n     * Rendering by using the Batch system.\n     *\n     * @param renderer - Instance to renderer.\n     */\n    protected _renderToBatch(renderer: Renderer): void\n    {\n        const geometry = this.geometry;\n        const shader = this.shader as unknown as MeshMaterial;\n\n        if (shader.uvMatrix)\n        {\n            shader.uvMatrix.update();\n            this.calculateUvs();\n        }\n\n        // set properties for batching..\n        this.calculateVertices();\n        this.indices = geometry.indexBuffer.data as Uint16Array;\n        this._tintRGB = shader._tintRGB;\n        this._texture = shader.texture;\n\n        const pluginName = (this.material as unknown as MeshMaterial).pluginName;\n\n        renderer.batch.setObjectRenderer(renderer.plugins[pluginName]);\n        renderer.plugins[pluginName].render(this);\n    }\n\n    /** Updates vertexData field based on transform and vertices. */\n    public calculateVertices(): void\n    {\n        const geometry = this.geometry;\n        const verticesBuffer = geometry.buffers[0];\n        const vertices = verticesBuffer.data;\n        const vertexDirtyId = verticesBuffer._updateID;\n\n        if (vertexDirtyId === this.vertexDirty && this._transformID === this.transform._worldID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n\n        if (this.vertexData.length !== vertices.length)\n        {\n            this.vertexData = new Float32Array(vertices.length);\n        }\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const vertexData = this.vertexData;\n\n        for (let i = 0; i < vertexData.length / 2; i++)\n        {\n            const x = vertices[(i * 2)];\n            const y = vertices[(i * 2) + 1];\n\n            vertexData[(i * 2)] = (a * x) + (c * y) + tx;\n            vertexData[(i * 2) + 1] = (b * x) + (d * y) + ty;\n        }\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n\n        this.vertexDirty = vertexDirtyId;\n    }\n\n    /** Updates uv field based on from geometry uv's or batchUvs. */\n    public calculateUvs(): void\n    {\n        const geomUvs = this.geometry.buffers[1];\n        const shader = this.shader as unknown as MeshMaterial;\n\n        if (!shader.uvMatrix.isSimple)\n        {\n            if (!this.batchUvs)\n            {\n                this.batchUvs = new MeshBatchUvs(geomUvs, shader.uvMatrix);\n            }\n            this.batchUvs.update();\n            this.uvs = this.batchUvs.data;\n        }\n        else\n        {\n            this.uvs = geomUvs.data as Float32Array;\n        }\n    }\n\n    /**\n     * Updates the bounds of the mesh as a rectangle. The bounds calculation takes the worldTransform into account.\n     * there must be a aVertexPosition attribute present in the geometry for bounds to be calculated correctly.\n     */\n    protected _calculateBounds(): void\n    {\n        this.calculateVertices();\n\n        this._bounds.addVertexData(this.vertexData, 0, this.vertexData.length);\n    }\n\n    /**\n     * Tests if a point is inside this mesh. Works only for PIXI.DRAW_MODES.TRIANGLES.\n     *\n     * @param point - The point to test.\n     * @return - The result of the test.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        if (!this.getBounds().contains(point.x, point.y))\n        {\n            return false;\n        }\n\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const vertices = this.geometry.getBuffer('aVertexPosition').data;\n\n        const points = tempPolygon.points;\n        const indices =  this.geometry.getIndex().data;\n        const len = indices.length;\n        const step = this.drawMode === 4 ? 3 : 1;\n\n        for (let i = 0; i + 2 < len; i += step)\n        {\n            const ind0 = indices[i] * 2;\n            const ind1 = indices[i + 1] * 2;\n            const ind2 = indices[i + 2] * 2;\n\n            points[0] = vertices[ind0];\n            points[1] = vertices[ind0 + 1];\n            points[2] = vertices[ind1];\n            points[3] = vertices[ind1 + 1];\n            points[4] = vertices[ind2];\n            points[5] = vertices[ind2 + 1];\n\n            if (tempPolygon.contains(tempPoint.x, tempPoint.y))\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        if (this._cachedTexture)\n        {\n            this._cachedTexture.destroy();\n            this._cachedTexture = null;\n        }\n\n        this.geometry = null;\n        this.shader = null;\n        this.state = null;\n        this.uvs = null;\n        this.indices = null;\n        this.vertexData = null;\n    }\n\n    /**\n     * The maximum number of vertices to consider batchable. Generally, the complexity\n     * of the geometry.\n     */\n    public static BATCHABLE_SIZE = 100;\n}\n","import { Program, Shader, TextureMatrix } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\nimport { premultiplyTintToRgba } from '@pixi/utils';\nimport fragment from './shader/mesh.frag';\nimport vertex from './shader/mesh.vert';\n\nimport type { Texture } from '@pixi/core';\nimport type { Dict } from '@pixi/utils';\n\nexport interface IMeshMaterialOptions {\n    alpha?: number;\n    tint?: number;\n    pluginName?: string;\n    program?: Program;\n    uniforms?: Dict<unknown>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface MeshMaterial extends GlobalMixins.MeshMaterial {}\n\n/**\n * Slightly opinionated default shader for PixiJS 2D objects.\n *\n * @memberof PIXI\n */\nexport class MeshMaterial extends Shader\n{\n    /**\n     * TextureMatrix instance for this Mesh, used to track Texture changes.\n     *\n     * @readonly\n     */\n    public readonly uvMatrix: TextureMatrix;\n\n    /**\n     * `true` if shader can be batch with the renderer's batch system.\n     *\n     * @default true\n     */\n    public batchable: boolean;\n\n    /**\n     * Renderer plugin for batching.\n     *\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    // Internal-only properties\n    _tintRGB: number;\n\n    /**\n     * Only do update if tint or alpha changes.\n     *\n     * @private\n     * @default false\n     */\n    private _colorDirty: boolean;\n    private _alpha: number;\n    private _tint: number;\n\n    /**\n     * @param uSampler - Texture that material uses to render.\n     * @param options - Additional options\n     * @param {number} [options.alpha=1] - Default alpha.\n     * @param {number} [options.tint=0xFFFFFF] - Default tint.\n     * @param {string} [options.pluginName='batch'] - Renderer plugin for batching.\n     * @param {PIXI.Program} [options.program=0xFFFFFF] - Custom program.\n     * @param {object} [options.uniforms] - Custom uniforms.\n     */\n    constructor(uSampler: Texture, options?: IMeshMaterialOptions)\n    {\n        const uniforms = {\n            uSampler,\n            alpha: 1,\n            uTextureMatrix: Matrix.IDENTITY,\n            uColor: new Float32Array([1, 1, 1, 1]),\n        };\n\n        // Set defaults\n        options = Object.assign({\n            tint: 0xFFFFFF,\n            alpha: 1,\n            pluginName: 'batch',\n        }, options);\n\n        if (options.uniforms)\n        {\n            Object.assign(uniforms, options.uniforms);\n        }\n\n        super(options.program || Program.from(vertex, fragment), uniforms);\n\n        this._colorDirty = false;\n\n        this.uvMatrix = new TextureMatrix(uSampler);\n        this.batchable = options.program === undefined;\n        this.pluginName = options.pluginName;\n\n        this.tint = options.tint;\n        this.alpha = options.alpha;\n    }\n\n    /** Reference to the texture being rendered. */\n    get texture(): Texture\n    {\n        return this.uniforms.uSampler;\n    }\n    set texture(value: Texture)\n    {\n        if (this.uniforms.uSampler !== value)\n        {\n            this.uniforms.uSampler = value;\n            this.uvMatrix.texture = value;\n        }\n    }\n\n    /**\n     * This gets automatically set by the object using this.\n     *\n     * @default 1\n     */\n    set alpha(value: number)\n    {\n        if (value === this._alpha) return;\n\n        this._alpha = value;\n        this._colorDirty = true;\n    }\n    get alpha(): number\n    {\n        return this._alpha;\n    }\n\n    /**\n     * Multiply tint for the material.\n     *\n     * @default 0xFFFFFF\n     */\n    set tint(value: number)\n    {\n        if (value === this._tint) return;\n\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n        this._colorDirty = true;\n    }\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    /**\n     * Gets called automatically by the Mesh. Intended to be overridden for custom\n     * {@link MeshMaterial} objects.\n     */\n    public update(): void\n    {\n        if (this._colorDirty)\n        {\n            this._colorDirty = false;\n            const baseTexture = this.texture.baseTexture;\n\n            premultiplyTintToRgba(\n                this._tint, this._alpha, this.uniforms.uColor, (baseTexture.alphaMode as unknown as boolean)\n            );\n        }\n        if (this.uvMatrix.update())\n        {\n            this.uniforms.uTextureMatrix = this.uvMatrix.mapCoord;\n        }\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport { Buffer, Geometry } from '@pixi/core';\n\nimport type { IArrayBuffer } from '@pixi/core';\n\n/**\n * Standard 2D geometry used in PixiJS.\n *\n * Geometry can be defined without passing in a style or data if required.\n *\n * ```js\n * const geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1], 2);\n * geometry.addIndex([0,1,2,1,3,2]);\n *\n * ```\n *\n * @memberof PIXI\n */\nexport class MeshGeometry extends Geometry\n{\n    // Internal-only properties\n    /**\n     * Dirty flag to limit update calls on Mesh. For example,\n     * limiting updates on a single Mesh instance with a shared Geometry\n     * within the render loop.\n     *\n     * @private\n     * @default -1\n     */\n    _updateId: number;\n\n    /**\n     * @param {Float32Array|number[]} [vertices] - Positional data on geometry.\n     * @param {Float32Array|number[]} [uvs] - Texture UVs.\n     * @param {Uint16Array|number[]} [index] - IndexBuffer\n     */\n    constructor(vertices?: IArrayBuffer, uvs?: IArrayBuffer, index?: IArrayBuffer)\n    {\n        super();\n\n        const verticesBuffer = new Buffer(vertices);\n        const uvsBuffer = new Buffer(uvs, true);\n        const indexBuffer = new Buffer(index, true, true);\n\n        this.addAttribute('aVertexPosition', verticesBuffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', uvsBuffer, 2, false, TYPES.FLOAT)\n            .addIndex(indexBuffer);\n\n        this._updateId = -1;\n    }\n\n    /**\n     * If the vertex position is updated.\n     *\n     * @readonly\n     * @private\n     */\n    get vertexDirtyId(): number\n    {\n        return this.buffers[0]._updateID;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}