{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp, readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\n\nexport var FatOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(FatOscillator, _Source);\n\n  var _super = _createSuper(FatOscillator);\n\n  function FatOscillator() {\n    var _this;\n\n    _classCallCheck(this, FatOscillator);\n\n    _this = _super.call(this, optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]));\n    _this.name = \"FatOscillator\";\n    /**\n     * The array of oscillators\n     */\n\n    _this._oscillators = [];\n    var options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this._spread = options.spread;\n    _this._type = options.type;\n    _this._phase = options.phase;\n    _this._partials = options.partials;\n    _this._partialCount = options.partialCount; // set the count initially\n\n    _this.count = options.count;\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"detune\"]);\n    return _this;\n  }\n\n  _createClass(FatOscillator, [{\n    key: \"_start\",\n    value:\n    /**\n     * start the oscillator\n     */\n    function _start(time) {\n      time = this.toSeconds(time);\n\n      this._forEach(function (osc) {\n        return osc.start(time);\n      });\n    }\n    /**\n     * stop the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      time = this.toSeconds(time);\n\n      this._forEach(function (osc) {\n        return osc.stop(time);\n      });\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._forEach(function (osc) {\n        return osc.restart(time);\n      });\n    }\n    /**\n     * Iterate over all of the oscillators\n     */\n\n  }, {\n    key: \"_forEach\",\n    value: function _forEach(iterator) {\n      for (var i = 0; i < this._oscillators.length; i++) {\n        iterator(this._oscillators[i], i);\n      }\n    }\n    /**\n     * The type of the oscillator\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      this._type = type;\n\n      this._forEach(function (osc) {\n        return osc.type = type;\n      });\n    }\n    /**\n     * The detune spread between the oscillators. If \"count\" is\n     * set to 3 oscillators and the \"spread\" is set to 40,\n     * the three oscillators would be detuned like this: [-20, 0, 20]\n     * for a total detune spread of 40 cents.\n     * @example\n     * const fatOsc = new Tone.FatOscillator().toDestination().start();\n     * fatOsc.spread = 70;\n     */\n\n  }, {\n    key: \"spread\",\n    get: function get() {\n      return this._spread;\n    },\n    set: function set(spread) {\n      this._spread = spread;\n\n      if (this._oscillators.length > 1) {\n        var start = -spread / 2;\n        var step = spread / (this._oscillators.length - 1);\n\n        this._forEach(function (osc, i) {\n          return osc.detune.value = start + step * i;\n        });\n      }\n    }\n    /**\n     * The number of detuned oscillators. Must be an integer greater than 1.\n     * @example\n     * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n     * // use 4 sawtooth oscillators\n     * fatOsc.count = 4;\n     */\n\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this._oscillators.length;\n    },\n    set: function set(count) {\n      var _this2 = this;\n\n      assertRange(count, 1);\n\n      if (this._oscillators.length !== count) {\n        // dispose the previous oscillators\n        this._forEach(function (osc) {\n          return osc.dispose();\n        });\n\n        this._oscillators = [];\n\n        for (var i = 0; i < count; i++) {\n          var osc = new Oscillator({\n            context: this.context,\n            volume: -6 - count * 1.1,\n            type: this._type,\n            phase: this._phase + i / count * 360,\n            partialCount: this._partialCount,\n            onstop: i === 0 ? function () {\n              return _this2.onstop(_this2);\n            } : noOp\n          });\n\n          if (this.type === \"custom\") {\n            osc.partials = this._partials;\n          }\n\n          this.frequency.connect(osc.frequency);\n          this.detune.connect(osc.detune);\n          osc.detune.overridden = false;\n          osc.connect(this.output);\n          this._oscillators[i] = osc;\n        } // set the spread\n\n\n        this.spread = this._spread;\n\n        if (this.state === \"started\") {\n          this._forEach(function (osc) {\n            return osc.start();\n          });\n        }\n      }\n    }\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._phase;\n    },\n    set: function set(phase) {\n      var _this3 = this;\n\n      this._phase = phase;\n\n      this._forEach(function (osc, i) {\n        return osc.phase = _this3._phase + i / _this3.count * 360;\n      });\n    }\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return this._oscillators[0].baseType;\n    },\n    set: function set(baseType) {\n      this._forEach(function (osc) {\n        return osc.baseType = baseType;\n      });\n\n      this._type = this._oscillators[0].type;\n    }\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return this._oscillators[0].partials;\n    },\n    set: function set(partials) {\n      this._partials = partials;\n      this._partialCount = this._partials.length;\n\n      if (partials.length) {\n        this._type = \"custom\";\n\n        this._forEach(function (osc) {\n          return osc.partials = partials;\n        });\n      }\n    }\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return this._oscillators[0].partialCount;\n    },\n    set: function set(partialCount) {\n      this._partialCount = partialCount;\n\n      this._forEach(function (osc) {\n        return osc.partialCount = partialCount;\n      });\n\n      this._type = this._oscillators[0].type;\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FatOscillator.prototype), \"dispose\", this).call(this);\n\n      this.frequency.dispose();\n      this.detune.dispose();\n\n      this._forEach(function (osc) {\n        return osc.dispose();\n      });\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Oscillator.getDefaults(), {\n        count: 3,\n        spread: 20,\n        type: \"sawtooth\"\n      });\n    }\n  }]);\n\n  return FatOscillator;\n}(Source);","map":{"version":3,"mappings":"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","names":["optionsFromArguments","noOp","readOnly","Signal","Source","Oscillator","generateWaveform","assertRange","FatOscillator","getDefaults","arguments","options","frequency","context","units","value","detune","_spread","spread","_type","type","_phase","phase","_partials","partials","_partialCount","partialCount","count","time","toSeconds","_forEach","osc","start","stop","restart","iterator","i","_oscillators","length","step","dispose","volume","onstop","connect","overridden","output","state","baseType","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/source/oscillator/FatOscillator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}