{"ast":null,"code":"/*!\n * @pixi/sprite-tiling - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/sprite-tiling is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Texture, TextureMatrix, Shader, QuadUv, State, ObjectRenderer } from '@pixi/core';\nimport { Point, Rectangle, Transform, Matrix } from '@pixi/math';\nimport { Sprite } from '@pixi/sprite';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { premultiplyTintToRgba, correctBlendMode } from '@pixi/utils';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar tempPoint = new Point();\n/**\n * A tiling sprite is a fast way of rendering a tiling image.\n *\n * @memberof PIXI\n */\n\nvar TilingSprite =\n/** @class */\nfunction (_super) {\n  __extends(TilingSprite, _super);\n  /**\n   * @param texture - The texture of the tiling sprite.\n   * @param width - The width of the tiling sprite.\n   * @param height - The height of the tiling sprite.\n   */\n\n\n  function TilingSprite(texture, width, height) {\n    if (width === void 0) {\n      width = 100;\n    }\n\n    if (height === void 0) {\n      height = 100;\n    }\n\n    var _this = _super.call(this, texture) || this;\n\n    _this.tileTransform = new Transform(); // The width of the tiling sprite\n\n    _this._width = width; // The height of the tiling sprite\n\n    _this._height = height;\n    _this.uvMatrix = _this.texture.uvMatrix || new TextureMatrix(texture);\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_render' method.\n     *\n     * @default 'tilingSprite'\n     */\n\n    _this.pluginName = 'tilingSprite';\n    _this.uvRespectAnchor = false;\n    return _this;\n  }\n\n  Object.defineProperty(TilingSprite.prototype, \"clampMargin\", {\n    /**\n     * Changes frame clamping in corresponding textureTransform, shortcut\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     *\n     * @default 0.5\n     * @member {number}\n     */\n    get: function get() {\n      return this.uvMatrix.clampMargin;\n    },\n    set: function set(value) {\n      this.uvMatrix.clampMargin = value;\n      this.uvMatrix.update(true);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TilingSprite.prototype, \"tileScale\", {\n    /** The scaling of the image that is being tiled. */\n    get: function get() {\n      return this.tileTransform.scale;\n    },\n    set: function set(value) {\n      this.tileTransform.scale.copyFrom(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TilingSprite.prototype, \"tilePosition\", {\n    /** The offset of the image that is being tiled. */\n    get: function get() {\n      return this.tileTransform.position;\n    },\n    set: function set(value) {\n      this.tileTransform.position.copyFrom(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * @protected\n   */\n\n  TilingSprite.prototype._onTextureUpdate = function () {\n    if (this.uvMatrix) {\n      this.uvMatrix.texture = this._texture;\n    }\n\n    this._cachedTint = 0xFFFFFF;\n  };\n  /**\n   * Renders the object using the WebGL renderer\n   *\n   * @param renderer - The renderer\n   */\n\n\n  TilingSprite.prototype._render = function (renderer) {\n    // tweak our texture temporarily..\n    var texture = this._texture;\n\n    if (!texture || !texture.valid) {\n      return;\n    }\n\n    this.tileTransform.updateLocalTransform();\n    this.uvMatrix.update();\n    renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n    renderer.plugins[this.pluginName].render(this);\n  };\n  /** Updates the bounds of the tiling sprite. */\n\n\n  TilingSprite.prototype._calculateBounds = function () {\n    var minX = this._width * -this._anchor._x;\n    var minY = this._height * -this._anchor._y;\n    var maxX = this._width * (1 - this._anchor._x);\n    var maxY = this._height * (1 - this._anchor._y);\n\n    this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n  };\n  /**\n   * Gets the local bounds of the sprite object.\n   *\n   * @param rect - Optional output rectangle.\n   * @return The bounds.\n   */\n\n\n  TilingSprite.prototype.getLocalBounds = function (rect) {\n    // we can do a fast local bounds if the sprite has no children!\n    if (this.children.length === 0) {\n      this._bounds.minX = this._width * -this._anchor._x;\n      this._bounds.minY = this._height * -this._anchor._y;\n      this._bounds.maxX = this._width * (1 - this._anchor._x);\n      this._bounds.maxY = this._height * (1 - this._anchor._y);\n\n      if (!rect) {\n        if (!this._localBoundsRect) {\n          this._localBoundsRect = new Rectangle();\n        }\n\n        rect = this._localBoundsRect;\n      }\n\n      return this._bounds.getRectangle(rect);\n    }\n\n    return _super.prototype.getLocalBounds.call(this, rect);\n  };\n  /**\n   * Checks if a point is inside this tiling sprite.\n   *\n   * @param point - The point to check.\n   * @return Whether or not the sprite contains the point.\n   */\n\n\n  TilingSprite.prototype.containsPoint = function (point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    var width = this._width;\n    var height = this._height;\n    var x1 = -width * this.anchor._x;\n\n    if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n      var y1 = -height * this.anchor._y;\n\n      if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Destroys this sprite and optionally its texture and children\n   *\n   * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n   * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n   */\n\n\n  TilingSprite.prototype.destroy = function (options) {\n    _super.prototype.destroy.call(this, options);\n\n    this.tileTransform = null;\n    this.uvMatrix = null;\n  };\n  /**\n   * Helper function that creates a new tiling sprite based on the source you provide.\n   * The source can be - frame id, image url, video url, canvas element, video element, base texture\n   *\n   * @static\n   * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n   * @param {Object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n   * @param {number} options.width - required width of the tiling sprite\n   * @param {number} options.height - required height of the tiling sprite\n   * @return {PIXI.TilingSprite} The newly created texture\n   */\n\n\n  TilingSprite.from = function (source, options) {\n    var texture = source instanceof Texture ? source : Texture.from(source, options);\n    return new TilingSprite(texture, options.width, options.height);\n  };\n\n  Object.defineProperty(TilingSprite.prototype, \"width\", {\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) {\n      this._width = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TilingSprite.prototype, \"height\", {\n    /** The height of the TilingSprite, setting this will actually modify the scale to achieve the value set. */\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) {\n      this._height = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return TilingSprite;\n}(Sprite);\n\nvar fragmentSimpleSrc = \"#version 100\\n#define SHADER_NAME Tiling-Sprite-Simple-100\\n\\nprecision lowp float;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\n\\nvoid main(void)\\n{\\n    vec4 texSample = texture2D(uSampler, vTextureCoord);\\n    gl_FragColor = texSample * uColor;\\n}\\n\";\nvar gl1VertexSrc = \"#version 100\\n#define SHADER_NAME Tiling-Sprite-100\\n\\nprecision lowp float;\\n\\nattribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTransform;\\n\\nvarying vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\nvar gl1FragmentSrc = \"#version 100\\n#ifdef GL_EXT_shader_texture_lod\\n    #extension GL_EXT_shader_texture_lod : enable\\n#endif\\n#define SHADER_NAME Tiling-Sprite-100\\n\\nprecision lowp float;\\n\\nvarying vec2 vTextureCoord;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\nuniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\\n\\nvoid main(void)\\n{\\n    vec2 coord = vTextureCoord + ceil(uClampOffset - vTextureCoord);\\n    coord = (uMapCoord * vec3(coord, 1.0)).xy;\\n    vec2 unclamped = coord;\\n    coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\\n\\n    #ifdef GL_EXT_shader_texture_lod\\n        vec4 texSample = unclamped == coord\\n            ? texture2D(uSampler, coord) \\n            : texture2DLodEXT(uSampler, coord, 0);\\n    #else\\n        vec4 texSample = texture2D(uSampler, coord);\\n    #endif\\n\\n    gl_FragColor = texSample * uColor;\\n}\\n\";\nvar gl2VertexSrc = \"#version 300 es\\n#define SHADER_NAME Tiling-Sprite-300\\n\\nprecision lowp float;\\n\\nin vec2 aVertexPosition;\\nin vec2 aTextureCoord;\\n\\nuniform mat3 projectionMatrix;\\nuniform mat3 translationMatrix;\\nuniform mat3 uTransform;\\n\\nout vec2 vTextureCoord;\\n\\nvoid main(void)\\n{\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = (uTransform * vec3(aTextureCoord, 1.0)).xy;\\n}\\n\";\nvar gl2FragmentSrc = \"#version 300 es\\n#define SHADER_NAME Tiling-Sprite-100\\n\\nprecision lowp float;\\n\\nin vec2 vTextureCoord;\\n\\nout vec4 fragmentColor;\\n\\nuniform sampler2D uSampler;\\nuniform vec4 uColor;\\nuniform mat3 uMapCoord;\\nuniform vec4 uClampFrame;\\nuniform vec2 uClampOffset;\\n\\nvoid main(void)\\n{\\n    vec2 coord = vTextureCoord + ceil(uClampOffset - vTextureCoord);\\n    coord = (uMapCoord * vec3(coord, 1.0)).xy;\\n    vec2 unclamped = coord;\\n    coord = clamp(coord, uClampFrame.xy, uClampFrame.zw);\\n\\n    vec4 texSample = texture(uSampler, coord, unclamped == coord ? 0.0f : -32.0f);// lod-bias very negative to force lod 0\\n\\n    fragmentColor = texSample * uColor;\\n}\\n\";\nvar tempMat = new Matrix();\n/**\n * WebGL renderer plugin for tiling sprites\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\n\nvar TilingSpriteRenderer =\n/** @class */\nfunction (_super) {\n  __extends(TilingSpriteRenderer, _super);\n  /**\n   * constructor for renderer\n   *\n   * @param {PIXI.Renderer} renderer - The renderer this tiling awesomeness works for.\n   */\n\n\n  function TilingSpriteRenderer(renderer) {\n    var _this = _super.call(this, renderer) || this; // WebGL version is not available during initialization!\n\n\n    renderer.runners.contextChange.add(_this);\n    _this.quad = new QuadUv();\n    /**\n     * The WebGL state in which this renderer will work.\n     *\n     * @member {PIXI.State}\n     * @readonly\n     */\n\n    _this.state = State.for2d();\n    return _this;\n  }\n  /**\n   * Creates shaders when context is initialized.\n   */\n\n\n  TilingSpriteRenderer.prototype.contextChange = function () {\n    var renderer = this.renderer;\n    var uniforms = {\n      globals: renderer.globalUniforms\n    };\n    this.simpleShader = Shader.from(gl1VertexSrc, fragmentSimpleSrc, uniforms);\n    this.shader = renderer.context.webGLVersion > 1 ? Shader.from(gl2VertexSrc, gl2FragmentSrc, uniforms) : Shader.from(gl1VertexSrc, gl1FragmentSrc, uniforms);\n  };\n  /**\n   * @param {PIXI.TilingSprite} ts - tilingSprite to be rendered\n   */\n\n\n  TilingSpriteRenderer.prototype.render = function (ts) {\n    var renderer = this.renderer;\n    var quad = this.quad;\n    var vertices = quad.vertices;\n    vertices[0] = vertices[6] = ts._width * -ts.anchor.x;\n    vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n    vertices[2] = vertices[4] = ts._width * (1.0 - ts.anchor.x);\n    vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n    var anchorX = ts.uvRespectAnchor ? ts.anchor.x : 0;\n    var anchorY = ts.uvRespectAnchor ? ts.anchor.y : 0;\n    vertices = quad.uvs;\n    vertices[0] = vertices[6] = -anchorX;\n    vertices[1] = vertices[3] = -anchorY;\n    vertices[2] = vertices[4] = 1.0 - anchorX;\n    vertices[5] = vertices[7] = 1.0 - anchorY;\n    quad.invalidate();\n    var tex = ts._texture;\n    var baseTex = tex.baseTexture;\n    var lt = ts.tileTransform.localTransform;\n    var uv = ts.uvMatrix;\n    var isSimple = baseTex.isPowerOfTwo && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height; // auto, force repeat wrapMode for big tiling textures\n\n    if (isSimple) {\n      if (!baseTex._glTextures[renderer.CONTEXT_UID]) {\n        if (baseTex.wrapMode === WRAP_MODES.CLAMP) {\n          baseTex.wrapMode = WRAP_MODES.REPEAT;\n        }\n      } else {\n        isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n      }\n    }\n\n    var shader = isSimple ? this.simpleShader : this.shader;\n    var w = tex.width;\n    var h = tex.height;\n    var W = ts._width;\n    var H = ts._height;\n    tempMat.set(lt.a * w / W, lt.b * w / H, lt.c * h / W, lt.d * h / H, lt.tx / W, lt.ty / H); // that part is the same as above:\n    // tempMat.identity();\n    // tempMat.scale(tex.width, tex.height);\n    // tempMat.prepend(lt);\n    // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n\n    tempMat.invert();\n\n    if (isSimple) {\n      tempMat.prepend(uv.mapCoord);\n    } else {\n      shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n      shader.uniforms.uClampFrame = uv.uClampFrame;\n      shader.uniforms.uClampOffset = uv.uClampOffset;\n    }\n\n    shader.uniforms.uTransform = tempMat.toArray(true);\n    shader.uniforms.uColor = premultiplyTintToRgba(ts.tint, ts.worldAlpha, shader.uniforms.uColor, baseTex.alphaMode);\n    shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);\n    shader.uniforms.uSampler = tex;\n    renderer.shader.bind(shader);\n    renderer.geometry.bind(quad);\n    this.state.blendMode = correctBlendMode(ts.blendMode, baseTex.alphaMode);\n    renderer.state.set(this.state);\n    renderer.geometry.draw(this.renderer.gl.TRIANGLES, 6, 0);\n  };\n\n  return TilingSpriteRenderer;\n}(ObjectRenderer);\n\nexport { TilingSprite, TilingSpriteRenderer };","map":{"version":3,"mappings":"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","names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","tempPoint","Point","texture","width","height","_super","_this","tileTransform","Transform","_width","_height","uvMatrix","TextureMatrix","pluginName","uvRespectAnchor","TilingSprite","clampMargin","value","update","scale","copyFrom","position","_texture","_cachedTint","renderer","valid","updateLocalTransform","batch","setObjectRenderer","plugins","render","minX","_anchor","_x","minY","_y","maxX","maxY","_bounds","addFrame","transform","rect","children","length","_localBoundsRect","Rectangle","getRectangle","getLocalBounds","call","point","worldTransform","applyInverse","x1","anchor","x","y1","y","options","destroy","source","Texture","from","Sprite","tempMat","Matrix","runners","contextChange","add","quad","QuadUv","state","State","for2d","TilingSpriteRenderer","uniforms","globals","globalUniforms","simpleShader","Shader","gl1VertexSrc","fragmentSimpleSrc","shader","context","webGLVersion","gl2VertexSrc","gl2FragmentSrc","gl1FragmentSrc","ts","vertices","anchorX","anchorY","uvs","invalidate","tex","baseTex","baseTexture","lt","localTransform","uv","isSimple","isPowerOfTwo","frame","_glTextures","CONTEXT_UID","wrapMode","WRAP_MODES","CLAMP","REPEAT","w","h","W","H","set","a","c","tx","ty","invert","prepend","mapCoord","uMapCoord","toArray","uClampFrame","uClampOffset","uTransform","uColor","premultiplyTintToRgba","tint","worldAlpha","alphaMode","translationMatrix","uSampler","bind","geometry","blendMode","correctBlendMode","draw","gl","TRIANGLES","ObjectRenderer"],"sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/TilingSprite.ts","../../src/TilingSpriteRenderer.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Texture, TextureMatrix } from '@pixi/core';\nimport { Point, Rectangle, Transform  } from '@pixi/math';\nimport { Sprite } from '@pixi/sprite';\nimport type { Renderer, IBaseTextureOptions, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { IPoint, IPointData, ISize, ObservablePoint } from '@pixi/math';\n\nconst tempPoint = new Point();\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface TilingSprite extends GlobalMixins.TilingSprite {}\n\n/**\n * A tiling sprite is a fast way of rendering a tiling image.\n *\n * @memberof PIXI\n */\nexport class TilingSprite extends Sprite\n{\n    /** Tile transform */\n    public tileTransform: Transform;\n\n    /** Matrix that is applied to UV to get the coords in Texture normalized space to coords in BaseTexture space. */\n    public uvMatrix: TextureMatrix;\n\n    /**\n     * Flags whether the tiling pattern should originate from the origin instead of the top-left corner in\n     * local space.\n     *\n     * This will make the texture coordinates assigned to each vertex dependent on the value of the anchor. Without\n     * this, the top-left corner always gets the (0, 0) texture coordinate.\n     *\n     * @default false\n     */\n    public uvRespectAnchor: boolean;\n\n    /**\n     * @param texture - The texture of the tiling sprite.\n     * @param width - The width of the tiling sprite.\n     * @param height - The height of the tiling sprite.\n     */\n    constructor(texture: Texture, width = 100, height = 100)\n    {\n        super(texture);\n\n        this.tileTransform = new Transform();\n\n        // The width of the tiling sprite\n        this._width = width;\n\n        // The height of the tiling sprite\n        this._height = height;\n\n        this.uvMatrix = this.texture.uvMatrix || new TextureMatrix(texture);\n\n        /**\n         * Plugin that is responsible for rendering this element.\n         * Allows to customize the rendering process without overriding '_render' method.\n         *\n         * @default 'tilingSprite'\n         */\n        this.pluginName = 'tilingSprite';\n\n        this.uvRespectAnchor = false;\n    }\n    /**\n     * Changes frame clamping in corresponding textureTransform, shortcut\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     *\n     * @default 0.5\n     * @member {number}\n     */\n    get clampMargin(): number\n    {\n        return this.uvMatrix.clampMargin;\n    }\n\n    set clampMargin(value: number)\n    {\n        this.uvMatrix.clampMargin = value;\n        this.uvMatrix.update(true);\n    }\n\n    /** The scaling of the image that is being tiled. */\n    get tileScale(): ObservablePoint\n    {\n        return this.tileTransform.scale;\n    }\n\n    set tileScale(value: ObservablePoint)\n    {\n        this.tileTransform.scale.copyFrom(value as IPoint);\n    }\n\n    /** The offset of the image that is being tiled. */\n    get tilePosition(): ObservablePoint\n    {\n        return this.tileTransform.position;\n    }\n\n    set tilePosition(value: ObservablePoint)\n    {\n        this.tileTransform.position.copyFrom(value as IPoint);\n    }\n\n    /**\n     * @protected\n     */\n    protected _onTextureUpdate(): void\n    {\n        if (this.uvMatrix)\n        {\n            this.uvMatrix.texture = this._texture;\n        }\n        this._cachedTint = 0xFFFFFF;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @param renderer - The renderer\n     */\n    protected _render(renderer: Renderer): void\n    {\n        // tweak our texture temporarily..\n        const texture = this._texture;\n\n        if (!texture || !texture.valid)\n        {\n            return;\n        }\n\n        this.tileTransform.updateLocalTransform();\n        this.uvMatrix.update();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the tiling sprite. */\n    protected _calculateBounds(): void\n    {\n        const minX = this._width * -this._anchor._x;\n        const minY = this._height * -this._anchor._y;\n        const maxX = this._width * (1 - this._anchor._x);\n        const maxY = this._height * (1 - this._anchor._y);\n\n        this._bounds.addFrame(this.transform, minX, minY, maxX, maxY);\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param rect - Optional output rectangle.\n     * @return The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            this._bounds.minX = this._width * -this._anchor._x;\n            this._bounds.minY = this._height * -this._anchor._y;\n            this._bounds.maxX = this._width * (1 - this._anchor._x);\n            this._bounds.maxY = this._height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._bounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Checks if a point is inside this tiling sprite.\n     *\n     * @param point - The point to check.\n     * @return Whether or not the sprite contains the point.\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._width;\n        const height = this._height;\n        const x1 = -width * this.anchor._x;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            const y1 = -height * this.anchor._y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param {boolean} [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        this.tileTransform = null;\n        this.uvMatrix = null;\n    }\n\n    /**\n     * Helper function that creates a new tiling sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {Object} options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {number} options.width - required width of the tiling sprite\n     * @param {number} options.height - required height of the tiling sprite\n     * @return {PIXI.TilingSprite} The newly created texture\n     */\n    static from(source: TextureSource, options: ISize & IBaseTextureOptions): TilingSprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new TilingSprite(\n            texture,\n            options.width,\n            options.height\n        );\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n    }\n\n    /** The height of the TilingSprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n    }\n}\n","import { ObjectRenderer, Shader, State, QuadUv } from '@pixi/core';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { Matrix } from '@pixi/math';\nimport { premultiplyTintToRgba, correctBlendMode } from '@pixi/utils';\n\nimport fragmentSimpleSrc from './sprite-tiling-simple.frag';\nimport gl1VertexSrc from './sprite-tiling-fallback.vert';\nimport gl1FragmentSrc from './sprite-tiling-fallback.frag';\nimport gl2VertexSrc from './sprite-tiling.vert';\nimport gl2FragmentSrc from './sprite-tiling.frag';\n\nimport type { Renderer } from '@pixi/core';\nimport type { TilingSprite } from './TilingSprite';\n\nconst tempMat = new Matrix();\n\n/**\n * WebGL renderer plugin for tiling sprites\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport class TilingSpriteRenderer extends ObjectRenderer\n{\n    public shader: Shader;\n    public simpleShader: Shader;\n    public quad: QuadUv;\n    public readonly state: State;\n\n    /**\n     * constructor for renderer\n     *\n     * @param {PIXI.Renderer} renderer - The renderer this tiling awesomeness works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        // WebGL version is not available during initialization!\n        renderer.runners.contextChange.add(this);\n\n        this.quad = new QuadUv();\n\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State}\n         * @readonly\n         */\n        this.state = State.for2d();\n    }\n\n    /**\n     * Creates shaders when context is initialized.\n     */\n    contextChange(): void\n    {\n        const renderer = this.renderer;\n        const uniforms = { globals: renderer.globalUniforms };\n\n        this.simpleShader = Shader.from(gl1VertexSrc, fragmentSimpleSrc, uniforms);\n        this.shader = renderer.context.webGLVersion > 1\n            ? Shader.from(gl2VertexSrc, gl2FragmentSrc, uniforms)\n            : Shader.from(gl1VertexSrc, gl1FragmentSrc, uniforms);\n    }\n\n    /**\n     * @param {PIXI.TilingSprite} ts - tilingSprite to be rendered\n     */\n    public render(ts: TilingSprite): void\n    {\n        const renderer = this.renderer;\n        const quad = this.quad;\n\n        let vertices = quad.vertices;\n\n        vertices[0] = vertices[6] = (ts._width) * -ts.anchor.x;\n        vertices[1] = vertices[3] = ts._height * -ts.anchor.y;\n\n        vertices[2] = vertices[4] = (ts._width) * (1.0 - ts.anchor.x);\n        vertices[5] = vertices[7] = ts._height * (1.0 - ts.anchor.y);\n\n        const anchorX = ts.uvRespectAnchor ? ts.anchor.x : 0;\n        const anchorY = ts.uvRespectAnchor ? ts.anchor.y : 0;\n\n        vertices = quad.uvs;\n\n        vertices[0] = vertices[6] = -anchorX;\n        vertices[1] = vertices[3] = -anchorY;\n\n        vertices[2] = vertices[4] = 1.0 - anchorX;\n        vertices[5] = vertices[7] = 1.0 - anchorY;\n\n        quad.invalidate();\n\n        const tex = ts._texture;\n        const baseTex = tex.baseTexture;\n        const lt = ts.tileTransform.localTransform;\n        const uv = ts.uvMatrix;\n        let isSimple = baseTex.isPowerOfTwo\n            && tex.frame.width === baseTex.width && tex.frame.height === baseTex.height;\n\n        // auto, force repeat wrapMode for big tiling textures\n        if (isSimple)\n        {\n            if (!baseTex._glTextures[renderer.CONTEXT_UID])\n            {\n                if (baseTex.wrapMode === WRAP_MODES.CLAMP)\n                {\n                    baseTex.wrapMode = WRAP_MODES.REPEAT;\n                }\n            }\n            else\n            {\n                isSimple = baseTex.wrapMode !== WRAP_MODES.CLAMP;\n            }\n        }\n\n        const shader = isSimple ? this.simpleShader : this.shader;\n\n        const w = tex.width;\n        const h = tex.height;\n        const W = ts._width;\n        const H = ts._height;\n\n        tempMat.set(lt.a * w / W,\n            lt.b * w / H,\n            lt.c * h / W,\n            lt.d * h / H,\n            lt.tx / W,\n            lt.ty / H);\n\n        // that part is the same as above:\n        // tempMat.identity();\n        // tempMat.scale(tex.width, tex.height);\n        // tempMat.prepend(lt);\n        // tempMat.scale(1.0 / ts._width, 1.0 / ts._height);\n\n        tempMat.invert();\n        if (isSimple)\n        {\n            tempMat.prepend(uv.mapCoord);\n        }\n        else\n        {\n            shader.uniforms.uMapCoord = uv.mapCoord.toArray(true);\n            shader.uniforms.uClampFrame = uv.uClampFrame;\n            shader.uniforms.uClampOffset = uv.uClampOffset;\n        }\n\n        shader.uniforms.uTransform = tempMat.toArray(true);\n        shader.uniforms.uColor = premultiplyTintToRgba(ts.tint, ts.worldAlpha,\n            shader.uniforms.uColor, baseTex.alphaMode as any);\n        shader.uniforms.translationMatrix = ts.transform.worldTransform.toArray(true);\n        shader.uniforms.uSampler = tex;\n\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(quad);\n\n        this.state.blendMode = correctBlendMode(ts.blendMode, baseTex.alphaMode as any);\n        renderer.state.set(this.state);\n        renderer.geometry.draw(this.renderer.gl.TRIANGLES, 6, 0);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}