{"ast":null,"code":"import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport var createNativeAudioBufferSourceNodeFactory = function createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) {\n  return function (nativeContext, options) {\n    var nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n    assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer'); // Bug #149: Safari does not yet support the detune AudioParam.\n\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n    assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart'); // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, function () {\n      return testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext);\n    })) {\n      wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n    } // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, function () {\n      return testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext);\n    })) {\n      wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n    } // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n\n\n    if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, function () {\n      return testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext);\n    })) {\n      wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #44: Safari does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, function () {\n      return testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext);\n    })) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, function () {\n      return testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext);\n    })) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, function () {\n      return testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext);\n    })) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n    } // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n    return nativeAudioBufferSourceNode;\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,oCAAT,QAAqD,uDAArD;AACA,SAASC,2BAAT,QAA4C,4CAA5C;AACA,SAASC,4BAAT,QAA6C,6CAA7C;AACA,SAASC,oDAAT,QAAqE,yEAArE;AACA,SAASC,yDAAT,QAA0E,8EAA1E;AACA,SAASC,wDAAT,QAAyE,6EAAzE;AAGA,OAAO,IAAMC,wCAAwC,GAA+C,SAAvFA,wCAAuF,CAChGC,mBADgG,EAEhGC,eAFgG,EAGhGC,2DAHgG,EAIhGC,yDAJgG,EAKhGC,yDALgG,EAMhGC,gEANgG,EAOhGC,6DAPgG,EAQhGC,+DARgG,EAShGC,mDATgG,EAUhGC,kDAVgG,EAWhGC,sDAXgG,EAYhG;AACA,SAAO,UAACC,aAAD,EAAgBC,OAAhB,EAA2B;AAC9B,QAAMC,2BAA2B,GAAGF,aAAa,CAACG,kBAAd,EAApC;AAEAnB,gCAA4B,CAACkB,2BAAD,EAA8BD,OAA9B,CAA5B;AAEAnB,wCAAoC,CAACoB,2BAAD,EAA8BD,OAA9B,EAAuC,cAAvC,CAApC;AAEAlB,+BAA2B,CAACmB,2BAAD,EAA8BD,OAA9B,EAAuC,QAAvC,CAA3B,CAP8B,CAS9B;;AAEAlB,+BAA2B,CAACmB,2BAAD,EAA8BD,OAA9B,EAAuC,MAAvC,CAA3B;AACAlB,+BAA2B,CAACmB,2BAAD,EAA8BD,OAA9B,EAAuC,SAAvC,CAA3B;AACAlB,+BAA2B,CAACmB,2BAAD,EAA8BD,OAA9B,EAAuC,WAAvC,CAA3B,CAb8B,CAe9B;;AACA,QACI,CAACX,eAAe,CAACC,2DAAD,EAA8D;AAAA,aAC1EA,2DAA2D,CAACS,aAAD,CADe;AAAA,KAA9D,CADpB,EAIE;AACEf,0DAAoD,CAACiB,2BAAD,CAApD;AACH,KAtB6B,CAwB9B;;;AACA,QACI,CAACZ,eAAe,CAACE,yDAAD,EAA4D;AAAA,aACxEA,yDAAyD,CAACQ,aAAD,CADe;AAAA,KAA5D,CADpB,EAIE;AACEH,yDAAmD,CAACK,2BAAD,CAAnD;AACH,KA/B6B,CAiC9B;;;AACA,QACI,CAACZ,eAAe,CAACG,yDAAD,EAA4D;AAAA,aACxEA,yDAAyD,CAACO,aAAD,CADe;AAAA,KAA5D,CADpB,EAIE;AACEF,wDAAkD,CAACI,2BAAD,EAA8BF,aAA9B,CAAlD;AACH,KAxC6B,CA0C9B;;;AACA,QACI,CAACV,eAAe,CAACI,gEAAD,EAAmE;AAAA,aAC/EA,gEAAgE,CAACM,aAAD,CADe;AAAA,KAAnE,CADpB,EAIE;AACEd,+DAAyD,CAACgB,2BAAD,CAAzD;AACH,KAjD6B,CAmD9B;;;AACA,QACI,CAACZ,eAAe,CAACK,6DAAD,EAAgE;AAAA,aAC5EA,6DAA6D,CAACK,aAAD,CADe;AAAA,KAAhE,CADpB,EAIE;AACED,4DAAsD,CAACG,2BAAD,EAA8BF,aAA9B,CAAtD;AACH,KA1D6B,CA4D9B;;;AACA,QACI,CAACV,eAAe,CAACM,+DAAD,EAAkE;AAAA,aAC9EA,+DAA+D,CAACI,aAAD,CADe;AAAA,KAAlE,CADpB,EAIE;AACEb,8DAAwD,CAACe,2BAAD,CAAxD;AACH,KAnE6B,CAqE9B;;;AACAb,uBAAmB,CAACW,aAAD,EAAgBE,2BAAhB,CAAnB;AAEA,WAAOA,2BAAP;AACH,GAzED;AA0EH,CAvFM","names":["assignNativeAudioNodeAudioParamValue","assignNativeAudioNodeOption","assignNativeAudioNodeOptions","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","createNativeAudioBufferSourceNodeFactory","addSilentConnection","cacheTestResult","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioBufferSourceNodeStopMethodNullifiedBuffer","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","nativeContext","options","nativeAudioBufferSourceNode","createBufferSource"],"sourceRoot":"","sources":["../../../src/factories/native-audio-buffer-source-node-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}