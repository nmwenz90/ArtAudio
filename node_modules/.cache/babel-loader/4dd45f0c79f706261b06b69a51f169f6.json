{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from \"tslib\";\nimport { Ticker } from \"../clock/Ticker\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport { createAudioContext, createAudioWorkletNode as _createAudioWorkletNode } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext } from \"./BaseContext\";\nimport { assert } from \"../util/Debug\";\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\n\nexport var Context = /*#__PURE__*/function (_BaseContext) {\n  _inherits(Context, _BaseContext);\n\n  var _super = _createSuper(Context);\n\n  function Context() {\n    var _this;\n\n    _classCallCheck(this, Context);\n\n    _this = _super.call(this);\n    _this.name = \"Context\";\n    /**\n     * An object containing all of the constants AudioBufferSourceNodes\n     */\n\n    _this._constants = new Map();\n    /**\n     * All of the setTimeout events.\n     */\n\n    _this._timeouts = new Timeline();\n    /**\n     * The timeout id counter\n     */\n\n    _this._timeoutIds = 0;\n    /**\n     * Private indicator if the context has been initialized\n     */\n\n    _this._initialized = false;\n    /**\n     * Indicates if the context is an OfflineAudioContext or an AudioContext\n     */\n\n    _this.isOffline = false; //--------------------------------------------\n    // AUDIO WORKLET\n    //--------------------------------------------\n\n    /**\n     * Maps a module name to promise of the addModule method\n     */\n\n    _this._workletModules = new Map();\n    var options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n    if (options.context) {\n      _this._context = options.context;\n    } else {\n      _this._context = createAudioContext({\n        latencyHint: options.latencyHint\n      });\n    }\n\n    _this._ticker = new Ticker(_this.emit.bind(_assertThisInitialized(_this), \"tick\"), options.clockSource, options.updateInterval);\n\n    _this.on(\"tick\", _this._timeoutLoop.bind(_assertThisInitialized(_this))); // fwd events from the context\n\n\n    _this._context.onstatechange = function () {\n      _this.emit(\"statechange\", _this.state);\n    };\n\n    _this._setLatencyHint(options.latencyHint);\n\n    _this.lookAhead = options.lookAhead;\n    return _this;\n  }\n\n  _createClass(Context, [{\n    key: \"initialize\",\n    value:\n    /**\n     * Finish setting up the context. **You usually do not need to do this manually.**\n     */\n    function initialize() {\n      if (!this._initialized) {\n        // add any additional modules\n        initializeContext(this);\n        this._initialized = true;\n      }\n\n      return this;\n    } //---------------------------\n    // BASE AUDIO CONTEXT METHODS\n    //---------------------------\n\n  }, {\n    key: \"createAnalyser\",\n    value: function createAnalyser() {\n      return this._context.createAnalyser();\n    }\n  }, {\n    key: \"createOscillator\",\n    value: function createOscillator() {\n      return this._context.createOscillator();\n    }\n  }, {\n    key: \"createBufferSource\",\n    value: function createBufferSource() {\n      return this._context.createBufferSource();\n    }\n  }, {\n    key: \"createBiquadFilter\",\n    value: function createBiquadFilter() {\n      return this._context.createBiquadFilter();\n    }\n  }, {\n    key: \"createBuffer\",\n    value: function createBuffer(numberOfChannels, length, sampleRate) {\n      return this._context.createBuffer(numberOfChannels, length, sampleRate);\n    }\n  }, {\n    key: \"createChannelMerger\",\n    value: function createChannelMerger(numberOfInputs) {\n      return this._context.createChannelMerger(numberOfInputs);\n    }\n  }, {\n    key: \"createChannelSplitter\",\n    value: function createChannelSplitter(numberOfOutputs) {\n      return this._context.createChannelSplitter(numberOfOutputs);\n    }\n  }, {\n    key: \"createConstantSource\",\n    value: function createConstantSource() {\n      return this._context.createConstantSource();\n    }\n  }, {\n    key: \"createConvolver\",\n    value: function createConvolver() {\n      return this._context.createConvolver();\n    }\n  }, {\n    key: \"createDelay\",\n    value: function createDelay(maxDelayTime) {\n      return this._context.createDelay(maxDelayTime);\n    }\n  }, {\n    key: \"createDynamicsCompressor\",\n    value: function createDynamicsCompressor() {\n      return this._context.createDynamicsCompressor();\n    }\n  }, {\n    key: \"createGain\",\n    value: function createGain() {\n      return this._context.createGain();\n    }\n  }, {\n    key: \"createIIRFilter\",\n    value: function createIIRFilter(feedForward, feedback) {\n      // @ts-ignore\n      return this._context.createIIRFilter(feedForward, feedback);\n    }\n  }, {\n    key: \"createPanner\",\n    value: function createPanner() {\n      return this._context.createPanner();\n    }\n  }, {\n    key: \"createPeriodicWave\",\n    value: function createPeriodicWave(real, imag, constraints) {\n      return this._context.createPeriodicWave(real, imag, constraints);\n    }\n  }, {\n    key: \"createStereoPanner\",\n    value: function createStereoPanner() {\n      return this._context.createStereoPanner();\n    }\n  }, {\n    key: \"createWaveShaper\",\n    value: function createWaveShaper() {\n      return this._context.createWaveShaper();\n    }\n  }, {\n    key: \"createMediaStreamSource\",\n    value: function createMediaStreamSource(stream) {\n      assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n      var context = this._context;\n      return context.createMediaStreamSource(stream);\n    }\n  }, {\n    key: \"createMediaElementSource\",\n    value: function createMediaElementSource(element) {\n      assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n      var context = this._context;\n      return context.createMediaElementSource(element);\n    }\n  }, {\n    key: \"createMediaStreamDestination\",\n    value: function createMediaStreamDestination() {\n      assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n      var context = this._context;\n      return context.createMediaStreamDestination();\n    }\n  }, {\n    key: \"decodeAudioData\",\n    value: function decodeAudioData(audioData) {\n      return this._context.decodeAudioData(audioData);\n    }\n    /**\n     * The current time in seconds of the AudioContext.\n     */\n\n  }, {\n    key: \"currentTime\",\n    get: function get() {\n      return this._context.currentTime;\n    }\n    /**\n     * The current time in seconds of the AudioContext.\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._context.state;\n    }\n    /**\n     * The current time in seconds of the AudioContext.\n     */\n\n  }, {\n    key: \"sampleRate\",\n    get: function get() {\n      return this._context.sampleRate;\n    }\n    /**\n     * The listener\n     */\n\n  }, {\n    key: \"listener\",\n    get: function get() {\n      this.initialize();\n      return this._listener;\n    },\n    set: function set(l) {\n      assert(!this._initialized, \"The listener cannot be set after initialization.\");\n      this._listener = l;\n    }\n    /**\n     * There is only one Transport per Context. It is created on initialization.\n     */\n\n  }, {\n    key: \"transport\",\n    get: function get() {\n      this.initialize();\n      return this._transport;\n    },\n    set: function set(t) {\n      assert(!this._initialized, \"The transport cannot be set after initialization.\");\n      this._transport = t;\n    }\n    /**\n     * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n     */\n\n  }, {\n    key: \"draw\",\n    get: function get() {\n      this.initialize();\n      return this._draw;\n    },\n    set: function set(d) {\n      assert(!this._initialized, \"Draw cannot be set after initialization.\");\n      this._draw = d;\n    }\n    /**\n     * A reference to the Context's destination node.\n     */\n\n  }, {\n    key: \"destination\",\n    get: function get() {\n      this.initialize();\n      return this._destination;\n    },\n    set: function set(d) {\n      assert(!this._initialized, \"The destination cannot be set after initialization.\");\n      this._destination = d;\n    }\n    /**\n     * Create an audio worklet node from a name and options. The module\n     * must first be loaded using [[addAudioWorkletModule]].\n     */\n\n  }, {\n    key: \"createAudioWorkletNode\",\n    value: function createAudioWorkletNode(name, options) {\n      return _createAudioWorkletNode(this.rawContext, name, options);\n    }\n    /**\n     * Add an AudioWorkletProcessor module\n     * @param url The url of the module\n     * @param name The name of the module\n     */\n\n  }, {\n    key: \"addAudioWorkletModule\",\n    value: function addAudioWorkletModule(url, name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert(isDefined(this.rawContext.audioWorklet), \"AudioWorkletNode is only available in a secure context (https or localhost)\");\n\n                if (!this._workletModules.has(name)) {\n                  this._workletModules.set(name, this.rawContext.audioWorklet.addModule(url));\n                }\n\n                _context.next = 4;\n                return this._workletModules.get(name);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Returns a promise which resolves when all of the worklets have been loaded on this context\n     */\n\n  }, {\n    key: \"workletsAreReady\",\n    value: function workletsAreReady() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var promises;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                promises = [];\n\n                this._workletModules.forEach(function (promise) {\n                  return promises.push(promise);\n                });\n\n                _context2.next = 4;\n                return Promise.all(promises);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    } //---------------------------\n    // TICKER\n    //---------------------------\n\n    /**\n     * How often the interval callback is invoked.\n     * This number corresponds to how responsive the scheduling\n     * can be. context.updateInterval + context.lookAhead gives you the\n     * total latency between scheduling an event and hearing it.\n     */\n\n  }, {\n    key: \"updateInterval\",\n    get: function get() {\n      return this._ticker.updateInterval;\n    },\n    set: function set(interval) {\n      this._ticker.updateInterval = interval;\n    }\n    /**\n     * What the source of the clock is, either \"worker\" (default),\n     * \"timeout\", or \"offline\" (none).\n     */\n\n  }, {\n    key: \"clockSource\",\n    get: function get() {\n      return this._ticker.type;\n    },\n    set: function set(type) {\n      this._ticker.type = type;\n    }\n    /**\n     * The type of playback, which affects tradeoffs between audio\n     * output latency and responsiveness.\n     * In addition to setting the value in seconds, the latencyHint also\n     * accepts the strings \"interactive\" (prioritizes low latency),\n     * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n     * latency and performance).\n     * @example\n     * // prioritize sustained playback\n     * const context = new Tone.Context({ latencyHint: \"playback\" });\n     * // set this context as the global Context\n     * Tone.setContext(context);\n     * // the global context is gettable with Tone.getContext()\n     * console.log(Tone.getContext().latencyHint);\n     */\n\n  }, {\n    key: \"latencyHint\",\n    get: function get() {\n      return this._latencyHint;\n    }\n    /**\n     * Update the lookAhead and updateInterval based on the latencyHint\n     */\n\n  }, {\n    key: \"_setLatencyHint\",\n    value: function _setLatencyHint(hint) {\n      var lookAheadValue = 0;\n      this._latencyHint = hint;\n\n      if (isString(hint)) {\n        switch (hint) {\n          case \"interactive\":\n            lookAheadValue = 0.1;\n            break;\n\n          case \"playback\":\n            lookAheadValue = 0.5;\n            break;\n\n          case \"balanced\":\n            lookAheadValue = 0.25;\n            break;\n        }\n      }\n\n      this.lookAhead = lookAheadValue;\n      this.updateInterval = lookAheadValue / 2;\n    }\n    /**\n     * The unwrapped AudioContext or OfflineAudioContext\n     */\n\n  }, {\n    key: \"rawContext\",\n    get: function get() {\n      return this._context;\n    }\n    /**\n     * The current audio context time plus a short [[lookAhead]].\n     */\n\n  }, {\n    key: \"now\",\n    value: function now() {\n      return this._context.currentTime + this.lookAhead;\n    }\n    /**\n     * The current audio context time without the [[lookAhead]].\n     * In most cases it is better to use [[now]] instead of [[immediate]] since\n     * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n     * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n     * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n     */\n\n  }, {\n    key: \"immediate\",\n    value: function immediate() {\n      return this._context.currentTime;\n    }\n    /**\n     * Starts the audio context from a suspended state. This is required\n     * to initially start the AudioContext. See [[Tone.start]]\n     */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (isAudioContext(this._context)) {\n        return this._context.resume();\n      } else {\n        return Promise.resolve();\n      }\n    }\n    /**\n     * Close the context. Once closed, the context can no longer be used and\n     * any AudioNodes created from the context will be silent.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!isAudioContext(this._context)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return this._context.close();\n\n              case 3:\n                if (this._initialized) {\n                  closeContext(this);\n                }\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * **Internal** Generate a looped buffer at some constant value.\n     */\n\n  }, {\n    key: \"getConstant\",\n    value: function getConstant(val) {\n      if (this._constants.has(val)) {\n        return this._constants.get(val);\n      } else {\n        var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\n        var arr = buffer.getChannelData(0);\n\n        for (var i = 0; i < arr.length; i++) {\n          arr[i] = val;\n        }\n\n        var constant = this._context.createBufferSource();\n\n        constant.channelCount = 1;\n        constant.channelCountMode = \"explicit\";\n        constant.buffer = buffer;\n        constant.loop = true;\n        constant.start(0);\n\n        this._constants.set(val, constant);\n\n        return constant;\n      }\n    }\n    /**\n     * Clean up. Also closes the audio context.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(Context.prototype), \"dispose\", this).call(this);\n\n      this._ticker.dispose();\n\n      this._timeouts.dispose();\n\n      Object.keys(this._constants).map(function (val) {\n        return _this2._constants[val].disconnect();\n      });\n      return this;\n    } //---------------------------\n    // TIMEOUTS\n    //---------------------------\n\n    /**\n     * The private loop which keeps track of the context scheduled timeouts\n     * Is invoked from the clock source\n     */\n\n  }, {\n    key: \"_timeoutLoop\",\n    value: function _timeoutLoop() {\n      var now = this.now();\n\n      var firstEvent = this._timeouts.peek();\n\n      while (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n        // invoke the callback\n        firstEvent.callback(); // shift the first event off\n\n        this._timeouts.shift(); // get the next one\n\n\n        firstEvent = this._timeouts.peek();\n      }\n    }\n    /**\n     * A setTimeout which is guaranteed by the clock source.\n     * Also runs in the offline context.\n     * @param  fn       The callback to invoke\n     * @param  timeout  The timeout in seconds\n     * @returns ID to use when invoking Context.clearTimeout\n     */\n\n  }, {\n    key: \"setTimeout\",\n    value: function setTimeout(fn, timeout) {\n      this._timeoutIds++;\n      var now = this.now();\n\n      this._timeouts.add({\n        callback: fn,\n        id: this._timeoutIds,\n        time: now + timeout\n      });\n\n      return this._timeoutIds;\n    }\n    /**\n     * Clears a previously scheduled timeout with Tone.context.setTimeout\n     * @param  id  The ID returned from setTimeout\n     */\n\n  }, {\n    key: \"clearTimeout\",\n    value: function clearTimeout(id) {\n      var _this3 = this;\n\n      this._timeouts.forEach(function (event) {\n        if (event.id === id) {\n          _this3._timeouts.remove(event);\n        }\n      });\n\n      return this;\n    }\n    /**\n     * Clear the function scheduled by [[setInterval]]\n     */\n\n  }, {\n    key: \"clearInterval\",\n    value: function clearInterval(id) {\n      return this.clearTimeout(id);\n    }\n    /**\n     * Adds a repeating event to the context's callback clock\n     */\n\n  }, {\n    key: \"setInterval\",\n    value: function setInterval(fn, interval) {\n      var _this4 = this;\n\n      var id = ++this._timeoutIds;\n\n      var intervalFn = function intervalFn() {\n        var now = _this4.now();\n\n        _this4._timeouts.add({\n          callback: function callback() {\n            // invoke the callback\n            fn(); // invoke the event to repeat it\n\n            intervalFn();\n          },\n          id: id,\n          time: now + interval\n        });\n      }; // kick it off\n\n\n      intervalFn();\n      return id;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return {\n        clockSource: \"worker\",\n        latencyHint: \"interactive\",\n        lookAhead: 0.1,\n        updateInterval: 0.05\n      };\n    }\n  }]);\n\n  return Context;\n}(BaseContext);","map":{"version":3,"mappings":"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","names":["Ticker","isAudioContext","optionsFromArguments","Timeline","isDefined","isString","createAudioContext","createAudioWorkletNode","closeContext","initializeContext","BaseContext","assert","Context","Map","options","getDefaults","arguments","context","_context","latencyHint","_ticker","emit","bind","clockSource","updateInterval","on","_timeoutLoop","onstatechange","state","_setLatencyHint","lookAhead","_initialized","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","numberOfChannels","length","sampleRate","createBuffer","numberOfInputs","createChannelMerger","numberOfOutputs","createChannelSplitter","createConstantSource","createConvolver","maxDelayTime","createDelay","createDynamicsCompressor","createGain","feedForward","feedback","createIIRFilter","createPanner","real","imag","constraints","createPeriodicWave","createStereoPanner","createWaveShaper","stream","createMediaStreamSource","element","createMediaElementSource","createMediaStreamDestination","audioData","decodeAudioData","currentTime","initialize","_listener","l","_transport","t","_draw","d","_destination","name","rawContext","url","audioWorklet","_workletModules","has","set","addModule","get","promises","forEach","promise","push","Promise","all","interval","type","_latencyHint","hint","lookAheadValue","resume","resolve","close","val","_constants","buffer","arr","getChannelData","i","constant","channelCount","channelCountMode","loop","start","dispose","_timeouts","Object","keys","map","disconnect","now","firstEvent","peek","time","callback","shift","fn","timeout","_timeoutIds","add","id","event","remove","clearTimeout","intervalFn"],"sourceRoot":"","sources":["../../../../Tone/core/context/Context.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}