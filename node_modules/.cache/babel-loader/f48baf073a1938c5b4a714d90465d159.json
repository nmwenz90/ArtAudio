{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst abs = new Tone.Abs().toDestination();\n * \tconst signal = new Tone.Signal(1);\n * \tsignal.rampTo(-1, 0.5);\n * \tsignal.connect(abs);\n * }, 0.5, 1);\n * @category Signal\n */\n\nexport var Abs = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(Abs, _SignalOperator);\n\n  var _super = _createSuper(Abs);\n\n  function Abs() {\n    var _this;\n\n    _classCallCheck(this, Abs);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"Abs\";\n    /**\n     * The node which converts the audio ranges\n     */\n\n    _this._abs = new WaveShaper({\n      context: _this.context,\n      mapping: function mapping(val) {\n        if (Math.abs(val) < 0.001) {\n          return 0;\n        } else {\n          return Math.abs(val);\n        }\n      }\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n\n    _this.input = _this._abs;\n    /**\n     * The output range [0, 1]\n     */\n\n    _this.output = _this._abs;\n    return _this;\n  }\n  /**\n   * clean up\n   */\n\n\n  _createClass(Abs, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Abs.prototype), \"dispose\", this).call(this);\n\n      this._abs.dispose();\n\n      return this;\n    }\n  }]);\n\n  return Abs;\n}(SignalOperator);","map":{"version":3,"mappings":";;;;;;AACA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA;;;;;;;;;;;;;AAYA,WAAaC,GAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAEU,iBAAe,KAAf;AAET;;;;AAGQ,iBAAO,IAAID,UAAJ,CAAe;AAC7BE,aAAO,EAAE,MAAKA,OADe;AAE7BC,aAAO,EAAE,oBAAG,EAAG;AACd,YAAIC,IAAI,CAACC,GAAL,CAASC,GAAT,IAAgB,KAApB,EAA2B;AAC1B,iBAAO,CAAP;AACA,SAFD,MAEO;AACN,iBAAOF,IAAI,CAACC,GAAL,CAASC,GAAT,CAAP;AACA;AACD;AAR4B,KAAf,CAAP;AAWR;;;;AAGA,kBAAQ,MAAKC,IAAb;AAEA;;;;AAGA,mBAAS,MAAKA,IAAd;AA1BD;AAoCC;AARA;;;;;AA5BD;AAAA;AAAA,WA+BC,mBAAO;AACN;;AACA,WAAKA,IAAL,CAAUC,OAAV;;AACA,aAAO,IAAP;AACA;AAnCF;;AAAA;AAAA,EAAyBT,cAAzB","names":["SignalOperator","WaveShaper","Abs","context","mapping","Math","abs","val","_abs","dispose"],"sourceRoot":"","sources":["../../../Tone/signal/Abs.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}