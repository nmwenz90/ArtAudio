{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Filter } from \"../filter/Filter\";\n/**\n * Split the incoming signal into three bands (low, mid, high)\n * with two crossover frequency controls.\n * ```\n *            +----------------------+\n *          +-> input < lowFrequency +------------------> low\n *          | +----------------------+\n *          |\n *          | +--------------------------------------+\n * input ---+-> lowFrequency < input < highFrequency +--> mid\n *          | +--------------------------------------+\n *          |\n *          | +-----------------------+\n *          +-> highFrequency < input +-----------------> high\n *            +-----------------------+\n * ```\n * @category Component\n */\n\nexport var MultibandSplit = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MultibandSplit, _ToneAudioNode);\n\n  var _super = _createSuper(MultibandSplit);\n\n  function MultibandSplit() {\n    var _this;\n\n    _classCallCheck(this, MultibandSplit);\n\n    _this = _super.call(this, optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]));\n    _this.name = \"MultibandSplit\";\n    /**\n     * the input\n     */\n\n    _this.input = new Gain({\n      context: _this.context\n    });\n    /**\n     * no output node, use either low, mid or high outputs\n     */\n\n    _this.output = undefined;\n    /**\n     * The low band.\n     */\n\n    _this.low = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * the lower filter of the mid band\n     */\n\n    _this._lowMidFilter = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    /**\n     * The mid band output.\n     */\n\n    _this.mid = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"lowpass\"\n    });\n    /**\n     * The high band output.\n     */\n\n    _this.high = new Filter({\n      context: _this.context,\n      frequency: 0,\n      type: \"highpass\"\n    });\n    _this._internalChannels = [_this.low, _this.mid, _this.high];\n    var options = optionsFromArguments(MultibandSplit.getDefaults(), arguments, [\"lowFrequency\", \"highFrequency\"]);\n    _this.lowFrequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.lowFrequency\n    });\n    _this.highFrequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.highFrequency\n    });\n    _this.Q = new Signal({\n      context: _this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n\n    _this.input.fan(_this.low, _this.high);\n\n    _this.input.chain(_this._lowMidFilter, _this.mid); // the frequency control signal\n\n\n    _this.lowFrequency.fan(_this.low.frequency, _this._lowMidFilter.frequency);\n\n    _this.highFrequency.fan(_this.mid.frequency, _this.high.frequency); // the Q value\n\n\n    _this.Q.connect(_this.low.Q);\n\n    _this.Q.connect(_this._lowMidFilter.Q);\n\n    _this.Q.connect(_this.mid.Q);\n\n    _this.Q.connect(_this.high.Q);\n\n    readOnly(_assertThisInitialized(_this), [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    return _this;\n  }\n\n  _createClass(MultibandSplit, [{\n    key: \"dispose\",\n    value:\n    /**\n     * Clean up.\n     */\n    function dispose() {\n      _get(_getPrototypeOf(MultibandSplit.prototype), \"dispose\", this).call(this);\n\n      writable(this, [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n      this.low.dispose();\n\n      this._lowMidFilter.dispose();\n\n      this.mid.dispose();\n      this.high.dispose();\n      this.lowFrequency.dispose();\n      this.highFrequency.dispose();\n      this.Q.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        highFrequency: 2500,\n        lowFrequency: 400\n      });\n    }\n  }]);\n\n  return MultibandSplit;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","Signal","Filter","MultibandSplit","getDefaults","arguments","context","undefined","frequency","type","low","mid","high","options","lowFrequency","units","value","highFrequency","Q","input","fan","chain","_lowMidFilter","connect","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/channel/MultibandSplit.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}