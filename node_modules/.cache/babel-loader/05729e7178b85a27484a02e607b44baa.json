{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\n\nexport var AMOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(AMOscillator, _Source);\n\n  var _super = _createSuper(AMOscillator);\n\n  function AMOscillator() {\n    var _this;\n\n    _classCallCheck(this, AMOscillator);\n\n    _this = _super.call(this, optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    _this.name = \"AMOscillator\";\n    /**\n     * convert the -1,1 output to 0,1\n     */\n\n    _this._modulationScale = new AudioToGain({\n      context: _this.context\n    });\n    /**\n     * the node where the modulation happens\n     */\n\n    _this._modulationNode = new Gain({\n      context: _this.context\n    });\n    var options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    _this._carrier = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function onstop() {\n        return _this.onstop(_assertThisInitialized(_this));\n      },\n      phase: options.phase,\n      type: options.type\n    });\n    _this.frequency = _this._carrier.frequency, _this.detune = _this._carrier.detune;\n    _this._modulator = new Oscillator({\n      context: _this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    }); // connections\n\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n\n    _this._modulator.chain(_this._modulationScale, _this._modulationNode.gain);\n\n    _this._carrier.chain(_this._modulationNode, _this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"detune\", \"harmonicity\"]);\n    return _this;\n  }\n\n  _createClass(AMOscillator, [{\n    key: \"_start\",\n    value:\n    /**\n     * start the oscillator\n     */\n    function _start(time) {\n      this._modulator.start(time);\n\n      this._carrier.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      this._modulator.stop(time);\n\n      this._carrier.stop(time);\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._modulator.restart(time);\n\n      this._carrier.restart(time);\n    }\n    /**\n     * The type of the carrier oscillator\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._carrier.type;\n    },\n    set: function set(type) {\n      this._carrier.type = type;\n    }\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return this._carrier.baseType;\n    },\n    set: function set(baseType) {\n      this._carrier.baseType = baseType;\n    }\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return this._carrier.partialCount;\n    },\n    set: function set(partialCount) {\n      this._carrier.partialCount = partialCount;\n    }\n    /**\n     * The type of the modulator oscillator\n     */\n\n  }, {\n    key: \"modulationType\",\n    get: function get() {\n      return this._modulator.type;\n    },\n    set: function set(type) {\n      this._modulator.type = type;\n    }\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._carrier.phase;\n    },\n    set: function set(phase) {\n      this._carrier.phase = phase;\n      this._modulator.phase = phase;\n    }\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return this._carrier.partials;\n    },\n    set: function set(partials) {\n      this._carrier.partials = partials;\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AMOscillator.prototype), \"dispose\", this).call(this);\n\n      this.frequency.dispose();\n      this.detune.dispose();\n      this.harmonicity.dispose();\n\n      this._carrier.dispose();\n\n      this._modulator.dispose();\n\n      this._modulationNode.dispose();\n\n      this._modulationScale.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Oscillator.getDefaults(), {\n        harmonicity: 1,\n        modulationType: \"square\"\n      });\n    }\n  }]);\n\n  return AMOscillator;\n}(Source);","map":{"version":3,"mappings":"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","names":["Gain","optionsFromArguments","readOnly","AudioToGain","Multiply","Source","Oscillator","generateWaveform","AMOscillator","getDefaults","arguments","context","options","_carrier","detune","frequency","onstop","phase","type","_modulator","modulationType","harmonicity","units","value","chain","_modulationScale","_modulationNode","gain","output","time","start","stop","restart","baseType","partialCount","partials","length","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/source/oscillator/AMOscillator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}