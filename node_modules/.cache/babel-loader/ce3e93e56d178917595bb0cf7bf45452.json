{"ast":null,"code":"import _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createGainNodeRendererFactory = function createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeGainNodes = new WeakMap();\n\n    var createGainNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeGainNode, nativeGainNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n\n                if (!nativeGainNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                  };\n                  nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n\n                if (nativeGainNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeGainNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createGainNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNode);\n        }\n\n        return createGainNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,6BAA6B,GAAoC,SAAjEA,6BAAiE,CAC1EC,iBAD0E,EAE1EC,oBAF0E,EAG1EC,kBAH0E,EAI1EC,gBAJ0E,EAK1EC,uBAL0E,EAM1E;AACA,SAAO,YAAmE;AACtE,QAAMC,uBAAuB,GAAG,IAAIC,OAAJ,EAAhC;;AAEA,QAAMC,cAAc;AAAA,0EAAG,iBAAOC,KAAP,EAA4BC,yBAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AACfC,8BADe,GACER,kBAAkB,CAAqBM,KAArB,CADpB,EAGnB;;AACMG,8CAJa,GAIoBb,gBAAgB,CAACY,cAAD,EAAiBD,yBAAjB,CAJpC;;AAMnB,oBAAI,CAACE,8BAAL,EAAqC;AAC3BC,yBAD2B,GACjB;AACZC,gCAAY,EAAEH,cAAc,CAACG,YADjB;AAEZC,oCAAgB,EAAEJ,cAAc,CAACI,gBAFrB;AAGZC,yCAAqB,EAAEL,cAAc,CAACK,qBAH1B;AAIZC,wBAAI,EAAEN,cAAc,CAACM,IAAf,CAAoBC;AAJd,mBADiB;AAQjCP,gCAAc,GAAGT,oBAAoB,CAACQ,yBAAD,EAA4BG,OAA5B,CAArC;AACH;;AAEDP,uCAAuB,CAACa,GAAxB,CAA4BT,yBAA5B,EAAuDC,cAAvD;;AAjBmB,oBAmBdC,8BAnBc;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAoBTR,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACQ,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,CApBP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAsBThB,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACQ,IAAlC,EAAwCN,cAAc,CAACM,IAAvD,CAtBR;;AAAA;AAAA;AAAA,uBAyBbZ,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,cAAnC,CAzBV;;AAAA;AAAA,iDA2BZA,cA3BY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAdH,cAAc;AAAA;AAAA;AAAA,OAApB;;AA8BA,WAAO;AACHY,YADG,kBACIX,KADJ,EACyBC,yBADzB,EAC8E;AAC7E,YAAMW,sBAAsB,GAAGf,uBAAuB,CAACgB,GAAxB,CAA4BZ,yBAA5B,CAA/B;;AAEA,YAAIW,sBAAsB,KAAKE,SAA/B,EAA0C;AACtC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,sBAAhB,CAAP;AACH;;AAED,eAAOb,cAAc,CAACC,KAAD,EAAQC,yBAAR,CAArB;AACH;AATE,KAAP;AAWH,GA5CD;AA6CH,CApDM","names":["isOwnedByContext","createGainNodeRendererFactory","connectAudioParam","createNativeGainNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeGainNodes","WeakMap","createGainNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativeGainNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","gain","value","set","render","renderedNativeGainNode","get","undefined","Promise","resolve"],"sourceRoot":"","sources":["../../../src/factories/gain-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}