{"ast":null,"code":"import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\n\nfunction divide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\n\nfunction multiply(a, b) {\n  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\n\nfunction evaluatePolynomial(coefficient, z) {\n  var result = [0, 0];\n\n  for (var i = coefficient.length - 1; i >= 0; i -= 1) {\n    result = multiply(result, z);\n    result[0] += coefficient[i];\n  }\n\n  return result;\n}\n\nexport var createNativeIIRFilterNodeFakerFactory = function createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) {\n  return function (nativeContext, baseLatency, _ref) {\n    var channelCount = _ref.channelCount,\n        channelCountMode = _ref.channelCountMode,\n        channelInterpretation = _ref.channelInterpretation,\n        feedback = _ref.feedback,\n        feedforward = _ref.feedforward;\n    var bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    var convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    var convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    var feedbackLength = convertedFeedback.length;\n    var feedforwardLength = convertedFeedforward.length;\n    var minLength = Math.min(feedbackLength, feedforwardLength);\n\n    if (feedbackLength === 0 || feedbackLength > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (convertedFeedback[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (feedforwardLength === 0 || feedforwardLength > 20) {\n      throw createNotSupportedError();\n    }\n\n    if (convertedFeedforward[0] === 0) {\n      throw createInvalidStateError();\n    }\n\n    if (convertedFeedback[0] !== 1) {\n      for (var i = 0; i < feedforwardLength; i += 1) {\n        convertedFeedforward[i] /= convertedFeedback[0];\n      }\n\n      for (var _i = 1; _i < feedbackLength; _i += 1) {\n        convertedFeedback[_i] /= convertedFeedback[0];\n      }\n    }\n\n    var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n    scriptProcessorNode.channelCount = channelCount;\n    scriptProcessorNode.channelCountMode = channelCountMode;\n    scriptProcessorNode.channelInterpretation = channelInterpretation;\n    var bufferLength = 32;\n    var bufferIndexes = [];\n    var xBuffers = [];\n    var yBuffers = [];\n\n    for (var _i2 = 0; _i2 < channelCount; _i2 += 1) {\n      bufferIndexes.push(0);\n      var xBuffer = new Float32Array(bufferLength);\n      var yBuffer = new Float32Array(bufferLength);\n      xBuffer.fill(0);\n      yBuffer.fill(0);\n      xBuffers.push(xBuffer);\n      yBuffers.push(yBuffer);\n    } // tslint:disable-next-line:deprecation\n\n\n    scriptProcessorNode.onaudioprocess = function (event) {\n      var inputBuffer = event.inputBuffer;\n      var outputBuffer = event.outputBuffer;\n      var numberOfChannels = inputBuffer.numberOfChannels;\n\n      for (var _i3 = 0; _i3 < numberOfChannels; _i3 += 1) {\n        var input = inputBuffer.getChannelData(_i3);\n        var output = outputBuffer.getChannelData(_i3);\n        bufferIndexes[_i3] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[_i3], yBuffers[_i3], bufferIndexes[_i3], bufferLength, input, output);\n      }\n    };\n\n    var nyquist = nativeContext.sampleRate / 2;\n    var nativeIIRFilterNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n\n      get channelCount() {\n        return scriptProcessorNode.channelCount;\n      },\n\n      set channelCount(value) {\n        scriptProcessorNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return scriptProcessorNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        scriptProcessorNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return scriptProcessorNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        scriptProcessorNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return scriptProcessorNode.context;\n      },\n\n      get inputs() {\n        return [scriptProcessorNode];\n      },\n\n      get numberOfInputs() {\n        return scriptProcessorNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return scriptProcessorNode.numberOfOutputs;\n      },\n\n      addEventListener: function addEventListener() {\n        // @todo Dissallow adding an audioprocess listener.\n        return scriptProcessorNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return scriptProcessorNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      getFrequencyResponse: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n\n        var length = frequencyHz.length;\n\n        for (var _i4 = 0; _i4 < length; _i4 += 1) {\n          var omega = -Math.PI * (frequencyHz[_i4] / nyquist);\n          var z = [Math.cos(omega), Math.sin(omega)];\n          var numerator = evaluatePolynomial(convertedFeedforward, z);\n          var denominator = evaluatePolynomial(convertedFeedback, z);\n          var response = divide(numerator, denominator);\n          magResponse[_i4] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n          phaseResponse[_i4] = Math.atan2(response[1], response[0]);\n        }\n      },\n      removeEventListener: function removeEventListener() {\n        return scriptProcessorNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n  };\n};","map":{"version":3,"mappings":"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","names":["computeBufferSize","filterBuffer","interceptConnections","divide","a","b","denominator","multiply","evaluatePolynomial","coefficient","z","result","i","length","createNativeIIRFilterNodeFakerFactory","createInvalidAccessError","createInvalidStateError","createNativeScriptProcessorNode","createNotSupportedError","nativeContext","baseLatency","channelCount","channelCountMode","channelInterpretation","feedback","feedforward","bufferSize","sampleRate","convertedFeedback","Float64Array","convertedFeedforward","feedbackLength","feedforwardLength","minLength","Math","min","scriptProcessorNode","bufferLength","bufferIndexes","xBuffers","yBuffers","push","xBuffer","Float32Array","yBuffer","fill","onaudioprocess","event","inputBuffer","outputBuffer","numberOfChannels","input","getChannelData","output","nyquist","nativeIIRFilterNodeFaker","value","context","inputs","numberOfInputs","numberOfOutputs","addEventListener","dispatchEvent","getFrequencyResponse","frequencyHz","magResponse","phaseResponse","omega","PI","cos","sin","numerator","response","sqrt","atan2","removeEventListener"],"sourceRoot":"","sources":["../../../src/factories/native-iir-filter-node-faker-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}