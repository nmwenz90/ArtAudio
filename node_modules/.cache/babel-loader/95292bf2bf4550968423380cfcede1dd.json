{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { gainToDb } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\n\nexport var Meter = /*#__PURE__*/function (_MeterBase) {\n  _inherits(Meter, _MeterBase);\n\n  var _super = _createSuper(Meter);\n\n  function Meter() {\n    var _this;\n\n    _classCallCheck(this, Meter);\n\n    _this = _super.call(this, optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n    _this.name = \"Meter\";\n    /**\n     * The previous frame's value\n     */\n\n    _this._rms = 0;\n    var options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n    _this.input = _this.output = _this._analyser = new Analyser({\n      context: _this.context,\n      size: 256,\n      type: \"waveform\",\n      channels: options.channels\n    });\n    _this.smoothing = options.smoothing, _this.normalRange = options.normalRange;\n    return _this;\n  }\n\n  _createClass(Meter, [{\n    key: \"getLevel\",\n    value:\n    /**\n     * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n     * @deprecated\n     */\n    function getLevel() {\n      warn(\"'getLevel' has been changed to 'getValue'\");\n      return this.getValue();\n    }\n    /**\n     * Get the current value of the incoming signal.\n     * Output is in decibels when [[normalRange]] is `false`.\n     * If [[channels]] = 1, then the output is a single number\n     * representing the value of the input signal. When [[channels]] > 1,\n     * then each channel is returned as a value in a number array.\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var _this2 = this;\n\n      var aValues = this._analyser.getValue();\n\n      var channelValues = this.channels === 1 ? [aValues] : aValues;\n      var vals = channelValues.map(function (values) {\n        var totalSquared = values.reduce(function (total, current) {\n          return total + current * current;\n        }, 0);\n        var rms = Math.sqrt(totalSquared / values.length); // the rms can only fall at the rate of the smoothing\n        // but can jump up instantly\n\n        _this2._rms = Math.max(rms, _this2._rms * _this2.smoothing);\n        return _this2.normalRange ? _this2._rms : gainToDb(_this2._rms);\n      });\n\n      if (this.channels === 1) {\n        return vals[0];\n      } else {\n        return vals;\n      }\n    }\n    /**\n     * The number of channels of analysis.\n     */\n\n  }, {\n    key: \"channels\",\n    get: function get() {\n      return this._analyser.channels;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Meter.prototype), \"dispose\", this).call(this);\n\n      this._analyser.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(MeterBase.getDefaults(), {\n        smoothing: 0.8,\n        normalRange: false,\n        channels: 1\n      });\n    }\n  }]);\n\n  return Meter;\n}(MeterBase);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,6BAAzB;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,SAAT,QAA4C,aAA5C;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAQA;;;;;;;;;;;;;;;AAcA,WAAaC,KAAb;AAAA;;AAAA;;AA0BC;AAAA;;AAAA;;AACC,8BAAMJ,oBAAoB,CAACI,KAAK,CAACC,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,WAAD,CAAjC,CAA1B;AAzBQ,iBAAe,OAAf;AAcT;;;;AAGQ,iBAAO,CAAP;AASP,QAAMC,OAAO,GAAGP,oBAAoB,CAACI,KAAK,CAACC,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,WAAD,CAAjC,CAApC;AAEA,UAAKE,KAAL,GAAa,MAAKC,MAAL,GAAc,MAAKC,SAAL,GAAiB,IAAIP,QAAJ,CAAa;AACxDQ,aAAO,EAAE,MAAKA,OAD0C;AAExDC,UAAI,EAAE,GAFkD;AAGxDC,UAAI,EAAE,UAHkD;AAIxDC,cAAQ,EAAEP,OAAO,CAACO;AAJsC,KAAb,CAA5C;AAOA,UAAKC,SAAL,GAAiBR,OAAO,CAACQ,SAAzB,EACA,MAAKC,WAAL,GAAmBT,OAAO,CAACS,WAD3B;AAXD;AAaC;;AAvCF;AAAA;AAAA;AAiDC;;;;AAIA,wBAAQ;AACPd,UAAI,CAAC,2CAAD,CAAJ;AACA,aAAO,KAAKe,QAAL,EAAP;AACA;AAED;;;;;;;;AA1DD;AAAA;AAAA,WAiEC,oBAAQ;AAAA;;AACP,UAAMC,OAAO,GAAG,KAAKR,SAAL,CAAeO,QAAf,EAAhB;;AACA,UAAME,aAAa,GAAG,KAAKL,QAAL,KAAkB,CAAlB,GAAsB,CAACI,OAAD,CAAtB,GAAkDA,OAAxE;AACA,UAAME,IAAI,GAAGD,aAAa,CAACE,GAAd,CAAkB,gBAAM,EAAG;AACvC,YAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,UAACC,KAAD,EAAQC,OAAR;AAAA,iBAAoBD,KAAK,GAAGC,OAAO,GAAGA,OAAtC;AAAA,SAAd,EAA6D,CAA7D,CAArB;AACA,YAAMC,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUP,YAAY,GAAGC,MAAM,CAACO,MAAhC,CAAZ,CAFuC,CAGvC;AACA;;AACA,cAAI,CAACC,IAAL,GAAYH,IAAI,CAACI,GAAL,CAASL,GAAT,EAAc,MAAI,CAACI,IAAL,GAAY,MAAI,CAAChB,SAA/B,CAAZ;AACA,eAAO,MAAI,CAACC,WAAL,GAAmB,MAAI,CAACe,IAAxB,GAA+BhC,QAAQ,CAAC,MAAI,CAACgC,IAAN,CAA9C;AACA,OAPY,CAAb;;AAQA,UAAI,KAAKjB,QAAL,KAAkB,CAAtB,EAAyB;AACxB,eAAOM,IAAI,CAAC,CAAD,CAAX;AACA,OAFD,MAEO;AACN,eAAOA,IAAP;AACA;AACD;AAED;;;;AAnFD;AAAA;AAAA,SAsFC,eAAY;AACX,aAAO,KAAKV,SAAL,CAAeI,QAAtB;AACA;AAxFF;AAAA;AAAA,WA0FC,mBAAO;AACN;;AACA,WAAKJ,SAAL,CAAeuB,OAAf;;AACA,aAAO,IAAP;AACA;AA9FF;AAAA;AAAA,WAyCC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAclC,SAAS,CAACI,WAAV,EAAd,EAAuC;AAC7CU,iBAAS,EAAE,GADkC;AAE7CC,mBAAW,EAAE,KAFgC;AAG7CF,gBAAQ,EAAE;AAHmC,OAAvC,CAAP;AAKA;AA/CF;;AAAA;AAAA,EAA2Bb,SAA3B","names":["gainToDb","optionsFromArguments","MeterBase","warn","Analyser","Meter","getDefaults","arguments","options","input","output","_analyser","context","size","type","channels","smoothing","normalRange","getValue","aValues","channelValues","vals","map","totalSquared","values","reduce","total","current","rms","Math","sqrt","length","_rms","max","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/analysis/Meter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}