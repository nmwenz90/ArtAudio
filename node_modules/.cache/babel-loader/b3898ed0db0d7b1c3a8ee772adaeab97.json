{"ast":null,"code":"export var createWrapAudioBufferCopyChannelMethods = function createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError) {\n  return function (audioBuffer) {\n    audioBuffer.copyFromChannel = function (destination, channelNumberAsNumber) {\n      var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      var audioBufferLength = audioBuffer.length;\n      var channelData = audioBuffer.getChannelData(channelNumber);\n      var destinationLength = destination.length;\n\n      for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n        destination[i] = channelData[i + bufferOffset];\n      }\n    };\n\n    audioBuffer.copyToChannel = function (source, channelNumberAsNumber) {\n      var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      var audioBufferLength = audioBuffer.length;\n      var channelData = audioBuffer.getChannelData(channelNumber);\n      var sourceLength = source.length;\n\n      for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n        channelData[i + bufferOffset] = source[i];\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,uCAAuC,GAA8C,SAArFA,uCAAqF,CAC9FC,2BAD8F,EAE9FC,oBAF8F,EAG9F;AACA,SAAO,UAACC,WAAD,EAA0C;AAC7CA,eAAW,CAACC,eAAZ,GAA8B,UAACC,WAAD,EAAcC,qBAAd,EAAiE;AAAA,UAA5BC,oBAA4B,uEAAL,CAAK;AAC3F,UAAMC,YAAY,GAAGP,2BAA2B,CAACM,oBAAD,CAAhD;AACA,UAAME,aAAa,GAAGR,2BAA2B,CAACK,qBAAD,CAAjD;;AAEA,UAAIG,aAAa,IAAIN,WAAW,CAACO,gBAAjC,EAAmD;AAC/C,cAAMR,oBAAoB,EAA1B;AACH;;AAED,UAAMS,iBAAiB,GAAGR,WAAW,CAACS,MAAtC;AACA,UAAMC,WAAW,GAAGV,WAAW,CAACW,cAAZ,CAA2BL,aAA3B,CAApB;AACA,UAAMM,iBAAiB,GAAGV,WAAW,CAACO,MAAtC;;AAEA,WAAK,IAAII,CAAC,GAAGR,YAAY,GAAG,CAAf,GAAmB,CAACA,YAApB,GAAmC,CAAhD,EAAmDQ,CAAC,GAAGR,YAAJ,GAAmBG,iBAAnB,IAAwCK,CAAC,GAAGD,iBAA/F,EAAkHC,CAAC,IAAI,CAAvH,EAA0H;AACtHX,mBAAW,CAACW,CAAD,CAAX,GAAiBH,WAAW,CAACG,CAAC,GAAGR,YAAL,CAA5B;AACH;AACJ,KAfD;;AAiBAL,eAAW,CAACc,aAAZ,GAA4B,UAACC,MAAD,EAASZ,qBAAT,EAA4D;AAAA,UAA5BC,oBAA4B,uEAAL,CAAK;AACpF,UAAMC,YAAY,GAAGP,2BAA2B,CAACM,oBAAD,CAAhD;AACA,UAAME,aAAa,GAAGR,2BAA2B,CAACK,qBAAD,CAAjD;;AAEA,UAAIG,aAAa,IAAIN,WAAW,CAACO,gBAAjC,EAAmD;AAC/C,cAAMR,oBAAoB,EAA1B;AACH;;AAED,UAAMS,iBAAiB,GAAGR,WAAW,CAACS,MAAtC;AACA,UAAMC,WAAW,GAAGV,WAAW,CAACW,cAAZ,CAA2BL,aAA3B,CAApB;AACA,UAAMU,YAAY,GAAGD,MAAM,CAACN,MAA5B;;AAEA,WAAK,IAAII,CAAC,GAAGR,YAAY,GAAG,CAAf,GAAmB,CAACA,YAApB,GAAmC,CAAhD,EAAmDQ,CAAC,GAAGR,YAAJ,GAAmBG,iBAAnB,IAAwCK,CAAC,GAAGG,YAA/F,EAA6GH,CAAC,IAAI,CAAlH,EAAqH;AACjHH,mBAAW,CAACG,CAAC,GAAGR,YAAL,CAAX,GAAgCU,MAAM,CAACF,CAAD,CAAtC;AACH;AACJ,KAfD;AAgBH,GAlCD;AAmCH,CAvCM","names":["createWrapAudioBufferCopyChannelMethods","convertNumberToUnsignedLong","createIndexSizeError","audioBuffer","copyFromChannel","destination","channelNumberAsNumber","bufferOffsetAsNumber","bufferOffset","channelNumber","numberOfChannels","audioBufferLength","length","channelData","getChannelData","destinationLength","i","copyToChannel","source","sourceLength"],"sourceRoot":"","sources":["../../../src/factories/wrap-audio-buffer-copy-channel-methods.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}