{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\n\nexport var Signal = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Signal, _ToneAudioNode);\n\n  var _super = _createSuper(Signal);\n\n  function Signal() {\n    var _this;\n\n    _classCallCheck(this, Signal);\n\n    _this = _super.call(this, optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n    _this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n\n    _this.override = true;\n    var options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    _this.output = _this._constantSource = new ToneConstantSource({\n      context: _this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n\n    _this._constantSource.start(0);\n\n    _this.input = _this._param = _this._constantSource.offset;\n    return _this;\n  }\n\n  _createClass(Signal, [{\n    key: \"connect\",\n    value: function connect(destination) {\n      var outputNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var inputNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      // start it only when connected to something\n      connectSignal(this, destination, outputNum, inputNum);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Signal.prototype), \"dispose\", this).call(this);\n\n      this._param.dispose();\n\n      this._constantSource.dispose();\n\n      return this;\n    } //-------------------------------------\n    // ABSTRACT PARAM INTERFACE\n    // just a proxy for the ConstantSourceNode's offset AudioParam\n    // all docs are generated from AbstractParam.ts\n    //-------------------------------------\n\n  }, {\n    key: \"setValueAtTime\",\n    value: function setValueAtTime(value, time) {\n      this._param.setValueAtTime(value, time);\n\n      return this;\n    }\n  }, {\n    key: \"getValueAtTime\",\n    value: function getValueAtTime(time) {\n      return this._param.getValueAtTime(time);\n    }\n  }, {\n    key: \"setRampPoint\",\n    value: function setRampPoint(time) {\n      this._param.setRampPoint(time);\n\n      return this;\n    }\n  }, {\n    key: \"linearRampToValueAtTime\",\n    value: function linearRampToValueAtTime(value, time) {\n      this._param.linearRampToValueAtTime(value, time);\n\n      return this;\n    }\n  }, {\n    key: \"exponentialRampToValueAtTime\",\n    value: function exponentialRampToValueAtTime(value, time) {\n      this._param.exponentialRampToValueAtTime(value, time);\n\n      return this;\n    }\n  }, {\n    key: \"exponentialRampTo\",\n    value: function exponentialRampTo(value, rampTime, startTime) {\n      this._param.exponentialRampTo(value, rampTime, startTime);\n\n      return this;\n    }\n  }, {\n    key: \"linearRampTo\",\n    value: function linearRampTo(value, rampTime, startTime) {\n      this._param.linearRampTo(value, rampTime, startTime);\n\n      return this;\n    }\n  }, {\n    key: \"targetRampTo\",\n    value: function targetRampTo(value, rampTime, startTime) {\n      this._param.targetRampTo(value, rampTime, startTime);\n\n      return this;\n    }\n  }, {\n    key: \"exponentialApproachValueAtTime\",\n    value: function exponentialApproachValueAtTime(value, time, rampTime) {\n      this._param.exponentialApproachValueAtTime(value, time, rampTime);\n\n      return this;\n    }\n  }, {\n    key: \"setTargetAtTime\",\n    value: function setTargetAtTime(value, startTime, timeConstant) {\n      this._param.setTargetAtTime(value, startTime, timeConstant);\n\n      return this;\n    }\n  }, {\n    key: \"setValueCurveAtTime\",\n    value: function setValueCurveAtTime(values, startTime, duration, scaling) {\n      this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\n      return this;\n    }\n  }, {\n    key: \"cancelScheduledValues\",\n    value: function cancelScheduledValues(time) {\n      this._param.cancelScheduledValues(time);\n\n      return this;\n    }\n  }, {\n    key: \"cancelAndHoldAtTime\",\n    value: function cancelAndHoldAtTime(time) {\n      this._param.cancelAndHoldAtTime(time);\n\n      return this;\n    }\n  }, {\n    key: \"rampTo\",\n    value: function rampTo(value, rampTime, startTime) {\n      this._param.rampTo(value, rampTime, startTime);\n\n      return this;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._param.value;\n    },\n    set: function set(value) {\n      this._param.value = value;\n    }\n  }, {\n    key: \"convert\",\n    get: function get() {\n      return this._param.convert;\n    },\n    set: function set(convert) {\n      this._param.convert = convert;\n    }\n  }, {\n    key: \"units\",\n    get: function get() {\n      return this._param.units;\n    }\n  }, {\n    key: \"overridden\",\n    get: function get() {\n      return this._param.overridden;\n    },\n    set: function set(overridden) {\n      this._param.overridden = overridden;\n    }\n  }, {\n    key: \"maxValue\",\n    get: function get() {\n      return this._param.maxValue;\n    }\n  }, {\n    key: \"minValue\",\n    get: function get() {\n      return this._param.minValue;\n    }\n    /**\n     * See [[Param.apply]].\n     */\n\n  }, {\n    key: \"apply\",\n    value: function apply(param) {\n      this._param.apply(param);\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        convert: true,\n        units: \"number\",\n        value: 0\n      });\n    }\n  }]);\n\n  return Signal;\n}(ToneAudioNode);\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\n\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0); // reset the value\n\n    destination.setValueAtTime(0, 0); // mark the value as overridden\n\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n\n  connect(signal, destination, outputNum, inputNum);\n}","map":{"version":3,"mappings":"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","names":["Param","ToneAudioNode","connect","isAudioParam","optionsFromArguments","ToneConstantSource","Signal","getDefaults","arguments","options","output","_constantSource","context","convert","offset","value","units","minValue","maxValue","start","input","_param","destination","outputNum","inputNum","connectSignal","dispose","time","setValueAtTime","getValueAtTime","setRampPoint","linearRampToValueAtTime","exponentialRampToValueAtTime","rampTime","startTime","exponentialRampTo","linearRampTo","targetRampTo","exponentialApproachValueAtTime","timeConstant","setTargetAtTime","values","duration","scaling","setValueCurveAtTime","cancelScheduledValues","cancelAndHoldAtTime","rampTo","overridden","param","apply","Object","assign","signal","override"],"sourceRoot":"","sources":["../../../Tone/signal/Signal.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}