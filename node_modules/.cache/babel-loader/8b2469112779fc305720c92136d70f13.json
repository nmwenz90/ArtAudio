{"ast":null,"code":"import _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(upPatternGen),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(downPatternGen),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(infiniteGen),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(alternatingGenerator),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(jumpUp),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(jumpDown),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(randomGen),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(randomOnce),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(randomWalk),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(PatternGenerator);\n\nimport { assert } from \"../core/util/Debug\";\nimport { clamp } from \"../core/util/Math\";\n/**\n * Start at the first value and go up to the last\n */\n\nfunction upPatternGen(values) {\n  var index;\n  return _regeneratorRuntime.wrap(function upPatternGen$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          index = 0;\n\n        case 1:\n          if (!(index < values.length)) {\n            _context.next = 8;\n            break;\n          }\n\n          index = clampToArraySize(index, values);\n          _context.next = 5;\n          return values[index];\n\n        case 5:\n          index++;\n          _context.next = 1;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n/**\n * Start at the last value and go down to 0\n */\n\n\nfunction downPatternGen(values) {\n  var index;\n  return _regeneratorRuntime.wrap(function downPatternGen$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          index = values.length - 1;\n\n        case 1:\n          if (!(index >= 0)) {\n            _context2.next = 8;\n            break;\n          }\n\n          index = clampToArraySize(index, values);\n          _context2.next = 5;\n          return values[index];\n\n        case 5:\n          index--;\n          _context2.next = 1;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n/**\n * Infinitely yield the generator\n */\n\n\nfunction infiniteGen(values, gen) {\n  return _regeneratorRuntime.wrap(function infiniteGen$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!true) {\n            _context3.next = 4;\n            break;\n          }\n\n          return _context3.delegateYield(gen(values), \"t0\", 2);\n\n        case 2:\n          _context3.next = 0;\n          break;\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n/**\n * Make sure that the index is in the given range\n */\n\n\nfunction clampToArraySize(index, values) {\n  return clamp(index, 0, values.length - 1);\n}\n/**\n * Alternate between two generators\n */\n\n\nfunction alternatingGenerator(values, directionUp) {\n  var index;\n  return _regeneratorRuntime.wrap(function alternatingGenerator$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          index = directionUp ? 0 : values.length - 1;\n\n        case 1:\n          if (!true) {\n            _context4.next = 8;\n            break;\n          }\n\n          index = clampToArraySize(index, values);\n          _context4.next = 5;\n          return values[index];\n\n        case 5:\n          if (directionUp) {\n            index++;\n\n            if (index >= values.length - 1) {\n              directionUp = false;\n            }\n          } else {\n            index--;\n\n            if (index <= 0) {\n              directionUp = true;\n            }\n          }\n\n          _context4.next = 1;\n          break;\n\n        case 8:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n/**\n * Starting from the bottom move up 2, down 1\n */\n\n\nfunction jumpUp(values) {\n  var index, stepIndex;\n  return _regeneratorRuntime.wrap(function jumpUp$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          index = 0;\n          stepIndex = 0;\n\n        case 2:\n          if (!(index < values.length)) {\n            _context5.next = 10;\n            break;\n          }\n\n          index = clampToArraySize(index, values);\n          _context5.next = 6;\n          return values[index];\n\n        case 6:\n          stepIndex++;\n          index += stepIndex % 2 ? 2 : -1;\n          _context5.next = 2;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n/**\n * Starting from the top move down 2, up 1\n */\n\n\nfunction jumpDown(values) {\n  var index, stepIndex;\n  return _regeneratorRuntime.wrap(function jumpDown$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          index = values.length - 1;\n          stepIndex = 0;\n\n        case 2:\n          if (!(index >= 0)) {\n            _context6.next = 10;\n            break;\n          }\n\n          index = clampToArraySize(index, values);\n          _context6.next = 6;\n          return values[index];\n\n        case 6:\n          stepIndex++;\n          index += stepIndex % 2 ? -2 : 1;\n          _context6.next = 2;\n          break;\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n/**\n * Choose a random index each time\n */\n\n\nfunction randomGen(values) {\n  var randomIndex;\n  return _regeneratorRuntime.wrap(function randomGen$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!true) {\n            _context7.next = 6;\n            break;\n          }\n\n          randomIndex = Math.floor(Math.random() * values.length);\n          _context7.next = 4;\n          return values[randomIndex];\n\n        case 4:\n          _context7.next = 0;\n          break;\n\n        case 6:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n/**\n * Randomly go through all of the values once before choosing a new random order\n */\n\n\nfunction randomOnce(values) {\n  var copy, i, randVal, index;\n  return _regeneratorRuntime.wrap(function randomOnce$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          // create an array of indices\n          copy = [];\n\n          for (i = 0; i < values.length; i++) {\n            copy.push(i);\n          }\n\n        case 2:\n          if (!(copy.length > 0)) {\n            _context8.next = 9;\n            break;\n          }\n\n          // random choose an index, and then remove it so it's not chosen again\n          randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n          index = clampToArraySize(randVal[0], values);\n          _context8.next = 7;\n          return values[index];\n\n        case 7:\n          _context8.next = 2;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n/**\n * Randomly choose to walk up or down 1 index in the values array\n */\n\n\nfunction randomWalk(values) {\n  var index;\n  return _regeneratorRuntime.wrap(function randomWalk$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          // randomly choose a starting index in the values array\n          index = Math.floor(Math.random() * values.length);\n\n        case 1:\n          if (!true) {\n            _context9.next = 7;\n            break;\n          }\n\n          if (index === 0) {\n            index++; // at bottom of array, so force upward step\n          } else if (index === values.length - 1) {\n            index--; // at top of array, so force downward step\n          } else if (Math.random() < 0.5) {\n            // else choose random downward or upward step\n            index--;\n          } else {\n            index++;\n          }\n\n          _context9.next = 5;\n          return values[index];\n\n        case 5:\n          _context9.next = 1;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n/**\n * PatternGenerator returns a generator which will iterate over the given array\n * of values and yield the items according to the passed in pattern\n * @param values An array of values to iterate over\n * @param pattern The name of the pattern use when iterating over\n * @param index Where to start in the offset of the values array\n */\n\n\nexport function PatternGenerator(values) {\n  var pattern,\n      index,\n      _args10 = arguments;\n  return _regeneratorRuntime.wrap(function PatternGenerator$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          pattern = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : \"up\";\n          index = _args10.length > 2 && _args10[2] !== undefined ? _args10[2] : 0;\n          // safeguards\n          assert(values.length > 0, \"The array must have more than one value in it\");\n          _context10.t0 = pattern;\n          _context10.next = _context10.t0 === \"up\" ? 6 : _context10.t0 === \"down\" ? 7 : _context10.t0 === \"upDown\" ? 8 : _context10.t0 === \"downUp\" ? 9 : _context10.t0 === \"alternateUp\" ? 10 : _context10.t0 === \"alternateDown\" ? 11 : _context10.t0 === \"random\" ? 12 : _context10.t0 === \"randomOnce\" ? 13 : _context10.t0 === \"randomWalk\" ? 14 : 15;\n          break;\n\n        case 6:\n          return _context10.delegateYield(infiniteGen(values, upPatternGen), \"t1\", 7);\n\n        case 7:\n          return _context10.delegateYield(infiniteGen(values, downPatternGen), \"t2\", 8);\n\n        case 8:\n          return _context10.delegateYield(alternatingGenerator(values, true), \"t3\", 9);\n\n        case 9:\n          return _context10.delegateYield(alternatingGenerator(values, false), \"t4\", 10);\n\n        case 10:\n          return _context10.delegateYield(infiniteGen(values, jumpUp), \"t5\", 11);\n\n        case 11:\n          return _context10.delegateYield(infiniteGen(values, jumpDown), \"t6\", 12);\n\n        case 12:\n          return _context10.delegateYield(randomGen(values), \"t7\", 13);\n\n        case 13:\n          return _context10.delegateYield(infiniteGen(values, randomOnce), \"t8\", 14);\n\n        case 14:\n          return _context10.delegateYield(randomWalk(values), \"t9\", 15);\n\n        case 15:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}","map":{"version":3,"mappings":"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","names":["upPatternGen","downPatternGen","infiniteGen","alternatingGenerator","jumpUp","jumpDown","randomGen","randomOnce","randomWalk","PatternGenerator","assert","clamp","values","index","length","clampToArraySize","gen","directionUp","stepIndex","randomIndex","Math","floor","random","copy","i","push","randVal","splice","pattern"],"sourceRoot":"","sources":["../../../Tone/event/PatternGenerator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}