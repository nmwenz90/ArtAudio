{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  offset: 1\n};\nexport var createConstantSourceNodeConstructor = function createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(ConstantSourceNode, _audioNodeConstructor);\n\n    var _super = _createSuper(ConstantSourceNode);\n\n    function ConstantSourceNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, ConstantSourceNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;\n      _this = _super.call(this, context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n      _this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n      _this._nativeConstantSourceNode = nativeConstantSourceNode;\n      /*\n       * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n       * for GainNodes.\n       */\n\n      _this._offset = createAudioParam(_assertThisInitialized(_this), isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._onended = null;\n      return _this;\n    }\n\n    _createClass(ConstantSourceNode, [{\n      key: \"offset\",\n      get: function get() {\n        return this._offset;\n      }\n    }, {\n      key: \"onended\",\n      get: function get() {\n        return this._onended;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeConstantSourceNode.onended = wrappedListener;\n        var nativeOnEnded = this._nativeConstantSourceNode.onended;\n        this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n      }\n    }, {\n      key: \"start\",\n      value: function start() {\n        var _this2 = this;\n\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this._nativeConstantSourceNode.start(when);\n\n        if (this._constantSourceNodeRenderer !== null) {\n          this._constantSourceNodeRenderer.start = when;\n        }\n\n        if (this.context.state !== 'closed') {\n          setInternalStateToActive(this);\n\n          var resetInternalStateToPassive = function resetInternalStateToPassive() {\n            _this2._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n\n            if (isActiveAudioNode(_this2)) {\n              setInternalStateToPassive(_this2);\n            }\n          };\n\n          this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n        }\n      }\n    }, {\n      key: \"stop\",\n      value: function stop() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n        this._nativeConstantSourceNode.stop(when);\n\n        if (this._constantSourceNodeRenderer !== null) {\n          this._constantSourceNodeRenderer.stop = when;\n        }\n      }\n    }]);\n\n    return ConstantSourceNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","isActiveAudioNode","setInternalStateToActive","setInternalStateToPassive","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","offset","createConstantSourceNodeConstructor","audioNodeConstructor","createAudioParam","createConstantSourceNodeRendererFactory","createNativeConstantSourceNode","getNativeContext","isNativeOfflineAudioContext","wrapEventListener","context","options","nativeContext","mergedOptions","nativeConstantSourceNode","isOffline","constantSourceNodeRenderer","_constantSourceNodeRenderer","_nativeConstantSourceNode","_offset","_onended","value","wrappedListener","onended","nativeOnEnded","when","start","state","resetInternalStateToPassive","removeEventListener","addEventListener","stop"],"sourceRoot":"","sources":["../../../src/factories/constant-source-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}