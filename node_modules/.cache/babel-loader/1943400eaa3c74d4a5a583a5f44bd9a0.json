{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nexport var createMonitorConnections = function createMonitorConnections(insertElementInSet, isNativeAudioNode) {\n  return function (nativeAudioNode, whenConnected, whenDisconnected) {\n    var connections = new Set();\n\n    nativeAudioNode.connect = function (connect) {\n      // tslint:disable-next-line:invalid-void no-inferrable-types\n      return function (destination) {\n        var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        var input = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n        var wasDisconnected = connections.size === 0;\n\n        if (isNativeAudioNode(destination)) {\n          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n          connect.call(nativeAudioNode, destination, output, input);\n          insertElementInSet(connections, [destination, output, input], function (connection) {\n            return connection[0] === destination && connection[1] === output && connection[2] === input;\n          }, true);\n\n          if (wasDisconnected) {\n            whenConnected();\n          }\n\n          return destination;\n        }\n\n        connect.call(nativeAudioNode, destination, output);\n        insertElementInSet(connections, [destination, output], function (connection) {\n          return connection[0] === destination && connection[1] === output;\n        }, true);\n\n        if (wasDisconnected) {\n          whenConnected();\n        }\n\n        return;\n      };\n    }(nativeAudioNode.connect);\n\n    nativeAudioNode.disconnect = function (disconnect) {\n      return function (destinationOrOutput, output, input) {\n        var wasConnected = connections.size > 0;\n\n        if (destinationOrOutput === undefined) {\n          disconnect.apply(nativeAudioNode);\n          connections.clear();\n        } else if (typeof destinationOrOutput === 'number') {\n          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n          disconnect.call(nativeAudioNode, destinationOrOutput);\n\n          var _iterator = _createForOfIteratorHelper(connections),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var connection = _step.value;\n\n              if (connection[1] === destinationOrOutput) {\n                connections.delete(connection);\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else {\n          if (isNativeAudioNode(destinationOrOutput)) {\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n          } else {\n            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n            disconnect.call(nativeAudioNode, destinationOrOutput, output);\n          }\n\n          var _iterator2 = _createForOfIteratorHelper(connections),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _connection = _step2.value;\n\n              if (_connection[0] === destinationOrOutput && (output === undefined || _connection[1] === output) && (input === undefined || _connection[2] === input)) {\n                connections.delete(_connection);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n\n        var isDisconnected = connections.size === 0;\n\n        if (wasConnected && isDisconnected) {\n          whenDisconnected();\n        }\n      };\n    }(nativeAudioNode.disconnect);\n\n    return nativeAudioNode;\n  };\n};","map":{"version":3,"mappings":"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","names":["createMonitorConnections","insertElementInSet","isNativeAudioNode","nativeAudioNode","whenConnected","whenDisconnected","connections","Set","connect","destination","output","input","wasDisconnected","size","call","connection","disconnect","destinationOrOutput","wasConnected","undefined","apply","clear","delete","isDisconnected"],"sourceRoot":"","sources":["../../../src/factories/monitor-connections.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}