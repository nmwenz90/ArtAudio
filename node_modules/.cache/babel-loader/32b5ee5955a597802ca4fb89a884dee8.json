{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\n\nexport var Tremolo = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Tremolo, _StereoEffect);\n\n  var _super = _createSuper(Tremolo);\n\n  function Tremolo() {\n    var _this;\n\n    _classCallCheck(this, Tremolo);\n\n    _this = _super.call(this, optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n    _this.name = \"Tremolo\";\n    var options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    _this._lfoL = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._amplitudeL = new Gain({\n      context: _this.context\n    });\n    _this._amplitudeR = new Gain({\n      context: _this.context\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    _this.depth = new Signal({\n      context: _this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"depth\"]);\n\n    _this.connectEffectLeft(_this._amplitudeL);\n\n    _this.connectEffectRight(_this._amplitudeR);\n\n    _this._lfoL.connect(_this._amplitudeL.gain);\n\n    _this._lfoR.connect(_this._amplitudeR.gain);\n\n    _this.frequency.fan(_this._lfoL.frequency, _this._lfoR.frequency);\n\n    _this.depth.fan(_this._lfoR.amplitude, _this._lfoL.amplitude);\n\n    _this.spread = options.spread;\n    return _this;\n  }\n\n  _createClass(Tremolo, [{\n    key: \"start\",\n    value:\n    /**\n     * Start the tremolo.\n     */\n    function start(time) {\n      this._lfoL.start(time);\n\n      this._lfoR.start(time);\n\n      return this;\n    }\n    /**\n     * Stop the tremolo.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._lfoL.stop(time);\n\n      this._lfoR.stop(time);\n\n      return this;\n    }\n    /**\n     * Sync the effect to the transport.\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._lfoL.sync();\n\n      this._lfoR.sync();\n\n      this.context.transport.syncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * Unsync the filter from the transport\n     */\n\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._lfoL.unsync();\n\n      this._lfoR.unsync();\n\n      this.context.transport.unsyncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * The oscillator type.\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._lfoL.type;\n    },\n    set: function set(type) {\n      this._lfoL.type = type;\n      this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n\n  }, {\n    key: \"spread\",\n    get: function get() {\n      return this._lfoR.phase - this._lfoL.phase; // 180\n    },\n    set: function set(spread) {\n      this._lfoL.phase = 90 - spread / 2;\n      this._lfoR.phase = spread / 2 + 90;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Tremolo.prototype), \"dispose\", this).call(this);\n\n      this._lfoL.dispose();\n\n      this._lfoR.dispose();\n\n      this._amplitudeL.dispose();\n\n      this._amplitudeR.dispose();\n\n      this.frequency.dispose();\n      this.depth.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        frequency: 10,\n        type: \"sine\",\n        depth: 0.5,\n        spread: 180\n      });\n    }\n  }]);\n\n  return Tremolo;\n}(StereoEffect);","map":{"version":3,"mappings":"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","names":["StereoEffect","LFO","Gain","Signal","optionsFromArguments","readOnly","Tremolo","getDefaults","arguments","options","_lfoL","context","type","min","max","_lfoR","_amplitudeL","_amplitudeR","frequency","value","units","depth","connectEffectLeft","connectEffectRight","connect","gain","fan","amplitude","spread","time","start","stop","sync","transport","syncSignal","unsync","unsyncSignal","phase","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/Tremolo.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}