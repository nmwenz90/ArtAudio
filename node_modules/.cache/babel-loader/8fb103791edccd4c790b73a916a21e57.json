{"ast":null,"code":"/*!\n * @pixi/math - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/math is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n\n/**\n * Two Pi.\n *\n * @static\n * @member {number}\n * @memberof PIXI\n */\nvar PI_2 = Math.PI * 2;\n/**\n * Conversion factor for converting radians to degrees.\n *\n * @static\n * @member {number} RAD_TO_DEG\n * @memberof PIXI\n */\n\nvar RAD_TO_DEG = 180 / Math.PI;\n/**\n * Conversion factor for converting degrees to radians.\n *\n * @static\n * @member {number}\n * @memberof PIXI\n */\n\nvar DEG_TO_RAD = Math.PI / 180;\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n *\n * @static\n * @memberof PIXI\n * @enum {number}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n */\n\nvar SHAPES;\n\n(function (SHAPES) {\n  SHAPES[SHAPES[\"POLY\"] = 0] = \"POLY\";\n  SHAPES[SHAPES[\"RECT\"] = 1] = \"RECT\";\n  SHAPES[SHAPES[\"CIRC\"] = 2] = \"CIRC\";\n  SHAPES[SHAPES[\"ELIP\"] = 3] = \"ELIP\";\n  SHAPES[SHAPES[\"RREC\"] = 4] = \"RREC\";\n})(SHAPES || (SHAPES = {}));\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\n\n\nvar Point =\n/** @class */\nfunction () {\n  /** Creates a new `Point`\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n   */\n  function Point(x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n    /** Position of the point on the x axis */\n\n\n    this.x = 0;\n    /** Position of the point on the y axis */\n\n    this.y = 0;\n    this.x = x;\n    this.y = y;\n  }\n  /** Creates a clone of this point\n   * @returns A clone of this point\n   */\n\n\n  Point.prototype.clone = function () {\n    return new Point(this.x, this.y);\n  };\n  /**\n   * Copies `x` and `y` from the given point into this point\n   *\n   * @param p - The point to copy from\n   * @returns The point instance itself\n   */\n\n\n  Point.prototype.copyFrom = function (p) {\n    this.set(p.x, p.y);\n    return this;\n  };\n  /**\n   * Copies this point's x and y into the given point (`p`).\n   *\n   * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n   * @returns The point (`p`) with values updated\n   */\n\n\n  Point.prototype.copyTo = function (p) {\n    p.set(this.x, this.y);\n    return p;\n  };\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   *\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n\n\n  Point.prototype.equals = function (p) {\n    return p.x === this.x && p.y === this.y;\n  };\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   *\n   * @param {number} [x=0] - position of the point on the `x` axis\n   * @param {number} [y=x] - position of the point on the `y` axis\n   * @returns The point instance itself\n   */\n\n\n  Point.prototype.set = function (x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = x;\n    }\n\n    this.x = x;\n    this.y = y;\n    return this;\n  };\n\n  Point.prototype.toString = function () {\n    return \"[@pixi/math:Point x=\" + this.x + \" y=\" + this.y + \"]\";\n  };\n\n  return Point;\n}();\n\nvar tempPoints = [new Point(), new Point(), new Point(), new Point()];\n/**\n * Size object, contains width and height\n *\n * @memberof PIXI\n * @typedef {object} ISize\n */\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @memberof PIXI\n */\n\nvar Rectangle =\n/** @class */\nfunction () {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rectangle\n   * @param width - The overall width of the rectangle\n   * @param height - The overall height of the rectangle\n   */\n  function Rectangle(x, y, width, height) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (width === void 0) {\n      width = 0;\n    }\n\n    if (height === void 0) {\n      height = 0;\n    }\n\n    this.x = Number(x);\n    this.y = Number(y);\n    this.width = Number(width);\n    this.height = Number(height);\n    this.type = SHAPES.RECT;\n  }\n\n  Object.defineProperty(Rectangle.prototype, \"left\", {\n    /** Returns the left edge of the rectangle. */\n    get: function get() {\n      return this.x;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"right\", {\n    /** Returns the right edge of the rectangle. */\n    get: function get() {\n      return this.x + this.width;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"top\", {\n    /** Returns the top edge of the rectangle. */\n    get: function get() {\n      return this.y;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle.prototype, \"bottom\", {\n    /** Returns the bottom edge of the rectangle. */\n    get: function get() {\n      return this.y + this.height;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Rectangle, \"EMPTY\", {\n    /** A constant empty rectangle. */\n    get: function get() {\n      return new Rectangle(0, 0, 0, 0);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates a clone of this Rectangle\n   *\n   * @return a copy of the rectangle\n   */\n\n  Rectangle.prototype.clone = function () {\n    return new Rectangle(this.x, this.y, this.width, this.height);\n  };\n  /**\n   * Copies another rectangle to this one.\n   *\n   * @param rectangle - The rectangle to copy from.\n   * @return Returns itself.\n   */\n\n\n  Rectangle.prototype.copyFrom = function (rectangle) {\n    this.x = rectangle.x;\n    this.y = rectangle.y;\n    this.width = rectangle.width;\n    this.height = rectangle.height;\n    return this;\n  };\n  /**\n   * Copies this rectangle to another one.\n   *\n   * @param rectangle - The rectangle to copy to.\n   * @return Returns given parameter.\n   */\n\n\n  Rectangle.prototype.copyTo = function (rectangle) {\n    rectangle.x = this.x;\n    rectangle.y = this.y;\n    rectangle.width = this.width;\n    rectangle.height = this.height;\n    return rectangle;\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rectangle\n   *\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @return Whether the x/y coordinates are within this Rectangle\n   */\n\n\n  Rectangle.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n\n    if (x >= this.x && x < this.x + this.width) {\n      if (y >= this.y && y < this.y + this.height) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n   * Returns true only if the area of the intersection is >0, this means that Rectangles\n   * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n   * (width or height equal to zero) can't intersect any other rectangle.\n   *\n   * @param {Rectangle} other - The Rectangle to intersect with `this`.\n   * @param {Matrix} transform - The transformation matrix of `other`.\n   * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n   */\n\n\n  Rectangle.prototype.intersects = function (other, transform) {\n    if (!transform) {\n      var x0_1 = this.x < other.x ? other.x : this.x;\n      var x1_1 = this.right > other.right ? other.right : this.right;\n\n      if (x1_1 <= x0_1) {\n        return false;\n      }\n\n      var y0_1 = this.y < other.y ? other.y : this.y;\n      var y1_1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n      return y1_1 > y0_1;\n    }\n\n    var x0 = this.left;\n    var x1 = this.right;\n    var y0 = this.top;\n    var y1 = this.bottom;\n\n    if (x1 <= x0 || y1 <= y0) {\n      return false;\n    }\n\n    var lt = tempPoints[0].set(other.left, other.top);\n    var lb = tempPoints[1].set(other.left, other.bottom);\n    var rt = tempPoints[2].set(other.right, other.top);\n    var rb = tempPoints[3].set(other.right, other.bottom);\n\n    if (rt.x <= lt.x || lb.y <= lt.y) {\n      return false;\n    }\n\n    var s = Math.sign(transform.a * transform.d - transform.b * transform.c);\n\n    if (s === 0) {\n      return false;\n    }\n\n    transform.apply(lt, lt);\n    transform.apply(lb, lb);\n    transform.apply(rt, rt);\n    transform.apply(rb, rb);\n\n    if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0 || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1 || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0 || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1) {\n      return false;\n    }\n\n    var nx = s * (lb.y - lt.y);\n    var ny = s * (lt.x - lb.x);\n    var n00 = nx * x0 + ny * y0;\n    var n10 = nx * x1 + ny * y0;\n    var n01 = nx * x0 + ny * y1;\n    var n11 = nx * x1 + ny * y1;\n\n    if (Math.max(n00, n10, n01, n11) <= nx * lt.x + ny * lt.y || Math.min(n00, n10, n01, n11) >= nx * rb.x + ny * rb.y) {\n      return false;\n    }\n\n    var mx = s * (lt.y - rt.y);\n    var my = s * (rt.x - lt.x);\n    var m00 = mx * x0 + my * y0;\n    var m10 = mx * x1 + my * y0;\n    var m01 = mx * x0 + my * y1;\n    var m11 = mx * x1 + my * y1;\n\n    if (Math.max(m00, m10, m01, m11) <= mx * lt.x + my * lt.y || Math.min(m00, m10, m01, m11) >= mx * rb.x + my * rb.y) {\n      return false;\n    }\n\n    return true;\n  };\n  /**\n   * Pads the rectangle making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   *\n   * @param paddingX - The horizontal padding amount.\n   * @param paddingY - The vertical padding amount.\n   * @return Returns itself.\n   */\n\n\n  Rectangle.prototype.pad = function (paddingX, paddingY) {\n    if (paddingX === void 0) {\n      paddingX = 0;\n    }\n\n    if (paddingY === void 0) {\n      paddingY = paddingX;\n    }\n\n    this.x -= paddingX;\n    this.y -= paddingY;\n    this.width += paddingX * 2;\n    this.height += paddingY * 2;\n    return this;\n  };\n  /**\n   * Fits this rectangle around the passed one.\n   *\n   * @param rectangle - The rectangle to fit.\n   * @return Returns itself.\n   */\n\n\n  Rectangle.prototype.fit = function (rectangle) {\n    var x1 = Math.max(this.x, rectangle.x);\n    var x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.max(this.y, rectangle.y);\n    var y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = Math.max(x2 - x1, 0);\n    this.y = y1;\n    this.height = Math.max(y2 - y1, 0);\n    return this;\n  };\n  /**\n   * Enlarges rectangle that way its corners lie on grid\n   *\n   * @param resolution - resolution\n   * @param eps - precision\n   * @return Returns itself.\n   */\n\n\n  Rectangle.prototype.ceil = function (resolution, eps) {\n    if (resolution === void 0) {\n      resolution = 1;\n    }\n\n    if (eps === void 0) {\n      eps = 0.001;\n    }\n\n    var x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n    var y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n    this.x = Math.floor((this.x + eps) * resolution) / resolution;\n    this.y = Math.floor((this.y + eps) * resolution) / resolution;\n    this.width = x2 - this.x;\n    this.height = y2 - this.y;\n    return this;\n  };\n  /**\n   * Enlarges this rectangle to include the passed rectangle.\n   *\n   * @param rectangle - The rectangle to include.\n   * @return Returns itself.\n   */\n\n\n  Rectangle.prototype.enlarge = function (rectangle) {\n    var x1 = Math.min(this.x, rectangle.x);\n    var x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n    var y1 = Math.min(this.y, rectangle.y);\n    var y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n    this.x = x1;\n    this.width = x2 - x1;\n    this.y = y1;\n    this.height = y2 - y1;\n    return this;\n  };\n\n  Rectangle.prototype.toString = function () {\n    return \"[@pixi/math:Rectangle x=\" + this.x + \" y=\" + this.y + \" width=\" + this.width + \" height=\" + this.height + \"]\";\n  };\n\n  return Rectangle;\n}();\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @memberof PIXI\n */\n\n\nvar Circle =\n/** @class */\nfunction () {\n  /**\n   * @param x - The X coordinate of the center of this circle\n   * @param y - The Y coordinate of the center of this circle\n   * @param radius - The radius of the circle\n   */\n  function Circle(x, y, radius) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (radius === void 0) {\n      radius = 0;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n    this.type = SHAPES.CIRC;\n  }\n  /**\n   * Creates a clone of this Circle instance\n   *\n   * @return A copy of the Circle\n   */\n\n\n  Circle.prototype.clone = function () {\n    return new Circle(this.x, this.y, this.radius);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this circle\n   *\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @return Whether the x/y coordinates are within this Circle\n   */\n\n\n  Circle.prototype.contains = function (x, y) {\n    if (this.radius <= 0) {\n      return false;\n    }\n\n    var r2 = this.radius * this.radius;\n    var dx = this.x - x;\n    var dy = this.y - y;\n    dx *= dx;\n    dy *= dy;\n    return dx + dy <= r2;\n  };\n  /**\n  * Returns the framing rectangle of the circle as a Rectangle object\n  *\n  * @return The framing rectangle\n  */\n\n\n  Circle.prototype.getBounds = function () {\n    return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n  };\n\n  Circle.prototype.toString = function () {\n    return \"[@pixi/math:Circle x=\" + this.x + \" y=\" + this.y + \" radius=\" + this.radius + \"]\";\n  };\n\n  return Circle;\n}();\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @memberof PIXI\n */\n\n\nvar Ellipse =\n/** @class */\nfunction () {\n  /**\n   * @param x - The X coordinate of the center of this ellipse\n   * @param y - The Y coordinate of the center of this ellipse\n   * @param halfWidth - The half width of this ellipse\n   * @param halfHeight - The half height of this ellipse\n   */\n  function Ellipse(x, y, halfWidth, halfHeight) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (halfWidth === void 0) {\n      halfWidth = 0;\n    }\n\n    if (halfHeight === void 0) {\n      halfHeight = 0;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.width = halfWidth;\n    this.height = halfHeight;\n    this.type = SHAPES.ELIP;\n  }\n  /**\n   * Creates a clone of this Ellipse instance\n   *\n   * @return {PIXI.Ellipse} A copy of the ellipse\n   */\n\n\n  Ellipse.prototype.clone = function () {\n    return new Ellipse(this.x, this.y, this.width, this.height);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this ellipse\n   *\n   * @param x - The X coordinate of the point to test\n   * @param y - The Y coordinate of the point to test\n   * @return Whether the x/y coords are within this ellipse\n   */\n\n\n  Ellipse.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    } // normalize the coords to an ellipse with center 0,0\n\n\n    var normx = (x - this.x) / this.width;\n    var normy = (y - this.y) / this.height;\n    normx *= normx;\n    normy *= normy;\n    return normx + normy <= 1;\n  };\n  /**\n   * Returns the framing rectangle of the ellipse as a Rectangle object\n   *\n   * @return The framing rectangle\n   */\n\n\n  Ellipse.prototype.getBounds = function () {\n    return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n  };\n\n  Ellipse.prototype.toString = function () {\n    return \"[@pixi/math:Ellipse x=\" + this.x + \" y=\" + this.y + \" width=\" + this.width + \" height=\" + this.height + \"]\";\n  };\n\n  return Ellipse;\n}();\n/**\n * A class to define a shape via user defined coordinates.\n *\n * @memberof PIXI\n */\n\n\nvar Polygon =\n/** @class */\nfunction () {\n  /**\n   * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n   *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n   *  the arguments passed can be all the points of the polygon e.g.\n   *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n   *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n   */\n  function Polygon() {\n    var arguments$1 = arguments;\n    var points = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      points[_i] = arguments$1[_i];\n    }\n\n    var flat = Array.isArray(points[0]) ? points[0] : points; // if this is an array of points, convert it to a flat array of numbers\n\n    if (typeof flat[0] !== 'number') {\n      var p = [];\n\n      for (var i = 0, il = flat.length; i < il; i++) {\n        p.push(flat[i].x, flat[i].y);\n      }\n\n      flat = p;\n    }\n\n    this.points = flat;\n    this.type = SHAPES.POLY;\n    this.closeStroke = true;\n  }\n  /**\n   * Creates a clone of this polygon.\n   *\n   * @return - A copy of the polygon.\n   */\n\n\n  Polygon.prototype.clone = function () {\n    var points = this.points.slice();\n    var polygon = new Polygon(points);\n    polygon.closeStroke = this.closeStroke;\n    return polygon;\n  };\n  /**\n   * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n   *\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @return - Whether the x/y coordinates are within this polygon.\n   */\n\n\n  Polygon.prototype.contains = function (x, y) {\n    var inside = false; // use some raycasting to test hits\n    // https://github.com/substack/point-in-polygon/blob/master/index.js\n\n    var length = this.points.length / 2;\n\n    for (var i = 0, j = length - 1; i < length; j = i++) {\n      var xi = this.points[i * 2];\n      var yi = this.points[i * 2 + 1];\n      var xj = this.points[j * 2];\n      var yj = this.points[j * 2 + 1];\n      var intersect = yi > y !== yj > y && x < (xj - xi) * ((y - yi) / (yj - yi)) + xi;\n\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n\n    return inside;\n  };\n\n  Polygon.prototype.toString = function () {\n    return \"[@pixi/math:Polygon\" + (\"closeStroke=\" + this.closeStroke) + (\"points=\" + this.points.reduce(function (pointsDesc, currentPoint) {\n      return pointsDesc + \", \" + currentPoint;\n    }, '') + \"]\");\n  };\n\n  return Polygon;\n}();\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @memberof PIXI\n */\n\n\nvar RoundedRectangle =\n/** @class */\nfunction () {\n  /**\n   * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n   * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n   * @param width - The overall width of this rounded rectangle\n   * @param height - The overall height of this rounded rectangle\n   * @param radius - Controls the radius of the rounded corners\n   */\n  function RoundedRectangle(x, y, width, height, radius) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (width === void 0) {\n      width = 0;\n    }\n\n    if (height === void 0) {\n      height = 0;\n    }\n\n    if (radius === void 0) {\n      radius = 20;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n    this.type = SHAPES.RREC;\n  }\n  /**\n   * Creates a clone of this Rounded Rectangle.\n   *\n   * @return - A copy of the rounded rectangle.\n   */\n\n\n  RoundedRectangle.prototype.clone = function () {\n    return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n  };\n  /**\n   * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n   *\n   * @param x - The X coordinate of the point to test.\n   * @param y - The Y coordinate of the point to test.\n   * @return - Whether the x/y coordinates are within this Rounded Rectangle.\n   */\n\n\n  RoundedRectangle.prototype.contains = function (x, y) {\n    if (this.width <= 0 || this.height <= 0) {\n      return false;\n    }\n\n    if (x >= this.x && x <= this.x + this.width) {\n      if (y >= this.y && y <= this.y + this.height) {\n        var radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n\n        if (y >= this.y + radius && y <= this.y + this.height - radius || x >= this.x + radius && x <= this.x + this.width - radius) {\n          return true;\n        }\n\n        var dx = x - (this.x + radius);\n        var dy = y - (this.y + radius);\n        var radius2 = radius * radius;\n\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n\n        dx = x - (this.x + this.width - radius);\n\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n\n        dy = y - (this.y + this.height - radius);\n\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n\n        dx = x - (this.x + radius);\n\n        if (dx * dx + dy * dy <= radius2) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  };\n\n  RoundedRectangle.prototype.toString = function () {\n    return \"[@pixi/math:RoundedRectangle x=\" + this.x + \" y=\" + this.y + (\"width=\" + this.width + \" height=\" + this.height + \" radius=\" + this.radius + \"]\");\n  };\n\n  return RoundedRectangle;\n}();\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n *\n * @memberof PIXI\n */\n\n\nvar ObservablePoint =\n/** @class */\nfunction () {\n  /**\n   * Creates a new `ObservablePoint`\n   *\n   * @param cb - callback function triggered when `x` and/or `y` are changed\n   * @param scope - owner of callback\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=0] - position of the point on the y axis\n  */\n  function ObservablePoint(cb, scope, x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    this._x = x;\n    this._y = y;\n    this.cb = cb;\n    this.scope = scope;\n  }\n  /**\n   * Creates a clone of this point.\n   * The callback and scope params can be overridden otherwise they will default\n   * to the clone object's values.\n   *\n   * @override\n   * @param cb - The callback function triggered when `x` and/or `y` are changed\n   * @param scope - The owner of the callback\n   * @return a copy of this observable point\n   */\n\n\n  ObservablePoint.prototype.clone = function (cb, scope) {\n    if (cb === void 0) {\n      cb = this.cb;\n    }\n\n    if (scope === void 0) {\n      scope = this.scope;\n    }\n\n    return new ObservablePoint(cb, scope, this._x, this._y);\n  };\n  /**\n   * Sets the point to a new `x` and `y` position.\n   * If `y` is omitted, both `x` and `y` will be set to `x`.\n   *\n   * @param {number} [x=0] - position of the point on the x axis\n   * @param {number} [y=x] - position of the point on the y axis\n   * @returns The observable point instance itself\n   */\n\n\n  ObservablePoint.prototype.set = function (x, y) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = x;\n    }\n\n    if (this._x !== x || this._y !== y) {\n      this._x = x;\n      this._y = y;\n      this.cb.call(this.scope);\n    }\n\n    return this;\n  };\n  /**\n   * Copies x and y from the given point (`p`)\n   *\n   * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n   * @returns The observable point instance itself\n   */\n\n\n  ObservablePoint.prototype.copyFrom = function (p) {\n    if (this._x !== p.x || this._y !== p.y) {\n      this._x = p.x;\n      this._y = p.y;\n      this.cb.call(this.scope);\n    }\n\n    return this;\n  };\n  /**\n   * Copies this point's x and y into that of the given point (`p`)\n   *\n   * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n   * @returns The point (`p`) with values updated\n   */\n\n\n  ObservablePoint.prototype.copyTo = function (p) {\n    p.set(this._x, this._y);\n    return p;\n  };\n  /**\n   * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n   *\n   * @param p - The point to check\n   * @returns Returns `true` if both `x` and `y` are equal\n   */\n\n\n  ObservablePoint.prototype.equals = function (p) {\n    return p.x === this._x && p.y === this._y;\n  };\n\n  ObservablePoint.prototype.toString = function () {\n    return \"[@pixi/math:ObservablePoint x=\" + 0 + \" y=\" + 0 + \" scope=\" + this.scope + \"]\";\n  };\n\n  Object.defineProperty(ObservablePoint.prototype, \"x\", {\n    /** Position of the observable point on the x axis. */\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      if (this._x !== value) {\n        this._x = value;\n        this.cb.call(this.scope);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservablePoint.prototype, \"y\", {\n    /** Position of the observable point on the y axis. */\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      if (this._y !== value) {\n        this._y = value;\n        this.cb.call(this.scope);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ObservablePoint;\n}();\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n *\n * @memberof PIXI\n */\n\n\nvar Matrix =\n/** @class */\nfunction () {\n  /**\n   * @param a - x scale\n   * @param b - y skew\n   * @param c - x skew\n   * @param d - y scale\n   * @param tx - x translation\n   * @param ty - y translation\n   */\n  function Matrix(a, b, c, d, tx, ty) {\n    if (a === void 0) {\n      a = 1;\n    }\n\n    if (b === void 0) {\n      b = 0;\n    }\n\n    if (c === void 0) {\n      c = 0;\n    }\n\n    if (d === void 0) {\n      d = 1;\n    }\n\n    if (tx === void 0) {\n      tx = 0;\n    }\n\n    if (ty === void 0) {\n      ty = 0;\n    }\n\n    this.array = null;\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n  }\n  /**\n   * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n   *\n   * a = array[0]\n   * b = array[1]\n   * c = array[3]\n   * d = array[4]\n   * tx = array[2]\n   * ty = array[5]\n   *\n   * @param array - The array that the matrix will be populated from.\n   */\n\n\n  Matrix.prototype.fromArray = function (array) {\n    this.a = array[0];\n    this.b = array[1];\n    this.c = array[3];\n    this.d = array[4];\n    this.tx = array[2];\n    this.ty = array[5];\n  };\n  /**\n   * Sets the matrix properties.\n   *\n   * @param a - Matrix component\n   * @param b - Matrix component\n   * @param c - Matrix component\n   * @param d - Matrix component\n   * @param tx - Matrix component\n   * @param ty - Matrix component\n   * @return This matrix. Good for chaining method calls.\n   */\n\n\n  Matrix.prototype.set = function (a, b, c, d, tx, ty) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.tx = tx;\n    this.ty = ty;\n    return this;\n  };\n  /**\n   * Creates an array from the current Matrix object.\n   *\n   * @param transpose - Whether we need to transpose the matrix or not\n   * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n   * @return The newly created array which contains the matrix\n   */\n\n\n  Matrix.prototype.toArray = function (transpose, out) {\n    if (!this.array) {\n      this.array = new Float32Array(9);\n    }\n\n    var array = out || this.array;\n\n    if (transpose) {\n      array[0] = this.a;\n      array[1] = this.b;\n      array[2] = 0;\n      array[3] = this.c;\n      array[4] = this.d;\n      array[5] = 0;\n      array[6] = this.tx;\n      array[7] = this.ty;\n      array[8] = 1;\n    } else {\n      array[0] = this.a;\n      array[1] = this.c;\n      array[2] = this.tx;\n      array[3] = this.b;\n      array[4] = this.d;\n      array[5] = this.ty;\n      array[6] = 0;\n      array[7] = 0;\n      array[8] = 1;\n    }\n\n    return array;\n  };\n  /**\n   * Get a new position with the current transformation applied.\n   * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n   *\n   * @param pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @return {PIXI.Point} The new point, transformed through this matrix\n   */\n\n\n  Matrix.prototype.apply = function (pos, newPos) {\n    newPos = newPos || new Point();\n    var x = pos.x;\n    var y = pos.y;\n    newPos.x = this.a * x + this.c * y + this.tx;\n    newPos.y = this.b * x + this.d * y + this.ty;\n    return newPos;\n  };\n  /**\n   * Get a new position with the inverse of the current transformation applied.\n   * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n   *\n   * @param pos - The origin\n   * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n   * @return {PIXI.Point} The new point, inverse-transformed through this matrix\n   */\n\n\n  Matrix.prototype.applyInverse = function (pos, newPos) {\n    newPos = newPos || new Point();\n    var id = 1 / (this.a * this.d + this.c * -this.b);\n    var x = pos.x;\n    var y = pos.y;\n    newPos.x = this.d * id * x + -this.c * id * y + (this.ty * this.c - this.tx * this.d) * id;\n    newPos.y = this.a * id * y + -this.b * id * x + (-this.ty * this.a + this.tx * this.b) * id;\n    return newPos;\n  };\n  /**\n   * Translates the matrix on the x and y.\n   *\n   * @param x - How much to translate x by\n   * @param y - How much to translate y by\n   * @return This matrix. Good for chaining method calls.\n   */\n\n\n  Matrix.prototype.translate = function (x, y) {\n    this.tx += x;\n    this.ty += y;\n    return this;\n  };\n  /**\n   * Applies a scale transformation to the matrix.\n   *\n   * @param x - The amount to scale horizontally\n   * @param y - The amount to scale vertically\n   * @return This matrix. Good for chaining method calls.\n   */\n\n\n  Matrix.prototype.scale = function (x, y) {\n    this.a *= x;\n    this.d *= y;\n    this.c *= x;\n    this.b *= y;\n    this.tx *= x;\n    this.ty *= y;\n    return this;\n  };\n  /**\n   * Applies a rotation transformation to the matrix.\n   *\n   * @param angle - The angle in radians.\n   * @return This matrix. Good for chaining method calls.\n   */\n\n\n  Matrix.prototype.rotate = function (angle) {\n    var cos = Math.cos(angle);\n    var sin = Math.sin(angle);\n    var a1 = this.a;\n    var c1 = this.c;\n    var tx1 = this.tx;\n    this.a = a1 * cos - this.b * sin;\n    this.b = a1 * sin + this.b * cos;\n    this.c = c1 * cos - this.d * sin;\n    this.d = c1 * sin + this.d * cos;\n    this.tx = tx1 * cos - this.ty * sin;\n    this.ty = tx1 * sin + this.ty * cos;\n    return this;\n  };\n  /**\n   * Appends the given Matrix to this Matrix.\n   *\n   * @param matrix - The matrix to append.\n   * @return This matrix. Good for chaining method calls.\n   */\n\n\n  Matrix.prototype.append = function (matrix) {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    this.a = matrix.a * a1 + matrix.b * c1;\n    this.b = matrix.a * b1 + matrix.b * d1;\n    this.c = matrix.c * a1 + matrix.d * c1;\n    this.d = matrix.c * b1 + matrix.d * d1;\n    this.tx = matrix.tx * a1 + matrix.ty * c1 + this.tx;\n    this.ty = matrix.tx * b1 + matrix.ty * d1 + this.ty;\n    return this;\n  };\n  /**\n   * Sets the matrix based on all the available properties\n   *\n   * @param x - Position on the x axis\n   * @param y - Position on the y axis\n   * @param pivotX - Pivot on the x axis\n   * @param pivotY - Pivot on the y axis\n   * @param scaleX - Scale on the x axis\n   * @param scaleY - Scale on the y axis\n   * @param rotation - Rotation in radians\n   * @param skewX - Skew on the x axis\n   * @param skewY - Skew on the y axis\n   * @return This matrix. Good for chaining method calls.\n   */\n\n\n  Matrix.prototype.setTransform = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) {\n    this.a = Math.cos(rotation + skewY) * scaleX;\n    this.b = Math.sin(rotation + skewY) * scaleX;\n    this.c = -Math.sin(rotation - skewX) * scaleY;\n    this.d = Math.cos(rotation - skewX) * scaleY;\n    this.tx = x - (pivotX * this.a + pivotY * this.c);\n    this.ty = y - (pivotX * this.b + pivotY * this.d);\n    return this;\n  };\n  /**\n   * Prepends the given Matrix to this Matrix.\n   *\n   * @param matrix - The matrix to prepend\n   * @return This matrix. Good for chaining method calls.\n   */\n\n\n  Matrix.prototype.prepend = function (matrix) {\n    var tx1 = this.tx;\n\n    if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1) {\n      var a1 = this.a;\n      var c1 = this.c;\n      this.a = a1 * matrix.a + this.b * matrix.c;\n      this.b = a1 * matrix.b + this.b * matrix.d;\n      this.c = c1 * matrix.a + this.d * matrix.c;\n      this.d = c1 * matrix.b + this.d * matrix.d;\n    }\n\n    this.tx = tx1 * matrix.a + this.ty * matrix.c + matrix.tx;\n    this.ty = tx1 * matrix.b + this.ty * matrix.d + matrix.ty;\n    return this;\n  };\n  /**\n   * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n   *\n   * @param transform - The transform to apply the properties to.\n   * @return The transform with the newly applied properties\n   */\n\n\n  Matrix.prototype.decompose = function (transform) {\n    // sort out rotation / skew..\n    var a = this.a;\n    var b = this.b;\n    var c = this.c;\n    var d = this.d;\n    var pivot = transform.pivot;\n    var skewX = -Math.atan2(-c, d);\n    var skewY = Math.atan2(b, a);\n    var delta = Math.abs(skewX + skewY);\n\n    if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001) {\n      transform.rotation = skewY;\n      transform.skew.x = transform.skew.y = 0;\n    } else {\n      transform.rotation = 0;\n      transform.skew.x = skewX;\n      transform.skew.y = skewY;\n    } // next set scale\n\n\n    transform.scale.x = Math.sqrt(a * a + b * b);\n    transform.scale.y = Math.sqrt(c * c + d * d); // next set position\n\n    transform.position.x = this.tx + (pivot.x * a + pivot.y * c);\n    transform.position.y = this.ty + (pivot.x * b + pivot.y * d);\n    return transform;\n  };\n  /**\n   * Inverts this matrix\n   *\n   * @return This matrix. Good for chaining method calls.\n   */\n\n\n  Matrix.prototype.invert = function () {\n    var a1 = this.a;\n    var b1 = this.b;\n    var c1 = this.c;\n    var d1 = this.d;\n    var tx1 = this.tx;\n    var n = a1 * d1 - b1 * c1;\n    this.a = d1 / n;\n    this.b = -b1 / n;\n    this.c = -c1 / n;\n    this.d = a1 / n;\n    this.tx = (c1 * this.ty - d1 * tx1) / n;\n    this.ty = -(a1 * this.ty - b1 * tx1) / n;\n    return this;\n  };\n  /**\n   * Resets this Matrix to an identity (default) matrix.\n   *\n   * @return This matrix. Good for chaining method calls.\n   */\n\n\n  Matrix.prototype.identity = function () {\n    this.a = 1;\n    this.b = 0;\n    this.c = 0;\n    this.d = 1;\n    this.tx = 0;\n    this.ty = 0;\n    return this;\n  };\n  /**\n   * Creates a new Matrix object with the same values as this one.\n   *\n   * @return A copy of this matrix. Good for chaining method calls.\n   */\n\n\n  Matrix.prototype.clone = function () {\n    var matrix = new Matrix();\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  };\n  /**\n   * Changes the values of the given matrix to be the same as the ones in this matrix\n   *\n   * @param matrix - The matrix to copy to.\n   * @return The matrix given in parameter with its values updated.\n   */\n\n\n  Matrix.prototype.copyTo = function (matrix) {\n    matrix.a = this.a;\n    matrix.b = this.b;\n    matrix.c = this.c;\n    matrix.d = this.d;\n    matrix.tx = this.tx;\n    matrix.ty = this.ty;\n    return matrix;\n  };\n  /**\n   * Changes the values of the matrix to be the same as the ones in given matrix\n   *\n   * @param {PIXI.Matrix} matrix - The matrix to copy from.\n   * @return {PIXI.Matrix} this\n   */\n\n\n  Matrix.prototype.copyFrom = function (matrix) {\n    this.a = matrix.a;\n    this.b = matrix.b;\n    this.c = matrix.c;\n    this.d = matrix.d;\n    this.tx = matrix.tx;\n    this.ty = matrix.ty;\n    return this;\n  };\n\n  Matrix.prototype.toString = function () {\n    return \"[@pixi/math:Matrix a=\" + this.a + \" b=\" + this.b + \" c=\" + this.c + \" d=\" + this.d + \" tx=\" + this.tx + \" ty=\" + this.ty + \"]\";\n  };\n\n  Object.defineProperty(Matrix, \"IDENTITY\", {\n    /**\n     * A default (identity) matrix\n     *\n     * @readonly\n     */\n    get: function get() {\n      return new Matrix();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Matrix, \"TEMP_MATRIX\", {\n    /**\n     * A temp matrix\n     *\n     * @readonly\n     */\n    get: function get() {\n      return new Matrix();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Matrix;\n}(); // Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\n\n\nvar ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nvar uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nvar vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n *\n * @type number[][]\n * @private\n */\n\nvar rotationCayley = [];\n/**\n * Matrices for each `GD8Symmetry` rotation.\n *\n * @type Matrix[]\n * @private\n */\n\nvar rotationMatrices = [];\n/*\n * Alias for {@code Math.sign}.\n */\n\nvar signum = Math.sign;\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\n\nfunction init() {\n  for (var i = 0; i < 16; i++) {\n    var row = [];\n    rotationCayley.push(row);\n\n    for (var j = 0; j < 16; j++) {\n      /* Multiplies rotation matrices i and j. */\n      var _ux = signum(ux[i] * ux[j] + vx[i] * uy[j]);\n\n      var _uy = signum(uy[i] * ux[j] + vy[i] * uy[j]);\n\n      var _vx = signum(ux[i] * vx[j] + vx[i] * vy[j]);\n\n      var _vy = signum(uy[i] * vx[j] + vy[i] * vy[j]);\n      /* Finds rotation matrix matching the product and pushes it. */\n\n\n      for (var k = 0; k < 16; k++) {\n        if (ux[k] === _ux && uy[k] === _uy && vx[k] === _vx && vy[k] === _vy) {\n          row.push(k);\n          break;\n        }\n      }\n    }\n  }\n\n  for (var i = 0; i < 16; i++) {\n    var mat = new Matrix();\n    mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n    rotationMatrices.push(mat);\n  }\n}\n\ninit();\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n *\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\n\nvar groupD8 = {\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 0°       | East      |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  E: 0,\n\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 45°↻     | Southeast |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  SE: 1,\n\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 90°↻     | South     |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  S: 2,\n\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 135°↻    | Southwest |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  SW: 3,\n\n  /**\n   * | Rotation | Direction |\n   * |----------|-----------|\n   * | 180°     | West      |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  W: 4,\n\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -135°/225°↻ | Northwest    |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  NW: 5,\n\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -90°/270°↻  | North        |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  N: 6,\n\n  /**\n   * | Rotation    | Direction    |\n   * |-------------|--------------|\n   * | -45°/315°↻  | Northeast    |\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  NE: 7,\n\n  /**\n   * Reflection about Y-axis.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MIRROR_VERTICAL: 8,\n\n  /**\n   * Reflection about the main diagonal.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MAIN_DIAGONAL: 10,\n\n  /**\n   * Reflection about X-axis.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  MIRROR_HORIZONTAL: 12,\n\n  /**\n   * Reflection about reverse diagonal.\n   *\n   * @memberof PIXI.groupD8\n   * @constant {PIXI.GD8Symmetry}\n   */\n  REVERSE_DIAGONAL: 14,\n\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The X-component of the U-axis\n   *    after rotating the axes.\n   */\n  uX: function uX(ind) {\n    return ux[ind];\n  },\n\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The Y-component of the U-axis\n   *    after rotating the axes.\n   */\n  uY: function uY(ind) {\n    return uy[ind];\n  },\n\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The X-component of the V-axis\n   *    after rotating the axes.\n   */\n  vX: function vX(ind) {\n    return vx[ind];\n  },\n\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n   * @return {PIXI.GD8Symmetry} The Y-component of the V-axis\n   *    after rotating the axes.\n   */\n  vY: function vY(ind) {\n    return vy[ind];\n  },\n\n  /**\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n   *   is needed. Only rotations have opposite symmetries while\n   *   reflections don't.\n   * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n   */\n  inv: function inv(rotation) {\n    if (rotation & 8) // true only if between 8 & 15 (reflections)\n      {\n        return rotation & 15; // or rotation % 16\n      }\n\n    return -rotation & 7; // or (8 - rotation) % 8\n  },\n\n  /**\n   * Composes the two D8 operations.\n   *\n   * Taking `^` as reflection:\n   *\n   * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n   * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n   * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n   * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n   * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n   * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n   * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n   * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n   * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n   * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n   *\n   * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n   *   is the row in the above cayley table.\n   * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n   *   is the column in the above cayley table.\n   * @return {PIXI.GD8Symmetry} Composed operation\n   */\n  add: function add(rotationSecond, rotationFirst) {\n    return rotationCayley[rotationSecond][rotationFirst];\n  },\n\n  /**\n   * Reverse of `add`.\n   *\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n   * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n   * @return {PIXI.GD8Symmetry} Result\n   */\n  sub: function sub(rotationSecond, rotationFirst) {\n    return rotationCayley[rotationSecond][groupD8.inv(rotationFirst)];\n  },\n\n  /**\n   * Adds 180 degrees to rotation, which is a commutative\n   * operation.\n   *\n   * @memberof PIXI.groupD8\n   * @param {number} rotation - The number to rotate.\n   * @returns {number} Rotated number\n   */\n  rotate180: function rotate180(rotation) {\n    return rotation ^ 4;\n  },\n\n  /**\n   * Checks if the rotation angle is vertical, i.e. south\n   * or north. It doesn't work for reflections.\n   *\n   * @memberof PIXI.groupD8\n   * @param {PIXI.GD8Symmetry} rotation - The number to check.\n   * @returns {boolean} Whether or not the direction is vertical\n   */\n  isVertical: function isVertical(rotation) {\n    return (rotation & 3) === 2;\n  },\n\n  /**\n   * Approximates the vector `V(dx,dy)` into one of the\n   * eight directions provided by `groupD8`.\n   *\n   * @memberof PIXI.groupD8\n   * @param {number} dx - X-component of the vector\n   * @param {number} dy - Y-component of the vector\n   * @return {PIXI.GD8Symmetry} Approximation of the vector into\n   *  one of the eight symmetries.\n   */\n  byDirection: function byDirection(dx, dy) {\n    if (Math.abs(dx) * 2 <= Math.abs(dy)) {\n      if (dy >= 0) {\n        return groupD8.S;\n      }\n\n      return groupD8.N;\n    } else if (Math.abs(dy) * 2 <= Math.abs(dx)) {\n      if (dx > 0) {\n        return groupD8.E;\n      }\n\n      return groupD8.W;\n    } else if (dy > 0) {\n      if (dx > 0) {\n        return groupD8.SE;\n      }\n\n      return groupD8.SW;\n    } else if (dx > 0) {\n      return groupD8.NE;\n    }\n\n    return groupD8.NW;\n  },\n\n  /**\n   * Helps sprite to compensate texture packer rotation.\n   *\n   * @memberof PIXI.groupD8\n   * @param {PIXI.Matrix} matrix - sprite world matrix\n   * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n   * @param {number} tx - sprite anchoring\n   * @param {number} ty - sprite anchoring\n   */\n  matrixAppendRotationInv: function matrixAppendRotationInv(matrix, rotation, tx, ty) {\n    if (tx === void 0) {\n      tx = 0;\n    }\n\n    if (ty === void 0) {\n      ty = 0;\n    } // Packer used \"rotation\", we use \"inv(rotation)\"\n\n\n    var mat = rotationMatrices[groupD8.inv(rotation)];\n    mat.tx = tx;\n    mat.ty = ty;\n    matrix.append(mat);\n  }\n};\n/**\n * Transform that takes care about its versions.\n *\n * @memberof PIXI\n */\n\nvar Transform =\n/** @class */\nfunction () {\n  function Transform() {\n    this.worldTransform = new Matrix();\n    this.localTransform = new Matrix();\n    this.position = new ObservablePoint(this.onChange, this, 0, 0);\n    this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n    this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n    this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n    this._rotation = 0;\n    this._cx = 1;\n    this._sx = 0;\n    this._cy = 0;\n    this._sy = 1;\n    this._localID = 0;\n    this._currentLocalID = 0;\n    this._worldID = 0;\n    this._parentID = 0;\n  }\n  /** Called when a value changes. */\n\n\n  Transform.prototype.onChange = function () {\n    this._localID++;\n  };\n  /** Called when the skew or the rotation changes. */\n\n\n  Transform.prototype.updateSkew = function () {\n    this._cx = Math.cos(this._rotation + this.skew.y);\n    this._sx = Math.sin(this._rotation + this.skew.y);\n    this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n\n    this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n    this._localID++;\n  };\n\n  Transform.prototype.toString = function () {\n    return \"[@pixi/math:Transform \" + (\"position=(\" + this.position.x + \", \" + this.position.y + \") \") + (\"rotation=\" + this.rotation + \" \") + (\"scale=(\" + this.scale.x + \", \" + this.scale.y + \") \") + (\"skew=(\" + this.skew.x + \", \" + this.skew.y + \") \") + \"]\";\n  };\n  /** Updates the local transformation matrix. */\n\n\n  Transform.prototype.updateLocalTransform = function () {\n    var lt = this.localTransform;\n\n    if (this._localID !== this._currentLocalID) {\n      // get the matrix values of the displayobject based on its transform properties..\n      lt.a = this._cx * this.scale.x;\n      lt.b = this._sx * this.scale.x;\n      lt.c = this._cy * this.scale.y;\n      lt.d = this._sy * this.scale.y;\n      lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n      lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n      this._currentLocalID = this._localID; // force an update..\n\n      this._parentID = -1;\n    }\n  };\n  /**\n   * Updates the local and the world transformation matrices.\n   *\n   * @param parentTransform - The parent transform\n   */\n\n\n  Transform.prototype.updateTransform = function (parentTransform) {\n    var lt = this.localTransform;\n\n    if (this._localID !== this._currentLocalID) {\n      // get the matrix values of the displayobject based on its transform properties..\n      lt.a = this._cx * this.scale.x;\n      lt.b = this._sx * this.scale.x;\n      lt.c = this._cy * this.scale.y;\n      lt.d = this._sy * this.scale.y;\n      lt.tx = this.position.x - (this.pivot.x * lt.a + this.pivot.y * lt.c);\n      lt.ty = this.position.y - (this.pivot.x * lt.b + this.pivot.y * lt.d);\n      this._currentLocalID = this._localID; // force an update..\n\n      this._parentID = -1;\n    }\n\n    if (this._parentID !== parentTransform._worldID) {\n      // concat the parent matrix with the objects transform.\n      var pt = parentTransform.worldTransform;\n      var wt = this.worldTransform;\n      wt.a = lt.a * pt.a + lt.b * pt.c;\n      wt.b = lt.a * pt.b + lt.b * pt.d;\n      wt.c = lt.c * pt.a + lt.d * pt.c;\n      wt.d = lt.c * pt.b + lt.d * pt.d;\n      wt.tx = lt.tx * pt.a + lt.ty * pt.c + pt.tx;\n      wt.ty = lt.tx * pt.b + lt.ty * pt.d + pt.ty;\n      this._parentID = parentTransform._worldID; // update the id of the transform..\n\n      this._worldID++;\n    }\n  };\n  /**\n   * Decomposes a matrix and sets the transforms properties based on it.\n   *\n   * @param matrix - The matrix to decompose\n   */\n\n\n  Transform.prototype.setFromMatrix = function (matrix) {\n    matrix.decompose(this);\n    this._localID++;\n  };\n\n  Object.defineProperty(Transform.prototype, \"rotation\", {\n    /** The rotation of the object in radians. */\n    get: function get() {\n      return this._rotation;\n    },\n    set: function set(value) {\n      if (this._rotation !== value) {\n        this._rotation = value;\n        this.updateSkew();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** A default (identity) transform. */\n\n  Transform.IDENTITY = new Transform();\n  return Transform;\n}();\n\nexport { Circle, DEG_TO_RAD, Ellipse, Matrix, ObservablePoint, PI_2, Point, Polygon, RAD_TO_DEG, Rectangle, RoundedRectangle, SHAPES, Transform, groupD8 };","map":{"version":3,"mappings":"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","names":["PI_2","Math","PI","RAD_TO_DEG","DEG_TO_RAD","SHAPES","x","y","Point","p","set","tempPoints","width","height","Number","type","RECT","Object","Rectangle","rectangle","other","transform","x0_1","x1_1","right","y0_1","y1_1","bottom","x0","left","x1","y0","top","y1","lt","lb","rt","rb","s","sign","a","d","b","c","apply","max","min","nx","ny","n00","n10","n01","n11","mx","my","m00","m10","m01","m11","paddingX","paddingY","x2","y2","resolution","eps","ceil","floor","radius","CIRC","Circle","r2","dx","dy","halfWidth","halfHeight","ELIP","Ellipse","normx","normy","points","flat","Array","isArray","i","il","length","push","POLY","closeStroke","Polygon","slice","polygon","inside","j","xi","yi","xj","yj","intersect","reduce","pointsDesc","currentPoint","RREC","RoundedRectangle","radius2","cb","scope","_x","_y","ObservablePoint","call","value","tx","ty","Matrix","array","transpose","out","Float32Array","pos","newPos","id","angle","cos","sin","a1","c1","tx1","matrix","b1","d1","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","pivot","atan2","delta","abs","skew","scale","sqrt","position","n","ux","uy","vx","vy","rotationCayley","rotationMatrices","signum","init","row","_ux","_uy","_vx","_vy","k","mat","groupD8","E","SE","S","SW","W","NW","N","NE","MIRROR_VERTICAL","MAIN_DIAGONAL","MIRROR_HORIZONTAL","REVERSE_DIAGONAL","uX","ind","uY","vX","vY","inv","add","rotationSecond","rotationFirst","sub","rotate180","isVertical","byDirection","matrixAppendRotationInv","append","worldTransform","localTransform","onChange","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","_worldID","_parentID","Transform","parentTransform","pt","wt","decompose"],"sources":["../../src/const.ts","../../src/Point.ts","../../src/shapes/Rectangle.ts","../../src/shapes/Circle.ts","../../src/shapes/Ellipse.ts","../../src/shapes/Polygon.ts","../../src/shapes/RoundedRectangle.ts","../../src/ObservablePoint.ts","../../src/Matrix.ts","../../src/groupD8.ts","../../src/Transform.ts"],"sourcesContent":["/**\n * Two Pi.\n *\n * @static\n * @member {number}\n * @memberof PIXI\n */\nexport const PI_2 = Math.PI * 2;\n\n/**\n * Conversion factor for converting radians to degrees.\n *\n * @static\n * @member {number} RAD_TO_DEG\n * @memberof PIXI\n */\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * Conversion factor for converting degrees to radians.\n *\n * @static\n * @member {number}\n * @memberof PIXI\n */\nexport const DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n *\n * @static\n * @memberof PIXI\n * @enum {number}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n */\nexport enum SHAPES {\n    POLY = 0,\n    RECT = 1,\n    CIRC = 2,\n    ELIP = 3,\n    RREC = 4,\n}\n","import type { IPoint } from './IPoint';\nimport type { IPointData } from './IPointData';\n\nexport interface Point extends GlobalMixins.Point, IPoint {}\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis\n *\n * @class\n * @memberof PIXI\n * @implements IPoint\n */\nexport class Point implements IPoint\n{\n    /** Position of the point on the x axis */\n    public x = 0;\n    /** Position of the point on the y axis */\n    public y = 0;\n\n    /** Creates a new `Point`\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /** Creates a clone of this point\n     * @returns A clone of this point\n     */\n    clone(): Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies `x` and `y` from the given point into this point\n     *\n     * @param p - The point to copy from\n     * @returns The point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        this.set(p.x, p.y);\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into the given point (`p`).\n     *\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this.x, this.y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     *\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     *\n     * @param {number} [x=0] - position of the point on the `x` axis\n     * @param {number} [y=x] - position of the point on the `y` axis\n     * @returns The point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Point x=${this.x} y=${this.y}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\nimport { Matrix } from '../Matrix';\nimport { Point } from '../Point';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Rectangle extends GlobalMixins.Rectangle {}\n\n/**\n * Size object, contains width and height\n *\n * @memberof PIXI\n * @typedef {object} ISize\n */\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n *\n * @memberof PIXI\n */\nexport class Rectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RECT\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RECT;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rectangle\n     * @param width - The overall width of the rectangle\n     * @param height - The overall height of the rectangle\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0)\n    {\n        this.x = Number(x);\n        this.y = Number(y);\n        this.width = Number(width);\n        this.height = Number(height);\n        this.type = SHAPES.RECT;\n    }\n\n    /** Returns the left edge of the rectangle. */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /** Returns the right edge of the rectangle. */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /** Returns the top edge of the rectangle. */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /** Returns the bottom edge of the rectangle. */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /** A constant empty rectangle. */\n    static get EMPTY(): Rectangle\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     *\n     * @return a copy of the rectangle\n     */\n    clone(): Rectangle\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     *\n     * @param rectangle - The rectangle to copy from.\n     * @return Returns itself.\n     */\n    copyFrom(rectangle: Rectangle): Rectangle\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     *\n     * @param rectangle - The rectangle to copy to.\n     * @return Returns given parameter.\n     */\n    copyTo(rectangle: Rectangle): Rectangle\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     *\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @return Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n     * Returns true only if the area of the intersection is >0, this means that Rectangles\n     * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n     * (width or height equal to zero) can't intersect any other rectangle.\n     *\n     * @param {Rectangle} other - The Rectangle to intersect with `this`.\n     * @param {Matrix} transform - The transformation matrix of `other`.\n     * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n     */\n    intersects(other: Rectangle, transform?: Matrix): boolean\n    {\n        if (!transform)\n        {\n            const x0 = this.x < other.x ? other.x : this.x;\n            const x1 = this.right > other.right ? other.right : this.right;\n\n            if (x1 <= x0)\n            {\n                return false;\n            }\n\n            const y0 = this.y < other.y ? other.y : this.y;\n            const y1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n\n            return y1 > y0;\n        }\n\n        const x0 = this.left;\n        const x1 = this.right;\n        const y0 = this.top;\n        const y1 = this.bottom;\n\n        if (x1 <= x0 || y1 <= y0)\n        {\n            return false;\n        }\n\n        const lt = tempPoints[0].set(other.left, other.top);\n        const lb = tempPoints[1].set(other.left, other.bottom);\n        const rt = tempPoints[2].set(other.right, other.top);\n        const rb = tempPoints[3].set(other.right, other.bottom);\n\n        if (rt.x <= lt.x || lb.y <= lt.y)\n        {\n            return false;\n        }\n\n        const s = Math.sign((transform.a * transform.d) - (transform.b * transform.c));\n\n        if (s === 0)\n        {\n            return false;\n        }\n\n        transform.apply(lt, lt);\n        transform.apply(lb, lb);\n        transform.apply(rt, rt);\n        transform.apply(rb, rb);\n\n        if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0\n            || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1\n            || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0\n            || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1)\n        {\n            return false;\n        }\n\n        const nx = s * (lb.y - lt.y);\n        const ny = s * (lt.x - lb.x);\n        const n00 = (nx * x0) + (ny * y0);\n        const n10 = (nx * x1) + (ny * y0);\n        const n01 = (nx * x0) + (ny * y1);\n        const n11 = (nx * x1) + (ny * y1);\n\n        if (Math.max(n00, n10, n01, n11) <= (nx * lt.x) + (ny * lt.y)\n            || Math.min(n00, n10, n01, n11) >= (nx * rb.x) + (ny * rb.y))\n        {\n            return false;\n        }\n\n        const mx = s * (lt.y - rt.y);\n        const my = s * (rt.x - lt.x);\n        const m00 = (mx * x0) + (my * y0);\n        const m10 = (mx * x1) + (my * y0);\n        const m01 = (mx * x0) + (my * y1);\n        const m11 = (mx * x1) + (my * y1);\n\n        if (Math.max(m00, m10, m01, m11) <= (mx * lt.x) + (my * lt.y)\n            || Math.min(m00, m10, m01, m11) >= (mx * rb.x) + (my * rb.y))\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     *\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     * @return Returns itself.\n     */\n    pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     *\n     * @param rectangle - The rectangle to fit.\n     * @return Returns itself.\n     */\n    fit(rectangle: Rectangle): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     *\n     * @param resolution - resolution\n     * @param eps - precision\n     * @return Returns itself.\n     */\n    ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     *\n     * @param rectangle - The rectangle to include.\n     * @return Returns itself.\n     */\n    enlarge(rectangle: Rectangle): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from './../const';\nimport { Rectangle } from './Rectangle';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @memberof PIXI\n */\nexport class Circle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @default PIXI.SHAPES.CIRC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.CIRC;\n\n    /**\n     * @param x - The X coordinate of the center of this circle\n     * @param y - The Y coordinate of the center of this circle\n     * @param radius - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n\n        this.type = SHAPES.CIRC;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     *\n     * @return A copy of the Circle\n     */\n    clone(): Circle\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     *\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @return Whether the x/y coordinates are within this Circle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.radius <= 0)\n        {\n            return false;\n        }\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n    * Returns the framing rectangle of the circle as a Rectangle object\n    *\n    * @return The framing rectangle\n    */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n    }\n    // #endif\n}\n","import { Rectangle } from './Rectangle';\nimport { SHAPES } from '../const';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n *\n * @memberof PIXI\n */\nexport class Ellipse\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @default PIXI.SHAPES.ELIP\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.ELIP;\n\n    /**\n     * @param x - The X coordinate of the center of this ellipse\n     * @param y - The Y coordinate of the center of this ellipse\n     * @param halfWidth - The half width of this ellipse\n     * @param halfHeight - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = halfWidth;\n        this.height = halfHeight;\n\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     *\n     * @return {PIXI.Ellipse} A copy of the ellipse\n     */\n    clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     *\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @return Whether the x/y coords are within this ellipse\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     *\n     * @return The framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Ellipse x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\nimport type { IPointData } from '../IPointData';\n\n/**\n * A class to define a shape via user defined coordinates.\n *\n * @memberof PIXI\n */\nexport class Polygon\n{\n    /** An array of the points of this polygon. */\n    public points: number[];\n\n    /** `false` after moveTo, `true` after `closePath`. In all other cases it is `true`. */\n    public closeStroke: boolean;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @default PIXI.SHAPES.POLY\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.POLY;\n\n    constructor(points: IPointData[]|number[]);\n    constructor(...points: IPointData[]|number[]);\n\n    /**\n     * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: any[])\n    {\n        let flat: IPointData[]|number[] = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as IPointData).x, (flat[i] as IPointData).y);\n            }\n\n            flat = p;\n        }\n\n        this.points = flat as number[];\n        this.type = SHAPES.POLY;\n        this.closeStroke = true;\n    }\n\n    /**\n     * Creates a clone of this polygon.\n     *\n     * @return - A copy of the polygon.\n     */\n    clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closeStroke = this.closeStroke;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     *\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @return - Whether the x/y coordinates are within this polygon.\n     */\n    contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Polygon`\n            + `closeStroke=${this.closeStroke}`\n            + `points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, '')}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n *\n * @memberof PIXI\n */\nexport class RoundedRectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /** @default 20 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     *\n     * @default PIXI.SHAPES.RREC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RREC;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param width - The overall width of this rounded rectangle\n     * @param height - The overall height of this rounded rectangle\n     * @param radius - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.radius = radius;\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle.\n     *\n     * @return - A copy of the rounded rectangle.\n     */\n    clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     *\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @return - Whether the x/y coordinates are within this Rounded Rectangle.\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n\n                if ((y >= this.y + radius && y <= this.y + this.height - radius)\n                || (x >= this.x + radius && x <= this.x + this.width - radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + radius);\n                let dy = y - (this.y + radius);\n                const radius2 = radius * radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:RoundedRectangle x=${this.x} y=${this.y}`\n            + `width=${this.width} height=${this.height} radius=${this.radius}]`;\n    }\n    // #endif\n}\n","import type { IPointData } from './IPointData';\nimport type { IPoint } from './IPoint';\n\nexport interface ObservablePoint extends GlobalMixins.Point, IPoint {}\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n *\n * @memberof PIXI\n */\nexport class ObservablePoint<T = any> implements IPoint\n{\n    /** The callback function triggered when `x` and/or `y` are changed */\n    public cb: (this: T) => any;\n\n    /** The owner of the callback */\n    public scope: any;\n\n    _x: number;\n    _y: number;\n\n    /**\n     * Creates a new `ObservablePoint`\n     *\n     * @param cb - callback function triggered when `x` and/or `y` are changed\n     * @param scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n    */\n    constructor(cb: (this: T) => any, scope: T, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overridden otherwise they will default\n     * to the clone object's values.\n     *\n     * @override\n     * @param cb - The callback function triggered when `x` and/or `y` are changed\n     * @param scope - The owner of the callback\n     * @return a copy of this observable point\n     */\n    clone(cb = this.cb, scope = this.scope): ObservablePoint\n    {\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     *\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns The observable point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point (`p`)\n     *\n     * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n     * @returns The observable point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into that of the given point (`p`)\n     *\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     *\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:ObservablePoint x=${0} y=${0} scope=${this.scope}]`;\n    }\n    // #endif\n\n    /** Position of the observable point on the x axis. */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /** Position of the observable point on the y axis. */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n","import { Point } from './Point';\nimport { PI_2 } from './const';\n\nimport type { Transform } from './Transform';\nimport type { IPointData } from './IPointData';\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n *\n * @memberof PIXI\n */\nexport class Matrix\n{\n    /** @default 1 */\n    public a: number;\n\n    /** @default 0 */\n    public b: number;\n\n    /** @default 0 */\n    public c: number;\n\n    /** @default 1 */\n    public d: number;\n\n    /** @default 0 */\n    public tx: number;\n\n    /** @default 0 */\n    public ty: number;\n\n    public array: Float32Array|null = null;\n\n    /**\n     * @param a - x scale\n     * @param b - y skew\n     * @param c - x skew\n     * @param d - y scale\n     * @param tx - x translation\n     * @param ty - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     *\n     * @param array - The array that the matrix will be populated from.\n     */\n    fromArray(array: number[]): void\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * Sets the matrix properties.\n     *\n     * @param a - Matrix component\n     * @param b - Matrix component\n     * @param c - Matrix component\n     * @param d - Matrix component\n     * @param tx - Matrix component\n     * @param ty - Matrix component\n     * @return This matrix. Good for chaining method calls.\n     */\n    set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     *\n     * @param transpose - Whether we need to transpose the matrix or not\n     * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @return The newly created array which contains the matrix\n     */\n    toArray(transpose: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     *\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, transformed through this matrix\n     */\n    apply<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     *\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @return {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    applyInverse<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     *\n     * @param x - How much to translate x by\n     * @param y - How much to translate y by\n     * @return This matrix. Good for chaining method calls.\n     */\n    translate(x: number, y: number): this\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     *\n     * @param x - The amount to scale horizontally\n     * @param y - The amount to scale vertically\n     * @return This matrix. Good for chaining method calls.\n     */\n    scale(x: number, y: number): this\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     *\n     * @param angle - The angle in radians.\n     * @return This matrix. Good for chaining method calls.\n     */\n    rotate(angle: number): this\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     *\n     * @param matrix - The matrix to append.\n     * @return This matrix. Good for chaining method calls.\n     */\n    append(matrix: Matrix): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     *\n     * @param x - Position on the x axis\n     * @param y - Position on the y axis\n     * @param pivotX - Pivot on the x axis\n     * @param pivotY - Pivot on the y axis\n     * @param scaleX - Scale on the x axis\n     * @param scaleY - Scale on the y axis\n     * @param rotation - Rotation in radians\n     * @param skewX - Skew on the x axis\n     * @param skewY - Skew on the y axis\n     * @return This matrix. Good for chaining method calls.\n     */\n    setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number,\n        scaleY: number, rotation: number, skewX: number, skewY: number): this\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     *\n     * @param matrix - The matrix to prepend\n     * @return This matrix. Good for chaining method calls.\n     */\n    prepend(matrix: Matrix): this\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     *\n     * @param transform - The transform to apply the properties to.\n     * @return The transform with the newly applied properties\n     */\n    decompose(transform: Transform): Transform\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n        const pivot = transform.pivot;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx + ((pivot.x * a) + (pivot.y * c));\n        transform.position.y = this.ty + ((pivot.x * b) + (pivot.y * d));\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     *\n     * @return This matrix. Good for chaining method calls.\n     */\n    invert(): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     *\n     * @return This matrix. Good for chaining method calls.\n     */\n    identity(): this\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     *\n     * @return A copy of this matrix. Good for chaining method calls.\n     */\n    clone(): Matrix\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     *\n     * @param matrix - The matrix to copy to.\n     * @return The matrix given in parameter with its values updated.\n     */\n    copyTo(matrix: Matrix): Matrix\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @return {PIXI.Matrix} this\n     */\n    copyFrom(matrix: Matrix): this\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n    }\n    // #endif\n\n    /**\n     * A default (identity) matrix\n     *\n     * @readonly\n     */\n    static get IDENTITY(): Matrix\n    {\n        return new Matrix();\n    }\n\n    /**\n     * A temp matrix\n     *\n     * @readonly\n     */\n    static get TEMP_MATRIX(): Matrix\n    {\n        return new Matrix();\n    }\n}\n","// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n//\n// This file implements the dihedral group of order 16, also called\n// of degree 8. That's why its called groupD8.\n\nimport { Matrix } from './Matrix';\n\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n *\n * @type number[][]\n * @private\n */\nconst rotationCayley: number[][] = [];\n\n/**\n * Matrices for each `GD8Symmetry` rotation.\n *\n * @type Matrix[]\n * @private\n */\nconst rotationMatrices: Matrix[] = [];\n\n/*\n * Alias for {@code Math.sign}.\n */\nconst signum = Math.sign;\n\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init(): void\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row: number[] = [];\n\n        rotationCayley.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            /* Multiplies rotation matrices i and j. */\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy\n                      && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\n\ninit();\n\ntype GD8Symmetry = number;\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n *\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nexport const groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    E: 0,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SE: 1,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    S: 2,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SW: 3,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    W: 4,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NW: 5,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    N: 6,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NE: 7,\n\n    /**\n     * Reflection about Y-axis.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_VERTICAL: 8,\n\n    /**\n     * Reflection about the main diagonal.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MAIN_DIAGONAL: 10,\n\n    /**\n     * Reflection about X-axis.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_HORIZONTAL: 12,\n\n    /**\n     * Reflection about reverse diagonal.\n     *\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    REVERSE_DIAGONAL: 14,\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: (ind: GD8Symmetry): GD8Symmetry => ux[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: (ind: GD8Symmetry): GD8Symmetry => uy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: (ind: GD8Symmetry): GD8Symmetry => vx[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @return {PIXI.GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: (ind: GD8Symmetry): GD8Symmetry => vy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @return {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: (rotation: GD8Symmetry): GD8Symmetry =>\n    {\n        if (rotation & 8)// true only if between 8 & 15 (reflections)\n        {\n            return rotation & 15;// or rotation % 16\n        }\n\n        return (-rotation) & 7;// or (8 - rotation) % 8\n    },\n\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @return {PIXI.GD8Symmetry} Composed operation\n     */\n    add: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][rotationFirst]\n    ),\n\n    /**\n     * Reverse of `add`.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n     * @return {PIXI.GD8Symmetry} Result\n     */\n    sub: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]\n    ),\n\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     *\n     * @memberof PIXI.groupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: (rotation: number): number => rotation ^ 4,\n\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation: GD8Symmetry): boolean => (rotation & 3) === 2, // rotation % 4 === 2\n\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     *\n     * @memberof PIXI.groupD8\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @return {PIXI.GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: (dx: number, dy: number): GD8Symmetry =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return groupD8.S;\n            }\n\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return groupD8.E;\n            }\n\n            return groupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return groupD8.SE;\n            }\n\n            return groupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return groupD8.NE;\n        }\n\n        return groupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     *\n     * @memberof PIXI.groupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix: Matrix, rotation: GD8Symmetry, tx = 0, ty = 0): void =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat: Matrix = rotationMatrices[groupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n","import { ObservablePoint } from './ObservablePoint';\nimport { Matrix } from './Matrix';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Transform extends GlobalMixins.Transform {}\n\n/**\n * Transform that takes care about its versions.\n *\n * @memberof PIXI\n */\nexport class Transform\n{\n    /** A default (identity) transform. */\n    public static readonly IDENTITY = new Transform();\n\n    /** The world transformation matrix. */\n    public worldTransform: Matrix;\n\n    /** The local transformation matrix. */\n    public localTransform: Matrix;\n\n    /** The coordinate of the object relative to the local coordinates of the parent. */\n    public position: ObservablePoint;\n\n    /** The scale factor of the object. */\n    public scale: ObservablePoint;\n\n    /** The pivot point of the displayObject that it rotates around. */\n    public pivot: ObservablePoint;\n\n    /** The skew amount, on the x and y axis. */\n    public skew: ObservablePoint;\n\n    /**\n     * The locally unique ID of the parent's world transform\n     * used to calculate the current world transformation matrix.\n     */\n    public _parentID: number;\n\n    /** The locally unique ID of the world transform. */\n    _worldID: number;\n\n    /** The rotation amount. */\n    protected _rotation: number;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _cx: number;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _sx: number;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _cy: number;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _sy: number;\n\n    /** The locally unique ID of the local transform. */\n    protected _localID: number;\n\n    /**\n     * The locally unique ID of the local transform\n     * used to calculate the current local transformation matrix.\n     */\n    protected _currentLocalID: number;\n\n    constructor()\n    {\n        this.worldTransform = new Matrix();\n        this.localTransform = new Matrix();\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n        this._cx = 1;\n        this._sx = 0;\n        this._cy = 0;\n        this._sy = 1;\n        this._localID = 0;\n        this._currentLocalID = 0;\n\n        this._worldID = 0;\n        this._parentID = 0;\n    }\n\n    /** Called when a value changes. */\n    protected onChange(): void\n    {\n        this._localID++;\n    }\n\n    /** Called when the skew or the rotation changes. */\n    protected updateSkew(): void\n    {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n        this._localID++;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Transform `\n            + `position=(${this.position.x}, ${this.position.y}) `\n            + `rotation=${this.rotation} `\n            + `scale=(${this.scale.x}, ${this.scale.y}) `\n            + `skew=(${this.skew.x}, ${this.skew.y}) `\n            + `]`;\n    }\n    // #endif\n\n    /** Updates the local transformation matrix. */\n    updateLocalTransform(): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the local and the world transformation matrices.\n     *\n     * @param parentTransform - The parent transform\n     */\n    updateTransform(parentTransform: Transform): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n        this._localID++;\n    }\n\n    /** The rotation of the object in radians. */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}