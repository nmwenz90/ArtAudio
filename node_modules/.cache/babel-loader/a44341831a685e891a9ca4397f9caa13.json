{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\n\nexport var OneShotSource = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(OneShotSource, _ToneAudioNode);\n\n  var _super = _createSuper(OneShotSource);\n\n  function OneShotSource(options) {\n    var _this;\n\n    _classCallCheck(this, OneShotSource);\n\n    _this = _super.call(this, options);\n    /**\n     * The callback to invoke after the\n     * source is done playing.\n     */\n\n    _this.onended = noOp;\n    /**\n     * The start time\n     */\n\n    _this._startTime = -1;\n    /**\n     * The stop time\n     */\n\n    _this._stopTime = -1;\n    /**\n     * The id of the timeout\n     */\n\n    _this._timeout = -1;\n    /**\n     * The public output node\n     */\n\n    _this.output = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The output gain node.\n     */\n\n    _this._gainNode = _this.output;\n    /**\n     * Get the playback state at the given time\n     */\n\n    _this.getStateAtTime = function (time) {\n      var computedTime = this.toSeconds(time);\n\n      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {\n        return \"started\";\n      } else {\n        return \"stopped\";\n      }\n    };\n\n    _this._fadeIn = options.fadeIn;\n    _this._fadeOut = options.fadeOut;\n    _this._curve = options.curve;\n    _this.onended = options.onended;\n    return _this;\n  }\n\n  _createClass(OneShotSource, [{\n    key: \"_startGain\",\n    value:\n    /**\n     * Start the source at the given time\n     * @param  time When to start the source\n     */\n    function _startGain(time) {\n      var gain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      assert(this._startTime === -1, \"Source cannot be started more than once\"); // apply a fade in envelope\n\n      var fadeInTime = this.toSeconds(this._fadeIn); // record the start time\n\n      this._startTime = time + fadeInTime;\n      this._startTime = Math.max(this._startTime, this.context.currentTime); // schedule the envelope\n\n      if (fadeInTime > 0) {\n        this._gainNode.gain.setValueAtTime(0, time);\n\n        if (this._curve === \"linear\") {\n          this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n        } else {\n          this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n        }\n      } else {\n        this._gainNode.gain.setValueAtTime(gain, time);\n      }\n\n      return this;\n    }\n    /**\n     * Stop the source node at the given time.\n     * @param time When to stop the source\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this.log(\"stop\", time);\n\n      this._stopGain(this.toSeconds(time));\n\n      return this;\n    }\n    /**\n     * Stop the source at the given time\n     * @param  time When to stop the source\n     */\n\n  }, {\n    key: \"_stopGain\",\n    value: function _stopGain(time) {\n      var _this2 = this;\n\n      assert(this._startTime !== -1, \"'start' must be called before 'stop'\"); // cancel the previous stop\n\n      this.cancelStop(); // the fadeOut time\n\n      var fadeOutTime = this.toSeconds(this._fadeOut); // schedule the stop callback\n\n      this._stopTime = this.toSeconds(time) + fadeOutTime;\n      this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\n      if (fadeOutTime > 0) {\n        // start the fade out curve at the given time\n        if (this._curve === \"linear\") {\n          this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n        } else {\n          this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n        }\n      } else {\n        // stop any ongoing ramps, and set the value to 0\n        this._gainNode.gain.cancelAndHoldAtTime(time);\n\n        this._gainNode.gain.setValueAtTime(0, time);\n      }\n\n      this.context.clearTimeout(this._timeout);\n      this._timeout = this.context.setTimeout(function () {\n        // allow additional time for the exponential curve to fully decay\n        var additionalTail = _this2._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\n        _this2._stopSource(_this2.now() + additionalTail);\n\n        _this2._onended();\n      }, this._stopTime - this.context.currentTime);\n      return this;\n    }\n    /**\n     * Invoke the onended callback\n     */\n\n  }, {\n    key: \"_onended\",\n    value: function _onended() {\n      var _this3 = this;\n\n      if (this.onended !== noOp) {\n        this.onended(this); // overwrite onended to make sure it only is called once\n\n        this.onended = noOp; // dispose when it's ended to free up for garbage collection only in the online context\n\n        if (!this.context.isOffline) {\n          var disposeCallback = function disposeCallback() {\n            return _this3.dispose();\n          }; // @ts-ignore\n\n\n          if (typeof window.requestIdleCallback !== \"undefined\") {\n            // @ts-ignore\n            window.requestIdleCallback(disposeCallback);\n          } else {\n            setTimeout(disposeCallback, 1000);\n          }\n        }\n      }\n    }\n    /**\n     * Get the playback state at the current time\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.getStateAtTime(this.now());\n    }\n    /**\n     * Cancel a scheduled stop event\n     */\n\n  }, {\n    key: \"cancelStop\",\n    value: function cancelStop() {\n      this.log(\"cancelStop\");\n      assert(this._startTime !== -1, \"Source is not started\"); // cancel the stop envelope\n\n      this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\n      this.context.clearTimeout(this._timeout);\n      this._stopTime = -1;\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(OneShotSource.prototype), \"dispose\", this).call(this);\n\n      this._gainNode.disconnect();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        curve: \"linear\",\n        fadeIn: 0,\n        fadeOut: 0,\n        onended: noOp\n      });\n    }\n  }]);\n\n  return OneShotSource;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","noOp","assert","OneShotSource","options","context","gain","output","time","computedTime","toSeconds","_startTime","_stopTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","curve","onended","fadeInTime","Math","max","currentTime","_gainNode","setValueAtTime","linearRampToValueAtTime","exponentialApproachValueAtTime","log","_stopGain","cancelStop","fadeOutTime","linearRampTo","targetRampTo","cancelAndHoldAtTime","clearTimeout","_timeout","setTimeout","additionalTail","_stopSource","now","_onended","isOffline","disposeCallback","dispose","window","requestIdleCallback","getStateAtTime","cancelScheduledValues","sampleTime","disconnect","Object","assign","getDefaults"],"sourceRoot":"","sources":["../../../Tone/source/OneShotSource.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}