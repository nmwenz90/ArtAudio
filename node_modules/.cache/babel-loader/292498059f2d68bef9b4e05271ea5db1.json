{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Monophonic } from \"./Monophonic\";\nimport { MonoSynth } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\n\nexport var DuoSynth = /*#__PURE__*/function (_Monophonic) {\n  _inherits(DuoSynth, _Monophonic);\n\n  var _super = _createSuper(DuoSynth);\n\n  function DuoSynth() {\n    var _this;\n\n    _classCallCheck(this, DuoSynth);\n\n    _this = _super.call(this, optionsFromArguments(DuoSynth.getDefaults(), arguments));\n    _this.name = \"DuoSynth\";\n    var options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n    _this.voice0 = new MonoSynth(Object.assign(options.voice0, {\n      context: _this.context,\n      onsilence: function onsilence() {\n        return _this.onsilence(_assertThisInitialized(_this));\n      }\n    }));\n    _this.voice1 = new MonoSynth(Object.assign(options.voice1, {\n      context: _this.context\n    }));\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    _this._vibrato = new LFO({\n      frequency: options.vibratoRate,\n      context: _this.context,\n      min: -50,\n      max: 50\n    }); // start the vibrato immediately\n\n    _this._vibrato.start();\n\n    _this.vibratoRate = _this._vibrato.frequency;\n    _this._vibratoGain = new Gain({\n      context: _this.context,\n      units: \"normalRange\",\n      gain: options.vibratoAmount\n    });\n    _this.vibratoAmount = _this._vibratoGain.gain;\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: 440\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    }); // control the two voices frequency\n\n    _this.frequency.connect(_this.voice0.frequency);\n\n    _this.frequency.chain(_this.harmonicity, _this.voice1.frequency);\n\n    _this._vibrato.connect(_this._vibratoGain);\n\n    _this._vibratoGain.fan(_this.voice0.detune, _this.voice1.detune);\n\n    _this.detune.fan(_this.voice0.detune, _this.voice1.detune);\n\n    _this.voice0.connect(_this.output);\n\n    _this.voice1.connect(_this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n    return _this;\n  }\n\n  _createClass(DuoSynth, [{\n    key: \"getLevelAtTime\",\n    value: function getLevelAtTime(time) {\n      time = this.toSeconds(time);\n      return this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n    }\n  }, {\n    key: \"_triggerEnvelopeAttack\",\n    value:\n    /**\n     * Trigger the attack portion of the note\n     */\n    function _triggerEnvelopeAttack(time, velocity) {\n      // @ts-ignore\n      this.voice0._triggerEnvelopeAttack(time, velocity); // @ts-ignore\n\n\n      this.voice1._triggerEnvelopeAttack(time, velocity);\n    }\n    /**\n     * Trigger the release portion of the note\n     */\n\n  }, {\n    key: \"_triggerEnvelopeRelease\",\n    value: function _triggerEnvelopeRelease(time) {\n      // @ts-ignore\n      this.voice0._triggerEnvelopeRelease(time); // @ts-ignore\n\n\n      this.voice1._triggerEnvelopeRelease(time);\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(DuoSynth.prototype), \"dispose\", this).call(this);\n\n      this.voice0.dispose();\n      this.voice1.dispose();\n      this.frequency.dispose();\n      this.detune.dispose();\n\n      this._vibrato.dispose();\n\n      this.vibratoRate.dispose();\n\n      this._vibratoGain.dispose();\n\n      this.harmonicity.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Monophonic.getDefaults(), {\n        vibratoAmount: 0.5,\n        vibratoRate: 5,\n        harmonicity: 1.5,\n        voice0: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n          filterEnvelope: {\n            attack: 0.01,\n            decay: 0.0,\n            sustain: 1,\n            release: 0.5\n          },\n          envelope: {\n            attack: 0.01,\n            decay: 0.0,\n            sustain: 1,\n            release: 0.5\n          }\n        }),\n        voice1: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n          filterEnvelope: {\n            attack: 0.01,\n            decay: 0.0,\n            sustain: 1,\n            release: 0.5\n          },\n          envelope: {\n            attack: 0.01,\n            decay: 0.0,\n            sustain: 1,\n            release: 0.5\n          }\n        })\n      });\n    }\n  }]);\n\n  return DuoSynth;\n}(Monophonic);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,UAAT,QAA8C,cAA9C;AACA,SAASC,SAAT,QAA4C,aAA5C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,QAA2C,wBAA3C;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,IAAT,QAAsB,sBAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,oBAApC,QAAgE,uBAAhE;AAWA;;;;;;;;;AAQA,WAAaC,QAAb;AAAA;;AAAA;;AAiDC;AAAA;;AAAA;;AACC,8BAAMD,oBAAoB,CAACC,QAAQ,CAACC,WAAT,EAAD,EAAyBC,SAAzB,CAA1B;AAhDQ,iBAAe,UAAf;AAiDR,QAAMC,OAAO,GAAGJ,oBAAoB,CAACC,QAAQ,CAACC,WAAT,EAAD,EAAyBC,SAAzB,CAApC;AAEA,UAAKE,MAAL,GAAc,IAAIb,SAAJ,CAAcc,MAAM,CAACC,MAAP,CAAcH,OAAO,CAACC,MAAtB,EAA8B;AACzDG,aAAO,EAAE,MAAKA,OAD2C;AAEzDC,eAAS,EAAE;AAAA,eAAM,MAAKA,SAAL,+BAAN;AAAA;AAF8C,KAA9B,CAAd,CAAd;AAIA,UAAKC,MAAL,GAAc,IAAIlB,SAAJ,CAAcc,MAAM,CAACC,MAAP,CAAcH,OAAO,CAACM,MAAtB,EAA8B;AACzDF,aAAO,EAAE,MAAKA;AAD2C,KAA9B,CAAd,CAAd;AAIA,UAAKG,WAAL,GAAmB,IAAId,QAAJ,CAAa;AAC/BW,aAAO,EAAE,MAAKA,OADiB;AAE/BI,WAAK,EAAE,UAFwB;AAG/BC,WAAK,EAAET,OAAO,CAACO;AAHgB,KAAb,CAAnB;AAMA,UAAKG,QAAL,GAAgB,IAAInB,GAAJ,CAAQ;AACvBoB,eAAS,EAAEX,OAAO,CAACY,WADI;AAEvBR,aAAO,EAAE,MAAKA,OAFS;AAGvBS,SAAG,EAAE,CAAC,EAHiB;AAIvBC,SAAG,EAAE;AAJkB,KAAR,CAAhB,CAlBD,CAwBC;;AACA,UAAKJ,QAAL,CAAcK,KAAd;;AACA,UAAKH,WAAL,GAAmB,MAAKF,QAAL,CAAcC,SAAjC;AACA,UAAKK,YAAL,GAAoB,IAAIxB,IAAJ,CAAS;AAC5BY,aAAO,EAAE,MAAKA,OADc;AAE5BI,WAAK,EAAE,aAFqB;AAG5BS,UAAI,EAAEjB,OAAO,CAACkB;AAHc,KAAT,CAApB;AAKA,UAAKA,aAAL,GAAqB,MAAKF,YAAL,CAAkBC,IAAvC;AAEA,UAAKN,SAAL,GAAiB,IAAItB,MAAJ,CAAW;AAC3Be,aAAO,EAAE,MAAKA,OADa;AAE3BI,WAAK,EAAE,WAFoB;AAG3BC,WAAK,EAAE;AAHoB,KAAX,CAAjB;AAKA,UAAKU,MAAL,GAAc,IAAI9B,MAAJ,CAAW;AACxBe,aAAO,EAAE,MAAKA,OADU;AAExBI,WAAK,EAAE,OAFiB;AAGxBC,WAAK,EAAET,OAAO,CAACmB;AAHS,KAAX,CAAd,CAvCD,CA6CC;;AACA,UAAKR,SAAL,CAAeS,OAAf,CAAuB,MAAKnB,MAAL,CAAYU,SAAnC;;AACA,UAAKA,SAAL,CAAeU,KAAf,CAAqB,MAAKd,WAA1B,EAAuC,MAAKD,MAAL,CAAYK,SAAnD;;AAEA,UAAKD,QAAL,CAAcU,OAAd,CAAsB,MAAKJ,YAA3B;;AACA,UAAKA,YAAL,CAAkBM,GAAlB,CAAsB,MAAKrB,MAAL,CAAYkB,MAAlC,EAA0C,MAAKb,MAAL,CAAYa,MAAtD;;AAEA,UAAKA,MAAL,CAAYG,GAAZ,CAAgB,MAAKrB,MAAL,CAAYkB,MAA5B,EAAoC,MAAKb,MAAL,CAAYa,MAAhD;;AAEA,UAAKlB,MAAL,CAAYmB,OAAZ,CAAoB,MAAKG,MAAzB;;AACA,UAAKjB,MAAL,CAAYc,OAAZ,CAAoB,MAAKG,MAAzB;;AAEAjC,YAAQ,gCAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,WAArB,EAAkC,eAAlC,EAAmD,aAAnD,CAAP,CAAR;AAzDD;AA0DC;;AA3GF;AAAA;AAAA,WA6GC,wBAAekC,IAAf,EAAyB;AACxBA,UAAI,GAAG,KAAKC,SAAL,CAAeD,IAAf,CAAP;AACA,aAAO,KAAKvB,MAAL,CAAYyB,QAAZ,CAAqBC,cAArB,CAAoCH,IAApC,IAA4C,KAAKlB,MAAL,CAAYoB,QAAZ,CAAqBC,cAArB,CAAoCH,IAApC,CAAnD;AACA;AAhHF;AAAA;AAAA;AA0JC;;;AAGU,oCAAuBA,IAAvB,EAAsCI,QAAtC,EAAsD;AAC/D;AACA,WAAK3B,MAAL,CAAY4B,sBAAZ,CAAmCL,IAAnC,EAAyCI,QAAzC,EAF+D,CAG/D;;;AACA,WAAKtB,MAAL,CAAYuB,sBAAZ,CAAmCL,IAAnC,EAAyCI,QAAzC;AACA;AAED;;;;AApKD;AAAA;AAAA,WAuKW,iCAAwBJ,IAAxB,EAAqC;AAC9C;AACA,WAAKvB,MAAL,CAAY6B,uBAAZ,CAAoCN,IAApC,EAF8C,CAG9C;;;AACA,WAAKlB,MAAL,CAAYwB,uBAAZ,CAAoCN,IAApC;;AACA,aAAO,IAAP;AACA;AA7KF;AAAA;AAAA,WA+KC,mBAAO;AACN;;AACA,WAAKvB,MAAL,CAAY8B,OAAZ;AACA,WAAKzB,MAAL,CAAYyB,OAAZ;AACA,WAAKpB,SAAL,CAAeoB,OAAf;AACA,WAAKZ,MAAL,CAAYY,OAAZ;;AACA,WAAKrB,QAAL,CAAcqB,OAAd;;AACA,WAAKnB,WAAL,CAAiBmB,OAAjB;;AACA,WAAKf,YAAL,CAAkBe,OAAlB;;AACA,WAAKxB,WAAL,CAAiBwB,OAAjB;AACA,aAAO,IAAP;AACA;AA1LF;AAAA;AAAA,WAkHC,uBAAkB;AACjB,aAAOrC,SAAS,CAACP,UAAU,CAACW,WAAX,EAAD,EAA2B;AAC1CoB,qBAAa,EAAE,GAD2B;AAE1CN,mBAAW,EAAE,CAF6B;AAG1CL,mBAAW,EAAE,GAH6B;AAI1CN,cAAM,EAAEP,SAAS,CAChBC,cAAc,CAACP,SAAS,CAACU,WAAV,EAAD,EAA0BI,MAAM,CAAC8B,IAAP,CAAY7C,UAAU,CAACW,WAAX,EAAZ,CAA1B,CADE,EAEhB;AACCmC,wBAAc,EAAE;AACfC,kBAAM,EAAE,IADO;AAEfC,iBAAK,EAAE,GAFQ;AAGfC,mBAAO,EAAE,CAHM;AAIfC,mBAAO,EAAE;AAJM,WADjB;AAOCX,kBAAQ,EAAE;AACTQ,kBAAM,EAAE,IADC;AAETC,iBAAK,EAAE,GAFE;AAGTC,mBAAO,EAAE,CAHA;AAITC,mBAAO,EAAE;AAJA;AAPX,SAFgB,CAJyB;AAoB1C/B,cAAM,EAAEZ,SAAS,CAChBC,cAAc,CAACP,SAAS,CAACU,WAAV,EAAD,EAA0BI,MAAM,CAAC8B,IAAP,CAAY7C,UAAU,CAACW,WAAX,EAAZ,CAA1B,CADE,EAEhB;AAECmC,wBAAc,EAAE;AACfC,kBAAM,EAAE,IADO;AAEfC,iBAAK,EAAE,GAFQ;AAGfC,mBAAO,EAAE,CAHM;AAIfC,mBAAO,EAAE;AAJM,WAFjB;AAQCX,kBAAQ,EAAE;AACTQ,kBAAM,EAAE,IADC;AAETC,iBAAK,EAAE,GAFE;AAGTC,mBAAO,EAAE,CAHA;AAITC,mBAAO,EAAE;AAJA;AARX,SAFgB;AApByB,OAA3B,CAAhB;AAsCA;AAzJF;;AAAA;AAAA,EAA8BlD,UAA9B","names":["Monophonic","MonoSynth","Signal","readOnly","LFO","Gain","Multiply","deepMerge","omitFromObject","optionsFromArguments","DuoSynth","getDefaults","arguments","options","voice0","Object","assign","context","onsilence","voice1","harmonicity","units","value","_vibrato","frequency","vibratoRate","min","max","start","_vibratoGain","gain","vibratoAmount","detune","connect","chain","fan","output","time","toSeconds","envelope","getValueAtTime","velocity","_triggerEnvelopeAttack","_triggerEnvelopeRelease","dispose","keys","filterEnvelope","attack","decay","sustain","release"],"sourceRoot":"","sources":["../../../Tone/instrument/DuoSynth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}