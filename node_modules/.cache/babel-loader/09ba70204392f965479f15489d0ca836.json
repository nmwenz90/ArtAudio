{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\n\nexport var Solo = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Solo, _ToneAudioNode);\n\n  var _super = _createSuper(Solo);\n\n  function Solo() {\n    var _this;\n\n    _classCallCheck(this, Solo);\n\n    _this = _super.call(this, optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]));\n    _this.name = \"Solo\";\n    var options = optionsFromArguments(Solo.getDefaults(), arguments, [\"solo\"]);\n    _this.input = _this.output = new Gain({\n      context: _this.context\n    });\n\n    if (!Solo._allSolos.has(_this.context)) {\n      Solo._allSolos.set(_this.context, new Set());\n    }\n\n    Solo._allSolos.get(_this.context).add(_assertThisInitialized(_this)); // set initially\n\n\n    _this.solo = options.solo;\n    return _this;\n  }\n\n  _createClass(Solo, [{\n    key: \"solo\",\n    get:\n    /**\n     * Isolates this instance and mutes all other instances of Solo.\n     * Only one instance can be soloed at a time. A soloed\n     * instance will report `solo=false` when another instance is soloed.\n     */\n    function get() {\n      return this._isSoloed();\n    },\n    set: function set(solo) {\n      if (solo) {\n        this._addSolo();\n      } else {\n        this._removeSolo();\n      }\n\n      Solo._allSolos.get(this.context).forEach(function (instance) {\n        return instance._updateSolo();\n      });\n    }\n    /**\n     * If the current instance is muted, i.e. another instance is soloed\n     */\n\n  }, {\n    key: \"muted\",\n    get: function get() {\n      return this.input.gain.value === 0;\n    }\n    /**\n     * Add this to the soloed array\n     */\n\n  }, {\n    key: \"_addSolo\",\n    value: function _addSolo() {\n      if (!Solo._soloed.has(this.context)) {\n        Solo._soloed.set(this.context, new Set());\n      }\n\n      Solo._soloed.get(this.context).add(this);\n    }\n    /**\n     * Remove this from the soloed array\n     */\n\n  }, {\n    key: \"_removeSolo\",\n    value: function _removeSolo() {\n      if (Solo._soloed.has(this.context)) {\n        Solo._soloed.get(this.context).delete(this);\n      }\n    }\n    /**\n     * Is this on the soloed array\n     */\n\n  }, {\n    key: \"_isSoloed\",\n    value: function _isSoloed() {\n      return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);\n    }\n    /**\n     * Returns true if no one is soloed\n     */\n\n  }, {\n    key: \"_noSolos\",\n    value: function _noSolos() {\n      // either does not have any soloed added\n      return !Solo._soloed.has(this.context) || // or has a solo set but doesn't include any items\n      Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;\n    }\n    /**\n     * Solo the current instance and unsolo all other instances.\n     */\n\n  }, {\n    key: \"_updateSolo\",\n    value: function _updateSolo() {\n      if (this._isSoloed()) {\n        this.input.gain.value = 1;\n      } else if (this._noSolos()) {\n        // no one is soloed\n        this.input.gain.value = 1;\n      } else {\n        this.input.gain.value = 0;\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Solo.prototype), \"dispose\", this).call(this);\n\n      Solo._allSolos.get(this.context).delete(this);\n\n      this._removeSolo();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        solo: false\n      });\n    }\n  }]);\n\n  return Solo;\n}(ToneAudioNode);\n/**\n * Hold all of the solo'ed tracks belonging to a specific context\n */\n\nSolo._allSolos = new Map();\n/**\n * Hold the currently solo'ed instance(s)\n */\n\nSolo._soloed = new Map();","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","optionsFromArguments","Solo","getDefaults","arguments","options","input","output","context","_allSolos","has","set","Set","get","add","solo","_isSoloed","_addSolo","_removeSolo","forEach","instance","_updateSolo","gain","value","_soloed","delete","size","_noSolos","Object","assign","Map"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Solo.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}