{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Instrument } from \"../instrument/Instrument\";\nimport { timeRange } from \"../core/util/Decorator\";\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\n\nexport var Monophonic = /*#__PURE__*/function (_Instrument) {\n  _inherits(Monophonic, _Instrument);\n\n  var _super = _createSuper(Monophonic);\n\n  function Monophonic() {\n    var _this;\n\n    _classCallCheck(this, Monophonic);\n\n    _this = _super.call(this, optionsFromArguments(Monophonic.getDefaults(), arguments));\n    var options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n    _this.portamento = options.portamento;\n    _this.onsilence = options.onsilence;\n    return _this;\n  }\n\n  _createClass(Monophonic, [{\n    key: \"triggerAttack\",\n    value:\n    /**\n     * Trigger the attack of the note optionally with a given velocity.\n     * @param  note The note to trigger.\n     * @param  time When the note should start.\n     * @param  velocity The velocity scaler determines how \"loud\" the note will be triggered.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * // trigger the note a half second from now at half velocity\n     * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n     */\n    function triggerAttack(note, time) {\n      var velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      this.log(\"triggerAttack\", note, time, velocity);\n      var seconds = this.toSeconds(time);\n\n      this._triggerEnvelopeAttack(seconds, velocity);\n\n      this.setNote(note, seconds);\n      return this;\n    }\n    /**\n     * Trigger the release portion of the envelope\n     * @param  time If no time is given, the release happens immediatly\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * synth.triggerAttack(\"C4\");\n     * // trigger the release a second from now\n     * synth.triggerRelease(\"+1\");\n     */\n\n  }, {\n    key: \"triggerRelease\",\n    value: function triggerRelease(time) {\n      this.log(\"triggerRelease\", time);\n      var seconds = this.toSeconds(time);\n\n      this._triggerEnvelopeRelease(seconds);\n\n      return this;\n    }\n    /**\n     * Set the note at the given time. If no time is given, the note\n     * will set immediately.\n     * @param note The note to change to.\n     * @param  time The time when the note should be set.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * synth.triggerAttack(\"C4\");\n     * // change to F#6 in one quarter note from now.\n     * synth.setNote(\"F#6\", \"+4n\");\n     */\n\n  }, {\n    key: \"setNote\",\n    value: function setNote(note, time) {\n      var computedTime = this.toSeconds(time);\n      var computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n\n      if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n        var portTime = this.toSeconds(this.portamento);\n        this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n      } else {\n        this.frequency.setValueAtTime(computedFrequency, computedTime);\n      }\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Instrument.getDefaults(), {\n        detune: 0,\n        onsilence: noOp,\n        portamento: 0\n      });\n    }\n  }]);\n\n  return Monophonic;\n}(Instrument);\n\n__decorate([timeRange(0)], Monophonic.prototype, \"portamento\", void 0);","map":{"version":3,"mappings":";;;;;AAAA,SAASA,cAAT,QAA+B,wBAA/B;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,SAASC,UAAT,QAA8C,0BAA9C;AAEA,SAASC,SAAT,QAA0B,wBAA1B;AAUA;;;;AAGA,WAAsBC,UAAtB;AAAA;;AAAA;;AAwBC;AAAA;;AAAA;;AAEC,8BAAMJ,oBAAoB,CAACI,UAAU,CAACC,WAAX,EAAD,EAA2BC,SAA3B,CAA1B;AACA,QAAMC,OAAO,GAAGP,oBAAoB,CAACI,UAAU,CAACC,WAAX,EAAD,EAA2BC,SAA3B,CAApC;AAEA,UAAKE,UAAL,GAAkBD,OAAO,CAACC,UAA1B;AACA,UAAKC,SAAL,GAAiBF,OAAO,CAACE,SAAzB;AAND;AAOC;;AA/BF;AAAA;AAAA;AAyCC;;;;;;;;;;AAUA,2BAAcC,IAAd,EAAgDC,IAAhD,EAAsF;AAAA,UAAzBC,QAAyB,uEAAD,CAAC;AACrF,WAAKC,GAAL,CAAS,eAAT,EAA0BH,IAA1B,EAAgCC,IAAhC,EAAsCC,QAAtC;AACA,UAAME,OAAO,GAAG,KAAKC,SAAL,CAAeJ,IAAf,CAAhB;;AACA,WAAKK,sBAAL,CAA4BF,OAA5B,EAAqCF,QAArC;;AACA,WAAKK,OAAL,CAAaP,IAAb,EAAmBI,OAAnB;AACA,aAAO,IAAP;AACA;AAED;;;;;;;;;;AA3DD;AAAA;AAAA,WAoEC,wBAAeH,IAAf,EAA0B;AACzB,WAAKE,GAAL,CAAS,gBAAT,EAA2BF,IAA3B;AACA,UAAMG,OAAO,GAAG,KAAKC,SAAL,CAAeJ,IAAf,CAAhB;;AACA,WAAKO,uBAAL,CAA6BJ,OAA7B;;AACA,aAAO,IAAP;AACA;AAoBD;;;;;;;;;;;;AA7FD;AAAA;AAAA,WAwGC,iBAAQJ,IAAR,EAA0CC,IAA1C,EAAqD;AACpD,UAAMQ,YAAY,GAAG,KAAKJ,SAAL,CAAeJ,IAAf,CAArB;AACA,UAAMS,iBAAiB,GAAGV,IAAI,YAAYX,cAAhB,GAAiCW,IAAI,CAACW,WAAL,EAAjC,GAAsDX,IAAhF;;AACA,UAAI,KAAKF,UAAL,GAAkB,CAAlB,IAAuB,KAAKc,cAAL,CAAoBH,YAApB,IAAoC,IAA/D,EAAqE;AACpE,YAAMI,QAAQ,GAAG,KAAKR,SAAL,CAAe,KAAKP,UAApB,CAAjB;AACA,aAAKgB,SAAL,CAAeC,iBAAf,CAAiCL,iBAAjC,EAAoDG,QAApD,EAA8DJ,YAA9D;AACA,OAHD,MAGO;AACN,aAAKK,SAAL,CAAeE,cAAf,CAA8BN,iBAA9B,EAAiDD,YAAjD;AACA;;AACD,aAAO,IAAP;AACA;AAlHF;AAAA;AAAA,WAiCC,uBAAkB;AACjB,aAAOQ,MAAM,CAACC,MAAP,CAAc1B,UAAU,CAACG,WAAX,EAAd,EAAwC;AAC9CwB,cAAM,EAAE,CADsC;AAE9CpB,iBAAS,EAAER,IAFmC;AAG9CO,kBAAU,EAAE;AAHkC,OAAxC,CAAP;AAKA;AAvCF;;AAAA;AAAA,EAA4EN,UAA5E;;AAMC4B,YADC3B,SAAS,CAAC,CAAD,CACV","names":["FrequencyClass","optionsFromArguments","noOp","Instrument","timeRange","Monophonic","getDefaults","arguments","options","portamento","onsilence","note","time","velocity","log","seconds","toSeconds","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","computedTime","computedFrequency","toFrequency","getLevelAtTime","portTime","frequency","exponentialRampTo","setValueAtTime","Object","assign","detune","__decorate"],"sourceRoot":"","sources":["../../../Tone/instrument/Monophonic.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}