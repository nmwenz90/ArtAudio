{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a [[Compressor]] with a fast attack\n * and release and max compression ratio.\n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\n\nexport var Limiter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Limiter, _ToneAudioNode);\n\n  var _super = _createSuper(Limiter);\n\n  function Limiter() {\n    var _this;\n\n    _classCallCheck(this, Limiter);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n    _this.name = \"Limiter\";\n    var options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n    _this._compressor = _this.input = _this.output = new Compressor({\n      context: _this.context,\n      ratio: 20,\n      attack: 0.003,\n      release: 0.01,\n      threshold: options.threshold\n    });\n    _this.threshold = _this._compressor.threshold;\n    readOnly(_assertThisInitialized(_this), \"threshold\");\n    return _this;\n  }\n\n  _createClass(Limiter, [{\n    key: \"reduction\",\n    get:\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal.\n     */\n    function get() {\n      return this._compressor.reduction;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Limiter.prototype), \"dispose\", this).call(this);\n\n      this._compressor.dispose();\n\n      this.threshold.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        threshold: -12\n      });\n    }\n  }]);\n\n  return Limiter;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AAAA,SAAgCA,aAAhC,QAA2E,kCAA3E;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SAASC,QAAT,QAAyB,2BAAzB;AAIC;AAED;;;;;;;;;;;;AAWA,WAAaC,OAAb;AAAA;;AAAA;;AAmBC;AAAA;;AAAA;;AACC,8BAAMC,MAAM,CAACC,MAAP,CAAcL,oBAAoB,CAACG,OAAO,CAACG,WAAR,EAAD,EAAwBC,SAAxB,EAAmC,CAAC,WAAD,CAAnC,CAAlC,CAAN;AAlBQ,iBAAe,SAAf;AAmBR,QAAMC,OAAO,GAAGR,oBAAoB,CAACG,OAAO,CAACG,WAAR,EAAD,EAAwBC,SAAxB,EAAmC,CAAC,WAAD,CAAnC,CAApC;AAEA,UAAKE,WAAL,GAAmB,MAAKC,KAAL,GAAa,MAAKC,MAAL,GAAc,IAAIV,UAAJ,CAAe;AAC5DW,aAAO,EAAE,MAAKA,OAD8C;AAE5DC,WAAK,EAAE,EAFqD;AAG5DC,YAAM,EAAE,KAHoD;AAI5DC,aAAO,EAAE,IAJmD;AAK5DC,eAAS,EAAER,OAAO,CAACQ;AALyC,KAAf,CAA9C;AAQA,UAAKA,SAAL,GAAiB,MAAKP,WAAL,CAAiBO,SAAlC;AACAd,YAAQ,gCAAO,WAAP,CAAR;AAbD;AAcC;;AAjCF;AAAA;AAAA;AAyCC;;;;AAIA,mBAAa;AACZ,aAAO,KAAKO,WAAL,CAAiBQ,SAAxB;AACA;AA/CF;AAAA;AAAA,WAiDC,mBAAO;AACN;;AACA,WAAKR,WAAL,CAAiBS,OAAjB;;AACA,WAAKF,SAAL,CAAeE,OAAf;AACA,aAAO,IAAP;AACA;AAtDF;AAAA;AAAA,WAmCC,uBAAkB;AACjB,aAAOd,MAAM,CAACC,MAAP,CAAcN,aAAa,CAACO,WAAd,EAAd,EAA2C;AACjDU,iBAAS,EAAE,CAAC;AADqC,OAA3C,CAAP;AAGA;AAvCF;;AAAA;AAAA,EAA6BjB,aAA7B","names":["ToneAudioNode","optionsFromArguments","Compressor","readOnly","Limiter","Object","assign","getDefaults","arguments","options","_compressor","input","output","context","ratio","attack","release","threshold","reduction","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/dynamics/Limiter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}