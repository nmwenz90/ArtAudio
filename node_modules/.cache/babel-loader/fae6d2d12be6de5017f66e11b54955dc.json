{"ast":null,"code":"import _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport var createDecodeAudioData = function createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n  return function (anyContext, audioData) {\n    var nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext); // Bug #43: Only Chrome, Edge and Opera do throw a DataCloneError.\n\n    if (detachedArrayBuffers.has(audioData)) {\n      var err = createDataCloneError();\n      return Promise.reject(err);\n    } // The audioData parameter maybe of a type which can't be added to a WeakSet.\n\n\n    try {\n      detachedArrayBuffers.add(audioData);\n    } catch (_unused) {// Ignore errors.\n    } // Bug #21: Safari does not support promises yet.\n\n\n    if (cacheTestResult(testPromiseSupport, function () {\n      return testPromiseSupport(nativeContext);\n    })) {\n      return nativeContext.decodeAudioData(audioData).then(function (audioBuffer) {\n        // Bug #133: Safari does neuter the ArrayBuffer.\n        detachArrayBuffer(audioData).catch(function () {// Ignore errors.\n        }); // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n\n        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n          return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n        })) {\n          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n      });\n    } // Bug #21: Safari does not return a Promise yet.\n\n\n    return new Promise(function (resolve, reject) {\n      var complete = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  _context.next = 3;\n                  return detachArrayBuffer(audioData);\n\n                case 3:\n                  _context.next = 7;\n                  break;\n\n                case 5:\n                  _context.prev = 5;\n                  _context.t0 = _context[\"catch\"](0);\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[0, 5]]);\n        }));\n\n        return function complete() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      var fail = function fail(err) {\n        reject(err);\n        complete();\n      }; // Bug #26: Safari throws a synchronous error.\n\n\n      try {\n        // Bug #1: Safari requires a successCallback.\n        nativeContext.decodeAudioData(audioData, function (audioBuffer) {\n          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n          if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n          }\n\n          audioBufferStore.add(audioBuffer);\n          complete().then(function () {\n            return resolve(audioBuffer);\n          });\n        }, function (err) {\n          // Bug #4: Safari returns null instead of an error.\n          if (err === null) {\n            fail(createEncodingError());\n          } else {\n            fail(err);\n          }\n        });\n      } catch (err) {\n        fail(err);\n      }\n    });\n  };\n};","map":{"version":3,"mappings":"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","names":["detachArrayBuffer","wrapAudioBufferGetChannelDataMethod","createDecodeAudioData","audioBufferStore","cacheTestResult","createDataCloneError","createEncodingError","detachedArrayBuffers","getNativeContext","isNativeContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","testPromiseSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","anyContext","audioData","nativeContext","has","err","Promise","reject","add","decodeAudioData","then","audioBuffer","catch","resolve","complete","fail","copyFromChannel"],"sourceRoot":"","sources":["../../../src/factories/decode-audio-data.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}