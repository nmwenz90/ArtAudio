{"ast":null,"code":"import _toConsumableArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\n/**\n * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform\n * using two Allpass filter banks whose outputs have a phase difference of 90°.\n * Here the `offset90` phase is offset by +90° in relation to `output`.\n * Coefficients and structure was developed by Olli Niemitalo.\n * For more details see: http://yehar.com/blog/?p=368\n * @category Component\n */\n\nexport var PhaseShiftAllpass = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(PhaseShiftAllpass, _ToneAudioNode);\n\n  var _super = _createSuper(PhaseShiftAllpass);\n\n  function PhaseShiftAllpass(options) {\n    var _this;\n\n    _classCallCheck(this, PhaseShiftAllpass);\n\n    _this = _super.call(this, options);\n    _this.name = \"PhaseShiftAllpass\";\n    _this.input = new Gain({\n      context: _this.context\n    });\n    /**\n     * The phase shifted output\n     */\n\n    _this.output = new Gain({\n      context: _this.context\n    });\n    /**\n     * The PhaseShifted allpass output\n     */\n\n    _this.offset90 = new Gain({\n      context: _this.context\n    });\n    var allpassBank1Values = [0.6923878, 0.9360654322959, 0.9882295226860, 0.9987488452737];\n    var allpassBank2Values = [0.4021921162426, 0.8561710882420, 0.9722909545651, 0.9952884791278];\n    _this._bank0 = _this._createAllPassFilterBank(allpassBank1Values);\n    _this._bank1 = _this._createAllPassFilterBank(allpassBank2Values);\n    _this._oneSampleDelay = _this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]); // connect Allpass filter banks\n\n    connectSeries.apply(void 0, [_this.input].concat(_toConsumableArray(_this._bank0), [_this._oneSampleDelay, _this.output]));\n    connectSeries.apply(void 0, [_this.input].concat(_toConsumableArray(_this._bank1), [_this.offset90]));\n    return _this;\n  }\n  /**\n   * Create all of the IIR filters from an array of values using the coefficient calculation.\n   */\n\n\n  _createClass(PhaseShiftAllpass, [{\n    key: \"_createAllPassFilterBank\",\n    value: function _createAllPassFilterBank(bankValues) {\n      var _this2 = this;\n\n      var nodes = bankValues.map(function (value) {\n        var coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];\n        return _this2.context.createIIRFilter(coefficients[0], coefficients[1]);\n      });\n      return nodes;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PhaseShiftAllpass.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n      this.output.dispose();\n      this.offset90.dispose();\n\n      this._bank0.forEach(function (f) {\n        return f.disconnect();\n      });\n\n      this._bank1.forEach(function (f) {\n        return f.disconnect();\n      });\n\n      this._oneSampleDelay.disconnect();\n\n      return this;\n    }\n  }]);\n\n  return PhaseShiftAllpass;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,IAAT,QAAqB,yBAArB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAAmE,kCAAnE;AAEA;;;;;;;;;AAQA,WAAaC,iBAAb;AAAA;;AAAA;;AA+BC,6BAAYC,OAAZ,EAAmD;AAAA;;AAAA;;AAElD,8BAAMA,OAAN;AA/BQ,iBAAe,mBAAf;AAEA,kBAAQ,IAAIJ,IAAJ,CAAS;AAAEK,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAR;AAiBT;;;;AAGS,mBAAS,IAAIL,IAAJ,CAAS;AAAEK,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAT;AAET;;;;AAGS,qBAAW,IAAIL,IAAJ,CAAS;AAAEK,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAX;AAMR,QAAMC,kBAAkB,GAAG,CAAC,SAAD,EAAY,eAAZ,EAA6B,eAA7B,EAA8C,eAA9C,CAA3B;AACA,QAAMC,kBAAkB,GAAG,CAAC,eAAD,EAAkB,eAAlB,EAAmC,eAAnC,EAAoD,eAApD,CAA3B;AAEA,UAAKC,MAAL,GAAc,MAAKC,wBAAL,CAA8BH,kBAA9B,CAAd;AACA,UAAKI,MAAL,GAAc,MAAKD,wBAAL,CAA8BF,kBAA9B,CAAd;AACA,UAAKI,eAAL,GAAuB,MAAKN,OAAL,CAAaO,eAAb,CAA6B,CAAC,GAAD,EAAM,GAAN,CAA7B,EAAyC,CAAC,GAAD,EAAM,GAAN,CAAzC,CAAvB,CATkD,CAWlD;;AACAX,iBAAa,MAAb,UAAc,MAAKY,KAAnB,4BAA6B,MAAKL,MAAlC,IAA0C,MAAKG,eAA/C,EAAgE,MAAKG,MAArE;AACAb,iBAAa,MAAb,UAAc,MAAKY,KAAnB,4BAA6B,MAAKH,MAAlC,IAA0C,MAAKK,QAA/C;AAbkD;AAclD;AAED;;;;;AA/CD;AAAA;AAAA,WAkDS,kCAAyBC,UAAzB,EAA6C;AAAA;;AACpD,UAAMC,KAAK,GAAoBD,UAAU,CAACE,GAAX,CAAe,eAAK,EAAG;AACrD,YAAMC,YAAY,GAAG,CAAC,CAACC,KAAK,GAAGA,KAAT,EAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAD,EAAyB,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAEA,KAAK,GAAGA,KAAV,CAAP,CAAzB,CAArB;AACA,eAAO,MAAI,CAACf,OAAL,CAAaO,eAAb,CAA6BO,YAAY,CAAC,CAAD,CAAzC,EAA8CA,YAAY,CAAC,CAAD,CAA1D,CAAP;AACA,OAH8B,CAA/B;AAKA,aAAOF,KAAP;AACA;AAzDF;AAAA;AAAA,WA2DC,mBAAO;AACN;;AACA,WAAKJ,KAAL,CAAWQ,OAAX;AACA,WAAKP,MAAL,CAAYO,OAAZ;AACA,WAAKN,QAAL,CAAcM,OAAd;;AACA,WAAKb,MAAL,CAAYc,OAAZ,CAAoB,WAAC;AAAA,eAAIC,CAAC,CAACC,UAAF,EAAJ;AAAA,OAArB;;AACA,WAAKd,MAAL,CAAYY,OAAZ,CAAoB,WAAC;AAAA,eAAIC,CAAC,CAACC,UAAF,EAAJ;AAAA,OAArB;;AACA,WAAKb,eAAL,CAAqBa,UAArB;;AACA,aAAO,IAAP;AACA;AApEF;;AAAA;AAAA,EAAuCtB,aAAvC","names":["Gain","connectSeries","ToneAudioNode","PhaseShiftAllpass","options","context","allpassBank1Values","allpassBank2Values","_bank0","_createAllPassFilterBank","_bank1","_oneSampleDelay","createIIRFilter","input","output","offset90","bankValues","nodes","map","coefficients","value","dispose","forEach","f","disconnect"],"sourceRoot":"","sources":["../../../../Tone/component/filter/PhaseShiftAllpass.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}