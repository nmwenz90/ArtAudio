{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Effect } from \"./Effect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\n/**\n * Chebyshev is a waveshaper which is good\n * for making different types of distortion sounds.\n * Note that odd orders sound very different from even ones,\n * and order = 1 is no change.\n * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n * @example\n * // create a new cheby\n * const cheby = new Tone.Chebyshev(50).toDestination();\n * // create a monosynth connected to our cheby\n * const synth = new Tone.MonoSynth().connect(cheby);\n * synth.triggerAttackRelease(\"C2\", 0.4);\n * @category Effect\n */\n\nexport var Chebyshev = /*#__PURE__*/function (_Effect) {\n  _inherits(Chebyshev, _Effect);\n\n  var _super = _createSuper(Chebyshev);\n\n  function Chebyshev() {\n    var _this;\n\n    _classCallCheck(this, Chebyshev);\n\n    _this = _super.call(this, optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]));\n    _this.name = \"Chebyshev\";\n    var options = optionsFromArguments(Chebyshev.getDefaults(), arguments, [\"order\"]);\n    _this._shaper = new WaveShaper({\n      context: _this.context,\n      length: 4096\n    });\n    _this._order = options.order;\n\n    _this.connectEffect(_this._shaper);\n\n    _this.order = options.order;\n    _this.oversample = options.oversample;\n    return _this;\n  }\n\n  _createClass(Chebyshev, [{\n    key: \"_getCoefficient\",\n    value:\n    /**\n     * get the coefficient for that degree\n     * @param  x the x value\n     * @param  degree\n     * @param  memo memoize the computed value. this speeds up computation greatly.\n     */\n    function _getCoefficient(x, degree, memo) {\n      if (memo.has(degree)) {\n        return memo.get(degree);\n      } else if (degree === 0) {\n        memo.set(degree, 0);\n      } else if (degree === 1) {\n        memo.set(degree, x);\n      } else {\n        memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));\n      }\n\n      return memo.get(degree);\n    }\n    /**\n     * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming\n     * signal through a Tone.WaveShaper. The equations are in the form:\n     * ```\n     * order 2: 2x^2 + 1\n     * order 3: 4x^3 + 3x\n     * ```\n     * @min 1\n     * @max 100\n     */\n\n  }, {\n    key: \"order\",\n    get: function get() {\n      return this._order;\n    },\n    set: function set(order) {\n      var _this2 = this;\n\n      this._order = order;\n\n      this._shaper.setMap(function (x) {\n        return _this2._getCoefficient(x, order, new Map());\n      });\n    }\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n\n  }, {\n    key: \"oversample\",\n    get: function get() {\n      return this._shaper.oversample;\n    },\n    set: function set(oversampling) {\n      this._shaper.oversample = oversampling;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Chebyshev.prototype), \"dispose\", this).call(this);\n\n      this._shaper.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        order: 1,\n        oversample: \"none\"\n      });\n    }\n  }]);\n\n  return Chebyshev;\n}(Effect);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAT,QAAsC,UAAtC;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,UAAT,QAA2B,sBAA3B;AAOA;;;;;;;;;;;;;;;AAcA,WAAaC,SAAb;AAAA;;AAAA;;AAmBC;AAAA;;AAAA;;AAEC,8BAAMF,oBAAoB,CAACE,SAAS,CAACC,WAAV,EAAD,EAA0BC,SAA1B,EAAqC,CAAC,OAAD,CAArC,CAA1B;AAnBQ,iBAAe,WAAf;AAoBR,QAAMC,OAAO,GAAGL,oBAAoB,CAACE,SAAS,CAACC,WAAV,EAAD,EAA0BC,SAA1B,EAAqC,CAAC,OAAD,CAArC,CAApC;AAEA,UAAKE,OAAL,GAAe,IAAIL,UAAJ,CAAe;AAC7BM,aAAO,EAAE,MAAKA,OADe;AAE7BC,YAAM,EAAE;AAFqB,KAAf,CAAf;AAIA,UAAKC,MAAL,GAAcJ,OAAO,CAACK,KAAtB;;AAEA,UAAKC,aAAL,CAAmB,MAAKL,OAAxB;;AACA,UAAKI,KAAL,GAAaL,OAAO,CAACK,KAArB;AACA,UAAKE,UAAL,GAAkBP,OAAO,CAACO,UAA1B;AAbD;AAcC;;AAjCF;AAAA;AAAA;AA0CC;;;;;;AAMQ,6BAAgBC,CAAhB,EAA2BC,MAA3B,EAA2CC,IAA3C,EAAoE;AAC3E,UAAIA,IAAI,CAACC,GAAL,CAASF,MAAT,CAAJ,EAAsB;AACrB,eAAOC,IAAI,CAACE,GAAL,CAASH,MAAT,CAAP;AACA,OAFD,MAEO,IAAIA,MAAM,KAAK,CAAf,EAAkB;AACxBC,YAAI,CAACG,GAAL,CAASJ,MAAT,EAAiB,CAAjB;AACA,OAFM,MAEA,IAAIA,MAAM,KAAK,CAAf,EAAkB;AACxBC,YAAI,CAACG,GAAL,CAASJ,MAAT,EAAiBD,CAAjB;AACA,OAFM,MAEA;AACNE,YAAI,CAACG,GAAL,CAASJ,MAAT,EAAiB,IAAID,CAAJ,GAAQ,KAAKM,eAAL,CAAqBN,CAArB,EAAwBC,MAAM,GAAG,CAAjC,EAAoCC,IAApC,CAAR,GAAoD,KAAKI,eAAL,CAAqBN,CAArB,EAAwBC,MAAM,GAAG,CAAjC,EAAoCC,IAApC,CAArE;AACA;;AACD,aAAOA,IAAI,CAACE,GAAL,CAASH,MAAT,CAAP;AACA;AAED;;;;;;;;;;;AA7DD;AAAA;AAAA,SAuEC,eAAS;AACR,aAAO,KAAKL,MAAZ;AACA,KAzEF;AAAA,SA0EC,aAAUC,KAAV,EAAe;AAAA;;AACd,WAAKD,MAAL,GAAcC,KAAd;;AACA,WAAKJ,OAAL,CAAac,MAAb,CAAqB,WAAC,EAAG;AACxB,eAAO,MAAI,CAACD,eAAL,CAAqBN,CAArB,EAAwBH,KAAxB,EAA+B,IAAIW,GAAJ,EAA/B,CAAP;AACA,OAFD;AAGA;AAED;;;;AAjFD;AAAA;AAAA,SAoFC,eAAc;AACb,aAAO,KAAKf,OAAL,CAAaM,UAApB;AACA,KAtFF;AAAA,SAuFC,aAAeU,YAAf,EAA2B;AAC1B,WAAKhB,OAAL,CAAaM,UAAb,GAA0BU,YAA1B;AACA;AAzFF;AAAA;AAAA,WA2FC,mBAAO;AACN;;AACA,WAAKhB,OAAL,CAAaiB,OAAb;;AACA,aAAO,IAAP;AACA;AA/FF;AAAA;AAAA,WAmCC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAc1B,MAAM,CAACI,WAAP,EAAd,EAAoC;AAC1CO,aAAK,EAAE,CADmC;AAE1CE,kBAAU,EAAE;AAF8B,OAApC,CAAP;AAIA;AAxCF;;AAAA;AAAA,EAA+Bb,MAA/B","names":["Effect","optionsFromArguments","WaveShaper","Chebyshev","getDefaults","arguments","options","_shaper","context","length","_order","order","connectEffect","oversample","x","degree","memo","has","get","set","_getCoefficient","setMap","Map","oversampling","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/Chebyshev.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}