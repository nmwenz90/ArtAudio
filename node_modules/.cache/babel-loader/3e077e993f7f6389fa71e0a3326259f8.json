{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport \"../core/clock/Transport\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isBoolean, isNumber } from \"../core/util/TypeCheck\";\n/**\n * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable\n * callback for a single or repeatable events along the timeline.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * const chordEvent = new Tone.ToneEvent(((time, chord) => {\n * \t// the chord as well as the exact time of the event\n * \t// are passed in as arguments to the callback function\n * \tsynth.triggerAttackRelease(chord, 0.5, time);\n * }), [\"D4\", \"E4\", \"F4\"]);\n * // start the chord at the beginning of the transport timeline\n * chordEvent.start();\n * // loop it every measure for 8 measures\n * chordEvent.loop = 8;\n * chordEvent.loopEnd = \"1m\";\n * @category Event\n */\n\nexport var ToneEvent = /*#__PURE__*/function (_ToneWithContext) {\n  _inherits(ToneEvent, _ToneWithContext);\n\n  var _super = _createSuper(ToneEvent);\n\n  function ToneEvent() {\n    var _this;\n\n    _classCallCheck(this, ToneEvent);\n\n    _this = _super.call(this, optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]));\n    _this.name = \"ToneEvent\";\n    /**\n     * Tracks the scheduled events\n     */\n\n    _this._state = new StateTimeline(\"stopped\");\n    /**\n     * A delay time from when the event is scheduled to start\n     */\n\n    _this._startOffset = 0;\n    var options = optionsFromArguments(ToneEvent.getDefaults(), arguments, [\"callback\", \"value\"]);\n    _this._loop = options.loop;\n    _this.callback = options.callback;\n    _this.value = options.value;\n    _this._loopStart = _this.toTicks(options.loopStart);\n    _this._loopEnd = _this.toTicks(options.loopEnd);\n    _this._playbackRate = options.playbackRate;\n    _this._probability = options.probability;\n    _this._humanize = options.humanize;\n    _this.mute = options.mute;\n    _this._playbackRate = options.playbackRate;\n    _this._state.increasing = true; // schedule the events for the first time\n\n    _this._rescheduleEvents();\n\n    return _this;\n  }\n\n  _createClass(ToneEvent, [{\n    key: \"_rescheduleEvents\",\n    value:\n    /**\n     * Reschedule all of the events along the timeline\n     * with the updated values.\n     * @param after Only reschedules events after the given time.\n     */\n    function _rescheduleEvents() {\n      var _this2 = this;\n\n      var after = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n\n      // if no argument is given, schedules all of the events\n      this._state.forEachFrom(after, function (event) {\n        var duration;\n\n        if (event.state === \"started\") {\n          if (event.id !== -1) {\n            _this2.context.transport.clear(event.id);\n          }\n\n          var startTick = event.time + Math.round(_this2.startOffset / _this2._playbackRate);\n\n          if (_this2._loop === true || isNumber(_this2._loop) && _this2._loop > 1) {\n            duration = Infinity;\n\n            if (isNumber(_this2._loop)) {\n              duration = _this2._loop * _this2._getLoopDuration();\n            }\n\n            var nextEvent = _this2._state.getAfter(startTick);\n\n            if (nextEvent !== null) {\n              duration = Math.min(duration, nextEvent.time - startTick);\n            }\n\n            if (duration !== Infinity) {\n              // schedule a stop since it's finite duration\n              _this2._state.setStateAtTime(\"stopped\", startTick + duration + 1, {\n                id: -1\n              });\n\n              duration = new TicksClass(_this2.context, duration);\n            }\n\n            var interval = new TicksClass(_this2.context, _this2._getLoopDuration());\n            event.id = _this2.context.transport.scheduleRepeat(_this2._tick.bind(_this2), interval, new TicksClass(_this2.context, startTick), duration);\n          } else {\n            event.id = _this2.context.transport.schedule(_this2._tick.bind(_this2), new TicksClass(_this2.context, startTick));\n          }\n        }\n      });\n    }\n    /**\n     * Returns the playback state of the note, either \"started\" or \"stopped\".\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state.getValueAtTime(this.context.transport.ticks);\n    }\n    /**\n     * The start from the scheduled start time.\n     */\n\n  }, {\n    key: \"startOffset\",\n    get: function get() {\n      return this._startOffset;\n    },\n    set: function set(offset) {\n      this._startOffset = offset;\n    }\n    /**\n     * The probability of the notes being triggered.\n     */\n\n  }, {\n    key: \"probability\",\n    get: function get() {\n      return this._probability;\n    },\n    set: function set(prob) {\n      this._probability = prob;\n    }\n    /**\n     * If set to true, will apply small random variation\n     * to the callback time. If the value is given as a time, it will randomize\n     * by that amount.\n     * @example\n     * const event = new Tone.ToneEvent();\n     * event.humanize = true;\n     */\n\n  }, {\n    key: \"humanize\",\n    get: function get() {\n      return this._humanize;\n    },\n    set: function set(variation) {\n      this._humanize = variation;\n    }\n    /**\n     * Start the note at the given time.\n     * @param  time  When the event should start.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(time) {\n      var ticks = this.toTicks(time);\n\n      if (this._state.getValueAtTime(ticks) === \"stopped\") {\n        this._state.add({\n          id: -1,\n          state: \"started\",\n          time: ticks\n        });\n\n        this._rescheduleEvents(ticks);\n      }\n\n      return this;\n    }\n    /**\n     * Stop the Event at the given time.\n     * @param  time  When the event should stop.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this.cancel(time);\n      var ticks = this.toTicks(time);\n\n      if (this._state.getValueAtTime(ticks) === \"started\") {\n        this._state.setStateAtTime(\"stopped\", ticks, {\n          id: -1\n        });\n\n        var previousEvent = this._state.getBefore(ticks);\n\n        var reschedulTime = ticks;\n\n        if (previousEvent !== null) {\n          reschedulTime = previousEvent.time;\n        }\n\n        this._rescheduleEvents(reschedulTime);\n      }\n\n      return this;\n    }\n    /**\n     * Cancel all scheduled events greater than or equal to the given time\n     * @param  time  The time after which events will be cancel.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(time) {\n      var _this3 = this;\n\n      time = defaultArg(time, -Infinity);\n      var ticks = this.toTicks(time);\n\n      this._state.forEachFrom(ticks, function (event) {\n        _this3.context.transport.clear(event.id);\n      });\n\n      this._state.cancel(ticks);\n\n      return this;\n    }\n    /**\n     * The callback function invoker. Also\n     * checks if the Event is done playing\n     * @param  time  The time of the event in seconds\n     */\n\n  }, {\n    key: \"_tick\",\n    value: function _tick(time) {\n      var ticks = this.context.transport.getTicksAtTime(time);\n\n      if (!this.mute && this._state.getValueAtTime(ticks) === \"started\") {\n        if (this.probability < 1 && Math.random() > this.probability) {\n          return;\n        }\n\n        if (this.humanize) {\n          var variation = 0.02;\n\n          if (!isBoolean(this.humanize)) {\n            variation = this.toSeconds(this.humanize);\n          }\n\n          time += (Math.random() * 2 - 1) * variation;\n        }\n\n        this.callback(time, this.value);\n      }\n    }\n    /**\n     * Get the duration of the loop.\n     */\n\n  }, {\n    key: \"_getLoopDuration\",\n    value: function _getLoopDuration() {\n      return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n    }\n    /**\n     * If the note should loop or not\n     * between ToneEvent.loopStart and\n     * ToneEvent.loopEnd. If set to true,\n     * the event will loop indefinitely,\n     * if set to a number greater than 1\n     * it will play a specific number of\n     * times, if set to false, 0 or 1, the\n     * part will only play once.\n     */\n\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._loop;\n    },\n    set: function set(loop) {\n      this._loop = loop;\n\n      this._rescheduleEvents();\n    }\n    /**\n     * The playback rate of the note. Defaults to 1.\n     * @example\n     * const note = new Tone.ToneEvent();\n     * note.loop = true;\n     * // repeat the note twice as fast\n     * note.playbackRate = 2;\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      this._playbackRate = rate;\n\n      this._rescheduleEvents();\n    }\n    /**\n     * The loopEnd point is the time the event will loop\n     * if ToneEvent.loop is true.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return new TicksClass(this.context, this._loopEnd).toSeconds();\n    },\n    set: function set(loopEnd) {\n      this._loopEnd = this.toTicks(loopEnd);\n\n      if (this._loop) {\n        this._rescheduleEvents();\n      }\n    }\n    /**\n     * The time when the loop should start.\n     */\n\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return new TicksClass(this.context, this._loopStart).toSeconds();\n    },\n    set: function set(loopStart) {\n      this._loopStart = this.toTicks(loopStart);\n\n      if (this._loop) {\n        this._rescheduleEvents();\n      }\n    }\n    /**\n     * The current progress of the loop interval.\n     * Returns 0 if the event is not started yet or\n     * it is not set to loop.\n     */\n\n  }, {\n    key: \"progress\",\n    get: function get() {\n      if (this._loop) {\n        var ticks = this.context.transport.ticks;\n\n        var lastEvent = this._state.get(ticks);\n\n        if (lastEvent !== null && lastEvent.state === \"started\") {\n          var loopDuration = this._getLoopDuration();\n\n          var progress = (ticks - lastEvent.time) % loopDuration;\n          return progress / loopDuration;\n        } else {\n          return 0;\n        }\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneEvent.prototype), \"dispose\", this).call(this);\n\n      this.cancel();\n\n      this._state.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneWithContext.getDefaults(), {\n        callback: noOp,\n        humanize: false,\n        loop: false,\n        loopEnd: \"1m\",\n        loopStart: 0,\n        mute: false,\n        playbackRate: 1,\n        probability: 1,\n        value: null\n      });\n    }\n  }]);\n\n  return ToneEvent;\n}(ToneWithContext);","map":{"version":3,"mappings":"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","names":["ToneWithContext","TicksClass","defaultArg","optionsFromArguments","noOp","StateTimeline","isBoolean","isNumber","ToneEvent","getDefaults","arguments","options","_loop","loop","callback","value","_loopStart","toTicks","loopStart","_loopEnd","loopEnd","_playbackRate","playbackRate","_probability","probability","_humanize","humanize","mute","_state","increasing","_rescheduleEvents","after","forEachFrom","duration","event","state","id","context","transport","clear","startTick","time","Math","round","startOffset","Infinity","_getLoopDuration","nextEvent","getAfter","min","setStateAtTime","interval","scheduleRepeat","_tick","bind","schedule","getValueAtTime","ticks","_startOffset","offset","prob","variation","add","cancel","previousEvent","getBefore","reschedulTime","getTicksAtTime","random","toSeconds","rate","lastEvent","get","loopDuration","progress","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/event/ToneEvent.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}