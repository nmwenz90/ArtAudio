{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate\n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\n\nexport var AutoFilter = /*#__PURE__*/function (_LFOEffect) {\n  _inherits(AutoFilter, _LFOEffect);\n\n  var _super = _createSuper(AutoFilter);\n\n  function AutoFilter() {\n    var _this;\n\n    _classCallCheck(this, AutoFilter);\n\n    _this = _super.call(this, optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n    _this.name = \"AutoFilter\";\n    var options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n    _this.filter = new Filter(Object.assign(options.filter, {\n      context: _this.context\n    })); // connections\n\n    _this.connectEffect(_this.filter);\n\n    _this._lfo.connect(_this.filter.frequency);\n\n    _this.octaves = options.octaves;\n    _this.baseFrequency = options.baseFrequency;\n    return _this;\n  }\n\n  _createClass(AutoFilter, [{\n    key: \"baseFrequency\",\n    get:\n    /**\n     * The minimum value of the filter's cutoff frequency.\n     */\n    function get() {\n      return this._lfo.min;\n    },\n    set: function set(freq) {\n      this._lfo.min = this.toFrequency(freq); // and set the max\n\n      this.octaves = this._octaves;\n    }\n    /**\n     * The maximum value of the filter's cutoff frequency.\n     */\n\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(oct) {\n      this._octaves = oct;\n      this._lfo.max = this._lfo.min * Math.pow(2, oct);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AutoFilter.prototype), \"dispose\", this).call(this);\n\n      this.filter.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(LFOEffect.getDefaults(), {\n        baseFrequency: 200,\n        octaves: 2.6,\n        filter: {\n          type: \"lowpass\",\n          rolloff: -12,\n          Q: 1\n        }\n      });\n    }\n  }]);\n\n  return AutoFilter;\n}(LFOEffect);","map":{"version":3,"mappings":";;;;;;AACA,SAASA,MAAT,QAAsC,4BAAtC;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,SAAT,QAA4C,aAA5C;AAQA;;;;;;;;;;;;;AAYA,WAAaC,UAAb;AAAA;;AAAA;;AAqBC;AAAA;;AAAA;;AAEC,8BAAMF,oBAAoB,CAACE,UAAU,CAACC,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,WAAD,EAAc,eAAd,EAA+B,SAA/B,CAAtC,CAA1B;AArBQ,iBAAe,YAAf;AAsBR,QAAMC,OAAO,GAAGL,oBAAoB,CAACE,UAAU,CAACC,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,WAAD,EAAc,eAAd,EAA+B,SAA/B,CAAtC,CAApC;AAEA,UAAKE,MAAL,GAAc,IAAIP,MAAJ,CAAWQ,MAAM,CAACC,MAAP,CAAcH,OAAO,CAACC,MAAtB,EAA8B;AACtDG,aAAO,EAAE,MAAKA;AADwC,KAA9B,CAAX,CAAd,CALD,CASC;;AACA,UAAKC,aAAL,CAAmB,MAAKJ,MAAxB;;AACA,UAAKK,IAAL,CAAUC,OAAV,CAAkB,MAAKN,MAAL,CAAYO,SAA9B;;AACA,UAAKC,OAAL,GAAeT,OAAO,CAACS,OAAvB;AACA,UAAKC,aAAL,GAAqBV,OAAO,CAACU,aAA7B;AAbD;AAcC;;AAnCF;AAAA;AAAA;AAiDC;;;AAGA,mBAAiB;AAChB,aAAO,KAAKJ,IAAL,CAAUK,GAAjB;AACA,KAtDF;AAAA,SAuDC,aAAkBC,IAAlB,EAAsB;AACrB,WAAKN,IAAL,CAAUK,GAAV,GAAgB,KAAKE,WAAL,CAAiBD,IAAjB,CAAhB,CADqB,CAErB;;AACA,WAAKH,OAAL,GAAe,KAAKK,QAApB;AACA;AAED;;;;AA7DD;AAAA;AAAA,SAgEC,eAAW;AACV,aAAO,KAAKA,QAAZ;AACA,KAlEF;AAAA,SAmEC,aAAYC,GAAZ,EAAe;AACd,WAAKD,QAAL,GAAgBC,GAAhB;AACA,WAAKT,IAAL,CAAUU,GAAV,GAAgB,KAAKV,IAAL,CAAUK,GAAV,GAAgBM,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,GAAZ,CAAhC;AACA;AAtEF;AAAA;AAAA,WAwEC,mBAAO;AACN;;AACA,WAAKd,MAAL,CAAYkB,OAAZ;AACA,aAAO,IAAP;AACA;AA5EF;AAAA;AAAA,WAqCC,uBAAkB;AACjB,aAAOjB,MAAM,CAACC,MAAP,CAAcP,SAAS,CAACE,WAAV,EAAd,EAAuC;AAC7CY,qBAAa,EAAE,GAD8B;AAE7CD,eAAO,EAAE,GAFoC;AAG7CR,cAAM,EAAE;AACPmB,cAAI,EAAE,SADC;AAEPC,iBAAO,EAAE,CAAC,EAFH;AAGPC,WAAC,EAAE;AAHI;AAHqC,OAAvC,CAAP;AASA;AA/CF;;AAAA;AAAA,EAAgC1B,SAAhC","names":["Filter","optionsFromArguments","LFOEffect","AutoFilter","getDefaults","arguments","options","filter","Object","assign","context","connectEffect","_lfo","connect","frequency","octaves","baseFrequency","min","freq","toFrequency","_octaves","oct","max","Math","pow","dispose","type","rolloff","Q"],"sourceRoot":"","sources":["../../../Tone/effect/AutoFilter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}