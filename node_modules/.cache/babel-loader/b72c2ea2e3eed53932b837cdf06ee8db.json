{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"offset\"];\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport var createNativeConstantSourceNodeFakerFactory = function createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) {\n  return function (nativeContext, _ref) {\n    var offset = _ref.offset,\n        audioNodeOptions = _objectWithoutProperties(_ref, _excluded);\n\n    var audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n    var audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n      buffer: null,\n      channelCount: 2,\n      channelCountMode: 'max',\n      channelInterpretation: 'speakers',\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      playbackRate: 1\n    });\n    var gainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      gain: offset\n    })); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n\n    var channelData = audioBuffer.getChannelData(0); // Bug #95: Safari does not play or loop one sample buffers.\n\n    channelData[0] = 1;\n    channelData[1] = 1;\n    audioBufferSourceNode.buffer = audioBuffer;\n    audioBufferSourceNode.loop = true;\n    var nativeConstantSourceNodeFaker = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return gainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        gainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return gainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        gainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return gainNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        gainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return gainNode.context;\n      },\n\n      get inputs() {\n        return [];\n      },\n\n      get numberOfInputs() {\n        return audioBufferSourceNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return gainNode.numberOfOutputs;\n      },\n\n      get offset() {\n        return gainNode.gain;\n      },\n\n      get onended() {\n        return audioBufferSourceNode.onended;\n      },\n\n      set onended(value) {\n        audioBufferSourceNode.onended = value;\n      },\n\n      addEventListener: function addEventListener() {\n        return audioBufferSourceNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return audioBufferSourceNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return audioBufferSourceNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      start: function start() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n      },\n      stop: function stop() {\n        var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n      }\n    };\n\n    var whenConnected = function whenConnected() {\n      return audioBufferSourceNode.connect(gainNode);\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      return audioBufferSourceNode.disconnect(gainNode);\n    }; // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n\n\n    addSilentConnection(nativeContext, audioBufferSourceNode);\n    return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"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","names":["interceptConnections","createNativeConstantSourceNodeFakerFactory","addSilentConnection","createNativeAudioBufferSourceNode","createNativeGainNode","monitorConnections","nativeContext","offset","audioNodeOptions","audioBuffer","createBuffer","audioBufferSourceNode","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","gainNode","gain","channelData","getChannelData","nativeConstantSourceNodeFaker","bufferSize","undefined","value","context","inputs","numberOfInputs","numberOfOutputs","onended","addEventListener","dispatchEvent","removeEventListener","start","when","call","stop","whenConnected","connect","whenDisconnected","disconnect"],"sourceRoot":"","sources":["../../../src/factories/native-constant-source-node-faker-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}