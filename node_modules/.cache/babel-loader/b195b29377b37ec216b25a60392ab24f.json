{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { assert } from \"../../core/util/Debug\";\nimport { theWindow } from \"../../core/context/AudioContext\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * A wrapper around the MediaRecorder API. Unlike the rest of Tone.js, this module does not offer\n * any sample-accurate scheduling because it is not a feature of the MediaRecorder API.\n * This is only natively supported in Chrome and Firefox.\n * For a cross-browser shim, install (audio-recorder-polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n * @example\n * const recorder = new Tone.Recorder();\n * const synth = new Tone.Synth().connect(recorder);\n * // start recording\n * recorder.start();\n * // generate a few notes\n * synth.triggerAttackRelease(\"C3\", 0.5);\n * synth.triggerAttackRelease(\"C4\", 0.5, \"+1\");\n * synth.triggerAttackRelease(\"C5\", 0.5, \"+2\");\n * // wait for the notes to end and stop the recording\n * setTimeout(async () => {\n * \t// the recorded audio is returned as a blob\n * \tconst recording = await recorder.stop();\n * \t// download the recording by creating an anchor element and blob url\n * \tconst url = URL.createObjectURL(recording);\n * \tconst anchor = document.createElement(\"a\");\n * \tanchor.download = \"recording.webm\";\n * \tanchor.href = url;\n * \tanchor.click();\n * }, 4000);\n * @category Component\n */\n\nexport var Recorder = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Recorder, _ToneAudioNode);\n\n  var _super = _createSuper(Recorder);\n\n  function Recorder() {\n    var _this;\n\n    _classCallCheck(this, Recorder);\n\n    _this = _super.call(this, optionsFromArguments(Recorder.getDefaults(), arguments));\n    _this.name = \"Recorder\";\n    var options = optionsFromArguments(Recorder.getDefaults(), arguments);\n    _this.input = new Gain({\n      context: _this.context\n    });\n    assert(Recorder.supported, \"Media Recorder API is not available\");\n    _this._stream = _this.context.createMediaStreamDestination();\n\n    _this.input.connect(_this._stream);\n\n    _this._recorder = new MediaRecorder(_this._stream.stream, {\n      mimeType: options.mimeType\n    });\n    return _this;\n  }\n\n  _createClass(Recorder, [{\n    key: \"mimeType\",\n    get:\n    /**\n     * The mime type is the format that the audio is encoded in. For Chrome\n     * that is typically webm encoded as \"vorbis\".\n     */\n    function get() {\n      return this._recorder.mimeType;\n    }\n    /**\n     * Test if your platform supports the Media Recorder API. If it's not available,\n     * try installing this (polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].\n     */\n\n  }, {\n    key: \"state\",\n    get:\n    /**\n     * Get the playback state of the Recorder, either \"started\", \"stopped\" or \"paused\"\n     */\n    function get() {\n      if (this._recorder.state === \"inactive\") {\n        return \"stopped\";\n      } else if (this._recorder.state === \"paused\") {\n        return \"paused\";\n      } else {\n        return \"started\";\n      }\n    }\n    /**\n     * Start the Recorder. Returns a promise which resolves\n     * when the recorder has started.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var startPromise;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                assert(this.state !== \"started\", \"Recorder is already started\");\n                startPromise = new Promise(function (done) {\n                  var handleStart = function handleStart() {\n                    _this2._recorder.removeEventListener(\"start\", handleStart, false);\n\n                    done();\n                  };\n\n                  _this2._recorder.addEventListener(\"start\", handleStart, false);\n                });\n\n                this._recorder.start();\n\n                _context.next = 5;\n                return startPromise;\n\n              case 5:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Stop the recorder. Returns a promise with the recorded content until this point\n     * encoded as [[mimeType]]\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var dataPromise;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                assert(this.state !== \"stopped\", \"Recorder is not started\");\n                dataPromise = new Promise(function (done) {\n                  var handleData = function handleData(e) {\n                    _this3._recorder.removeEventListener(\"dataavailable\", handleData, false);\n\n                    done(e.data);\n                  };\n\n                  _this3._recorder.addEventListener(\"dataavailable\", handleData, false);\n                });\n\n                this._recorder.stop();\n\n                _context2.next = 5;\n                return dataPromise;\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Pause the recorder\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      assert(this.state === \"started\", \"Recorder must be started\");\n\n      this._recorder.pause();\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Recorder.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n\n      this._stream.disconnect();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return ToneAudioNode.getDefaults();\n    }\n  }, {\n    key: \"supported\",\n    get: function get() {\n      return theWindow !== null && Reflect.has(theWindow, \"MediaRecorder\");\n    }\n  }]);\n\n  return Recorder;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","Gain","assert","theWindow","optionsFromArguments","Recorder","getDefaults","arguments","options","input","context","supported","_stream","createMediaStreamDestination","connect","_recorder","MediaRecorder","stream","mimeType","state","startPromise","Promise","handleStart","removeEventListener","done","addEventListener","start","dataPromise","handleData","e","data","stop","pause","dispose","disconnect","Reflect","has"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Recorder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}