{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { PulseOscillator } from \"./PulseOscillator\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\n\nexport var PWMOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(PWMOscillator, _Source);\n\n  var _super = _createSuper(PWMOscillator);\n\n  function PWMOscillator() {\n    var _this;\n\n    _classCallCheck(this, PWMOscillator);\n\n    _this = _super.call(this, optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]));\n    _this.name = \"PWMOscillator\";\n    _this.sourceType = \"pwm\";\n    /**\n     * Scale the oscillator so it doesn't go silent\n     * at the extreme values.\n     */\n\n    _this._scale = new Multiply({\n      context: _this.context,\n      value: 2\n    });\n    var options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n    _this._pulse = new PulseOscillator({\n      context: _this.context,\n      frequency: options.modulationFrequency\n    }); // change the pulse oscillator type\n\n    _this._pulse.carrierType = \"sine\";\n    _this.modulationFrequency = _this._pulse.frequency;\n    _this._modulator = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function onstop() {\n        return _this.onstop(_assertThisInitialized(_this));\n      },\n      phase: options.phase\n    });\n    _this.frequency = _this._modulator.frequency;\n    _this.detune = _this._modulator.detune; // connections\n\n    _this._modulator.chain(_this._scale, _this._pulse.width);\n\n    _this._pulse.connect(_this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"modulationFrequency\", \"frequency\", \"detune\"]);\n    return _this;\n  }\n\n  _createClass(PWMOscillator, [{\n    key: \"_start\",\n    value:\n    /**\n     * start the oscillator\n     */\n    function _start(time) {\n      time = this.toSeconds(time);\n\n      this._modulator.start(time);\n\n      this._pulse.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      time = this.toSeconds(time);\n\n      this._modulator.stop(time);\n\n      this._pulse.stop(time);\n    }\n    /**\n     * restart the oscillator\n     */\n\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._modulator.restart(time);\n\n      this._pulse.restart(time);\n    }\n    /**\n     * The type of the oscillator. Always returns \"pwm\".\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"pwm\";\n    }\n    /**\n     * The baseType of the oscillator. Always returns \"pwm\".\n     */\n\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return \"pwm\";\n    }\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return [];\n    }\n    /**\n     * No partials for this waveform type.\n     */\n\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return 0;\n    }\n    /**\n     * The phase of the oscillator in degrees.\n     */\n\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._modulator.phase;\n    },\n    set: function set(phase) {\n      this._modulator.phase = phase;\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PWMOscillator.prototype), \"dispose\", this).call(this);\n\n      this._pulse.dispose();\n\n      this._scale.dispose();\n\n      this._modulator.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        detune: 0,\n        frequency: 440,\n        modulationFrequency: 0.4,\n        phase: 0,\n        type: \"pwm\"\n      });\n    }\n  }]);\n\n  return PWMOscillator;\n}(Source);","map":{"version":3,"mappings":"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","names":["optionsFromArguments","readOnly","Multiply","Source","Oscillator","generateWaveform","PulseOscillator","PWMOscillator","getDefaults","arguments","context","value","options","_pulse","frequency","modulationFrequency","carrierType","_modulator","detune","onstop","phase","chain","_scale","width","connect","output","time","toSeconds","start","stop","restart","length","dispose","Object","assign","type"],"sourceRoot":"","sources":["../../../../Tone/source/oscillator/PWMOscillator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}