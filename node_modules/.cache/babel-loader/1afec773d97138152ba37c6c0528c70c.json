{"ast":null,"code":"import _toConsumableArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createAudioBufferSourceNodeRendererFactory = function createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAudioBufferSourceNodes = new WeakMap();\n    var start = null;\n    var stop = null;\n\n    var createAudioBufferSourceNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeAudioBufferSourceNode, nativeAudioBufferSourceNodeIsOwnedByContext, options, _nativeAudioBufferSou;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n\n                if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                  options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                  };\n                  nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n\n                  if (start !== null) {\n                    (_nativeAudioBufferSou = nativeAudioBufferSourceNode).start.apply(_nativeAudioBufferSou, _toConsumableArray(start));\n                  }\n\n                  if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                  }\n                }\n\n                renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n                if (nativeAudioBufferSourceNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n\n              case 11:\n                _context.next = 13;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n\n              case 13:\n                return _context.abrupt(\"return\", nativeAudioBufferSourceNode);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createAudioBufferSourceNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      set start(value) {\n        start = value;\n      },\n\n      set stop(value) {\n        stop = value;\n      },\n\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioBufferSourceNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioBufferSourceNode);\n        }\n\n        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;;AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,0CAA0C,GAAiD,SAA3FA,0CAA2F,CACpGC,iBADoG,EAEpGC,iCAFoG,EAGpGC,kBAHoG,EAIpGC,gBAJoG,EAKpGC,uBALoG,EAMpG;AACA,SAAO,YAAmE;AACtE,QAAMC,oCAAoC,GAAG,IAAIC,OAAJ,EAA7C;AAEA,QAAIC,KAAK,GAAuD,IAAhE;AACA,QAAIC,IAAI,GAAkB,IAA1B;;AAEA,QAAMC,2BAA2B;AAAA,0EAAG,iBAChCC,KADgC,EAEhCC,yBAFgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAI5BC,2CAJ4B,GAIEV,kBAAkB,CAAkCQ,KAAlC,CAJpB;AAMhC;;;;;AAIMG,2DAV0B,GAUoBf,gBAAgB,CAACc,2BAAD,EAA8BD,yBAA9B,CAVpC;;AAYhC,oBAAI,CAACE,2CAAL,EAAkD;AACxCC,yBADwC,GAC9B;AACZC,0BAAM,EAAEH,2BAA2B,CAACG,MADxB;AAEZC,gCAAY,EAAEJ,2BAA2B,CAACI,YAF9B;AAGZC,oCAAgB,EAAEL,2BAA2B,CAACK,gBAHlC;AAIZC,yCAAqB,EAAEN,2BAA2B,CAACM,qBAJvC;AAKZ;AACAC,wBAAI,EAAEP,2BAA2B,CAACO,IANtB;AAOZC,2BAAO,EAAER,2BAA2B,CAACQ,OAPzB;AAQZC,6BAAS,EAAET,2BAA2B,CAACS,SAR3B;AASZC,gCAAY,EAAEV,2BAA2B,CAACU,YAA5B,CAAyCC;AAT3C,mBAD8B;AAa9CX,6CAA2B,GAAGX,iCAAiC,CAACU,yBAAD,EAA4BG,OAA5B,CAA/D;;AAEA,sBAAIP,KAAK,KAAK,IAAd,EAAoB;AAChB,wEAA2B,EAACA,KAA5B,iDAAqCA,KAArC;AACH;;AAED,sBAAIC,IAAI,KAAK,IAAb,EAAmB;AACfI,+CAA2B,CAACJ,IAA5B,CAAiCA,IAAjC;AACH;AACJ;;AAEDH,oDAAoC,CAACmB,GAArC,CAAyCb,yBAAzC,EAAoEC,2BAApE;;AApCgC,oBAsC3BC,2CAtC2B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAwCtBV,gBAAgB,CAACQ,yBAAD,EAA4BD,KAAK,CAACY,YAAlC,EAAgDV,2BAA2B,CAACU,YAA5E,CAxCM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBA2CtBtB,iBAAiB,CAACW,yBAAD,EAA4BD,KAAK,CAACY,YAAlC,EAAgDV,2BAA2B,CAACU,YAA5E,CA3CK;;AAAA;AAAA;AAAA,uBA8C1BlB,uBAAuB,CAACM,KAAD,EAAQC,yBAAR,EAAmCC,2BAAnC,CA9CG;;AAAA;AAAA,iDAgDzBA,2BAhDyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAA3BH,2BAA2B;AAAA;AAAA;AAAA,OAAjC;;AAmDA,WAAO;AACH,UAAIF,KAAJ,CAAUgB,KAAV,EAA4D;AACxDhB,aAAK,GAAGgB,KAAR;AACH,OAHE;;AAIH,UAAIf,IAAJ,CAASe,KAAT,EAAsB;AAClBf,YAAI,GAAGe,KAAP;AACH,OANE;;AAOHE,YAPG,kBAQCf,KARD,EASCC,yBATD,EASsD;AAErD,YAAMe,mCAAmC,GAAGrB,oCAAoC,CAACsB,GAArC,CAAyChB,yBAAzC,CAA5C;;AAEA,YAAIe,mCAAmC,KAAKE,SAA5C,EAAuD;AACnD,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,mCAAhB,CAAP;AACH;;AAED,eAAOjB,2BAA2B,CAACC,KAAD,EAAQC,yBAAR,CAAlC;AACH;AAlBE,KAAP;AAoBH,GA7ED;AA8EH,CArFM","names":["isOwnedByContext","createAudioBufferSourceNodeRendererFactory","connectAudioParam","createNativeAudioBufferSourceNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeAudioBufferSourceNodes","WeakMap","start","stop","createAudioBufferSourceNode","proxy","nativeOfflineAudioContext","nativeAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","value","set","render","renderedNativeAudioBufferSourceNode","get","undefined","Promise","resolve"],"sourceRoot":"","sources":["../../../src/factories/audio-buffer-source-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}