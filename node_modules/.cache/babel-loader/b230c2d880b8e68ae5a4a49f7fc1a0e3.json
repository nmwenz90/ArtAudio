{"ast":null,"code":"import _toConsumableArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\n\nexport var ModulationSynth = /*#__PURE__*/function (_Monophonic) {\n  _inherits(ModulationSynth, _Monophonic);\n\n  var _super = _createSuper(ModulationSynth);\n\n  function ModulationSynth() {\n    var _this;\n\n    _classCallCheck(this, ModulationSynth);\n\n    _this = _super.call(this, optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n    _this.name = \"ModulationSynth\";\n    var options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n    _this._carrier = new Synth({\n      context: _this.context,\n      oscillator: options.oscillator,\n      envelope: options.envelope,\n      onsilence: function onsilence() {\n        return _this.onsilence(_assertThisInitialized(_this));\n      },\n      volume: -10\n    });\n    _this._modulator = new Synth({\n      context: _this.context,\n      oscillator: options.modulation,\n      envelope: options.modulationEnvelope,\n      volume: -10\n    });\n    _this.oscillator = _this._carrier.oscillator;\n    _this.envelope = _this._carrier.envelope;\n    _this.modulation = _this._modulator.oscillator;\n    _this.modulationEnvelope = _this._modulator.envelope;\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\"\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      value: options.detune,\n      units: \"cents\"\n    });\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      value: options.harmonicity,\n      minValue: 0\n    });\n    _this._modulationNode = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n    return _this;\n  }\n\n  _createClass(ModulationSynth, [{\n    key: \"_triggerEnvelopeAttack\",\n    value:\n    /**\n     * Trigger the attack portion of the note\n     */\n    function _triggerEnvelopeAttack(time, velocity) {\n      // @ts-ignore\n      this._carrier._triggerEnvelopeAttack(time, velocity); // @ts-ignore\n\n\n      this._modulator._triggerEnvelopeAttack(time, velocity);\n    }\n    /**\n     * Trigger the release portion of the note\n     */\n\n  }, {\n    key: \"_triggerEnvelopeRelease\",\n    value: function _triggerEnvelopeRelease(time) {\n      // @ts-ignore\n      this._carrier._triggerEnvelopeRelease(time); // @ts-ignore\n\n\n      this._modulator._triggerEnvelopeRelease(time);\n\n      return this;\n    }\n  }, {\n    key: \"getLevelAtTime\",\n    value: function getLevelAtTime(time) {\n      time = this.toSeconds(time);\n      return this.envelope.getValueAtTime(time);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ModulationSynth.prototype), \"dispose\", this).call(this);\n\n      this._carrier.dispose();\n\n      this._modulator.dispose();\n\n      this.frequency.dispose();\n      this.detune.dispose();\n      this.harmonicity.dispose();\n\n      this._modulationNode.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Monophonic.getDefaults(), {\n        harmonicity: 3,\n        oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [].concat(_toConsumableArray(Object.keys(Source.getDefaults())), [\"frequency\", \"detune\"])), {\n          type: \"sine\"\n        }),\n        envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.01,\n          decay: 0.01,\n          sustain: 1,\n          release: 0.5\n        }),\n        modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [].concat(_toConsumableArray(Object.keys(Source.getDefaults())), [\"frequency\", \"detune\"])), {\n          type: \"square\"\n        }),\n        modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.5,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        })\n      });\n    }\n  }]);\n\n  return ModulationSynth;\n}(Monophonic);","map":{"version":3,"mappings":"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","names":["Signal","Multiply","Gain","Envelope","ToneAudioNode","Monophonic","OmniOscillator","Source","Synth","readOnly","omitFromObject","optionsFromArguments","ModulationSynth","getDefaults","arguments","options","_carrier","context","oscillator","envelope","onsilence","volume","_modulator","modulation","modulationEnvelope","frequency","units","detune","value","harmonicity","minValue","_modulationNode","gain","time","velocity","_triggerEnvelopeAttack","_triggerEnvelopeRelease","toSeconds","getValueAtTime","dispose","Object","assign","keys","type","attack","decay","sustain","release"],"sourceRoot":"","sources":["../../../Tone/instrument/ModulationSynth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}