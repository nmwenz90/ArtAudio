{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\n\nexport var PingPongDelay = /*#__PURE__*/function (_StereoXFeedbackEffec) {\n  _inherits(PingPongDelay, _StereoXFeedbackEffec);\n\n  var _super = _createSuper(PingPongDelay);\n\n  function PingPongDelay() {\n    var _this;\n\n    _classCallCheck(this, PingPongDelay);\n\n    _this = _super.call(this, optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n    _this.name = \"PingPongDelay\";\n    var options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    _this._leftDelay = new Delay({\n      context: _this.context,\n      maxDelay: options.maxDelay\n    });\n    _this._rightDelay = new Delay({\n      context: _this.context,\n      maxDelay: options.maxDelay\n    });\n    _this._rightPreDelay = new Delay({\n      context: _this.context,\n      maxDelay: options.maxDelay\n    });\n    _this.delayTime = new Signal({\n      context: _this.context,\n      units: \"time\",\n      value: options.delayTime\n    }); // connect it up\n\n    _this.connectEffectLeft(_this._leftDelay);\n\n    _this.connectEffectRight(_this._rightPreDelay, _this._rightDelay);\n\n    _this.delayTime.fan(_this._leftDelay.delayTime, _this._rightDelay.delayTime, _this._rightPreDelay.delayTime); // rearranged the feedback to be after the rightPreDelay\n\n\n    _this._feedbackL.disconnect();\n\n    _this._feedbackL.connect(_this._rightDelay);\n\n    readOnly(_assertThisInitialized(_this), [\"delayTime\"]);\n    return _this;\n  }\n\n  _createClass(PingPongDelay, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PingPongDelay.prototype), \"dispose\", this).call(this);\n\n      this._leftDelay.dispose();\n\n      this._rightDelay.dispose();\n\n      this._rightPreDelay.dispose();\n\n      this.delayTime.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n        delayTime: 0.25,\n        maxDelay: 1\n      });\n    }\n  }]);\n\n  return PingPongDelay;\n}(StereoXFeedbackEffect);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,qBAAT,QAAoE,yBAApE;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAOA;;;;;;;;;;;;;;;AAcA,WAAaC,aAAb;AAAA;;AAAA;;AA8BC;AAAA;;AAAA;;AAEC,8BAAMJ,oBAAoB,CAACI,aAAa,CAACC,WAAd,EAAD,EAA8BC,SAA9B,EAAyC,CAAC,WAAD,EAAc,UAAd,CAAzC,CAA1B;AA9BQ,iBAAe,eAAf;AA+BR,QAAMC,OAAO,GAAGP,oBAAoB,CAACI,aAAa,CAACC,WAAd,EAAD,EAA8BC,SAA9B,EAAyC,CAAC,WAAD,EAAc,UAAd,CAAzC,CAApC;AAEA,UAAKE,UAAL,GAAkB,IAAIP,KAAJ,CAAU;AAC3BQ,aAAO,EAAE,MAAKA,OADa;AAE3BC,cAAQ,EAAEH,OAAO,CAACG;AAFS,KAAV,CAAlB;AAIA,UAAKC,WAAL,GAAmB,IAAIV,KAAJ,CAAU;AAC5BQ,aAAO,EAAE,MAAKA,OADc;AAE5BC,cAAQ,EAAEH,OAAO,CAACG;AAFU,KAAV,CAAnB;AAIA,UAAKE,cAAL,GAAsB,IAAIX,KAAJ,CAAU;AAC/BQ,aAAO,EAAE,MAAKA,OADiB;AAE/BC,cAAQ,EAAEH,OAAO,CAACG;AAFa,KAAV,CAAtB;AAIA,UAAKG,SAAL,GAAiB,IAAIX,MAAJ,CAAW;AAC3BO,aAAO,EAAE,MAAKA,OADa;AAE3BK,WAAK,EAAE,MAFoB;AAG3BC,WAAK,EAAER,OAAO,CAACM;AAHY,KAAX,CAAjB,CAjBD,CAuBC;;AACA,UAAKG,iBAAL,CAAuB,MAAKR,UAA5B;;AACA,UAAKS,kBAAL,CAAwB,MAAKL,cAA7B,EAA6C,MAAKD,WAAlD;;AACA,UAAKE,SAAL,CAAeK,GAAf,CAAmB,MAAKV,UAAL,CAAgBK,SAAnC,EAA8C,MAAKF,WAAL,CAAiBE,SAA/D,EAA0E,MAAKD,cAAL,CAAoBC,SAA9F,EA1BD,CA2BC;;;AACA,UAAKM,UAAL,CAAgBC,UAAhB;;AACA,UAAKD,UAAL,CAAgBE,OAAhB,CAAwB,MAAKV,WAA7B;;AACAR,YAAQ,gCAAO,CAAC,WAAD,CAAP,CAAR;AA9BD;AA+BC;;AA7DF;AAAA;AAAA,WAsEC,mBAAO;AACN;;AACA,WAAKK,UAAL,CAAgBc,OAAhB;;AACA,WAAKX,WAAL,CAAiBW,OAAjB;;AACA,WAAKV,cAAL,CAAoBU,OAApB;;AACA,WAAKT,SAAL,CAAeS,OAAf;AACA,aAAO,IAAP;AACA;AA7EF;AAAA;AAAA,WA+DC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAczB,qBAAqB,CAACM,WAAtB,EAAd,EAAmD;AACzDQ,iBAAS,EAAE,IAD8C;AAEzDH,gBAAQ,EAAE;AAF+C,OAAnD,CAAP;AAIA;AApEF;;AAAA;AAAA,EAAmCX,qBAAnC","names":["StereoXFeedbackEffect","optionsFromArguments","Delay","Signal","readOnly","PingPongDelay","getDefaults","arguments","options","_leftDelay","context","maxDelay","_rightDelay","_rightPreDelay","delayTime","units","value","connectEffectLeft","connectEffectRight","fan","_feedbackL","disconnect","connect","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/PingPongDelay.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}