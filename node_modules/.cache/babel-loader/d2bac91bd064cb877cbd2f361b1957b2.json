{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Volume } from \"../../component/channel/Volume\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization\";\nimport { Gain } from \"./Gain\";\nimport { connectSeries, ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\n\nexport var Destination = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Destination, _ToneAudioNode);\n\n  var _super = _createSuper(Destination);\n\n  function Destination() {\n    var _this;\n\n    _classCallCheck(this, Destination);\n\n    _this = _super.call(this, optionsFromArguments(Destination.getDefaults(), arguments));\n    _this.name = \"Destination\";\n    _this.input = new Volume({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    /**\n     * The volume of the master output in decibels. -Infinity is silent, and 0 is no change.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination();\n     * osc.start();\n     * // ramp the volume down to silent over 10 seconds\n     * Tone.getDestination().volume.rampTo(-Infinity, 10);\n     */\n\n    _this.volume = _this.input.volume;\n    var options = optionsFromArguments(Destination.getDefaults(), arguments);\n    connectSeries(_this.input, _this.output, _this.context.rawContext.destination);\n    _this.mute = options.mute;\n    _this._internalChannels = [_this.input, _this.context.rawContext.destination, _this.output];\n    return _this;\n  }\n\n  _createClass(Destination, [{\n    key: \"mute\",\n    get:\n    /**\n     * Mute the output.\n     * @example\n     * const oscillator = new Tone.Oscillator().start().toDestination();\n     * setTimeout(() => {\n     * \t// mute the output\n     * \tTone.Destination.mute = true;\n     * }, 1000);\n     */\n    function get() {\n      return this.input.mute;\n    },\n    set: function set(mute) {\n      this.input.mute = mute;\n    }\n    /**\n     * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n     * chained in the master effects chain.\n     * @param args All arguments will be connected in a row and the Master will be routed through it.\n     * @example\n     * // route all audio through a filter and compressor\n     * const lowpass = new Tone.Filter(800, \"lowpass\");\n     * const compressor = new Tone.Compressor(-18);\n     * Tone.Destination.chain(lowpass, compressor);\n     */\n\n  }, {\n    key: \"chain\",\n    value: function chain() {\n      this.input.disconnect();\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.unshift(this.input);\n      args.push(this.output);\n      connectSeries.apply(void 0, args);\n      return this;\n    }\n    /**\n     * The maximum number of channels the system can output\n     * @example\n     * console.log(Tone.Destination.maxChannelCount);\n     */\n\n  }, {\n    key: \"maxChannelCount\",\n    get: function get() {\n      return this.context.rawContext.destination.maxChannelCount;\n    }\n    /**\n     * Clean up\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Destination.prototype), \"dispose\", this).call(this);\n\n      this.volume.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        mute: false,\n        volume: 0\n      });\n    }\n  }]);\n\n  return Destination;\n}(ToneAudioNode); //-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\n\nonContextInit(function (context) {\n  context.destination = new Destination({\n    context: context\n  });\n});\nonContextClose(function (context) {\n  context.destination.dispose();\n});","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,gCAAvB;AAEA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,yBAA9C;AACA,SAASC,IAAT,QAAqB,QAArB;AAEA,SAASC,aAAT,EAAwBC,aAAxB,QAAmE,iBAAnE;AAOA;;;;;;;;;;;;;;;;AAeA,WAAaC,WAAb;AAAA;;AAAA;;AAkBC;AAAA;;AAAA;;AAEC,8BAAMN,oBAAoB,CAACM,WAAW,CAACC,WAAZ,EAAD,EAA4BC,SAA5B,CAA1B;AAlBQ,iBAAe,aAAf;AAET,kBAAgB,IAAIT,MAAJ,CAAW;AAAEU,aAAO,EAAE,MAAKA;AAAhB,KAAX,CAAhB;AACA,mBAAe,IAAIN,IAAJ,CAAS;AAAEM,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAf;AAEA;;;;;;;;;AAQA,mBAA4B,MAAKC,KAAL,CAAWC,MAAvC;AAMC,QAAMC,OAAO,GAAGZ,oBAAoB,CAACM,WAAW,CAACC,WAAZ,EAAD,EAA4BC,SAA5B,CAApC;AAEAJ,iBAAa,CAAC,MAAKM,KAAN,EAAa,MAAKG,MAAlB,EAA0B,MAAKJ,OAAL,CAAaK,UAAb,CAAwBC,WAAlD,CAAb;AAEA,UAAKC,IAAL,GAAYJ,OAAO,CAACI,IAApB;AACA,UAAKC,iBAAL,GAAyB,CAAC,MAAKP,KAAN,EAAa,MAAKD,OAAL,CAAaK,UAAb,CAAwBC,WAArC,EAAkD,MAAKF,MAAvD,CAAzB;AARD;AASC;;AA3BF;AAAA;AAAA;AAoCC;;;;;;;;;AASA,mBAAQ;AACP,aAAO,KAAKH,KAAL,CAAWM,IAAlB;AACA,KA/CF;AAAA,SAgDC,aAASA,IAAT,EAAsB;AACrB,WAAKN,KAAL,CAAWM,IAAX,GAAkBA,IAAlB;AACA;AAED;;;;;;;;;;;AApDD;AAAA;AAAA,WA8DC,iBAA+C;AAC9C,WAAKN,KAAL,CAAWQ,UAAX;;AAD8C,wCAAtCC,IAAsC;AAAtCA,YAAsC;AAAA;;AAE9CA,UAAI,CAACC,OAAL,CAAa,KAAKV,KAAlB;AACAS,UAAI,CAACE,IAAL,CAAU,KAAKR,MAAf;AACAT,mBAAa,MAAb,SAAiBe,IAAjB;AACA,aAAO,IAAP;AACA;AAED;;;;;;AAtED;AAAA;AAAA,SA2EC,eAAmB;AAClB,aAAO,KAAKV,OAAL,CAAaK,UAAb,CAAwBC,WAAxB,CAAoCO,eAA3C;AACA;AAED;;;;AA/ED;AAAA;AAAA,WAkFC,mBAAO;AACN;;AACA,WAAKX,MAAL,CAAYY,OAAZ;AACA,aAAO,IAAP;AACA;AAtFF;AAAA;AAAA,WA6BC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAcpB,aAAa,CAACE,WAAd,EAAd,EAA2C;AACjDS,YAAI,EAAE,KAD2C;AAEjDL,cAAM,EAAE;AAFyC,OAA3C,CAAP;AAIA;AAlCF;;AAAA;AAAA,EAAiCN,aAAjC,E,CAyFA;AACA;AACA;;AAEAH,aAAa,CAAC,iBAAO,EAAG;AACvBO,SAAO,CAACM,WAAR,GAAsB,IAAIT,WAAJ,CAAgB;AAAEG,WAAO,EAAPA;AAAF,GAAhB,CAAtB;AACA,CAFY,CAAb;AAIAR,cAAc,CAAC,iBAAO,EAAG;AACxBQ,SAAO,CAACM,WAAR,CAAoBQ,OAApB;AACA,CAFa,CAAd","names":["Volume","optionsFromArguments","onContextClose","onContextInit","Gain","connectSeries","ToneAudioNode","Destination","getDefaults","arguments","context","input","volume","options","output","rawContext","destination","mute","_internalChannels","disconnect","args","unshift","push","maxChannelCount","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/core/context/Destination.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}