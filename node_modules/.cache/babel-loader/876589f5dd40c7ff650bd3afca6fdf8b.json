{"ast":null,"code":"var _jsxFileName = \"/Users/natewamwenze/Documents/personalProjects/musicidea/src/components/Artwork.tsx\",\n    _this = this;\n\nimport React from 'react';\nimport { AdjustmentFilter } from '@pixi/filter-adjustment';\nimport { ConvolutionFilter } from '@pixi/filter-convolution';\nimport { ColorOverlayFilter } from '@pixi/filter-color-overlay';\nimport { ColorReplaceFilter } from '@pixi/filter-color-replace';\nimport { GlitchFilter } from '@pixi/filter-glitch';\nimport { BevelFilter } from '@pixi/filter-bevel';\nimport { Sprite, Container, withFilters } from '@inlet/react-pixi';\nimport gweiBackground from '../images/gwei background.png';\nimport crystal from '../images/gwei back texture.png';\nimport gradient from '../images/gradient.png';\nimport diagonalTexture from '../images/diagonal texture.png';\nimport island1 from '../images/island 1.png';\nimport island2 from '../images/island 2.png';\nimport island3 from '../images/island 3.png';\nimport island4 from '../images/island 4.png';\nimport island5 from '../images/island 5.png';\nimport eth1 from '../images/eth1.png';\nimport eth2 from '../images/eth2.png';\nimport eth3 from '../images/eth3.png';\nimport eth4 from '../images/eth4.png';\nimport eth5 from '../images/eth5.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var Artwork = function Artwork(_ref) {\n  var artFFT = _ref.artFFT;\n  // const { store, dispatch } = useContext(ArtMusicEngineContext);\n  // states\n  // const [x, setX] = useState(0);\n  // const [y, setY] = useState(0);\n  // const [i, setI] = useState(0);\n  // const [rotation, setRotation] = useState(0);\n  // useEffect(() => {\n  //   console.log('current fft -->', store.fftData);\n  // }, [store]);\n  // custom ticker\n  // useTick((delta) => {\n  //   setI(i + 0.05 * delta);\n  //   setX(Math.sin(i) * 100);\n  //   setY(Math.sin(i / 1.5) * 100);\n  //   setRotation(-10 + Math.sin(i / 10 + Math.PI * 2) * 10);\n  // });\n  var BackgroundFilter = withFilters(Container, {\n    convolution: ConvolutionFilter,\n    adjust: AdjustmentFilter // colorReplace: ColorReplaceFilter,\n    // overlay: ColorOverlayFilter,\n\n  });\n  var EthLogoFilter = withFilters(Container, {\n    overlay: ColorOverlayFilter,\n    colorReplace: ColorReplaceFilter\n  });\n  var GradientFilter = withFilters(Container, {\n    glitch: GlitchFilter\n  });\n  var DiagonalTextureFilter = withFilters(Container, {\n    bevel: BevelFilter\n  }); // useEffect(() => {\n  //   if (artFFT[2]) console.log('currentFFT --> ', artFFT);\n  // }, [artFFT[2]]);\n\n  var images = [{\n    image: island1\n  }, {\n    image: island2\n  }, {\n    image: island3\n  }, {\n    image: island4\n  }, {\n    image: island5\n  }, {\n    image: eth1\n  }, {\n    image: eth2\n  }, {\n    image: eth3\n  }, {\n    image: eth4\n  }, {\n    image: eth5\n  }];\n  var sprites = images.map(function (img, index) {\n    if (index >= 5) {\n      return /*#__PURE__*/_jsxDEV(EthLogoFilter, {\n        overlay: {\n          color: 0x9faef2,\n          alpha: 0.6\n        },\n        colorReplace: {\n          originalColor: 0x090909,\n          newColor: 0x2550e8,\n          epsilon: 0.6\n        },\n        children: /*#__PURE__*/_jsxDEV(Sprite, {\n          image: img.image\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, _this)\n      }, index + 'ethlogo', false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, _this);\n    } else return /*#__PURE__*/_jsxDEV(Sprite, {\n      image: img.image\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 19\n    }, _this);\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    scale: 0.5,\n    children: [/*#__PURE__*/_jsxDEV(Sprite, {\n      image: gweiBackground\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(BackgroundFilter, {\n      adjust: {\n        gamma: 3,\n        brightness: 1\n      },\n      convolution: {\n        matrix: [0.1, 0.2, 0, 0, 0.1, 0.1, 0, 0, 0],\n        height: Math.abs(artFFT[6] * 2),\n        width: Math.abs(artFFT[12])\n      },\n      children: /*#__PURE__*/_jsxDEV(Sprite, {\n        image: crystal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(GradientFilter, {\n      glitch: {\n        slices: 15,\n        direction: 130,\n        // offset: artFFT[4],\n        offset: 84,\n        fillMode: 2 // red: [-20, 2],\n        // blue: [10, 4],\n        // green: [-10, 4],\n\n      },\n      children: /*#__PURE__*/_jsxDEV(Sprite, {\n        image: gradient\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(DiagonalTextureFilter, {\n      bevel: {\n        rotation: Math.abs(artFFT[29]),\n        thickness: 4,\n        lightColor: 0xefecec,\n        lightAlpha: Math.abs(artFFT[28] / 1000),\n        shadowColor: 0x231f1f,\n        shadowAlpha: Math.abs(artFFT[20] / 1000)\n      },\n      children: /*#__PURE__*/_jsxDEV(Sprite, {\n        image: diagonalTexture\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, _this), sprites]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, _this);\n};\n_c = Artwork;\n\nvar _c;\n\n$RefreshReg$(_c, \"Artwork\");","map":{"version":3,"sources":["/Users/natewamwenze/Documents/personalProjects/musicidea/src/components/Artwork.tsx"],"names":["React","AdjustmentFilter","ConvolutionFilter","ColorOverlayFilter","ColorReplaceFilter","GlitchFilter","BevelFilter","Sprite","Container","withFilters","gweiBackground","crystal","gradient","diagonalTexture","island1","island2","island3","island4","island5","eth1","eth2","eth3","eth4","eth5","Artwork","artFFT","BackgroundFilter","convolution","adjust","EthLogoFilter","overlay","colorReplace","GradientFilter","glitch","DiagonalTextureFilter","bevel","images","image","sprites","map","img","index","color","alpha","originalColor","newColor","epsilon","gamma","brightness","matrix","height","Math","abs","width","slices","direction","offset","fillMode","rotation","thickness","lightColor","lightAlpha","shadowColor","shadowAlpha"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { AdjustmentFilter } from '@pixi/filter-adjustment';\nimport { ConvolutionFilter } from '@pixi/filter-convolution';\nimport { ColorOverlayFilter } from '@pixi/filter-color-overlay';\nimport { ColorReplaceFilter } from '@pixi/filter-color-replace';\nimport { GlitchFilter } from '@pixi/filter-glitch';\nimport { BevelFilter } from '@pixi/filter-bevel';\nimport {\n  Stage,\n  Sprite,\n  Container,\n  useTick,\n  AppProvider,\n  withFilters,\n} from '@inlet/react-pixi';\nimport * as PIXI from 'pixi.js';\n\nimport palm from '../images/palm.png';\nimport gweiBackground from '../images/gwei background.png';\nimport crystal from '../images/gwei back texture.png';\nimport gradient from '../images/gradient.png';\nimport diagonalTexture from '../images/diagonal texture.png';\nimport island1 from '../images/island 1.png';\nimport island2 from '../images/island 2.png';\nimport island3 from '../images/island 3.png';\nimport island4 from '../images/island 4.png';\nimport island5 from '../images/island 5.png';\nimport eth1 from '../images/eth1.png';\nimport eth2 from '../images/eth2.png';\nimport eth3 from '../images/eth3.png';\nimport eth4 from '../images/eth4.png';\nimport eth5 from '../images/eth5.png';\n\nimport { ArtMusicEngineContext } from '../store';\n\ninterface ArtworkProps {\n  artFFT: Float32Array;\n}\n\ninterface SpriteInterface {\n  image: string;\n}\n\nexport const Artwork: React.FC<ArtworkProps> = ({ artFFT }) => {\n  // const { store, dispatch } = useContext(ArtMusicEngineContext);\n\n  // states\n  // const [x, setX] = useState(0);\n  // const [y, setY] = useState(0);\n  // const [i, setI] = useState(0);\n  // const [rotation, setRotation] = useState(0);\n\n  // useEffect(() => {\n  //   console.log('current fft -->', store.fftData);\n  // }, [store]);\n\n  // custom ticker\n  // useTick((delta) => {\n  //   setI(i + 0.05 * delta);\n  //   setX(Math.sin(i) * 100);\n  //   setY(Math.sin(i / 1.5) * 100);\n  //   setRotation(-10 + Math.sin(i / 10 + Math.PI * 2) * 10);\n  // });\n  const BackgroundFilter = withFilters(Container, {\n    convolution: ConvolutionFilter,\n    adjust: AdjustmentFilter,\n    // colorReplace: ColorReplaceFilter,\n    // overlay: ColorOverlayFilter,\n  });\n\n  const EthLogoFilter = withFilters(Container, {\n    overlay: ColorOverlayFilter,\n    colorReplace: ColorReplaceFilter,\n  });\n\n  const GradientFilter = withFilters(Container, {\n    glitch: GlitchFilter,\n  });\n  const DiagonalTextureFilter = withFilters(Container, {\n    bevel: BevelFilter,\n  });\n\n  // useEffect(() => {\n  //   if (artFFT[2]) console.log('currentFFT --> ', artFFT);\n  // }, [artFFT[2]]);\n\n  const images: SpriteInterface[] = [\n    { image: island1 },\n    { image: island2 },\n    { image: island3 },\n    { image: island4 },\n    { image: island5 },\n    { image: eth1 },\n    { image: eth2 },\n    { image: eth3 },\n    { image: eth4 },\n    { image: eth5 },\n  ];\n\n  const sprites: JSX.Element[] = images.map((img, index) => {\n    if (index >= 5) {\n      return (\n        <EthLogoFilter\n          key={index + 'ethlogo'}\n          overlay={{\n            color: 0x9faef2,\n            alpha: 0.6,\n          }}\n          colorReplace={{\n            originalColor: 0x090909,\n            newColor: 0x2550e8,\n            epsilon: 0.6,\n          }}\n        >\n          <Sprite image={img.image} key={index} />\n        </EthLogoFilter>\n      );\n    } else return <Sprite image={img.image} key={index} />;\n  });\n\n  return (\n    <Container scale={0.5}>\n      <Sprite image={gweiBackground} />\n      <BackgroundFilter\n        adjust={{ gamma: 3, brightness: 1 }}\n        convolution={{\n          matrix: [0.1, 0.2, 0, 0, 0.1, 0.1, 0, 0, 0],\n          height: Math.abs(artFFT[6] * 2),\n          width: Math.abs(artFFT[12]),\n        }}\n      >\n        <Sprite image={crystal} />\n      </BackgroundFilter>\n      <GradientFilter\n        glitch={{\n          slices: 15,\n          direction: 130,\n          // offset: artFFT[4],\n          offset: 84,\n          fillMode: 2,\n          // red: [-20, 2],\n          // blue: [10, 4],\n          // green: [-10, 4],\n        }}\n      >\n        <Sprite image={gradient} />\n      </GradientFilter>\n      <DiagonalTextureFilter\n        bevel={{\n          rotation: Math.abs(artFFT[29]),\n          thickness: 4,\n          lightColor: 0xefecec,\n          lightAlpha: Math.abs(artFFT[28] / 1000),\n          shadowColor: 0x231f1f,\n          shadowAlpha: Math.abs(artFFT[20] / 1000),\n        }}\n      >\n        <Sprite image={diagonalTexture} />\n      </DiagonalTextureFilter>\n      {sprites}\n    </Container>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}