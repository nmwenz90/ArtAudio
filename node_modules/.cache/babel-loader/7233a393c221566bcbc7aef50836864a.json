{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneEvent } from \"./ToneEvent\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\n/**\n * Loop creates a looped callback at the\n * specified interval. The callback can be\n * started, stopped and scheduled along\n * the Transport's timeline.\n * @example\n * const loop = new Tone.Loop((time) => {\n * \t// triggered every eighth note.\n * \tconsole.log(time);\n * }, \"8n\").start(0);\n * Tone.Transport.start();\n * @category Event\n */\n\nexport var Loop = /*#__PURE__*/function (_ToneWithContext) {\n  _inherits(Loop, _ToneWithContext);\n\n  var _super = _createSuper(Loop);\n\n  function Loop() {\n    var _this;\n\n    _classCallCheck(this, Loop);\n\n    _this = _super.call(this, optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]));\n    _this.name = \"Loop\";\n    var options = optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]);\n    _this._event = new ToneEvent({\n      context: _this.context,\n      callback: _this._tick.bind(_assertThisInitialized(_this)),\n      loop: true,\n      loopEnd: options.interval,\n      playbackRate: options.playbackRate,\n      probability: options.probability\n    });\n    _this.callback = options.callback; // set the iterations\n\n    _this.iterations = options.iterations;\n    return _this;\n  }\n\n  _createClass(Loop, [{\n    key: \"start\",\n    value:\n    /**\n     * Start the loop at the specified time along the Transport's timeline.\n     * @param  time  When to start the Loop.\n     */\n    function start(time) {\n      this._event.start(time);\n\n      return this;\n    }\n    /**\n     * Stop the loop at the given time.\n     * @param  time  When to stop the Loop.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._event.stop(time);\n\n      return this;\n    }\n    /**\n     * Cancel all scheduled events greater than or equal to the given time\n     * @param  time  The time after which events will be cancel.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(time) {\n      this._event.cancel(time);\n\n      return this;\n    }\n    /**\n     * Internal function called when the notes should be called\n     * @param time  The time the event occurs\n     */\n\n  }, {\n    key: \"_tick\",\n    value: function _tick(time) {\n      this.callback(time);\n    }\n    /**\n     * The state of the Loop, either started or stopped.\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._event.state;\n    }\n    /**\n     * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating.\n     */\n\n  }, {\n    key: \"progress\",\n    get: function get() {\n      return this._event.progress;\n    }\n    /**\n     * The time between successive callbacks.\n     * @example\n     * const loop = new Tone.Loop();\n     * loop.interval = \"8n\"; // loop every 8n\n     */\n\n  }, {\n    key: \"interval\",\n    get: function get() {\n      return this._event.loopEnd;\n    },\n    set: function set(interval) {\n      this._event.loopEnd = interval;\n    }\n    /**\n     * The playback rate of the loop. The normal playback rate is 1 (no change).\n     * A `playbackRate` of 2 would be twice as fast.\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._event.playbackRate;\n    },\n    set: function set(rate) {\n      this._event.playbackRate = rate;\n    }\n    /**\n     * Random variation +/-0.01s to the scheduled time.\n     * Or give it a time value which it will randomize by.\n     */\n\n  }, {\n    key: \"humanize\",\n    get: function get() {\n      return this._event.humanize;\n    },\n    set: function set(variation) {\n      this._event.humanize = variation;\n    }\n    /**\n     * The probably of the callback being invoked.\n     */\n\n  }, {\n    key: \"probability\",\n    get: function get() {\n      return this._event.probability;\n    },\n    set: function set(prob) {\n      this._event.probability = prob;\n    }\n    /**\n     * Muting the Loop means that no callbacks are invoked.\n     */\n\n  }, {\n    key: \"mute\",\n    get: function get() {\n      return this._event.mute;\n    },\n    set: function set(mute) {\n      this._event.mute = mute;\n    }\n    /**\n     * The number of iterations of the loop. The default value is `Infinity` (loop forever).\n     */\n\n  }, {\n    key: \"iterations\",\n    get: function get() {\n      if (this._event.loop === true) {\n        return Infinity;\n      } else {\n        return this._event.loop;\n      }\n    },\n    set: function set(iters) {\n      if (iters === Infinity) {\n        this._event.loop = true;\n      } else {\n        this._event.loop = iters;\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Loop.prototype), \"dispose\", this).call(this);\n\n      this._event.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneWithContext.getDefaults(), {\n        interval: \"4n\",\n        callback: noOp,\n        playbackRate: 1,\n        iterations: Infinity,\n        probability: 1,\n        mute: false,\n        humanize: false\n      });\n    }\n  }]);\n\n  return Loop;\n}(ToneWithContext);","map":{"version":3,"mappings":"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","names":["ToneEvent","ToneWithContext","optionsFromArguments","noOp","Loop","getDefaults","arguments","options","_event","context","callback","_tick","bind","loop","loopEnd","interval","playbackRate","probability","iterations","time","start","stop","cancel","state","progress","rate","humanize","variation","prob","mute","Infinity","iters","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/event/Loop.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}