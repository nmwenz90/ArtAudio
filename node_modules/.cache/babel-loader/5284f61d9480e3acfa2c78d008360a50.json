{"ast":null,"code":"/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent) {\n  var piFactor = 0.5 * Math.PI;\n  return Math.sin(percent * piFactor);\n}\n/**\n * Convert decibels into gain.\n */\n\nexport function dbToGain(db) {\n  return Math.pow(10, db / 20);\n}\n/**\n * Convert gain to decibels.\n */\n\nexport function gainToDb(gain) {\n  return 20 * (Math.log(gain) / Math.LN10);\n}\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\n\nexport function intervalToFrequencyRatio(interval) {\n  return Math.pow(2, interval / 12);\n}\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\n\nvar A4 = 440;\nexport function getA4() {\n  return A4;\n}\nexport function setA4(freq) {\n  A4 = freq;\n}\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\n\nexport function ftom(frequency) {\n  return Math.round(ftomf(frequency));\n}\n/**\n * Convert a frequency to a floating point midi value\n */\n\nexport function ftomf(frequency) {\n  return 69 + 12 * Math.log2(frequency / A4);\n}\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\n\nexport function mtof(midi) {\n  return A4 * Math.pow(2, (midi - 69) / 12);\n}","map":{"version":3,"mappings":"AAEA;;;;AAIA,OAAM,SAAUA,eAAV,CAA0BC,OAA1B,EAA8C;AACnD,MAAMC,QAAQ,GAAG,MAAMC,IAAI,CAACC,EAA5B;AACA,SAAOD,IAAI,CAACE,GAAL,CAASJ,OAAO,GAAGC,QAAnB,CAAP;AACA;AAED;;;;AAGA,OAAM,SAAUI,QAAV,CAAmBC,EAAnB,EAA+B;AACpC,SAAOJ,IAAI,CAACK,GAAL,CAAS,EAAT,EAAaD,EAAE,GAAG,EAAlB,CAAP;AACA;AAED;;;;AAGA,OAAM,SAAUE,QAAV,CAAmBC,IAAnB,EAAmC;AACxC,SAAO,MAAMP,IAAI,CAACQ,GAAL,CAASD,IAAT,IAAiBP,IAAI,CAACS,IAA5B,CAAP;AACA;AAED;;;;;;;;;AAQA,OAAM,SAAUC,wBAAV,CAAmCC,QAAnC,EAAqD;AAC1D,SAAOX,IAAI,CAACK,GAAL,CAAS,CAAT,EAAaM,QAAQ,GAAG,EAAxB,CAAP;AACA;AAED;;;;;AAIA,IAAIC,EAAE,GAAU,GAAhB;AAEA,OAAM,SAAUC,KAAV,GAAe;AACpB,SAAOD,EAAP;AACA;AAED,OAAM,SAAUE,KAAV,CAAgBC,IAAhB,EAA2B;AAChCH,IAAE,GAAGG,IAAL;AACA;AAED;;;;;;;AAMA,OAAM,SAAUC,IAAV,CAAeC,SAAf,EAA+B;AACpC,SAAOjB,IAAI,CAACkB,KAAL,CAAWC,KAAK,CAACF,SAAD,CAAhB,CAAP;AACA;AAED;;;;AAGA,OAAM,SAAUE,KAAV,CAAgBF,SAAhB,EAAgC;AACrC,SAAO,KAAK,KAAKjB,IAAI,CAACoB,IAAL,CAAUH,SAAS,GAAGL,EAAtB,CAAjB;AACA;AAED;;;;;;;;AAOA,OAAM,SAAUS,IAAV,CAAeC,IAAf,EAA6B;AAClC,SAAOV,EAAE,GAAGZ,IAAI,CAACK,GAAL,CAAS,CAAT,EAAY,CAACiB,IAAI,GAAG,EAAR,IAAc,EAA1B,CAAZ;AACA","names":["equalPowerScale","percent","piFactor","Math","PI","sin","dbToGain","db","pow","gainToDb","gain","log","LN10","intervalToFrequencyRatio","interval","A4","getA4","setA4","freq","ftom","frequency","round","ftomf","log2","mtof","midi"],"sourceRoot":"","sources":["../../../../Tone/core/type/Conversions.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}