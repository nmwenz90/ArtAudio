{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]\n *\n * @example\n * const multiband = new Tone.MultibandCompressor({\n * \tlowFrequency: 200,\n * \thighFrequency: 1300,\n * \tlow: {\n * \t\tthreshold: -12\n * \t}\n * });\n * @category Component\n */\n\nexport var MultibandCompressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MultibandCompressor, _ToneAudioNode);\n\n  var _super = _createSuper(MultibandCompressor);\n\n  function MultibandCompressor() {\n    var _this;\n\n    _classCallCheck(this, MultibandCompressor);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(), arguments)));\n    _this.name = \"MultibandCompressor\";\n    var options = optionsFromArguments(MultibandCompressor.getDefaults(), arguments);\n    _this._splitter = _this.input = new MultibandSplit({\n      context: _this.context,\n      lowFrequency: options.lowFrequency,\n      highFrequency: options.highFrequency\n    });\n    _this.lowFrequency = _this._splitter.lowFrequency;\n    _this.highFrequency = _this._splitter.highFrequency;\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this.low = new Compressor(Object.assign(options.low, {\n      context: _this.context\n    }));\n    _this.mid = new Compressor(Object.assign(options.mid, {\n      context: _this.context\n    }));\n    _this.high = new Compressor(Object.assign(options.high, {\n      context: _this.context\n    })); // connect the compressor\n\n    _this._splitter.low.chain(_this.low, _this.output);\n\n    _this._splitter.mid.chain(_this.mid, _this.output);\n\n    _this._splitter.high.chain(_this.high, _this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"high\", \"mid\", \"low\", \"highFrequency\", \"lowFrequency\"]);\n    return _this;\n  }\n\n  _createClass(MultibandCompressor, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MultibandCompressor.prototype), \"dispose\", this).call(this);\n\n      this._splitter.dispose();\n\n      this.low.dispose();\n      this.mid.dispose();\n      this.high.dispose();\n      this.output.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        lowFrequency: 250,\n        highFrequency: 2000,\n        low: {\n          ratio: 6,\n          threshold: -30,\n          release: 0.25,\n          attack: 0.03,\n          knee: 10\n        },\n        mid: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        },\n        high: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        }\n      });\n    }\n  }]);\n\n  return MultibandCompressor;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","Compressor","optionsFromArguments","readOnly","MultibandSplit","Gain","MultibandCompressor","Object","assign","getDefaults","arguments","options","_splitter","input","context","lowFrequency","highFrequency","output","low","mid","high","chain","dispose","ratio","threshold","release","attack","knee"],"sourceRoot":"","sources":["../../../../Tone/component/dynamics/MultibandCompressor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}