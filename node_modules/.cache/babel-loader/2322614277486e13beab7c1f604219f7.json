{"ast":null,"code":"import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport var createNativeWaveShaperNodeFactory = function createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors) {\n  return function (nativeContext, options) {\n    var nativeWaveShaperNode = nativeContext.createWaveShaper();\n    /*\n     * Bug #119: Safari does not correctly map the values.\n     * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n     * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround\n     * isn't necessary anymore since v14.0.2 of Safari.\n     */\n\n    if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext' && nativeContext.createGain().gain.automationRate === undefined) {\n      return createNativeWaveShaperNodeFaker(nativeContext, options);\n    }\n\n    assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n    var curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve); // Bug #104: Chrome, Edge and Opera will throw an InvalidAccessError when the curve has less than two samples.\n\n    if (curve !== null && curve.length < 2) {\n      throw createInvalidStateError();\n    } // Only values of type Float32Array can be assigned to the curve property.\n\n\n    assignNativeAudioNodeOption(nativeWaveShaperNode, {\n      curve: curve\n    }, 'curve');\n    assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n    var disconnectNativeAudioBufferSourceNode = null;\n    var isConnected = false;\n    overwriteAccessors(nativeWaveShaperNode, 'curve', function (get) {\n      return function () {\n        return get.call(nativeWaveShaperNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(nativeWaveShaperNode, value);\n\n        if (isConnected) {\n          if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n          } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n            disconnectNativeAudioBufferSourceNode();\n            disconnectNativeAudioBufferSourceNode = null;\n          }\n        }\n\n        return value;\n      };\n    });\n\n    var whenConnected = function whenConnected() {\n      isConnected = true;\n\n      if (isDCCurve(nativeWaveShaperNode.curve)) {\n        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n      }\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      isConnected = false;\n\n      if (disconnectNativeAudioBufferSourceNode !== null) {\n        disconnectNativeAudioBufferSourceNode();\n        disconnectNativeAudioBufferSourceNode = null;\n      }\n    };\n\n    return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,2BAAT,QAA4C,4CAA5C;AACA,SAASC,4BAAT,QAA6C,6CAA7C;AAGA,OAAO,IAAMC,iCAAiC,GAAwC,SAAzEA,iCAAyE,CAClFC,0CADkF,EAElFC,uBAFkF,EAGlFC,+BAHkF,EAIlFC,SAJkF,EAKlFC,kBALkF,EAMlFC,6BANkF,EAOlFC,kBAPkF,EAQlF;AACA,SAAO,UAACC,aAAD,EAAgBC,OAAhB,EAA2B;AAC9B,QAAMC,oBAAoB,GAAGF,aAAa,CAACG,gBAAd,EAA7B;AAEA;;;;;;;AAMA,QACIL,6BAA6B,KAAK,IAAlC,IACAA,6BAA6B,CAACM,IAA9B,KAAuC,oBADvC,IAEAJ,aAAa,CAACK,UAAd,GAA2BC,IAA3B,CAAgCC,cAAhC,KAAmDC,SAHvD,EAIE;AACE,aAAOb,+BAA+B,CAACK,aAAD,EAAgBC,OAAhB,CAAtC;AACH;;AAEDV,gCAA4B,CAACW,oBAAD,EAAuBD,OAAvB,CAA5B;AAEA,QAAMQ,KAAK,GAAGR,OAAO,CAACQ,KAAR,KAAkB,IAAlB,IAA0BR,OAAO,CAACQ,KAAR,YAAyBC,YAAnD,GAAkET,OAAO,CAACQ,KAA1E,GAAkF,IAAIC,YAAJ,CAAiBT,OAAO,CAACQ,KAAzB,CAAhG,CAnB8B,CAqB9B;;AACA,QAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAACE,MAAN,GAAe,CAArC,EAAwC;AACpC,YAAMjB,uBAAuB,EAA7B;AACH,KAxB6B,CA0B9B;;;AACAJ,+BAA2B,CAACY,oBAAD,EAAuB;AAAEO,WAAK,EAALA;AAAF,KAAvB,EAAkC,OAAlC,CAA3B;AACAnB,+BAA2B,CAACY,oBAAD,EAAuBD,OAAvB,EAAgC,YAAhC,CAA3B;AAEA,QAAIW,qCAAqC,GAAwB,IAAjE;AACA,QAAIC,WAAW,GAAG,KAAlB;AAEAd,sBAAkB,CACdG,oBADc,EAEd,OAFc,EAGd,UAACY,GAAD;AAAA,aAAS;AAAA,eAAMA,GAAG,CAACC,IAAJ,CAASb,oBAAT,CAAN;AAAA,OAAT;AAAA,KAHc,EAId,UAACc,GAAD;AAAA,aAAS,UAACC,KAAD,EAAU;AACfD,WAAG,CAACD,IAAJ,CAASb,oBAAT,EAA+Be,KAA/B;;AAEA,YAAIJ,WAAJ,EAAiB;AACb,cAAIjB,SAAS,CAACqB,KAAD,CAAT,IAAoBL,qCAAqC,KAAK,IAAlE,EAAwE;AACpEA,iDAAqC,GAAGnB,0CAA0C,CAC9EO,aAD8E,EAE9EE,oBAF8E,CAAlF;AAIH,WALD,MAKO,IAAI,CAACN,SAAS,CAACqB,KAAD,CAAV,IAAqBL,qCAAqC,KAAK,IAAnE,EAAyE;AAC5EA,iDAAqC;AACrCA,iDAAqC,GAAG,IAAxC;AACH;AACJ;;AAED,eAAOK,KAAP;AACH,OAhBD;AAAA,KAJc,CAAlB;;AAuBA,QAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAK;AACvBL,iBAAW,GAAG,IAAd;;AAEA,UAAIjB,SAAS,CAACM,oBAAoB,CAACO,KAAtB,CAAb,EAA2C;AACvCG,6CAAqC,GAAGnB,0CAA0C,CAACO,aAAD,EAAgBE,oBAAhB,CAAlF;AACH;AACJ,KAND;;AAOA,QAAMiB,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAK;AAC1BN,iBAAW,GAAG,KAAd;;AAEA,UAAID,qCAAqC,KAAK,IAA9C,EAAoD;AAChDA,6CAAqC;AACrCA,6CAAqC,GAAG,IAAxC;AACH;AACJ,KAPD;;AASA,WAAOf,kBAAkB,CAACK,oBAAD,EAAuBgB,aAAvB,EAAsCC,gBAAtC,CAAzB;AACH,GAzED;AA0EH,CAnFM","names":["assignNativeAudioNodeOption","assignNativeAudioNodeOptions","createNativeWaveShaperNodeFactory","createConnectedNativeAudioBufferSourceNode","createInvalidStateError","createNativeWaveShaperNodeFaker","isDCCurve","monitorConnections","nativeAudioContextConstructor","overwriteAccessors","nativeContext","options","nativeWaveShaperNode","createWaveShaper","name","createGain","gain","automationRate","undefined","curve","Float32Array","length","disconnectNativeAudioBufferSourceNode","isConnected","get","call","set","value","whenConnected","whenDisconnected"],"sourceRoot":"","sources":["../../../src/factories/native-wave-shaper-node-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}