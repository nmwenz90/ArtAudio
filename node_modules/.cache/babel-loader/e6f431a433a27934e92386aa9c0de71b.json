{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * const input = new Tone.Oscillator(230, \"sawtooth\").start();\n * const shift = new Tone.FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\n\nexport var FrequencyShifter = /*#__PURE__*/function (_Effect) {\n  _inherits(FrequencyShifter, _Effect);\n\n  var _super = _createSuper(FrequencyShifter);\n\n  function FrequencyShifter() {\n    var _this;\n\n    _classCallCheck(this, FrequencyShifter);\n\n    _this = _super.call(this, optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n    _this.name = \"FrequencyShifter\";\n    var options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      minValue: -_this.context.sampleRate / 2,\n      maxValue: _this.context.sampleRate / 2\n    });\n    _this._sine = new ToneOscillatorNode({\n      context: _this.context,\n      type: \"sine\"\n    });\n    _this._cosine = new Oscillator({\n      context: _this.context,\n      phase: -90,\n      type: \"sine\"\n    });\n    _this._sineMultiply = new Multiply({\n      context: _this.context\n    });\n    _this._cosineMultiply = new Multiply({\n      context: _this.context\n    });\n    _this._negate = new Negate({\n      context: _this.context\n    });\n    _this._add = new Add({\n      context: _this.context\n    });\n    _this._phaseShifter = new PhaseShiftAllpass({\n      context: _this.context\n    });\n\n    _this.effectSend.connect(_this._phaseShifter); // connect the carrier frequency signal to the two oscillators\n\n\n    _this.frequency.fan(_this._sine.frequency, _this._cosine.frequency);\n\n    _this._phaseShifter.offset90.connect(_this._cosineMultiply);\n\n    _this._cosine.connect(_this._cosineMultiply.factor);\n\n    _this._phaseShifter.connect(_this._sineMultiply);\n\n    _this._sine.connect(_this._sineMultiply.factor);\n\n    _this._sineMultiply.connect(_this._negate);\n\n    _this._cosineMultiply.connect(_this._add);\n\n    _this._negate.connect(_this._add.addend);\n\n    _this._add.connect(_this.effectReturn); // start the oscillators at the same time\n\n\n    var now = _this.immediate();\n\n    _this._sine.start(now);\n\n    _this._cosine.start(now);\n\n    return _this;\n  }\n\n  _createClass(FrequencyShifter, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FrequencyShifter.prototype), \"dispose\", this).call(this);\n\n      this.frequency.dispose();\n\n      this._add.dispose();\n\n      this._cosine.dispose();\n\n      this._cosineMultiply.dispose();\n\n      this._negate.dispose();\n\n      this._phaseShifter.dispose();\n\n      this._sine.dispose();\n\n      this._sineMultiply.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        frequency: 0\n      });\n    }\n  }]);\n\n  return FrequencyShifter;\n}(Effect);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,iBAAT,QAAkC,uCAAlC;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,MAAT,QAAsC,kBAAtC;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,UAAT,QAA2B,iCAA3B;AACA,SAASC,kBAAT,QAAmC,yCAAnC;AAMA;;;;;;;;;;;;;;;;;;;AAkBA,WAAaC,gBAAb;AAAA;;AAAA;;AAkDC;AAAA;;AAAA;;AAEC,8BAAMR,oBAAoB,CAACQ,gBAAgB,CAACC,WAAjB,EAAD,EAAiCC,SAAjC,EAA4C,CAAC,WAAD,CAA5C,CAA1B;AAlDQ,iBAAe,kBAAf;AAmDR,QAAMC,OAAO,GAAGX,oBAAoB,CAACQ,gBAAgB,CAACC,WAAjB,EAAD,EAAiCC,SAAjC,EAA4C,CAAC,WAAD,CAA5C,CAApC;AAEA,UAAKE,SAAL,GAAiB,IAAIP,MAAJ,CAAW;AAC3BQ,aAAO,EAAE,MAAKA,OADa;AAE3BC,WAAK,EAAE,WAFoB;AAG3BC,WAAK,EAAEJ,OAAO,CAACC,SAHY;AAI3BI,cAAQ,EAAE,CAAC,MAAKH,OAAL,CAAaI,UAAd,GAA2B,CAJV;AAK3BC,cAAQ,EAAE,MAAKL,OAAL,CAAaI,UAAb,GAA0B;AALT,KAAX,CAAjB;AAQA,UAAKE,KAAL,GAAa,IAAIZ,kBAAJ,CAAuB;AACnCM,aAAO,EAAE,MAAKA,OADqB;AAEnCO,UAAI,EAAE;AAF6B,KAAvB,CAAb;AAKA,UAAKC,OAAL,GAAe,IAAIf,UAAJ,CAAe;AAC7BO,aAAO,EAAE,MAAKA,OADe;AAE7BS,WAAK,EAAE,CAAC,EAFqB;AAG7BF,UAAI,EAAE;AAHuB,KAAf,CAAf;AAMA,UAAKG,aAAL,GAAqB,IAAIpB,QAAJ,CAAa;AAAEU,aAAO,EAAE,MAAKA;AAAhB,KAAb,CAArB;AACA,UAAKW,eAAL,GAAuB,IAAIrB,QAAJ,CAAa;AAAEU,aAAO,EAAE,MAAKA;AAAhB,KAAb,CAAvB;AACA,UAAKY,OAAL,GAAe,IAAIrB,MAAJ,CAAW;AAAES,aAAO,EAAE,MAAKA;AAAhB,KAAX,CAAf;AACA,UAAKa,IAAL,GAAY,IAAIxB,GAAJ,CAAQ;AAAEW,aAAO,EAAE,MAAKA;AAAhB,KAAR,CAAZ;AAEA,UAAKc,aAAL,GAAqB,IAAI5B,iBAAJ,CAAsB;AAAEc,aAAO,EAAE,MAAKA;AAAhB,KAAtB,CAArB;;AACA,UAAKe,UAAL,CAAgBC,OAAhB,CAAwB,MAAKF,aAA7B,EA9BD,CAgCC;;;AACA,UAAKf,SAAL,CAAekB,GAAf,CAAmB,MAAKX,KAAL,CAAWP,SAA9B,EAAyC,MAAKS,OAAL,CAAaT,SAAtD;;AAEA,UAAKe,aAAL,CAAmBI,QAAnB,CAA4BF,OAA5B,CAAoC,MAAKL,eAAzC;;AACA,UAAKH,OAAL,CAAaQ,OAAb,CAAqB,MAAKL,eAAL,CAAqBQ,MAA1C;;AAEA,UAAKL,aAAL,CAAmBE,OAAnB,CAA2B,MAAKN,aAAhC;;AACA,UAAKJ,KAAL,CAAWU,OAAX,CAAmB,MAAKN,aAAL,CAAmBS,MAAtC;;AACA,UAAKT,aAAL,CAAmBM,OAAnB,CAA2B,MAAKJ,OAAhC;;AAEA,UAAKD,eAAL,CAAqBK,OAArB,CAA6B,MAAKH,IAAlC;;AACA,UAAKD,OAAL,CAAaI,OAAb,CAAqB,MAAKH,IAAL,CAAUO,MAA/B;;AAEA,UAAKP,IAAL,CAAUG,OAAV,CAAkB,MAAKK,YAAvB,EA7CD,CA+CC;;;AACA,QAAMC,GAAG,GAAG,MAAKC,SAAL,EAAZ;;AACA,UAAKjB,KAAL,CAAWkB,KAAX,CAAiBF,GAAjB;;AACA,UAAKd,OAAL,CAAagB,KAAb,CAAmBF,GAAnB;;AAlDD;AAmDC;;AArGF;AAAA;AAAA,WA6GC,mBAAO;AACN;;AACA,WAAKvB,SAAL,CAAe0B,OAAf;;AACA,WAAKZ,IAAL,CAAUY,OAAV;;AACA,WAAKjB,OAAL,CAAaiB,OAAb;;AACA,WAAKd,eAAL,CAAqBc,OAArB;;AACA,WAAKb,OAAL,CAAaa,OAAb;;AACA,WAAKX,aAAL,CAAmBW,OAAnB;;AACA,WAAKnB,KAAL,CAAWmB,OAAX;;AACA,WAAKf,aAAL,CAAmBe,OAAnB;;AACA,aAAO,IAAP;AACA;AAxHF;AAAA;AAAA,WAuGC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAcvC,MAAM,CAACQ,WAAP,EAAd,EAAoC;AAC1CG,iBAAS,EAAE;AAD+B,OAApC,CAAP;AAGA;AA3GF;;AAAA;AAAA,EAAsCX,MAAtC","names":["PhaseShiftAllpass","optionsFromArguments","Effect","Add","Multiply","Negate","Signal","Oscillator","ToneOscillatorNode","FrequencyShifter","getDefaults","arguments","options","frequency","context","units","value","minValue","sampleRate","maxValue","_sine","type","_cosine","phase","_sineMultiply","_cosineMultiply","_negate","_add","_phaseShifter","effectSend","connect","fan","offset90","factor","addend","effectReturn","now","immediate","start","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/FrequencyShifter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}