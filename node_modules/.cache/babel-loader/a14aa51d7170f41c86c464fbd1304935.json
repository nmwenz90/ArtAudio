{"ast":null,"code":"import _toConsumableArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nexport var createRenderInputsOfAudioNode = function createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(audioNode, nativeOfflineAudioContext, nativeAudioNode) {\n      var audioNodeConnections;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              audioNodeConnections = getAudioNodeConnections(audioNode);\n              _context2.next = 3;\n              return Promise.all(audioNodeConnections.activeInputs.map(function (connections, input) {\n                return Array.from(connections).map( /*#__PURE__*/function () {\n                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n                    var _ref4, source, output, audioNodeRenderer, renderedNativeAudioNode, destination;\n\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _ref4 = _slicedToArray(_ref2, 2), source = _ref4[0], output = _ref4[1];\n                            audioNodeRenderer = getAudioNodeRenderer(source);\n                            _context.next = 4;\n                            return audioNodeRenderer.render(source, nativeOfflineAudioContext);\n\n                          case 4:\n                            renderedNativeAudioNode = _context.sent;\n                            destination = audioNode.context.destination;\n\n                            if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n                              renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n                            }\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x4) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n              }).reduce(function (allRenderingPromises, renderingPromises) {\n                return [].concat(_toConsumableArray(allRenderingPromises), _toConsumableArray(renderingPromises));\n              }, []));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"mappings":";;;;AAGA,OAAO,IAAMA,6BAA6B,GAAoC,SAAjEA,6BAAiE,CAC1EC,uBAD0E,EAE1EC,oBAF0E,EAG1EC,cAH0E,EAI1E;AACA;AAAA,wEAAO,kBAAOC,SAAP,EAAkBC,yBAAlB,EAA6CC,eAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC,kCADH,GAC0BN,uBAAuB,CAACG,SAAD,CADjD;AAAA;AAAA,qBAGGI,OAAO,CAACC,GAAR,CACFF,oBAAoB,CAACG,YAArB,CACKC,GADL,CACS,UAACC,WAAD,EAAcC,KAAd;AAAA,uBACDC,KAAK,CAACC,IAAN,CAAWH,WAAX,EAAwBD,GAAxB;AAAA,uFAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,8DAAQK,MAAR,aAAgBC,MAAhB;AAClBC,6CADkB,GACEhB,oBAAoB,CAACc,MAAD,CADtB;AAAA;AAAA,mCAEcE,iBAAiB,CAACC,MAAlB,CAAyBH,MAAzB,EAAiCX,yBAAjC,CAFd;;AAAA;AAElBe,mDAFkB;AAGlBC,uCAHkB,GAG6CjB,SAAS,CAACkB,OAAV,CAAkBD,WAH/D;;AAKxB,gCAAI,CAAClB,cAAc,CAACa,MAAD,CAAf,KAA4BZ,SAAS,KAAKiB,WAAd,IAA6B,CAAClB,cAAc,CAACC,SAAD,CAAxE,CAAJ,EAA0F;AACtFgB,qDAAuB,CAACG,OAAxB,CAAgCjB,eAAhC,EAAiDW,MAAjD,EAAyDJ,KAAzD;AACH;;AAPuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA5B;;AAAA;AAAA;AAAA;AAAA,oBADC;AAAA,eADT,EAYKW,MAZL,CAYY,UAACC,oBAAD,EAAuBC,iBAAvB;AAAA,oDAAiDD,oBAAjD,sBAA0EC,iBAA1E;AAAA,eAZZ,EAY0G,EAZ1G,CADE,CAHH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAmBH,CAxBM","names":["createRenderInputsOfAudioNode","getAudioNodeConnections","getAudioNodeRenderer","isPartOfACycle","audioNode","nativeOfflineAudioContext","nativeAudioNode","audioNodeConnections","Promise","all","activeInputs","map","connections","input","Array","from","source","output","audioNodeRenderer","render","renderedNativeAudioNode","destination","context","connect","reduce","allRenderingPromises","renderingPromises"],"sourceRoot":"","sources":["../../../src/factories/render-inputs-of-audio-node.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}