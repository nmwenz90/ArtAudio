{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst fmOsc = new Tone.FMOscillator({\n * \t\tfrequency: 200,\n * \t\ttype: \"square\",\n * \t\tmodulationType: \"triangle\",\n * \t\tharmonicity: 0.2,\n * \t\tmodulationIndex: 3\n * \t}).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\n\nexport var FMOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(FMOscillator, _Source);\n\n  var _super = _createSuper(FMOscillator);\n\n  function FMOscillator() {\n    var _this;\n\n    _classCallCheck(this, FMOscillator);\n\n    _this = _super.call(this, optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    _this.name = \"FMOscillator\";\n    /**\n     * the node where the modulation happens\n     */\n\n    _this._modulationNode = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    var options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    _this._carrier = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: 0,\n      onstop: function onstop() {\n        return _this.onstop(_assertThisInitialized(_this));\n      },\n      phase: options.phase,\n      type: options.type\n    });\n    _this.detune = _this._carrier.detune;\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this._modulator = new Oscillator({\n      context: _this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    _this.harmonicity = new Multiply({\n      context: _this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    _this.modulationIndex = new Multiply({\n      context: _this.context,\n      units: \"positive\",\n      value: options.modulationIndex\n    }); // connections\n\n    _this.frequency.connect(_this._carrier.frequency);\n\n    _this.frequency.chain(_this.harmonicity, _this._modulator.frequency);\n\n    _this.frequency.chain(_this.modulationIndex, _this._modulationNode);\n\n    _this._modulator.connect(_this._modulationNode.gain);\n\n    _this._modulationNode.connect(_this._carrier.frequency);\n\n    _this._carrier.connect(_this.output);\n\n    _this.detune.connect(_this._modulator.detune);\n\n    readOnly(_assertThisInitialized(_this), [\"modulationIndex\", \"frequency\", \"detune\", \"harmonicity\"]);\n    return _this;\n  }\n\n  _createClass(FMOscillator, [{\n    key: \"_start\",\n    value:\n    /**\n     * start the oscillator\n     */\n    function _start(time) {\n      this._modulator.start(time);\n\n      this._carrier.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      this._modulator.stop(time);\n\n      this._carrier.stop(time);\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._modulator.restart(time);\n\n      this._carrier.restart(time);\n\n      return this;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._carrier.type;\n    },\n    set: function set(type) {\n      this._carrier.type = type;\n    }\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return this._carrier.baseType;\n    },\n    set: function set(baseType) {\n      this._carrier.baseType = baseType;\n    }\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return this._carrier.partialCount;\n    },\n    set: function set(partialCount) {\n      this._carrier.partialCount = partialCount;\n    }\n    /**\n     * The type of the modulator oscillator\n     */\n\n  }, {\n    key: \"modulationType\",\n    get: function get() {\n      return this._modulator.type;\n    },\n    set: function set(type) {\n      this._modulator.type = type;\n    }\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._carrier.phase;\n    },\n    set: function set(phase) {\n      this._carrier.phase = phase;\n      this._modulator.phase = phase;\n    }\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return this._carrier.partials;\n    },\n    set: function set(partials) {\n      this._carrier.partials = partials;\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FMOscillator.prototype), \"dispose\", this).call(this);\n\n      this.frequency.dispose();\n      this.harmonicity.dispose();\n\n      this._carrier.dispose();\n\n      this._modulator.dispose();\n\n      this._modulationNode.dispose();\n\n      this.modulationIndex.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Oscillator.getDefaults(), {\n        harmonicity: 1,\n        modulationIndex: 2,\n        modulationType: \"square\"\n      });\n    }\n  }]);\n\n  return FMOscillator;\n}(Source);","map":{"version":3,"mappings":"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","names":["Gain","optionsFromArguments","readOnly","Multiply","Signal","Source","Oscillator","generateWaveform","FMOscillator","getDefaults","arguments","context","gain","options","_carrier","detune","frequency","onstop","phase","type","units","value","_modulator","modulationType","harmonicity","modulationIndex","connect","chain","_modulationNode","output","time","start","stop","restart","baseType","partialCount","partials","length","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/source/oscillator/FMOscillator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}