{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\n\nexport var EQ3 = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(EQ3, _ToneAudioNode);\n\n  var _super = _createSuper(EQ3);\n\n  function EQ3() {\n    var _this;\n\n    _classCallCheck(this, EQ3);\n\n    _this = _super.call(this, optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n    _this.name = \"EQ3\";\n    /**\n     * the output\n     */\n\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._internalChannels = [];\n    var options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n    _this.input = _this._multibandSplit = new MultibandSplit({\n      context: _this.context,\n      highFrequency: options.highFrequency,\n      lowFrequency: options.lowFrequency\n    });\n    _this._lowGain = new Gain({\n      context: _this.context,\n      gain: options.low,\n      units: \"decibels\"\n    });\n    _this._midGain = new Gain({\n      context: _this.context,\n      gain: options.mid,\n      units: \"decibels\"\n    });\n    _this._highGain = new Gain({\n      context: _this.context,\n      gain: options.high,\n      units: \"decibels\"\n    });\n    _this.low = _this._lowGain.gain;\n    _this.mid = _this._midGain.gain;\n    _this.high = _this._highGain.gain;\n    _this.Q = _this._multibandSplit.Q;\n    _this.lowFrequency = _this._multibandSplit.lowFrequency;\n    _this.highFrequency = _this._multibandSplit.highFrequency; // the frequency bands\n\n    _this._multibandSplit.low.chain(_this._lowGain, _this.output);\n\n    _this._multibandSplit.mid.chain(_this._midGain, _this.output);\n\n    _this._multibandSplit.high.chain(_this._highGain, _this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    _this._internalChannels = [_this._multibandSplit];\n    return _this;\n  }\n\n  _createClass(EQ3, [{\n    key: \"dispose\",\n    value:\n    /**\n     * Clean up.\n     */\n    function dispose() {\n      _get(_getPrototypeOf(EQ3.prototype), \"dispose\", this).call(this);\n\n      writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\n      this._multibandSplit.dispose();\n\n      this.lowFrequency.dispose();\n      this.highFrequency.dispose();\n\n      this._lowGain.dispose();\n\n      this._midGain.dispose();\n\n      this._highGain.dispose();\n\n      this.low.dispose();\n      this.mid.dispose();\n      this.high.dispose();\n      this.Q.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        high: 0,\n        highFrequency: 2500,\n        low: 0,\n        lowFrequency: 400,\n        mid: 0\n      });\n    }\n  }]);\n\n  return EQ3;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","writable","MultibandSplit","EQ3","getDefaults","arguments","context","options","input","_multibandSplit","highFrequency","lowFrequency","_lowGain","gain","low","units","_midGain","mid","_highGain","high","Q","chain","output","_internalChannels","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/filter/EQ3.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}