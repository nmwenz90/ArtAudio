{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MidiClass } from \"../core/type/Midi\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isNumber } from \"../core/util/TypeCheck\";\nimport { Instrument } from \"./Instrument\";\nimport { Synth } from \"./Synth\";\nimport { assert, warn } from \"../core/util/Debug\";\n/**\n * PolySynth handles voice creation and allocation for any\n * instruments passed in as the second paramter. PolySynth is\n * not a synthesizer by itself, it merely manages voices of\n * one of the other types of synths, allowing any of the\n * monophonic synthesizers to be polyphonic.\n *\n * @example\n * const synth = new Tone.PolySynth().toDestination();\n * // set the attributes across all the voices using 'set'\n * synth.set({ detune: -1200 });\n * // play a chord\n * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], 1);\n * @category Instrument\n */\n\nexport var PolySynth = /*#__PURE__*/function (_Instrument) {\n  _inherits(PolySynth, _Instrument);\n\n  var _super = _createSuper(PolySynth);\n\n  function PolySynth() {\n    var _this;\n\n    _classCallCheck(this, PolySynth);\n\n    _this = _super.call(this, optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]));\n    _this.name = \"PolySynth\";\n    /**\n     * The voices which are not currently in use\n     */\n\n    _this._availableVoices = [];\n    /**\n     * The currently active voices\n     */\n\n    _this._activeVoices = [];\n    /**\n     * All of the allocated voices for this synth.\n     */\n\n    _this._voices = [];\n    /**\n     * The GC timeout. Held so that it could be cancelled when the node is disposed.\n     */\n\n    _this._gcTimeout = -1;\n    /**\n     * A moving average of the number of active voices\n     */\n\n    _this._averageActiveVoices = 0;\n    var options = optionsFromArguments(PolySynth.getDefaults(), arguments, [\"voice\", \"options\"]); // check against the old API (pre 14.3.0)\n\n    assert(!isNumber(options.voice), \"DEPRECATED: The polyphony count is no longer the first argument.\");\n    var defaults = options.voice.getDefaults();\n    _this.options = Object.assign(defaults, options.options);\n    _this.voice = options.voice;\n    _this.maxPolyphony = options.maxPolyphony; // create the first voice\n\n    _this._dummyVoice = _this._getNextAvailableVoice(); // remove it from the voices list\n\n    var index = _this._voices.indexOf(_this._dummyVoice);\n\n    _this._voices.splice(index, 1); // kick off the GC interval\n\n\n    _this._gcTimeout = _this.context.setInterval(_this._collectGarbage.bind(_assertThisInitialized(_this)), 1);\n    return _this;\n  }\n\n  _createClass(PolySynth, [{\n    key: \"activeVoices\",\n    get:\n    /**\n     * The number of active voices.\n     */\n    function get() {\n      return this._activeVoices.length;\n    }\n    /**\n     * Invoked when the source is done making sound, so that it can be\n     * readded to the pool of available voices\n     */\n\n  }, {\n    key: \"_makeVoiceAvailable\",\n    value: function _makeVoiceAvailable(voice) {\n      this._availableVoices.push(voice); // remove the midi note from 'active voices'\n\n\n      var activeVoiceIndex = this._activeVoices.findIndex(function (e) {\n        return e.voice === voice;\n      });\n\n      this._activeVoices.splice(activeVoiceIndex, 1);\n    }\n    /**\n     * Get an available voice from the pool of available voices.\n     * If one is not available and the maxPolyphony limit is reached,\n     * steal a voice, otherwise return null.\n     */\n\n  }, {\n    key: \"_getNextAvailableVoice\",\n    value: function _getNextAvailableVoice() {\n      // if there are available voices, return the first one\n      if (this._availableVoices.length) {\n        return this._availableVoices.shift();\n      } else if (this._voices.length < this.maxPolyphony) {\n        // otherwise if there is still more maxPolyphony, make a new voice\n        var voice = new this.voice(Object.assign(this.options, {\n          context: this.context,\n          onsilence: this._makeVoiceAvailable.bind(this)\n        }));\n        voice.connect(this.output);\n\n        this._voices.push(voice);\n\n        return voice;\n      } else {\n        warn(\"Max polyphony exceeded. Note dropped.\");\n      }\n    }\n    /**\n     * Occasionally check if there are any allocated voices which can be cleaned up.\n     */\n\n  }, {\n    key: \"_collectGarbage\",\n    value: function _collectGarbage() {\n      this._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);\n\n      if (this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {\n        // take off an available note\n        var firstAvail = this._availableVoices.shift();\n\n        var index = this._voices.indexOf(firstAvail);\n\n        this._voices.splice(index, 1);\n\n        if (!this.context.isOffline) {\n          firstAvail.dispose();\n        }\n      }\n    }\n    /**\n     * Internal method which triggers the attack\n     */\n\n  }, {\n    key: \"_triggerAttack\",\n    value: function _triggerAttack(notes, time, velocity) {\n      var _this2 = this;\n\n      notes.forEach(function (note) {\n        var midiNote = new MidiClass(_this2.context, note).toMidi();\n\n        var voice = _this2._getNextAvailableVoice();\n\n        if (voice) {\n          voice.triggerAttack(note, time, velocity);\n\n          _this2._activeVoices.push({\n            midi: midiNote,\n            voice: voice,\n            released: false\n          });\n\n          _this2.log(\"triggerAttack\", note, time);\n        }\n      });\n    }\n    /**\n     * Internal method which triggers the release\n     */\n\n  }, {\n    key: \"_triggerRelease\",\n    value: function _triggerRelease(notes, time) {\n      var _this3 = this;\n\n      notes.forEach(function (note) {\n        var midiNote = new MidiClass(_this3.context, note).toMidi();\n\n        var event = _this3._activeVoices.find(function (_ref) {\n          var midi = _ref.midi,\n              released = _ref.released;\n          return midi === midiNote && !released;\n        });\n\n        if (event) {\n          // trigger release on that note\n          event.voice.triggerRelease(time); // mark it as released\n\n          event.released = true;\n\n          _this3.log(\"triggerRelease\", note, time);\n        }\n      });\n    }\n    /**\n     * Schedule the attack/release events. If the time is in the future, then it should set a timeout\n     * to wait for just-in-time scheduling\n     */\n\n  }, {\n    key: \"_scheduleEvent\",\n    value: function _scheduleEvent(type, notes, time, velocity) {\n      var _this4 = this;\n\n      assert(!this.disposed, \"Synth was already disposed\"); // if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout\n\n      if (time <= this.now()) {\n        // do it immediately\n        if (type === \"attack\") {\n          this._triggerAttack(notes, time, velocity);\n        } else {\n          this._triggerRelease(notes, time);\n        }\n      } else {\n        // schedule it to start in the future\n        this.context.setTimeout(function () {\n          _this4._scheduleEvent(type, notes, time, velocity);\n        }, time - this.now());\n      }\n    }\n    /**\n     * Trigger the attack portion of the note\n     * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n     * @param  time  The start time of the note.\n     * @param velocity The velocity of the note.\n     * @example\n     * const synth = new Tone.PolySynth(Tone.FMSynth).toDestination();\n     * // trigger a chord immediately with a velocity of 0.2\n     * synth.triggerAttack([\"Ab3\", \"C4\", \"F5\"], Tone.now(), 0.2);\n     */\n\n  }, {\n    key: \"triggerAttack\",\n    value: function triggerAttack(notes, time, velocity) {\n      if (!Array.isArray(notes)) {\n        notes = [notes];\n      }\n\n      var computedTime = this.toSeconds(time);\n\n      this._scheduleEvent(\"attack\", notes, computedTime, velocity);\n\n      return this;\n    }\n    /**\n     * Trigger the release of the note. Unlike monophonic instruments,\n     * a note (or array of notes) needs to be passed in as the first argument.\n     * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.\n     * @param  time  When the release will be triggered.\n     * @example\n     * @example\n     * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();\n     * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"]);\n     * // trigger the release of the given notes.\n     * poly.triggerRelease([\"Ab3\", \"C4\"], \"+1\");\n     * poly.triggerRelease(\"F5\", \"+3\");\n     */\n\n  }, {\n    key: \"triggerRelease\",\n    value: function triggerRelease(notes, time) {\n      if (!Array.isArray(notes)) {\n        notes = [notes];\n      }\n\n      var computedTime = this.toSeconds(time);\n\n      this._scheduleEvent(\"release\", notes, computedTime);\n\n      return this;\n    }\n    /**\n     * Trigger the attack and release after the specified duration\n     * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.\n     * @param  duration the duration of the note\n     * @param  time  if no time is given, defaults to now\n     * @param  velocity the velocity of the attack (0-1)\n     * @example\n     * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();\n     * // can pass in an array of durations as well\n     * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"Bb4\", \"D5\"], [4, 3, 2, 1]);\n     */\n\n  }, {\n    key: \"triggerAttackRelease\",\n    value: function triggerAttackRelease(notes, duration, time, velocity) {\n      var computedTime = this.toSeconds(time);\n      this.triggerAttack(notes, computedTime, velocity);\n\n      if (isArray(duration)) {\n        assert(isArray(notes), \"If the duration is an array, the notes must also be an array\");\n        notes = notes;\n\n        for (var i = 0; i < notes.length; i++) {\n          var d = duration[Math.min(i, duration.length - 1)];\n          var durationSeconds = this.toSeconds(d);\n          assert(durationSeconds > 0, \"The duration must be greater than 0\");\n          this.triggerRelease(notes[i], computedTime + durationSeconds);\n        }\n      } else {\n        var _durationSeconds = this.toSeconds(duration);\n\n        assert(_durationSeconds > 0, \"The duration must be greater than 0\");\n        this.triggerRelease(notes, computedTime + _durationSeconds);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      if (this._syncState()) {\n        this._syncMethod(\"triggerAttack\", 1);\n\n        this._syncMethod(\"triggerRelease\", 1);\n      }\n\n      return this;\n    }\n    /**\n     * Set a member/attribute of the voices\n     * @example\n     * const poly = new Tone.PolySynth().toDestination();\n     * // set all of the voices using an options object for the synth type\n     * poly.set({\n     * \tenvelope: {\n     * \t\tattack: 0.25\n     * \t}\n     * });\n     * poly.triggerAttackRelease(\"Bb3\", 0.2);\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(options) {\n      // remove options which are controlled by the PolySynth\n      var sanitizedOptions = omitFromObject(options, [\"onsilence\", \"context\"]); // store all of the options\n\n      this.options = deepMerge(this.options, sanitizedOptions);\n\n      this._voices.forEach(function (voice) {\n        return voice.set(sanitizedOptions);\n      });\n\n      this._dummyVoice.set(sanitizedOptions);\n\n      return this;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this._dummyVoice.get();\n    }\n    /**\n     * Trigger the release portion of all the currently active voices immediately.\n     * Useful for silencing the synth.\n     */\n\n  }, {\n    key: \"releaseAll\",\n    value: function releaseAll(time) {\n      var computedTime = this.toSeconds(time);\n\n      this._activeVoices.forEach(function (_ref2) {\n        var voice = _ref2.voice;\n        voice.triggerRelease(computedTime);\n      });\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PolySynth.prototype), \"dispose\", this).call(this);\n\n      this._dummyVoice.dispose();\n\n      this._voices.forEach(function (v) {\n        return v.dispose();\n      });\n\n      this._activeVoices = [];\n      this._availableVoices = [];\n      this.context.clearInterval(this._gcTimeout);\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Instrument.getDefaults(), {\n        maxPolyphony: 32,\n        options: {},\n        voice: Synth\n      });\n    }\n  }]);\n\n  return PolySynth;\n}(Instrument);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,SAAT,QAA0B,mBAA1B;AAEA,SAASC,SAAT,EAAoBC,cAApB,EAAoCC,oBAApC,QAAgE,uBAAhE;AAEA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,wBAAlC;AACA,SAASC,UAAT,QAA8C,cAA9C;AAOA,SAASC,KAAT,QAAoC,SAApC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,oBAA7B;AA4BA;;;;;;;;;;;;;;;;AAeA,WAAaC,SAAb;AAAA;;AAAA;;AA0DC;AAAA;;AAAA;;AAEC,8BAAMP,oBAAoB,CAACO,SAAS,CAACC,WAAV,EAAD,EAA0BC,SAA1B,EAAqC,CAAC,OAAD,EAAU,SAAV,CAArC,CAA1B;AA1DQ,iBAAe,WAAf;AAET;;;;AAGQ,6BAA4B,EAA5B;AAER;;;;AAGQ,0BAA4E,EAA5E;AAER;;;;AAGQ,oBAAmB,EAAnB;AAsBR;;;;AAGQ,uBAAa,CAAC,CAAd;AAER;;;;AAGQ,iCAAuB,CAAvB;AAcP,QAAMC,OAAO,GAAGV,oBAAoB,CAACO,SAAS,CAACC,WAAV,EAAD,EAA0BC,SAA1B,EAAqC,CAAC,OAAD,EAAU,SAAV,CAArC,CAApC,CAHD,CAKC;;AACAJ,UAAM,CAAC,CAACH,QAAQ,CAACQ,OAAO,CAACC,KAAT,CAAV,EAA2B,kEAA3B,CAAN;AAEA,QAAMC,QAAQ,GAAGF,OAAO,CAACC,KAAR,CAAcH,WAAd,EAAjB;AACA,UAAKE,OAAL,GAAeG,MAAM,CAACC,MAAP,CAAcF,QAAd,EAAwBF,OAAO,CAACA,OAAhC,CAAf;AACA,UAAKC,KAAL,GAAaD,OAAO,CAACC,KAArB;AACA,UAAKI,YAAL,GAAoBL,OAAO,CAACK,YAA5B,CAXD,CAaC;;AACA,UAAKC,WAAL,GAAmB,MAAKC,sBAAL,EAAnB,CAdD,CAeC;;AACA,QAAMC,KAAK,GAAG,MAAKC,OAAL,CAAaC,OAAb,CAAqB,MAAKJ,WAA1B,CAAd;;AACA,UAAKG,OAAL,CAAaE,MAAb,CAAoBH,KAApB,EAA2B,CAA3B,EAjBD,CAkBC;;;AACA,UAAKI,UAAL,GAAkB,MAAKC,OAAL,CAAaC,WAAb,CAAyB,MAAKC,eAAL,CAAqBC,IAArB,+BAAzB,EAA0D,CAA1D,CAAlB;AAnBD;AAoBC;;AA9EF;AAAA;AAAA;AAwFC;;;AAGA,mBAAgB;AACf,aAAO,KAAKC,aAAL,CAAmBC,MAA1B;AACA;AAED;;;;;AA/FD;AAAA;AAAA,WAmGS,6BAAoBjB,KAApB,EAAgC;AACvC,WAAKkB,gBAAL,CAAsBC,IAAtB,CAA2BnB,KAA3B,EADuC,CAEvC;;;AACA,UAAMoB,gBAAgB,GAAG,KAAKJ,aAAL,CAAmBK,SAAnB,CAA6B,UAACC,CAAD;AAAA,eAAOA,CAAC,CAACtB,KAAF,KAAYA,KAAnB;AAAA,OAA7B,CAAzB;;AACA,WAAKgB,aAAL,CAAmBN,MAAnB,CAA0BU,gBAA1B,EAA4C,CAA5C;AACA;AAED;;;;;;AA1GD;AAAA;AAAA,WA+GS,kCAAsB;AAC7B;AACA,UAAI,KAAKF,gBAAL,CAAsBD,MAA1B,EAAkC;AACjC,eAAO,KAAKC,gBAAL,CAAsBK,KAAtB,EAAP;AACA,OAFD,MAEO,IAAI,KAAKf,OAAL,CAAaS,MAAb,GAAsB,KAAKb,YAA/B,EAA6C;AACnD;AACA,YAAMJ,KAAK,GAAG,IAAI,KAAKA,KAAT,CAAeE,MAAM,CAACC,MAAP,CAAc,KAAKJ,OAAnB,EAA4B;AACxDa,iBAAO,EAAE,KAAKA,OAD0C;AAExDY,mBAAS,EAAE,KAAKC,mBAAL,CAAyBV,IAAzB,CAA8B,IAA9B;AAF6C,SAA5B,CAAf,CAAd;AAIAf,aAAK,CAAC0B,OAAN,CAAc,KAAKC,MAAnB;;AACA,aAAKnB,OAAL,CAAaW,IAAb,CAAkBnB,KAAlB;;AACA,eAAOA,KAAP;AACA,OATM,MASA;AACNL,YAAI,CAAC,uCAAD,CAAJ;AACA;AACD;AAED;;;;AAjID;AAAA;AAAA,WAoIS,2BAAe;AACtB,WAAKiC,oBAAL,GAA4BC,IAAI,CAACC,GAAL,CAAS,KAAKF,oBAAL,GAA4B,IAArC,EAA2C,KAAKG,YAAhD,CAA5B;;AACA,UAAI,KAAKb,gBAAL,CAAsBD,MAAtB,IAAgC,KAAKT,OAAL,CAAaS,MAAb,GAAsBY,IAAI,CAACG,IAAL,CAAU,KAAKJ,oBAAL,GAA4B,CAAtC,CAA1D,EAAoG;AACnG;AACA,YAAMK,UAAU,GAAG,KAAKf,gBAAL,CAAsBK,KAAtB,EAAnB;;AACA,YAAMhB,KAAK,GAAG,KAAKC,OAAL,CAAaC,OAAb,CAAqBwB,UAArB,CAAd;;AACA,aAAKzB,OAAL,CAAaE,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;;AACA,YAAI,CAAC,KAAKK,OAAL,CAAasB,SAAlB,EAA6B;AAC5BD,oBAAU,CAACE,OAAX;AACA;AACD;AACD;AAED;;;;AAjJD;AAAA;AAAA,WAoJS,wBAAeC,KAAf,EAAmCC,IAAnC,EAAkDC,QAAlD,EAAwE;AAAA;;AAC/EF,WAAK,CAACG,OAAN,CAAc,cAAI,EAAG;AACpB,YAAMC,QAAQ,GAAG,IAAItD,SAAJ,CAAc,MAAI,CAAC0B,OAAnB,EAA4B6B,IAA5B,EAAkCC,MAAlC,EAAjB;;AACA,YAAM1C,KAAK,GAAG,MAAI,CAACM,sBAAL,EAAd;;AACA,YAAIN,KAAJ,EAAW;AACVA,eAAK,CAAC2C,aAAN,CAAoBF,IAApB,EAA0BJ,IAA1B,EAAgCC,QAAhC;;AACA,gBAAI,CAACtB,aAAL,CAAmBG,IAAnB,CAAwB;AACvByB,gBAAI,EAAEJ,QADiB;AACPxC,iBAAK,EAALA,KADO;AACA6C,oBAAQ,EAAE;AADV,WAAxB;;AAGA,gBAAI,CAACC,GAAL,CAAS,eAAT,EAA0BL,IAA1B,EAAgCJ,IAAhC;AACA;AACD,OAVD;AAWA;AAED;;;;AAlKD;AAAA;AAAA,WAqKS,yBAAgBD,KAAhB,EAAoCC,IAApC,EAAiD;AAAA;;AACxDD,WAAK,CAACG,OAAN,CAAc,cAAI,EAAG;AACpB,YAAMC,QAAQ,GAAG,IAAItD,SAAJ,CAAc,MAAI,CAAC0B,OAAnB,EAA4B6B,IAA5B,EAAkCC,MAAlC,EAAjB;;AACA,YAAMK,KAAK,GAAG,MAAI,CAAC/B,aAAL,CAAmBgC,IAAnB,CAAwB;AAAA,cAAGJ,IAAH,QAAGA,IAAH;AAAA,cAASC,QAAT,QAASA,QAAT;AAAA,iBAAwBD,IAAI,KAAKJ,QAAT,IAAqB,CAACK,QAA9C;AAAA,SAAxB,CAAd;;AACA,YAAIE,KAAJ,EAAW;AACV;AACAA,eAAK,CAAC/C,KAAN,CAAYiD,cAAZ,CAA2BZ,IAA3B,EAFU,CAGV;;AACAU,eAAK,CAACF,QAAN,GAAiB,IAAjB;;AACA,gBAAI,CAACC,GAAL,CAAS,gBAAT,EAA2BL,IAA3B,EAAiCJ,IAAjC;AACA;AACD,OAVD;AAWA;AAED;;;;;AAnLD;AAAA;AAAA,WAuLS,wBAAea,IAAf,EAA2Cd,KAA3C,EAA+DC,IAA/D,EAA8EC,QAA9E,EAAoG;AAAA;;AAC3G5C,YAAM,CAAC,CAAC,KAAKyD,QAAP,EAAiB,4BAAjB,CAAN,CAD2G,CAE3G;;AACA,UAAId,IAAI,IAAI,KAAKe,GAAL,EAAZ,EAAwB;AACvB;AACA,YAAIF,IAAI,KAAK,QAAb,EAAuB;AACtB,eAAKG,cAAL,CAAoBjB,KAApB,EAA2BC,IAA3B,EAAiCC,QAAjC;AACA,SAFD,MAEO;AACN,eAAKgB,eAAL,CAAqBlB,KAArB,EAA4BC,IAA5B;AACA;AACD,OAPD,MAOO;AACN;AACA,aAAKzB,OAAL,CAAa2C,UAAb,CAAwB,YAAK;AAC5B,gBAAI,CAACC,cAAL,CAAoBN,IAApB,EAA0Bd,KAA1B,EAAiCC,IAAjC,EAAuCC,QAAvC;AACA,SAFD,EAEGD,IAAI,GAAG,KAAKe,GAAL,EAFV;AAGA;AACD;AAED;;;;;;;;;;;AAzMD;AAAA;AAAA,WAmNC,uBAAchB,KAAd,EAA8CC,IAA9C,EAA2DC,QAA3D,EAAiF;AAEhF,UAAI,CAACmB,KAAK,CAACnE,OAAN,CAAc8C,KAAd,CAAL,EAA2B;AAC1BA,aAAK,GAAG,CAACA,KAAD,CAAR;AACA;;AACD,UAAMsB,YAAY,GAAG,KAAKC,SAAL,CAAetB,IAAf,CAArB;;AACA,WAAKmB,cAAL,CAAoB,QAApB,EAA8BpB,KAA9B,EAAqCsB,YAArC,EAAmDpB,QAAnD;;AACA,aAAO,IAAP;AACA;AAED;;;;;;;;;;;;;;AA7ND;AAAA;AAAA,WA0OC,wBAAeF,KAAf,EAA+CC,IAA/C,EAA0D;AACzD,UAAI,CAACoB,KAAK,CAACnE,OAAN,CAAc8C,KAAd,CAAL,EAA2B;AAC1BA,aAAK,GAAG,CAACA,KAAD,CAAR;AACA;;AACD,UAAMsB,YAAY,GAAG,KAAKC,SAAL,CAAetB,IAAf,CAArB;;AACA,WAAKmB,cAAL,CAAoB,SAApB,EAA+BpB,KAA/B,EAAsCsB,YAAtC;;AACA,aAAO,IAAP;AACA;AAED;;;;;;;;;;;;AAnPD;AAAA;AAAA,WA8PC,8BACCtB,KADD,EAECwB,QAFD,EAGCvB,IAHD,EAICC,QAJD,EAIuB;AAEtB,UAAMoB,YAAY,GAAG,KAAKC,SAAL,CAAetB,IAAf,CAArB;AACA,WAAKM,aAAL,CAAmBP,KAAnB,EAA0BsB,YAA1B,EAAwCpB,QAAxC;;AACA,UAAIhD,OAAO,CAACsE,QAAD,CAAX,EAAuB;AACtBlE,cAAM,CAACJ,OAAO,CAAC8C,KAAD,CAAR,EAAiB,8DAAjB,CAAN;AACAA,aAAK,GAAGA,KAAR;;AACA,aAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,KAAK,CAACnB,MAA1B,EAAkC4C,CAAC,EAAnC,EAAuC;AACtC,cAAMC,CAAC,GAAGF,QAAQ,CAAC/B,IAAI,CAACkC,GAAL,CAASF,CAAT,EAAYD,QAAQ,CAAC3C,MAAT,GAAkB,CAA9B,CAAD,CAAlB;AACA,cAAM+C,eAAe,GAAG,KAAKL,SAAL,CAAeG,CAAf,CAAxB;AACApE,gBAAM,CAACsE,eAAe,GAAG,CAAnB,EAAsB,qCAAtB,CAAN;AACA,eAAKf,cAAL,CAAoBb,KAAK,CAACyB,CAAD,CAAzB,EAA8BH,YAAY,GAAGM,eAA7C;AACA;AACD,OATD,MASO;AACN,YAAMA,gBAAe,GAAG,KAAKL,SAAL,CAAeC,QAAf,CAAxB;;AACAlE,cAAM,CAACsE,gBAAe,GAAG,CAAnB,EAAsB,qCAAtB,CAAN;AACA,aAAKf,cAAL,CAAoBb,KAApB,EAA2BsB,YAAY,GAAGM,gBAA1C;AACA;;AACD,aAAO,IAAP;AACA;AArRF;AAAA;AAAA,WAuRC,gBAAI;AACH,UAAI,KAAKC,UAAL,EAAJ,EAAuB;AACtB,aAAKC,WAAL,CAAiB,eAAjB,EAAkC,CAAlC;;AACA,aAAKA,WAAL,CAAiB,gBAAjB,EAAmC,CAAnC;AACA;;AACD,aAAO,IAAP;AACA;AAED;;;;;;;;;;;;;AA/RD;AAAA;AAAA,WA2SC,aAAInE,OAAJ,EAAkD;AACjD;AACA,UAAMoE,gBAAgB,GAAG/E,cAAc,CAACW,OAAD,EAAU,CAAC,WAAD,EAAc,SAAd,CAAV,CAAvC,CAFiD,CAGjD;;AACA,WAAKA,OAAL,GAAeZ,SAAS,CAAC,KAAKY,OAAN,EAAeoE,gBAAf,CAAxB;;AACA,WAAK3D,OAAL,CAAa+B,OAAb,CAAqB,eAAK;AAAA,eAAIvC,KAAK,CAACoE,GAAN,CAAUD,gBAAV,CAAJ;AAAA,OAA1B;;AACA,WAAK9D,WAAL,CAAiB+D,GAAjB,CAAqBD,gBAArB;;AACA,aAAO,IAAP;AACA;AAnTF;AAAA;AAAA,WAqTC,eAAG;AACF,aAAO,KAAK9D,WAAL,CAAiBgE,GAAjB,EAAP;AACA;AAED;;;;;AAzTD;AAAA;AAAA,WA6TC,oBAAWhC,IAAX,EAAsB;AACrB,UAAMqB,YAAY,GAAG,KAAKC,SAAL,CAAetB,IAAf,CAArB;;AACA,WAAKrB,aAAL,CAAmBuB,OAAnB,CAA2B,iBAAc;AAAA,YAAXvC,KAAW,SAAXA,KAAW;AACxCA,aAAK,CAACiD,cAAN,CAAqBS,YAArB;AACA,OAFD;;AAGA,aAAO,IAAP;AACA;AAnUF;AAAA;AAAA,WAqUC,mBAAO;AACN;;AACA,WAAKrD,WAAL,CAAiB8B,OAAjB;;AACA,WAAK3B,OAAL,CAAa+B,OAAb,CAAqB,WAAC;AAAA,eAAI+B,CAAC,CAACnC,OAAF,EAAJ;AAAA,OAAtB;;AACA,WAAKnB,aAAL,GAAqB,EAArB;AACA,WAAKE,gBAAL,GAAwB,EAAxB;AACA,WAAKN,OAAL,CAAa2D,aAAb,CAA2B,KAAK5D,UAAhC;AACA,aAAO,IAAP;AACA;AA7UF;AAAA;AAAA,WAgFC,uBAAkB;AACjB,aAAOT,MAAM,CAACC,MAAP,CAAcX,UAAU,CAACK,WAAX,EAAd,EAAwC;AAC9CO,oBAAY,EAAE,EADgC;AAE9CL,eAAO,EAAE,EAFqC;AAG9CC,aAAK,EAAEP;AAHuC,OAAxC,CAAP;AAKA;AAtFF;;AAAA;AAAA,EAAsED,UAAtE","names":["MidiClass","deepMerge","omitFromObject","optionsFromArguments","isArray","isNumber","Instrument","Synth","assert","warn","PolySynth","getDefaults","arguments","options","voice","defaults","Object","assign","maxPolyphony","_dummyVoice","_getNextAvailableVoice","index","_voices","indexOf","splice","_gcTimeout","context","setInterval","_collectGarbage","bind","_activeVoices","length","_availableVoices","push","activeVoiceIndex","findIndex","e","shift","onsilence","_makeVoiceAvailable","connect","output","_averageActiveVoices","Math","max","activeVoices","ceil","firstAvail","isOffline","dispose","notes","time","velocity","forEach","midiNote","note","toMidi","triggerAttack","midi","released","log","event","find","triggerRelease","type","disposed","now","_triggerAttack","_triggerRelease","setTimeout","_scheduleEvent","Array","computedTime","toSeconds","duration","i","d","min","durationSeconds","_syncState","_syncMethod","sanitizedOptions","set","get","v","clearInterval"],"sourceRoot":"","sources":["../../../Tone/instrument/PolySynth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}