{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\n\nexport var Volume = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Volume, _ToneAudioNode);\n\n  var _super = _createSuper(Volume);\n\n  function Volume() {\n    var _this;\n\n    _classCallCheck(this, Volume);\n\n    _this = _super.call(this, optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n    _this.name = \"Volume\";\n    var options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n    _this.input = _this.output = new Gain({\n      context: _this.context,\n      gain: options.volume,\n      units: \"decibels\"\n    });\n    _this.volume = _this.output.gain;\n    readOnly(_assertThisInitialized(_this), \"volume\");\n    _this._unmutedVolume = options.volume; // set the mute initially\n\n    _this.mute = options.mute;\n    return _this;\n  }\n\n  _createClass(Volume, [{\n    key: \"mute\",\n    get:\n    /**\n     * Mute the output.\n     * @example\n     * const vol = new Tone.Volume(-12).toDestination();\n     * const osc = new Tone.Oscillator().connect(vol).start();\n     * // mute the output\n     * vol.mute = true;\n     */\n    function get() {\n      return this.volume.value === -Infinity;\n    },\n    set: function set(mute) {\n      if (!this.mute && mute) {\n        this._unmutedVolume = this.volume.value; // maybe it should ramp here?\n\n        this.volume.value = -Infinity;\n      } else if (this.mute && !mute) {\n        this.volume.value = this._unmutedVolume;\n      }\n    }\n    /**\n     * clean up\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Volume.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n      this.volume.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        mute: false,\n        volume: 0\n      });\n    }\n  }]);\n\n  return Volume;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,IAAT,QAAqB,yBAArB;AAEA,SAASC,aAAT,QAAoD,kCAApD;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAOA;;;;;;;;;AAQA,WAAaC,MAAb;AAAA;;AAAA;;AAiCC;AAAA;;AAAA;;AAEC,8BAAMF,oBAAoB,CAACE,MAAM,CAACC,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,QAAD,CAAlC,CAA1B;AAjCQ,iBAAe,QAAf;AAkCR,QAAMC,OAAO,GAAGL,oBAAoB,CAACE,MAAM,CAACC,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,QAAD,CAAlC,CAApC;AAEA,UAAKE,KAAL,GAAa,MAAKC,MAAL,GAAc,IAAIT,IAAJ,CAAS;AACnCU,aAAO,EAAE,MAAKA,OADqB;AAEnCC,UAAI,EAAEJ,OAAO,CAACK,MAFqB;AAGnCC,WAAK,EAAE;AAH4B,KAAT,CAA3B;AAKA,UAAKD,MAAL,GAAc,MAAKH,MAAL,CAAYE,IAA1B;AACAR,YAAQ,gCAAO,QAAP,CAAR;AACA,UAAKW,cAAL,GAAsBP,OAAO,CAACK,MAA9B,CAZD,CAcC;;AACA,UAAKG,IAAL,GAAYR,OAAO,CAACQ,IAApB;AAfD;AAgBC;;AAjDF;AAAA;AAAA;AA0DC;;;;;;;;AAQA,mBAAQ;AACP,aAAO,KAAKH,MAAL,CAAYI,KAAZ,KAAsB,CAACC,QAA9B;AACA,KApEF;AAAA,SAqEC,aAASF,IAAT,EAAsB;AACrB,UAAI,CAAC,KAAKA,IAAN,IAAcA,IAAlB,EAAwB;AACvB,aAAKD,cAAL,GAAsB,KAAKF,MAAL,CAAYI,KAAlC,CADuB,CAEvB;;AACA,aAAKJ,MAAL,CAAYI,KAAZ,GAAoB,CAACC,QAArB;AACA,OAJD,MAIO,IAAI,KAAKF,IAAL,IAAa,CAACA,IAAlB,EAAwB;AAC9B,aAAKH,MAAL,CAAYI,KAAZ,GAAoB,KAAKF,cAAzB;AACA;AACD;AAED;;;;AA/ED;AAAA;AAAA,WAkFC,mBAAO;AACN;;AACA,WAAKN,KAAL,CAAWU,OAAX;AACA,WAAKN,MAAL,CAAYM,OAAZ;AACA,aAAO,IAAP;AACA;AAvFF;AAAA;AAAA,WAmDC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAcnB,aAAa,CAACI,WAAd,EAAd,EAA2C;AACjDU,YAAI,EAAE,KAD2C;AAEjDH,cAAM,EAAE;AAFyC,OAA3C,CAAP;AAIA;AAxDF;;AAAA;AAAA,EAA4BX,aAA5B","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","Volume","getDefaults","arguments","options","input","output","context","gain","volume","units","_unmutedVolume","mute","value","Infinity","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Volume.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}