{"ast":null,"code":"import _toConsumableArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\n\nexport var Phaser = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Phaser, _StereoEffect);\n\n  var _super = _createSuper(Phaser);\n\n  function Phaser() {\n    var _this2, _this3;\n\n    var _this;\n\n    _classCallCheck(this, Phaser);\n\n    _this = _super.call(this, optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n    _this.name = \"Phaser\";\n    var options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n    _this._lfoL = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._octaves = options.octaves;\n    _this.Q = new Signal({\n      context: _this.context,\n      value: options.Q,\n      units: \"positive\"\n    });\n    _this._filtersL = _this._makeFilters(options.stages, _this._lfoL);\n    _this._filtersR = _this._makeFilters(options.stages, _this._lfoR);\n    _this.frequency = _this._lfoL.frequency;\n    _this.frequency.value = options.frequency; // connect them up\n\n    (_this2 = _this).connectEffectLeft.apply(_this2, _toConsumableArray(_this._filtersL));\n\n    (_this3 = _this).connectEffectRight.apply(_this3, _toConsumableArray(_this._filtersR)); // control the frequency with one LFO\n\n\n    _this._lfoL.frequency.connect(_this._lfoR.frequency); // set the options\n\n\n    _this.baseFrequency = options.baseFrequency;\n    _this.octaves = options.octaves; // start the lfo\n\n    _this._lfoL.start();\n\n    _this._lfoR.start();\n\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"Q\"]);\n    return _this;\n  }\n\n  _createClass(Phaser, [{\n    key: \"_makeFilters\",\n    value: function _makeFilters(stages, connectToFreq) {\n      var filters = []; // make all the filters\n\n      for (var i = 0; i < stages; i++) {\n        var filter = this.context.createBiquadFilter();\n        filter.type = \"allpass\";\n        this.Q.connect(filter.Q);\n        connectToFreq.connect(filter.frequency);\n        filters.push(filter);\n      }\n\n      return filters;\n    }\n    /**\n     * The number of octaves the phase goes above the baseFrequency\n     */\n\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(octaves) {\n      this._octaves = octaves;\n      var max = this._baseFrequency * Math.pow(2, octaves);\n      this._lfoL.max = max;\n      this._lfoR.max = max;\n    }\n    /**\n     * The the base frequency of the filters.\n     */\n\n  }, {\n    key: \"baseFrequency\",\n    get: function get() {\n      return this._baseFrequency;\n    },\n    set: function set(freq) {\n      this._baseFrequency = this.toFrequency(freq);\n      this._lfoL.min = this._baseFrequency;\n      this._lfoR.min = this._baseFrequency;\n      this.octaves = this._octaves;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Phaser.prototype), \"dispose\", this).call(this);\n\n      this.Q.dispose();\n\n      this._lfoL.dispose();\n\n      this._lfoR.dispose();\n\n      this._filtersL.forEach(function (f) {\n        return f.disconnect();\n      });\n\n      this._filtersR.forEach(function (f) {\n        return f.disconnect();\n      });\n\n      this.frequency.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        frequency: 0.5,\n        octaves: 3,\n        stages: 10,\n        Q: 10,\n        baseFrequency: 350\n      });\n    }\n  }]);\n\n  return Phaser;\n}(StereoEffect);","map":{"version":3,"mappings":"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","names":["StereoEffect","optionsFromArguments","LFO","Signal","readOnly","Phaser","getDefaults","arguments","options","_lfoL","context","frequency","min","max","_lfoR","phase","_baseFrequency","toFrequency","baseFrequency","_octaves","octaves","Q","value","units","_filtersL","_makeFilters","stages","_filtersR","connectEffectLeft","connectEffectRight","connect","start","connectToFreq","filters","i","filter","createBiquadFilter","type","push","Math","pow","freq","dispose","forEach","f","disconnect","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/Phaser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}