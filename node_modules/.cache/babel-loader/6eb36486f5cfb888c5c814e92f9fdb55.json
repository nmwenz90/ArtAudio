{"ast":null,"code":"import _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createConvolverNodeRendererFactory = function createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeConvolverNodes = new WeakMap();\n\n    var createConvolverNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeConvolverNode, nativeConvolverNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n\n                if (!nativeConvolverNodeIsOwnedByContext) {\n                  options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                  };\n                  nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n\n                if (!isNativeAudioNodeFaker(nativeConvolverNode)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n\n              case 11:\n                return _context.abrupt(\"return\", nativeConvolverNode);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createConvolverNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeConvolverNode !== undefined) {\n          return Promise.resolve(renderedNativeConvolverNode);\n        }\n\n        return createConvolverNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,kCAAkC,GAAyC,SAA3EA,kCAA2E,CACpFC,yBADoF,EAEpFC,kBAFoF,EAGpFC,uBAHoF,EAIpF;AACA,SAAO,YAAmE;AACtE,QAAMC,4BAA4B,GAAG,IAAIC,OAAJ,EAArC;;AAEA,QAAMC,mBAAmB;AAAA,0EAAG,iBAAOC,KAAP,EAAiCC,yBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,mCADoB,GACEP,kBAAkB,CAA0BK,KAA1B,CADpB,EAGxB;;AACMG,mDAJkB,GAIoBX,gBAAgB,CAACU,mBAAD,EAAsBD,yBAAtB,CAJpC;;AAMxB,oBAAI,CAACE,mCAAL,EAA0C;AAChCC,yBADgC,GACtB;AACZC,0BAAM,EAAEH,mBAAmB,CAACG,MADhB;AAEZC,gCAAY,EAAEJ,mBAAmB,CAACI,YAFtB;AAGZC,oCAAgB,EAAEL,mBAAmB,CAACK,gBAH1B;AAIZC,yCAAqB,EAAEN,mBAAmB,CAACM,qBAJ/B;AAKZC,wCAAoB,EAAE,CAACP,mBAAmB,CAACQ;AAL/B,mBADsB;AAStCR,qCAAmB,GAAGR,yBAAyB,CAACO,yBAAD,EAA4BG,OAA5B,CAA/C;AACH;;AAEDP,4CAA4B,CAACc,GAA7B,CAAiCV,yBAAjC,EAA4DC,mBAA5D;;AAlBwB,qBAoBpBX,sBAAsB,CAACW,mBAAD,CApBF;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAqBdN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,mBAAmB,CAACU,MAApB,CAA2B,CAA3B,CAAnC,CArBT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAuBdhB,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,mBAAnC,CAvBT;;AAAA;AAAA,iDA0BjBA,mBA1BiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAnBH,mBAAmB;AAAA;AAAA;AAAA,OAAzB;;AA6BA,WAAO;AACHc,YADG,kBACIb,KADJ,EAC8BC,yBAD9B,EACmF;AAClF,YAAMa,2BAA2B,GAAGjB,4BAA4B,CAACkB,GAA7B,CAAiCd,yBAAjC,CAApC;;AAEA,YAAIa,2BAA2B,KAAKE,SAApC,EAA+C;AAC3C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,2BAAhB,CAAP;AACH;;AAED,eAAOf,mBAAmB,CAACC,KAAD,EAAQC,yBAAR,CAA1B;AACH;AATE,KAAP;AAWH,GA3CD;AA4CH,CAjDM","names":["isNativeAudioNodeFaker","isOwnedByContext","createConvolverNodeRendererFactory","createNativeConvolverNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeConvolverNodes","WeakMap","createConvolverNode","proxy","nativeOfflineAudioContext","nativeConvolverNode","nativeConvolverNodeIsOwnedByContext","options","buffer","channelCount","channelCountMode","channelInterpretation","disableNormalization","normalize","set","inputs","render","renderedNativeConvolverNode","get","undefined","Promise","resolve"],"sourceRoot":"","sources":["../../../src/factories/convolver-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}