{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Param } from \"../../core/context/Param\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).\n * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the \"rolloff\" value.\n * @category Component\n */\n\nexport var BiquadFilter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(BiquadFilter, _ToneAudioNode);\n\n  var _super = _createSuper(BiquadFilter);\n\n  function BiquadFilter() {\n    var _this;\n\n    _classCallCheck(this, BiquadFilter);\n\n    _this = _super.call(this, optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"BiquadFilter\";\n    var options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this._filter = _this.context.createBiquadFilter();\n    _this.input = _this.output = _this._filter;\n    _this.Q = new Param({\n      context: _this.context,\n      units: \"number\",\n      value: options.Q,\n      param: _this._filter.Q\n    });\n    _this.frequency = new Param({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      param: _this._filter.frequency\n    });\n    _this.detune = new Param({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune,\n      param: _this._filter.detune\n    });\n    _this.gain = new Param({\n      context: _this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain,\n      param: _this._filter.gain\n    });\n    _this.type = options.type;\n    return _this;\n  }\n\n  _createClass(BiquadFilter, [{\n    key: \"type\",\n    get:\n    /**\n     * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n     * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n     */\n    function get() {\n      return this._filter.type;\n    },\n    set: function set(type) {\n      var types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n      assert(types.indexOf(type) !== -1, \"Invalid filter type: \".concat(type));\n      this._filter.type = type;\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n\n  }, {\n    key: \"getFrequencyResponse\",\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      // start with all 1s\n      var freqValues = new Float32Array(len);\n\n      for (var i = 0; i < len; i++) {\n        var norm = Math.pow(i / len, 2);\n        var freq = norm * (20000 - 20) + 20;\n        freqValues[i] = freq;\n      }\n\n      var magValues = new Float32Array(len);\n      var phaseValues = new Float32Array(len); // clone the filter to remove any connections which may be changing the value\n\n      var filterClone = this.context.createBiquadFilter();\n      filterClone.type = this.type;\n      filterClone.Q.value = this.Q.value;\n      filterClone.frequency.value = this.frequency.value;\n      filterClone.gain.value = this.gain.value;\n      filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n      return magValues;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(BiquadFilter.prototype), \"dispose\", this).call(this);\n\n      this._filter.disconnect();\n\n      this.Q.dispose();\n      this.frequency.dispose();\n      this.gain.dispose();\n      this.detune.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        type: \"lowpass\",\n        frequency: 350,\n        detune: 0,\n        gain: 0\n      });\n    }\n  }]);\n\n  return BiquadFilter;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Param","assert","BiquadFilter","getDefaults","arguments","options","_filter","context","createBiquadFilter","input","output","Q","units","value","param","frequency","detune","gain","convert","type","types","indexOf","len","freqValues","Float32Array","i","norm","Math","pow","freq","magValues","phaseValues","filterClone","getFrequencyResponse","disconnect","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/filter/BiquadFilter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}