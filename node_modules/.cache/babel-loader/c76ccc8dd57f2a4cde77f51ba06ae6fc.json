{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\n\nexport var Convolver = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Convolver, _ToneAudioNode);\n\n  var _super = _createSuper(Convolver);\n\n  function Convolver() {\n    var _this;\n\n    _classCallCheck(this, Convolver);\n\n    _this = _super.call(this, optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n\n    _this._convolver = _this.context.createConvolver();\n    var options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this._buffer = new ToneAudioBuffer(options.url, function (buffer) {\n      _this.buffer = buffer;\n      options.onload();\n    });\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    }); // set if it's already loaded, set it immediately\n\n    if (_this._buffer.loaded) {\n      _this.buffer = _this._buffer;\n    } // initially set normalization\n\n\n    _this.normalize = options.normalize; // connect it up\n\n    _this.input.chain(_this._convolver, _this.output);\n\n    return _this;\n  }\n\n  _createClass(Convolver, [{\n    key: \"load\",\n    value:\n    /**\n     * Load an impulse response url as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * @param url The url of the buffer to load. filetype support depends on the browser.\n     */\n    function load(url) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._buffer.load(url);\n\n              case 2:\n                this.buffer = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * The convolver's buffer\n     */\n\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      if (this._buffer.length) {\n        return this._buffer;\n      } else {\n        return null;\n      }\n    },\n    set: function set(buffer) {\n      if (buffer) {\n        this._buffer.set(buffer);\n      } // if it's already got a buffer, create a new one\n\n\n      if (this._convolver.buffer) {\n        // disconnect the old one\n        this.input.disconnect();\n\n        this._convolver.disconnect(); // create and connect a new one\n\n\n        this._convolver = this.context.createConvolver();\n        this.input.chain(this._convolver, this.output);\n      }\n\n      var buff = this._buffer.get();\n\n      this._convolver.buffer = buff ? buff : null;\n    }\n    /**\n     * The normalize property of the ConvolverNode interface is a boolean that\n     * controls whether the impulse response from the buffer will be scaled by\n     * an equal-power normalization when the buffer attribute is set, or not.\n     */\n\n  }, {\n    key: \"normalize\",\n    get: function get() {\n      return this._convolver.normalize;\n    },\n    set: function set(norm) {\n      this._convolver.normalize = norm;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Convolver.prototype), \"dispose\", this).call(this);\n\n      this._buffer.dispose();\n\n      this._convolver.disconnect();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        normalize: true,\n        onload: noOp\n      });\n    }\n  }]);\n\n  return Convolver;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","ToneAudioBuffer","optionsFromArguments","Gain","noOp","Convolver","getDefaults","arguments","context","createConvolver","options","_buffer","url","buffer","onload","input","output","loaded","normalize","chain","_convolver","load","length","set","disconnect","buff","get","norm","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/filter/Convolver.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}