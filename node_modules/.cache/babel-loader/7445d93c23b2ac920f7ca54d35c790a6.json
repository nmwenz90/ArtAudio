{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\n\nexport var Channel = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Channel, _ToneAudioNode);\n\n  var _super = _createSuper(Channel);\n\n  function Channel() {\n    var _this;\n\n    _classCallCheck(this, Channel);\n\n    _this = _super.call(this, optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n    _this.name = \"Channel\";\n    var options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n    _this._solo = _this.input = new Solo({\n      solo: options.solo,\n      context: _this.context\n    });\n    _this._panVol = _this.output = new PanVol({\n      context: _this.context,\n      pan: options.pan,\n      volume: options.volume,\n      mute: options.mute,\n      channelCount: options.channelCount\n    });\n    _this.pan = _this._panVol.pan;\n    _this.volume = _this._panVol.volume;\n\n    _this._solo.connect(_this._panVol);\n\n    readOnly(_assertThisInitialized(_this), [\"pan\", \"volume\"]);\n    return _this;\n  }\n\n  _createClass(Channel, [{\n    key: \"solo\",\n    get:\n    /**\n     * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n     */\n    function get() {\n      return this._solo.solo;\n    },\n    set: function set(solo) {\n      this._solo.solo = solo;\n    }\n    /**\n     * If the current instance is muted, i.e. another instance is soloed,\n     * or the channel is muted\n     */\n\n  }, {\n    key: \"muted\",\n    get: function get() {\n      return this._solo.muted || this.mute;\n    }\n    /**\n     * Mute/unmute the volume\n     */\n\n  }, {\n    key: \"mute\",\n    get: function get() {\n      return this._panVol.mute;\n    },\n    set: function set(mute) {\n      this._panVol.mute = mute;\n    }\n    /**\n     * Get the gain node belonging to the bus name. Create it if\n     * it doesn't exist\n     * @param name The bus name\n     */\n\n  }, {\n    key: \"_getBus\",\n    value: function _getBus(name) {\n      if (!Channel.buses.has(name)) {\n        Channel.buses.set(name, new Gain({\n          context: this.context\n        }));\n      }\n\n      return Channel.buses.get(name);\n    }\n    /**\n     * Send audio to another channel using a string. `send` is a lot like\n     * [[connect]], except it uses a string instead of an object. This can\n     * be useful in large applications to decouple sections since [[send]]\n     * and [[receive]] can be invoked separately in order to connect an object\n     * @param name The channel name to send the audio\n     * @param volume The amount of the signal to send.\n     * \tDefaults to 0db, i.e. send the entire signal\n     * @returns Returns the gain node of this connection.\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(name) {\n      var volume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var bus = this._getBus(name);\n\n      var sendKnob = new Gain({\n        context: this.context,\n        units: \"decibels\",\n        gain: volume\n      });\n      this.connect(sendKnob);\n      sendKnob.connect(bus);\n      return sendKnob;\n    }\n    /**\n     * Receive audio from a channel which was connected with [[send]].\n     * @param name The channel name to receive audio from.\n     */\n\n  }, {\n    key: \"receive\",\n    value: function receive(name) {\n      var bus = this._getBus(name);\n\n      bus.connect(this);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Channel.prototype), \"dispose\", this).call(this);\n\n      this._panVol.dispose();\n\n      this.pan.dispose();\n      this.volume.dispose();\n\n      this._solo.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        pan: 0,\n        volume: 0,\n        mute: false,\n        solo: false,\n        channelCount: 1\n      });\n    }\n  }]);\n\n  return Channel;\n}(ToneAudioNode);\n/**\n * Store the send/receive channels by name.\n */\n\nChannel.buses = new Map();","map":{"version":3,"mappings":";;;;;;;AACA,SAAgCA,aAAhC,QAA2E,kCAA3E;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,IAAT,QAAqB,yBAArB;AAUA;;;;;;;;;AAQA,WAAaC,OAAb;AAAA;;AAAA;;AAmCC;AAAA;;AAAA;;AACC,8BAAML,oBAAoB,CAACK,OAAO,CAACC,WAAR,EAAD,EAAwBC,SAAxB,EAAmC,CAAC,QAAD,EAAW,KAAX,CAAnC,CAA1B;AAlCQ,iBAAe,SAAf;AAmCR,QAAMC,OAAO,GAAGR,oBAAoB,CAACK,OAAO,CAACC,WAAR,EAAD,EAAwBC,SAAxB,EAAmC,CAAC,QAAD,EAAW,KAAX,CAAnC,CAApC;AAEA,UAAKE,KAAL,GAAa,MAAKC,KAAL,GAAa,IAAIT,IAAJ,CAAS;AAClCU,UAAI,EAAEH,OAAO,CAACG,IADoB;AAElCC,aAAO,EAAE,MAAKA;AAFoB,KAAT,CAA1B;AAIA,UAAKC,OAAL,GAAe,MAAKC,MAAL,GAAc,IAAIZ,MAAJ,CAAW;AACvCU,aAAO,EAAE,MAAKA,OADyB;AAEvCG,SAAG,EAAEP,OAAO,CAACO,GAF0B;AAGvCC,YAAM,EAAER,OAAO,CAACQ,MAHuB;AAIvCC,UAAI,EAAET,OAAO,CAACS,IAJyB;AAKvCC,kBAAY,EAAEV,OAAO,CAACU;AALiB,KAAX,CAA7B;AAOA,UAAKH,GAAL,GAAW,MAAKF,OAAL,CAAaE,GAAxB;AACA,UAAKC,MAAL,GAAc,MAAKH,OAAL,CAAaG,MAA3B;;AAEA,UAAKP,KAAL,CAAWU,OAAX,CAAmB,MAAKN,OAAxB;;AACAV,YAAQ,gCAAO,CAAC,KAAD,EAAQ,QAAR,CAAP,CAAR;AAnBD;AAoBC;;AAvDF;AAAA;AAAA;AAmEC;;;AAGA,mBAAQ;AACP,aAAO,KAAKM,KAAL,CAAWE,IAAlB;AACA,KAxEF;AAAA,SAyEC,aAASA,IAAT,EAAa;AACZ,WAAKF,KAAL,CAAWE,IAAX,GAAkBA,IAAlB;AACA;AAED;;;;;AA7ED;AAAA;AAAA,SAiFC,eAAS;AACR,aAAO,KAAKF,KAAL,CAAWW,KAAX,IAAoB,KAAKH,IAAhC;AACA;AAED;;;;AArFD;AAAA;AAAA,SAwFC,eAAQ;AACP,aAAO,KAAKJ,OAAL,CAAaI,IAApB;AACA,KA1FF;AAAA,SA2FC,aAASA,IAAT,EAAa;AACZ,WAAKJ,OAAL,CAAaI,IAAb,GAAoBA,IAApB;AACA;AAOD;;;;;;AApGD;AAAA;AAAA,WAyGS,iBAAQI,IAAR,EAAoB;AAC3B,UAAI,CAAChB,OAAO,CAACiB,KAAR,CAAcC,GAAd,CAAkBF,IAAlB,CAAL,EAA8B;AAC7BhB,eAAO,CAACiB,KAAR,CAAcE,GAAd,CAAkBH,IAAlB,EAAwB,IAAIjB,IAAJ,CAAS;AAAEQ,iBAAO,EAAE,KAAKA;AAAhB,SAAT,CAAxB;AACA;;AACD,aAAOP,OAAO,CAACiB,KAAR,CAAcG,GAAd,CAAkBJ,IAAlB,CAAP;AACA;AAED;;;;;;;;;;;AAhHD;AAAA;AAAA,WA0HC,cAAKA,IAAL,EAAuC;AAAA,UAApBL,MAAoB,uEAAD,CAAC;;AACtC,UAAMU,GAAG,GAAG,KAAKC,OAAL,CAAaN,IAAb,CAAZ;;AACA,UAAMO,QAAQ,GAAG,IAAIxB,IAAJ,CAAS;AACzBQ,eAAO,EAAE,KAAKA,OADW;AAEzBiB,aAAK,EAAE,UAFkB;AAGzBC,YAAI,EAAEd;AAHmB,OAAT,CAAjB;AAKA,WAAKG,OAAL,CAAaS,QAAb;AACAA,cAAQ,CAACT,OAAT,CAAiBO,GAAjB;AACA,aAAOE,QAAP;AACA;AAED;;;;;AAtID;AAAA;AAAA,WA0IC,iBAAQP,IAAR,EAAoB;AACnB,UAAMK,GAAG,GAAG,KAAKC,OAAL,CAAaN,IAAb,CAAZ;;AACAK,SAAG,CAACP,OAAJ,CAAY,IAAZ;AACA,aAAO,IAAP;AACA;AA9IF;AAAA;AAAA,WAgJC,mBAAO;AACN;;AACA,WAAKN,OAAL,CAAakB,OAAb;;AACA,WAAKhB,GAAL,CAASgB,OAAT;AACA,WAAKf,MAAL,CAAYe,OAAZ;;AACA,WAAKtB,KAAL,CAAWsB,OAAX;;AACA,aAAO,IAAP;AACA;AAvJF;AAAA;AAAA,WAyDC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAclC,aAAa,CAACO,WAAd,EAAd,EAA2C;AACjDS,WAAG,EAAE,CAD4C;AAEjDC,cAAM,EAAE,CAFyC;AAGjDC,YAAI,EAAE,KAH2C;AAIjDN,YAAI,EAAE,KAJ2C;AAKjDO,oBAAY,EAAE;AALmC,OAA3C,CAAP;AAOA;AAjEF;;AAAA;AAAA,EAA6BnB,aAA7B;AA+FC;;;;AAGeM,gBAA2B,IAAI6B,GAAJ,EAA3B","names":["ToneAudioNode","optionsFromArguments","Solo","PanVol","readOnly","Gain","Channel","getDefaults","arguments","options","_solo","input","solo","context","_panVol","output","pan","volume","mute","channelCount","connect","muted","name","buses","has","set","get","bus","_getBus","sendKnob","units","gain","dispose","Object","assign","Map"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Channel.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}