{"ast":null,"code":"/*!\n * @pixi/runner - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/runner is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\n\n/**\n * A Runner is a highly performant and simple alternative to signals. Best used in situations\n * where events are dispatched to many objects at high frequency (say every frame!)\n *\n *\n * like a signal..\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myObject = {\n *     loaded: new Runner('loaded')\n * }\n *\n * const listener = {\n *     loaded: function(){\n *         // thin\n *     }\n * }\n *\n * myObject.loaded.add(listener);\n *\n * myObject.loaded.emit();\n * ```\n *\n * Or for handling calling the same function on many items\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myGame = {\n *     update: new Runner('update')\n * }\n *\n * const gameObject = {\n *     update: function(time){\n *         // update my gamey state\n *     }\n * }\n *\n * myGame.update.add(gameObject);\n *\n * myGame.update.emit(time);\n * ```\n *\n * @memberof PIXI\n */\nvar Runner =\n/** @class */\nfunction () {\n  /**\n   * @param name - The function name that will be executed on the listeners added to this Runner.\n   */\n  function Runner(name) {\n    this.items = [];\n    this._name = name;\n    this._aliasCount = 0;\n  }\n  /**\n   * Dispatch/Broadcast Runner to all listeners added to the queue.\n   *\n   * @param {...any} params - (optional) parameters to pass to each listener\n   */\n\n\n  Runner.prototype.emit = function (a0, a1, a2, a3, a4, a5, a6, a7) {\n    if (arguments.length > 8) {\n      throw new Error('max arguments reached');\n    }\n\n    var _a = this,\n        name = _a.name,\n        items = _a.items;\n\n    this._aliasCount++;\n\n    for (var i = 0, len = items.length; i < len; i++) {\n      items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n    }\n\n    if (items === this.items) {\n      this._aliasCount--;\n    }\n\n    return this;\n  };\n\n  Runner.prototype.ensureNonAliasedItems = function () {\n    if (this._aliasCount > 0 && this.items.length > 1) {\n      this._aliasCount = 0;\n      this.items = this.items.slice(0);\n    }\n  };\n  /**\n   * Add a listener to the Runner\n   *\n   * Runners do not need to have scope or functions passed to them.\n   * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n   * as the name provided to the Runner when it was created.\n   *\n   * Eg A listener passed to this Runner will require a 'complete' function.\n   *\n   * ```\n   * import { Runner } from '@pixi/runner';\n   *\n   * const complete = new Runner('complete');\n   * ```\n   *\n   * The scope used will be the object itself.\n   *\n   * @param {any} item - The object that will be listening.\n   */\n\n\n  Runner.prototype.add = function (item) {\n    if (item[this._name]) {\n      this.ensureNonAliasedItems();\n      this.remove(item);\n      this.items.push(item);\n    }\n\n    return this;\n  };\n  /**\n   * Remove a single listener from the dispatch queue.\n   *\n   * @param {any} item - The listener that you would like to remove.\n   */\n\n\n  Runner.prototype.remove = function (item) {\n    var index = this.items.indexOf(item);\n\n    if (index !== -1) {\n      this.ensureNonAliasedItems();\n      this.items.splice(index, 1);\n    }\n\n    return this;\n  };\n  /**\n   * Check to see if the listener is already in the Runner\n   *\n   * @param {any} item - The listener that you would like to check.\n   */\n\n\n  Runner.prototype.contains = function (item) {\n    return this.items.indexOf(item) !== -1;\n  };\n  /** Remove all listeners from the Runner */\n\n\n  Runner.prototype.removeAll = function () {\n    this.ensureNonAliasedItems();\n    this.items.length = 0;\n    return this;\n  };\n  /** Remove all references, don't use after this. */\n\n\n  Runner.prototype.destroy = function () {\n    this.removeAll();\n    this.items = null;\n    this._name = null;\n  };\n\n  Object.defineProperty(Runner.prototype, \"empty\", {\n    /**\n     * `true` if there are no this Runner contains no listeners\n     *\n     * @readonly\n     */\n    get: function get() {\n      return this.items.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Runner.prototype, \"name\", {\n    /**\n     * The name of the runner.\n     *\n     * @readonly\n     */\n    get: function get() {\n      return this._name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Runner;\n}();\n\nObject.defineProperties(Runner.prototype, {\n  /**\n   * Alias for `emit`\n   * @memberof PIXI.Runner#\n   * @method dispatch\n   * @see PIXI.Runner#emit\n   */\n  dispatch: {\n    value: Runner.prototype.emit\n  },\n\n  /**\n   * Alias for `emit`\n   * @memberof PIXI.Runner#\n   * @method run\n   * @see PIXI.Runner#emit\n   */\n  run: {\n    value: Runner.prototype.emit\n  }\n});\nexport { Runner };","map":{"version":3,"mappings":"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","names":["name","items","_name","_aliasCount","Runner","a0","a1","a2","a3","a4","a5","a6","a7","arguments","length","Error","i","len","slice","item","ensureNonAliasedItems","remove","push","index","indexOf","splice","removeAll","Object","defineProperties","prototype","dispatch","value","emit","run"],"sources":["../../src/Runner.ts"],"sourcesContent":["/**\n * A Runner is a highly performant and simple alternative to signals. Best used in situations\n * where events are dispatched to many objects at high frequency (say every frame!)\n *\n *\n * like a signal..\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myObject = {\n *     loaded: new Runner('loaded')\n * }\n *\n * const listener = {\n *     loaded: function(){\n *         // thin\n *     }\n * }\n *\n * myObject.loaded.add(listener);\n *\n * myObject.loaded.emit();\n * ```\n *\n * Or for handling calling the same function on many items\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myGame = {\n *     update: new Runner('update')\n * }\n *\n * const gameObject = {\n *     update: function(time){\n *         // update my gamey state\n *     }\n * }\n *\n * myGame.update.add(gameObject);\n *\n * myGame.update.emit(time);\n * ```\n *\n * @memberof PIXI\n */\nexport class Runner\n{\n    public items: any[];\n    private _name: string;\n    private _aliasCount: number;\n\n    /**\n     * @param name - The function name that will be executed on the listeners added to this Runner.\n     */\n    constructor(name: string)\n    {\n        this.items = [];\n        this._name = name;\n        this._aliasCount = 0;\n    }\n\n    /**\n     * Dispatch/Broadcast Runner to all listeners added to the queue.\n     *\n     * @param {...any} params - (optional) parameters to pass to each listener\n     */\n    public emit(a0?: unknown, a1?: unknown, a2?: unknown, a3?: unknown,\n        a4?: unknown, a5?: unknown, a6?: unknown, a7?: unknown): this\n    {\n        if (arguments.length > 8)\n        {\n            throw new Error('max arguments reached');\n        }\n\n        const { name, items } = this;\n\n        this._aliasCount++;\n\n        for (let i = 0, len = items.length; i < len; i++)\n        {\n            items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n        }\n\n        if (items === this.items)\n        {\n            this._aliasCount--;\n        }\n\n        return this;\n    }\n\n    private ensureNonAliasedItems(): void\n    {\n        if (this._aliasCount > 0 && this.items.length > 1)\n        {\n            this._aliasCount = 0;\n            this.items = this.items.slice(0);\n        }\n    }\n\n    /**\n     * Add a listener to the Runner\n     *\n     * Runners do not need to have scope or functions passed to them.\n     * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n     * as the name provided to the Runner when it was created.\n     *\n     * Eg A listener passed to this Runner will require a 'complete' function.\n     *\n     * ```\n     * import { Runner } from '@pixi/runner';\n     *\n     * const complete = new Runner('complete');\n     * ```\n     *\n     * The scope used will be the object itself.\n     *\n     * @param {any} item - The object that will be listening.\n     */\n    public add(item: unknown): this\n    {\n        if ((item as any)[this._name])\n        {\n            this.ensureNonAliasedItems();\n            this.remove(item);\n            this.items.push(item);\n        }\n\n        return this;\n    }\n\n    /**\n     * Remove a single listener from the dispatch queue.\n     *\n     * @param {any} item - The listener that you would like to remove.\n     */\n    public remove(item: unknown): this\n    {\n        const index = this.items.indexOf(item);\n\n        if (index !== -1)\n        {\n            this.ensureNonAliasedItems();\n            this.items.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    /**\n     * Check to see if the listener is already in the Runner\n     *\n     * @param {any} item - The listener that you would like to check.\n     */\n    public contains(item: unknown): boolean\n    {\n        return this.items.indexOf(item) !== -1;\n    }\n\n    /** Remove all listeners from the Runner */\n    public removeAll(): this\n    {\n        this.ensureNonAliasedItems();\n        this.items.length = 0;\n\n        return this;\n    }\n\n    /** Remove all references, don't use after this. */\n    public destroy(): void\n    {\n        this.removeAll();\n        this.items = null;\n        this._name = null;\n    }\n\n    /**\n     * `true` if there are no this Runner contains no listeners\n     *\n     * @readonly\n     */\n    public get empty(): boolean\n    {\n        return this.items.length === 0;\n    }\n\n    /**\n     * The name of the runner.\n     *\n     * @readonly\n     */\n    public get name(): string\n    {\n        return this._name;\n    }\n}\n\nObject.defineProperties(Runner.prototype, {\n    /**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method dispatch\n     * @see PIXI.Runner#emit\n     */\n    dispatch: { value: Runner.prototype.emit },\n    /**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method run\n     * @see PIXI.Runner#emit\n     */\n    run: { value: Runner.prototype.emit },\n});\n"]},"metadata":{},"sourceType":"module"}