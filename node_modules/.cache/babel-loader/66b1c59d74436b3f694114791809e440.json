{"ast":null,"code":"/*!\n * @pixi/mesh-extras - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/mesh-extras is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { MeshGeometry, Mesh, MeshMaterial } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n/**\n * @memberof PIXI\n */\n\n\nvar PlaneGeometry =\n/** @class */\nfunction (_super) {\n  __extends(PlaneGeometry, _super);\n  /**\n   * @param width - The width of the plane.\n   * @param height - The height of the plane.\n   * @param segWidth - Number of horizontal segments.\n   * @param segHeight - Number of vertical segments.\n   */\n\n\n  function PlaneGeometry(width, height, segWidth, segHeight) {\n    if (width === void 0) {\n      width = 100;\n    }\n\n    if (height === void 0) {\n      height = 100;\n    }\n\n    if (segWidth === void 0) {\n      segWidth = 10;\n    }\n\n    if (segHeight === void 0) {\n      segHeight = 10;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.segWidth = segWidth;\n    _this.segHeight = segHeight;\n    _this.width = width;\n    _this.height = height;\n\n    _this.build();\n\n    return _this;\n  }\n  /**\n   * Refreshes plane coordinates\n   * @private\n   */\n\n\n  PlaneGeometry.prototype.build = function () {\n    var total = this.segWidth * this.segHeight;\n    var verts = [];\n    var uvs = [];\n    var indices = [];\n    var segmentsX = this.segWidth - 1;\n    var segmentsY = this.segHeight - 1;\n    var sizeX = this.width / segmentsX;\n    var sizeY = this.height / segmentsY;\n\n    for (var i = 0; i < total; i++) {\n      var x = i % this.segWidth;\n      var y = i / this.segWidth | 0;\n      verts.push(x * sizeX, y * sizeY);\n      uvs.push(x / segmentsX, y / segmentsY);\n    }\n\n    var totalSub = segmentsX * segmentsY;\n\n    for (var i = 0; i < totalSub; i++) {\n      var xpos = i % segmentsX;\n      var ypos = i / segmentsX | 0;\n      var value = ypos * this.segWidth + xpos;\n      var value2 = ypos * this.segWidth + xpos + 1;\n      var value3 = (ypos + 1) * this.segWidth + xpos;\n      var value4 = (ypos + 1) * this.segWidth + xpos + 1;\n      indices.push(value, value2, value3, value2, value4, value3);\n    }\n\n    this.buffers[0].data = new Float32Array(verts);\n    this.buffers[1].data = new Float32Array(uvs);\n    this.indexBuffer.data = new Uint16Array(indices); // ensure that the changes are uploaded\n\n    this.buffers[0].update();\n    this.buffers[1].update();\n    this.indexBuffer.update();\n  };\n\n  return PlaneGeometry;\n}(MeshGeometry);\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @memberof PIXI\n */\n\n\nvar RopeGeometry =\n/** @class */\nfunction (_super) {\n  __extends(RopeGeometry, _super);\n  /**\n   * @param width - The width (i.e., thickness) of the rope.\n   * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n   * @param textureScale - By default the rope texture will be stretched to match\n   *     rope length. If textureScale is positive this value will be treated as a scaling\n   *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n   *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n   *     then set textureScale=1 to keep the original texture pixel size.\n   *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n   *     i.e. set textureScale=0.5 to scale it down twice.\n   */\n\n\n  function RopeGeometry(width, points, textureScale) {\n    if (width === void 0) {\n      width = 200;\n    }\n\n    if (textureScale === void 0) {\n      textureScale = 0;\n    }\n\n    var _this = _super.call(this, new Float32Array(points.length * 4), new Float32Array(points.length * 4), new Uint16Array((points.length - 1) * 6)) || this;\n\n    _this.points = points;\n    _this._width = width;\n    _this.textureScale = textureScale;\n\n    _this.build();\n\n    return _this;\n  }\n\n  Object.defineProperty(RopeGeometry.prototype, \"width\", {\n    /**\n     * The width (i.e., thickness) of the rope.\n     *\n     * @readOnly\n     */\n    get: function get() {\n      return this._width;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Refreshes Rope indices and uvs */\n\n  RopeGeometry.prototype.build = function () {\n    var points = this.points;\n\n    if (!points) {\n      return;\n    }\n\n    var vertexBuffer = this.getBuffer('aVertexPosition');\n    var uvBuffer = this.getBuffer('aTextureCoord');\n    var indexBuffer = this.getIndex(); // if too little points, or texture hasn't got UVs set yet just move on.\n\n    if (points.length < 1) {\n      return;\n    } // if the number of points has changed we will need to recreate the arraybuffers\n\n\n    if (vertexBuffer.data.length / 4 !== points.length) {\n      vertexBuffer.data = new Float32Array(points.length * 4);\n      uvBuffer.data = new Float32Array(points.length * 4);\n      indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n    }\n\n    var uvs = uvBuffer.data;\n    var indices = indexBuffer.data;\n    uvs[0] = 0;\n    uvs[1] = 0;\n    uvs[2] = 0;\n    uvs[3] = 1;\n    var amount = 0;\n    var prev = points[0];\n    var textureWidth = this._width * this.textureScale;\n    var total = points.length; // - 1;\n\n    for (var i = 0; i < total; i++) {\n      // time to do some smart drawing!\n      var index = i * 4;\n\n      if (this.textureScale > 0) {\n        // calculate pixel distance from previous point\n        var dx = prev.x - points[i].x;\n        var dy = prev.y - points[i].y;\n        var distance = Math.sqrt(dx * dx + dy * dy);\n        prev = points[i];\n        amount += distance / textureWidth;\n      } else {\n        // stretch texture\n        amount = i / (total - 1);\n      }\n\n      uvs[index] = amount;\n      uvs[index + 1] = 0;\n      uvs[index + 2] = amount;\n      uvs[index + 3] = 1;\n    }\n\n    var indexCount = 0;\n\n    for (var i = 0; i < total - 1; i++) {\n      var index = i * 2;\n      indices[indexCount++] = index;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 2;\n      indices[indexCount++] = index + 1;\n      indices[indexCount++] = index + 3;\n    } // ensure that the changes are uploaded\n\n\n    uvBuffer.update();\n    indexBuffer.update();\n    this.updateVertices();\n  };\n  /**\n   * refreshes vertices of Rope mesh\n   */\n\n\n  RopeGeometry.prototype.updateVertices = function () {\n    var points = this.points;\n\n    if (points.length < 1) {\n      return;\n    }\n\n    var lastPoint = points[0];\n    var nextPoint;\n    var perpX = 0;\n    var perpY = 0;\n    var vertices = this.buffers[0].data;\n    var total = points.length;\n\n    for (var i = 0; i < total; i++) {\n      var point = points[i];\n      var index = i * 4;\n\n      if (i < points.length - 1) {\n        nextPoint = points[i + 1];\n      } else {\n        nextPoint = point;\n      }\n\n      perpY = -(nextPoint.x - lastPoint.x);\n      perpX = nextPoint.y - lastPoint.y;\n      var perpLength = Math.sqrt(perpX * perpX + perpY * perpY);\n      var num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n      perpX /= perpLength;\n      perpY /= perpLength;\n      perpX *= num;\n      perpY *= num;\n      vertices[index] = point.x + perpX;\n      vertices[index + 1] = point.y + perpY;\n      vertices[index + 2] = point.x - perpX;\n      vertices[index + 3] = point.y - perpY;\n      lastPoint = point;\n    }\n\n    this.buffers[0].update();\n  };\n\n  RopeGeometry.prototype.update = function () {\n    if (this.textureScale > 0) {\n      this.build(); // we need to update UVs\n    } else {\n      this.updateVertices();\n    }\n  };\n\n  return RopeGeometry;\n}(MeshGeometry);\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @memberof PIXI\n */\n\n\nvar SimpleRope =\n/** @class */\nfunction (_super) {\n  __extends(SimpleRope, _super);\n  /**\n   * @param texture - The texture to use on the rope.\n   * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n   * @param {number} textureScale - Optional. Positive values scale rope texture\n   * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n   * and downsampling here. If set to zero, texture will be stretched instead.\n   */\n\n\n  function SimpleRope(texture, points, textureScale) {\n    if (textureScale === void 0) {\n      textureScale = 0;\n    }\n\n    var _this = this;\n\n    var ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n    var meshMaterial = new MeshMaterial(texture);\n\n    if (textureScale > 0) {\n      // attempt to set UV wrapping, will fail on non-power of two textures\n      texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n    }\n\n    _this = _super.call(this, ropeGeometry, meshMaterial) || this;\n    /**\n     * re-calculate vertices by rope points each frame\n     *\n     * @member {boolean}\n     */\n\n    _this.autoUpdate = true;\n    return _this;\n  }\n\n  SimpleRope.prototype._render = function (renderer) {\n    var geometry = this.geometry;\n\n    if (this.autoUpdate || geometry._width !== this.shader.texture.height) {\n      geometry._width = this.shader.texture.height;\n      geometry.update();\n    }\n\n    _super.prototype._render.call(this, renderer);\n  };\n\n  return SimpleRope;\n}(Mesh);\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @memberof PIXI\n */\n\n\nvar SimplePlane =\n/** @class */\nfunction (_super) {\n  __extends(SimplePlane, _super);\n  /**\n   * @param texture - The texture to use on the SimplePlane.\n   * @param verticesX - The number of vertices in the x-axis\n   * @param verticesY - The number of vertices in the y-axis\n   */\n\n\n  function SimplePlane(texture, verticesX, verticesY) {\n    var _this = this;\n\n    var planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n    var meshMaterial = new MeshMaterial(Texture.WHITE);\n    _this = _super.call(this, planeGeometry, meshMaterial) || this; // lets call the setter to ensure all necessary updates are performed\n\n    _this.texture = texture;\n    _this.autoResize = true;\n    return _this;\n  }\n  /**\n   * Method used for overrides, to do something in case texture frame was changed.\n   * Meshes based on plane can override it and change more details based on texture.\n   */\n\n\n  SimplePlane.prototype.textureUpdated = function () {\n    this._textureID = this.shader.texture._updateID;\n    var geometry = this.geometry;\n    var _a = this.shader.texture,\n        width = _a.width,\n        height = _a.height;\n\n    if (this.autoResize && (geometry.width !== width || geometry.height !== height)) {\n      geometry.width = this.shader.texture.width;\n      geometry.height = this.shader.texture.height;\n      geometry.build();\n    }\n  };\n\n  Object.defineProperty(SimplePlane.prototype, \"texture\", {\n    get: function get() {\n      return this.shader.texture;\n    },\n    set: function set(value) {\n      // Track texture same way sprite does.\n      // For generated meshes like NineSlicePlane it can change the geometry.\n      // Unfortunately, this method might not work if you directly change texture in material.\n      if (this.shader.texture === value) {\n        return;\n      }\n\n      this.shader.texture = value;\n      this._textureID = -1;\n\n      if (value.baseTexture.valid) {\n        this.textureUpdated();\n      } else {\n        value.once('update', this.textureUpdated, this);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SimplePlane.prototype._render = function (renderer) {\n    if (this._textureID !== this.shader.texture._updateID) {\n      this.textureUpdated();\n    }\n\n    _super.prototype._render.call(this, renderer);\n  };\n\n  SimplePlane.prototype.destroy = function (options) {\n    this.shader.texture.off('update', this.textureUpdated, this);\n\n    _super.prototype.destroy.call(this, options);\n  };\n\n  return SimplePlane;\n}(Mesh);\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @memberof PIXI\n */\n\n\nvar SimpleMesh =\n/** @class */\nfunction (_super) {\n  __extends(SimpleMesh, _super);\n  /**\n   * @param texture - The texture to use\n   * @param {Float32Array} [vertices] - if you want to specify the vertices\n   * @param {Float32Array} [uvs] - if you want to specify the uvs\n   * @param {Uint16Array} [indices] - if you want to specify the indices\n   * @param drawMode - the drawMode, can be any of the Mesh.DRAW_MODES consts\n   */\n\n\n  function SimpleMesh(texture, vertices, uvs, indices, drawMode) {\n    if (texture === void 0) {\n      texture = Texture.EMPTY;\n    }\n\n    var _this = this;\n\n    var geometry = new MeshGeometry(vertices, uvs, indices);\n    geometry.getBuffer('aVertexPosition').static = false;\n    var meshMaterial = new MeshMaterial(texture);\n    _this = _super.call(this, geometry, meshMaterial, null, drawMode) || this;\n    _this.autoUpdate = true;\n    return _this;\n  }\n\n  Object.defineProperty(SimpleMesh.prototype, \"vertices\", {\n    /**\n     * Collection of vertices data.\n     * @type {Float32Array}\n     */\n    get: function get() {\n      return this.geometry.getBuffer('aVertexPosition').data;\n    },\n    set: function set(value) {\n      this.geometry.getBuffer('aVertexPosition').data = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SimpleMesh.prototype._render = function (renderer) {\n    if (this.autoUpdate) {\n      this.geometry.getBuffer('aVertexPosition').update();\n    }\n\n    _super.prototype._render.call(this, renderer);\n  };\n\n  return SimpleMesh;\n}(Mesh);\n\nvar DEFAULT_BORDER_SIZE = 10;\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @memberof PIXI\n */\n\nvar NineSlicePlane =\n/** @class */\nfunction (_super) {\n  __extends(NineSlicePlane, _super);\n  /**\n   * @param texture - The texture to use on the NineSlicePlane.\n   * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n   * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n   * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n   * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n   */\n\n\n  function NineSlicePlane(texture, leftWidth, topHeight, rightWidth, bottomHeight) {\n    if (leftWidth === void 0) {\n      leftWidth = DEFAULT_BORDER_SIZE;\n    }\n\n    if (topHeight === void 0) {\n      topHeight = DEFAULT_BORDER_SIZE;\n    }\n\n    if (rightWidth === void 0) {\n      rightWidth = DEFAULT_BORDER_SIZE;\n    }\n\n    if (bottomHeight === void 0) {\n      bottomHeight = DEFAULT_BORDER_SIZE;\n    }\n\n    var _this = _super.call(this, Texture.WHITE, 4, 4) || this;\n\n    _this._origWidth = texture.orig.width;\n    _this._origHeight = texture.orig.height;\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n\n    _this._width = _this._origWidth;\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n\n    _this._height = _this._origHeight;\n    _this._leftWidth = leftWidth;\n    _this._rightWidth = rightWidth;\n    _this._topHeight = topHeight;\n    _this._bottomHeight = bottomHeight; // lets call the setter to ensure all necessary updates are performed\n\n    _this.texture = texture;\n    return _this;\n  }\n\n  NineSlicePlane.prototype.textureUpdated = function () {\n    this._textureID = this.shader.texture._updateID;\n\n    this._refresh();\n  };\n\n  Object.defineProperty(NineSlicePlane.prototype, \"vertices\", {\n    get: function get() {\n      return this.geometry.getBuffer('aVertexPosition').data;\n    },\n    set: function set(value) {\n      this.geometry.getBuffer('aVertexPosition').data = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Updates the horizontal vertices. */\n\n  NineSlicePlane.prototype.updateHorizontalVertices = function () {\n    var vertices = this.vertices;\n\n    var scale = this._getMinScale();\n\n    vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n    vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - this._bottomHeight * scale;\n    vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n  };\n  /** Updates the vertical vertices. */\n\n\n  NineSlicePlane.prototype.updateVerticalVertices = function () {\n    var vertices = this.vertices;\n\n    var scale = this._getMinScale();\n\n    vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n    vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - this._rightWidth * scale;\n    vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n  };\n  /**\n   * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n   *\n   * @return Smaller number of vertical and horizontal scale.\n   */\n\n\n  NineSlicePlane.prototype._getMinScale = function () {\n    var w = this._leftWidth + this._rightWidth;\n    var scaleW = this._width > w ? 1.0 : this._width / w;\n    var h = this._topHeight + this._bottomHeight;\n    var scaleH = this._height > h ? 1.0 : this._height / h;\n    var scale = Math.min(scaleW, scaleH);\n    return scale;\n  };\n\n  Object.defineProperty(NineSlicePlane.prototype, \"width\", {\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) {\n      this._width = value;\n\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"height\", {\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) {\n      this._height = value;\n\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"leftWidth\", {\n    /** The width of the left column. */\n    get: function get() {\n      return this._leftWidth;\n    },\n    set: function set(value) {\n      this._leftWidth = value;\n\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"rightWidth\", {\n    /** The width of the right column. */\n    get: function get() {\n      return this._rightWidth;\n    },\n    set: function set(value) {\n      this._rightWidth = value;\n\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"topHeight\", {\n    /** The height of the top row. */\n    get: function get() {\n      return this._topHeight;\n    },\n    set: function set(value) {\n      this._topHeight = value;\n\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(NineSlicePlane.prototype, \"bottomHeight\", {\n    /** The height of the bottom row. */\n    get: function get() {\n      return this._bottomHeight;\n    },\n    set: function set(value) {\n      this._bottomHeight = value;\n\n      this._refresh();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** Refreshes NineSlicePlane coords. All of them. */\n\n  NineSlicePlane.prototype._refresh = function () {\n    var texture = this.texture;\n    var uvs = this.geometry.buffers[1].data;\n    this._origWidth = texture.orig.width;\n    this._origHeight = texture.orig.height;\n\n    var _uvw = 1.0 / this._origWidth;\n\n    var _uvh = 1.0 / this._origHeight;\n\n    uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n    uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n    uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n    uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n    uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n    uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - _uvw * this._rightWidth;\n    uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n    uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - _uvh * this._bottomHeight;\n    this.updateHorizontalVertices();\n    this.updateVerticalVertices();\n    this.geometry.buffers[0].update();\n    this.geometry.buffers[1].update();\n  };\n\n  return NineSlicePlane;\n}(SimplePlane);\n\nexport { NineSlicePlane, PlaneGeometry, RopeGeometry, SimpleMesh, SimplePlane, SimpleRope };","map":{"version":3,"mappings":"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","names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","width","height","segWidth","segHeight","_super","_this","build","PlaneGeometry","total","verts","uvs","indices","segmentsX","segmentsY","sizeX","sizeY","i","x","y","push","totalSub","xpos","ypos","value","value2","value3","value4","buffers","data","Float32Array","indexBuffer","Uint16Array","update","MeshGeometry","points","textureScale","length","_width","RopeGeometry","vertexBuffer","getBuffer","uvBuffer","getIndex","amount","prev","textureWidth","index","dx","dy","distance","Math","sqrt","indexCount","updateVertices","lastPoint","nextPoint","perpX","perpY","vertices","point","perpLength","num","texture","ropeGeometry","meshMaterial","MeshMaterial","baseTexture","wrapMode","WRAP_MODES","REPEAT","autoUpdate","SimpleRope","renderer","geometry","shader","_render","call","Mesh","verticesX","verticesY","planeGeometry","Texture","WHITE","autoResize","SimplePlane","_textureID","_updateID","valid","textureUpdated","once","options","off","destroy","drawMode","EMPTY","static","SimpleMesh","DEFAULT_BORDER_SIZE","leftWidth","topHeight","rightWidth","bottomHeight","_origWidth","orig","_origHeight","_height","_leftWidth","_rightWidth","_topHeight","_bottomHeight","NineSlicePlane","_refresh","scale","_getMinScale","w","scaleW","h","scaleH","min","_uvw","_uvh","updateHorizontalVertices","updateVerticalVertices"],"sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/geometry/PlaneGeometry.ts","../../src/geometry/RopeGeometry.ts","../../src/SimpleRope.ts","../../src/SimplePlane.ts","../../src/SimpleMesh.ts","../../src/NineSlicePlane.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { MeshGeometry } from '@pixi/mesh';\n\n/**\n * @memberof PIXI\n */\nexport class PlaneGeometry extends MeshGeometry\n{\n    public segWidth: number;\n    public segHeight: number;\n    public width: number;\n    public height: number;\n\n    /**\n     * @param width - The width of the plane.\n     * @param height - The height of the plane.\n     * @param segWidth - Number of horizontal segments.\n     * @param segHeight - Number of vertical segments.\n     */\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build(): void\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { MeshGeometry } from '@pixi/mesh';\nimport type { IPoint } from '@pixi/math';\n\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @memberof PIXI\n */\nexport class RopeGeometry extends MeshGeometry\n{\n    /** An array of points that determine the rope. */\n    public points: IPoint[];\n\n    /** Rope texture scale, if zero then the rope texture is stretched. */\n    public readonly textureScale: number;\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     *\n     * @readonly\n     */\n    _width: number;\n\n    /**\n     * @param width - The width (i.e., thickness) of the rope.\n     * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param textureScale - By default the rope texture will be stretched to match\n     *     rope length. If textureScale is positive this value will be treated as a scaling\n     *     factor and the texture will preserve its aspect ratio instead. To create a tiling rope\n     *     set baseTexture.wrapMode to {@link PIXI.WRAP_MODES.REPEAT} and use a power of two texture,\n     *     then set textureScale=1 to keep the original texture pixel size.\n     *     In order to reduce alpha channel artifacts provide a larger texture and downsample -\n     *     i.e. set textureScale=0.5 to scale it down twice.\n     */\n    constructor(width = 200, points: IPoint[], textureScale = 0)\n    {\n        super(new Float32Array(points.length * 4),\n            new Float32Array(points.length * 4),\n            new Uint16Array((points.length - 1) * 6));\n\n        this.points = points;\n        this._width = width;\n        this.textureScale = textureScale;\n\n        this.build();\n    }\n\n    /**\n     * The width (i.e., thickness) of the rope.\n     *\n     * @readOnly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /** Refreshes Rope indices and uvs */\n    private build(): void\n    {\n        const points = this.points;\n\n        if (!points) return;\n\n        const vertexBuffer = this.getBuffer('aVertexPosition');\n        const uvBuffer = this.getBuffer('aTextureCoord');\n        const indexBuffer = this.getIndex();\n\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length)\n        {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n\n        const uvs = uvBuffer.data;\n        const indices = indexBuffer.data;\n\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n\n        let amount = 0;\n        let prev = points[0];\n        const textureWidth = this._width * this.textureScale;\n        const total = points.length; // - 1;\n\n        for (let i = 0; i < total; i++)\n        {\n            // time to do some smart drawing!\n            const index = i * 4;\n\n            if (this.textureScale > 0)\n            {\n                // calculate pixel distance from previous point\n                const dx = prev.x - points[i].x;\n                const dy = prev.y - points[i].y;\n                const distance = Math.sqrt((dx * dx) + (dy * dy));\n\n                prev = points[i];\n                amount += distance / textureWidth;\n            }\n            else\n            {\n                // stretch texture\n                amount = i / (total - 1);\n            }\n\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n\n        let indexCount = 0;\n\n        for (let i = 0; i < total - 1; i++)\n        {\n            const index = i * 2;\n\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n\n        this.updateVertices();\n    }\n\n    /**\n     * refreshes vertices of Rope mesh\n     */\n    public updateVertices(): void\n    {\n        const points = this.points;\n\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        let lastPoint = points[0];\n        let nextPoint;\n        let perpX = 0;\n        let perpY = 0;\n\n        const vertices = this.buffers[0].data;\n        const total = points.length;\n\n        for (let i = 0; i < total; i++)\n        {\n            const point = points[i];\n            const index = i * 4;\n\n            if (i < points.length - 1)\n            {\n                nextPoint = points[i + 1];\n            }\n            else\n            {\n                nextPoint = point;\n            }\n\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n\n            let ratio = (1 - (i / (total - 1))) * 10;\n\n            if (ratio > 1)\n            {\n                ratio = 1;\n            }\n\n            const perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n            const num = this.textureScale > 0 ? this.textureScale * this._width / 2 : this._width / 2;\n\n            perpX /= perpLength;\n            perpY /= perpLength;\n\n            perpX *= num;\n            perpY *= num;\n\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n\n            lastPoint = point;\n        }\n\n        this.buffers[0].update();\n    }\n\n    public update(): void\n    {\n        if (this.textureScale > 0)\n        {\n            this.build(); // we need to update UVs\n        }\n        else\n        {\n            this.updateVertices();\n        }\n    }\n}\n","import { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { WRAP_MODES } from '@pixi/constants';\nimport { RopeGeometry } from './geometry/RopeGeometry';\n\nimport type { Texture, Renderer } from '@pixi/core';\nimport type { IPoint } from '@pixi/math';\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @memberof PIXI\n */\nexport class SimpleRope extends Mesh\n{\n    public autoUpdate: boolean;\n\n    /**\n     * @param texture - The texture to use on the rope.\n     * @param points - An array of {@link PIXI.Point} objects to construct this rope.\n     * @param {number} textureScale - Optional. Positive values scale rope texture\n     * keeping its aspect ratio. You can reduce alpha channel artifacts by providing a larger texture\n     * and downsampling here. If set to zero, texture will be stretched instead.\n     */\n    constructor(texture: Texture, points: IPoint[], textureScale = 0)\n    {\n        const ropeGeometry = new RopeGeometry(texture.height, points, textureScale);\n        const meshMaterial = new MeshMaterial(texture);\n\n        if (textureScale > 0)\n        {\n            // attempt to set UV wrapping, will fail on non-power of two textures\n            texture.baseTexture.wrapMode = WRAP_MODES.REPEAT;\n        }\n        super(ropeGeometry, meshMaterial);\n\n        /**\n         * re-calculate vertices by rope points each frame\n         *\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        const geometry: RopeGeometry = this.geometry as any;\n\n        if (this.autoUpdate || geometry._width !== this.shader.texture.height)\n        {\n            geometry._width = this.shader.texture.height;\n            geometry.update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { Mesh, MeshMaterial } from '@pixi/mesh';\nimport { PlaneGeometry } from './geometry/PlaneGeometry';\n\nimport type{ Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @memberof PIXI\n */\nexport class SimplePlane extends Mesh\n{\n    /** The geometry is automatically updated when the texture size changes. */\n    public autoResize: boolean;\n\n    protected _textureID: number;\n\n    /**\n     * @param texture - The texture to use on the SimplePlane.\n     * @param verticesX - The number of vertices in the x-axis\n     * @param verticesY - The number of vertices in the y-axis\n     */\n    constructor(texture: Texture, verticesX: number, verticesY: number)\n    {\n        const planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n        const meshMaterial = new MeshMaterial(Texture.WHITE);\n\n        super(planeGeometry, meshMaterial);\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n        this.autoResize = true;\n    }\n\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n\n        const geometry: PlaneGeometry = this.geometry as any;\n        const { width, height } = this.shader.texture;\n\n        if (this.autoResize && (geometry.width !== width || geometry.height !== height))\n        {\n            geometry.width = this.shader.texture.width;\n            geometry.height = this.shader.texture.height;\n            geometry.build();\n        }\n    }\n\n    set texture(value: Texture)\n    {\n        // Track texture same way sprite does.\n        // For generated meshes like NineSlicePlane it can change the geometry.\n        // Unfortunately, this method might not work if you directly change texture in material.\n\n        if (this.shader.texture === value)\n        {\n            return;\n        }\n\n        this.shader.texture = value;\n        this._textureID = -1;\n\n        if (value.baseTexture.valid)\n        {\n            this.textureUpdated();\n        }\n        else\n        {\n            value.once('update', this.textureUpdated, this);\n        }\n    }\n\n    get texture(): Texture\n    {\n        return this.shader.texture;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this._textureID !== this.shader.texture._updateID)\n        {\n            this.textureUpdated();\n        }\n\n        super._render(renderer);\n    }\n\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        this.shader.texture.off('update', this.textureUpdated, this);\n        super.destroy(options);\n    }\n}\n","import { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { Texture } from '@pixi/core';\n\nimport type { ITypedArray, IArrayBuffer, Renderer } from '@pixi/core';\nimport type { DRAW_MODES } from '@pixi/constants';\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @memberof PIXI\n */\nexport class SimpleMesh extends Mesh\n{\n    /** Upload vertices buffer each frame. */\n    public autoUpdate: boolean;\n\n    /**\n     * @param texture - The texture to use\n     * @param {Float32Array} [vertices] - if you want to specify the vertices\n     * @param {Float32Array} [uvs] - if you want to specify the uvs\n     * @param {Uint16Array} [indices] - if you want to specify the indices\n     * @param drawMode - the drawMode, can be any of the Mesh.DRAW_MODES consts\n     */\n    constructor(\n        texture: Texture = Texture.EMPTY,\n        vertices?: IArrayBuffer,\n        uvs?: IArrayBuffer,\n        indices?: IArrayBuffer,\n        drawMode?: DRAW_MODES\n    )\n    {\n        const geometry = new MeshGeometry(vertices, uvs, indices);\n\n        geometry.getBuffer('aVertexPosition').static = false;\n\n        const meshMaterial = new MeshMaterial(texture);\n\n        super(geometry, meshMaterial, null, drawMode);\n\n        this.autoUpdate = true;\n    }\n\n    /**\n     * Collection of vertices data.\n     * @type {Float32Array}\n     */\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    _render(renderer: Renderer): void\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { SimplePlane } from './SimplePlane';\n\nimport type { ITypedArray } from '@pixi/core';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface NineSlicePlane extends GlobalMixins.NineSlicePlane {}\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @memberof PIXI\n */\nexport class NineSlicePlane extends SimplePlane\n{\n    private _origWidth: number;\n    private _origHeight: number;\n\n    /**\n     * The width of the left column (a).\n     *\n     * @private\n     */\n    _leftWidth: number;\n\n    /**\n     * The width of the right column (b)\n     *\n     * @private\n     */\n    _rightWidth: number;\n\n    /**\n     * The height of the top row (c)\n     *\n     * @private\n     */\n    _topHeight: number;\n\n    /**\n     * The height of the bottom row (d)\n     *\n     * @private\n     */\n    _bottomHeight: number;\n\n    /**\n     * @param texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] - size of the left vertical bar (A)\n     * @param {number} [topHeight=10] - size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] - size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] - size of the bottom horizontal bar (D)\n     */\n    constructor(\n        texture: Texture,\n        leftWidth = DEFAULT_BORDER_SIZE,\n        topHeight = DEFAULT_BORDER_SIZE,\n        rightWidth = DEFAULT_BORDER_SIZE,\n        bottomHeight = DEFAULT_BORDER_SIZE\n    )\n    {\n        super(Texture.WHITE, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._width = this._origWidth;\n\n        /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n        this._height = this._origHeight;\n\n        this._leftWidth = leftWidth;\n        this._rightWidth = rightWidth;\n        this._topHeight = topHeight;\n        this._bottomHeight = bottomHeight;\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    public textureUpdated(): void\n    {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    }\n\n    get vertices(): ITypedArray\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n\n    set vertices(value: ITypedArray)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    /** Updates the horizontal vertices. */\n    public updateHorizontalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /** Updates the vertical vertices. */\n    public updateVerticalVertices(): void\n    {\n        const vertices = this.vertices;\n\n        const scale = this._getMinScale();\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * Returns the smaller of a set of vertical and horizontal scale of nine slice corners.\n     *\n     * @return Smaller number of vertical and horizontal scale.\n     */\n    private _getMinScale(): number\n    {\n        const w = this._leftWidth + this._rightWidth;\n        const scaleW = this._width > w ? 1.0 : this._width / w;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scaleH = this._height > h ? 1.0 : this._height / h;\n\n        const scale = Math.min(scaleW, scaleH);\n\n        return scale;\n    }\n\n    /** The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    set width(value: number)\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /** The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane. */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    set height(value: number)\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /** The width of the left column. */\n    get leftWidth(): number\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value: number)\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /** The width of the right column. */\n    get rightWidth(): number\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value: number)\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /** The height of the top row. */\n    get topHeight(): number\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value: number)\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /** The height of the bottom row. */\n    get bottomHeight(): number\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value: number)\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /** Refreshes NineSlicePlane coords. All of them. */\n    private _refresh(): void\n    {\n        const texture = this.texture;\n\n        const uvs = this.geometry.buffers[1].data;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}