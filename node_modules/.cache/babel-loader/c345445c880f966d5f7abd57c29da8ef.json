{"ast":null,"code":"import _slicedToArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nvar processBuffer = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, renderedBuffer, nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime) {\n    var length, numberOfInputChannels, numberOfOutputChannels, processedBuffer, audioNodeConnections, audioWorkletProcessor, inputs, outputs, parameters, _loop, i, _ret;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Ceil the length to the next full render quantum.\n            // Bug #17: Safari does not yet expose the length.\n            length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n            numberOfInputChannels = options.channelCount * options.numberOfInputs;\n            numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n              return sum + value;\n            }, 0);\n            processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n\n            if (!(processorConstructor === undefined)) {\n              _context.next = 6;\n              break;\n            }\n\n            throw new Error('Missing the processor constructor.');\n\n          case 6:\n            audioNodeConnections = getAudioNodeConnections(proxy);\n            _context.next = 9;\n            return getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n\n          case 9:\n            audioWorkletProcessor = _context.sent;\n            inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n            outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n            parameters = Array.from(proxy.parameters.keys()).reduce(function (prmtrs, name) {\n              return _objectSpread(_objectSpread({}, prmtrs), {}, _defineProperty({}, name, new Float32Array(128)));\n            }, {});\n\n            _loop = function _loop(i) {\n              if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n                for (var j = 0; j < options.numberOfInputs; j += 1) {\n                  for (var k = 0; k < options.channelCount; k += 1) {\n                    copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n                  }\n                }\n              }\n\n              if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n                processorConstructor.parameterDescriptors.forEach(function (_ref2, index) {\n                  var name = _ref2.name;\n                  copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n                });\n              }\n\n              for (var _j = 0; _j < options.numberOfInputs; _j += 1) {\n                for (var _k = 0; _k < outputChannelCount[_j]; _k += 1) {\n                  // The byteLength will be 0 when the ArrayBuffer was transferred.\n                  if (outputs[_j][_k].byteLength === 0) {\n                    outputs[_j][_k] = new Float32Array(128);\n                  }\n                }\n              }\n\n              try {\n                var potentiallyEmptyInputs = inputs.map(function (input, index) {\n                  if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [];\n                  }\n\n                  return input;\n                });\n                var activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, function () {\n                  return audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n                });\n\n                if (processedBuffer !== null) {\n                  for (var _j2 = 0, outputChannelSplitterNodeOutput = 0; _j2 < options.numberOfOutputs; _j2 += 1) {\n                    for (var _k2 = 0; _k2 < outputChannelCount[_j2]; _k2 += 1) {\n                      copyToChannel(processedBuffer, outputs[_j2], _k2, outputChannelSplitterNodeOutput + _k2, i);\n                    }\n\n                    outputChannelSplitterNodeOutput += outputChannelCount[_j2];\n                  }\n                }\n\n                if (!activeSourceFlag) {\n                  return \"break\";\n                }\n              } catch (error) {\n                proxy.dispatchEvent(new ErrorEvent('processorerror', {\n                  colno: error.colno,\n                  filename: error.filename,\n                  lineno: error.lineno,\n                  message: error.message\n                }));\n                return \"break\";\n              }\n            };\n\n            i = 0;\n\n          case 15:\n            if (!(i < length)) {\n              _context.next = 22;\n              break;\n            }\n\n            _ret = _loop(i);\n\n            if (!(_ret === \"break\")) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 22);\n\n          case 19:\n            i += 128;\n            _context.next = 15;\n            break;\n\n          case 22:\n            return _context.abrupt(\"return\", processedBuffer);\n\n          case 23:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function processBuffer(_x, _x2, _x3, _x4, _x5, _x6, _x7) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var createAudioWorkletNodeRendererFactory = function createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function (name, options, processorConstructor) {\n    var renderedNativeAudioNodes = new WeakMap();\n    var processedBufferPromise = null;\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(proxy, nativeOfflineAudioContext) {\n        var nativeAudioWorkletNode, nativeOutputNodes, nativeAudioWorkletNodeIsOwnedByContext, outputChannelCount, numberOfOutputChannels, outputChannelSplitterNode, outputChannelMergerNodes, i, outputGainNode, _numberOfInputChannels, numberOfParameters, numberOfChannels, renderBuffer, _processedBuffer, audioBufferSourceNode, _nativeOutputNodes, _nativeOutputNodes2, _outputChannelSplitterNode, _outputChannelMergerNodes, _outputGainNode, _i3, outputChannelSplitterNodeOutput, outputChannelMergerNode, j, _iterator2, _step2, _step2$value, nm, audioParam, _iterator3, _step3, _step3$value, _nm, _audioParam;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                nativeAudioWorkletNode = getNativeAudioNode(proxy);\n                nativeOutputNodes = null;\n                nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n                outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount); // Bug #61: Only Chrome, Edge, Firefox & Opera have an implementation of the AudioWorkletNode yet.\n\n                if (nativeAudioWorkletNodeConstructor === null) {\n                  numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n                    return sum + value;\n                  }, 0);\n                  outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                  });\n                  outputChannelMergerNodes = [];\n\n                  for (i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                      channelCount: 1,\n                      channelCountMode: 'explicit',\n                      channelInterpretation: 'speakers',\n                      numberOfInputs: outputChannelCount[i]\n                    }));\n                  }\n\n                  outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                  });\n                  outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                  outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                  nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n                } else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                  nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);\n\n                if (!(nativeOutputNodes !== null)) {\n                  _context4.next = 41;\n                  break;\n                }\n\n                if (!(processedBufferPromise === null)) {\n                  _context4.next = 32;\n                  break;\n                }\n\n                if (!(processorConstructor === undefined)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                throw new Error('Missing the processor constructor.');\n\n              case 10:\n                if (!(nativeOfflineAudioContextConstructor === null)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n\n              case 12:\n                // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                _numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n                numberOfChannels = _numberOfInputChannels + numberOfParameters;\n\n                renderBuffer = /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var partialOfflineAudioContext, gainNodes, inputChannelSplitterNodes, _i, constantSourceNodes, inputChannelMergerNode, _i2, j, _iterator, _step, _step$value, index, constantSourceNode;\n\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, // Ceil the length to the next full render quantum.\n                            // Bug #17: Safari does not yet expose the length.\n                            Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                            gainNodes = [];\n                            inputChannelSplitterNodes = [];\n\n                            for (_i = 0; _i < options.numberOfInputs; _i += 1) {\n                              gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: options.channelCountMode,\n                                channelInterpretation: options.channelInterpretation,\n                                gain: 1\n                              }));\n                              inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                numberOfOutputs: options.channelCount\n                              }));\n                            }\n\n                            _context3.next = 6;\n                            return Promise.all(Array.from(proxy.parameters.values()).map( /*#__PURE__*/function () {\n                              var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(audioParam) {\n                                var constantSourceNode;\n                                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                  while (1) {\n                                    switch (_context2.prev = _context2.next) {\n                                      case 0:\n                                        constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                          channelCount: 1,\n                                          channelCountMode: 'explicit',\n                                          channelInterpretation: 'discrete',\n                                          offset: audioParam.value\n                                        });\n                                        _context2.next = 3;\n                                        return renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n\n                                      case 3:\n                                        return _context2.abrupt(\"return\", constantSourceNode);\n\n                                      case 4:\n                                      case \"end\":\n                                        return _context2.stop();\n                                    }\n                                  }\n                                }, _callee2);\n                              }));\n\n                              return function (_x10) {\n                                return _ref5.apply(this, arguments);\n                              };\n                            }()));\n\n                          case 6:\n                            constantSourceNodes = _context3.sent;\n                            inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                              channelCount: 1,\n                              channelCountMode: 'explicit',\n                              channelInterpretation: 'speakers',\n                              numberOfInputs: Math.max(1, _numberOfInputChannels + numberOfParameters)\n                            });\n\n                            for (_i2 = 0; _i2 < options.numberOfInputs; _i2 += 1) {\n                              gainNodes[_i2].connect(inputChannelSplitterNodes[_i2]);\n\n                              for (j = 0; j < options.channelCount; j += 1) {\n                                inputChannelSplitterNodes[_i2].connect(inputChannelMergerNode, j, _i2 * options.channelCount + j);\n                              }\n                            }\n\n                            _iterator = _createForOfIteratorHelper(constantSourceNodes.entries());\n\n                            try {\n                              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                                _step$value = _slicedToArray(_step.value, 2), index = _step$value[0], constantSourceNode = _step$value[1];\n                                constantSourceNode.connect(inputChannelMergerNode, 0, _numberOfInputChannels + index);\n                                constantSourceNode.start(0);\n                              }\n                            } catch (err) {\n                              _iterator.e(err);\n                            } finally {\n                              _iterator.f();\n                            }\n\n                            inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                            _context3.next = 14;\n                            return Promise.all(gainNodes.map(function (gainNode) {\n                              return renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode);\n                            }));\n\n                          case 14:\n                            return _context3.abrupt(\"return\", renderNativeOfflineAudioContext(partialOfflineAudioContext));\n\n                          case 15:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function renderBuffer() {\n                    return _ref4.apply(this, arguments);\n                  };\n                }();\n\n                _context4.t0 = processBuffer;\n                _context4.t1 = proxy;\n\n                if (!(numberOfChannels === 0)) {\n                  _context4.next = 22;\n                  break;\n                }\n\n                _context4.t2 = null;\n                _context4.next = 25;\n                break;\n\n              case 22:\n                _context4.next = 24;\n                return renderBuffer();\n\n              case 24:\n                _context4.t2 = _context4.sent;\n\n              case 25:\n                _context4.t3 = _context4.t2;\n                _context4.t4 = nativeOfflineAudioContext;\n                _context4.t5 = options;\n                _context4.t6 = outputChannelCount;\n                _context4.t7 = processorConstructor;\n                _context4.t8 = exposeCurrentFrameAndCurrentTime;\n                processedBufferPromise = (0, _context4.t0)(_context4.t1, _context4.t3, _context4.t4, _context4.t5, _context4.t6, _context4.t7, _context4.t8);\n\n              case 32:\n                _context4.next = 34;\n                return processedBufferPromise;\n\n              case 34:\n                _processedBuffer = _context4.sent;\n                audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                  buffer: null,\n                  channelCount: 2,\n                  channelCountMode: 'max',\n                  channelInterpretation: 'speakers',\n                  loop: false,\n                  loopEnd: 0,\n                  loopStart: 0,\n                  playbackRate: 1\n                });\n                _nativeOutputNodes = nativeOutputNodes, _nativeOutputNodes2 = _slicedToArray(_nativeOutputNodes, 3), _outputChannelSplitterNode = _nativeOutputNodes2[0], _outputChannelMergerNodes = _nativeOutputNodes2[1], _outputGainNode = _nativeOutputNodes2[2];\n\n                if (_processedBuffer !== null) {\n                  audioBufferSourceNode.buffer = _processedBuffer;\n                  audioBufferSourceNode.start(0);\n                }\n\n                audioBufferSourceNode.connect(_outputChannelSplitterNode);\n\n                for (_i3 = 0, outputChannelSplitterNodeOutput = 0; _i3 < proxy.numberOfOutputs; _i3 += 1) {\n                  outputChannelMergerNode = _outputChannelMergerNodes[_i3];\n\n                  for (j = 0; j < outputChannelCount[_i3]; j += 1) {\n                    _outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                  }\n\n                  outputChannelSplitterNodeOutput += outputChannelCount[_i3];\n                }\n\n                return _context4.abrupt(\"return\", _outputGainNode);\n\n              case 41:\n                if (nativeAudioWorkletNodeIsOwnedByContext) {\n                  _context4.next = 61;\n                  break;\n                }\n\n                _iterator2 = _createForOfIteratorHelper(proxy.parameters.entries());\n                _context4.prev = 43;\n\n                _iterator2.s();\n\n              case 45:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context4.next = 51;\n                  break;\n                }\n\n                _step2$value = _slicedToArray(_step2.value, 2), nm = _step2$value[0], audioParam = _step2$value[1];\n                _context4.next = 49;\n                return renderAutomation(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                nativeAudioWorkletNode.parameters.get(nm));\n\n              case 49:\n                _context4.next = 45;\n                break;\n\n              case 51:\n                _context4.next = 56;\n                break;\n\n              case 53:\n                _context4.prev = 53;\n                _context4.t9 = _context4[\"catch\"](43);\n\n                _iterator2.e(_context4.t9);\n\n              case 56:\n                _context4.prev = 56;\n\n                _iterator2.f();\n\n                return _context4.finish(56);\n\n              case 59:\n                _context4.next = 78;\n                break;\n\n              case 61:\n                _iterator3 = _createForOfIteratorHelper(proxy.parameters.entries());\n                _context4.prev = 62;\n\n                _iterator3.s();\n\n              case 64:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context4.next = 70;\n                  break;\n                }\n\n                _step3$value = _slicedToArray(_step3.value, 2), _nm = _step3$value[0], _audioParam = _step3$value[1];\n                _context4.next = 68;\n                return connectAudioParam(nativeOfflineAudioContext, _audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                nativeAudioWorkletNode.parameters.get(_nm));\n\n              case 68:\n                _context4.next = 64;\n                break;\n\n              case 70:\n                _context4.next = 75;\n                break;\n\n              case 72:\n                _context4.prev = 72;\n                _context4.t10 = _context4[\"catch\"](62);\n\n                _iterator3.e(_context4.t10);\n\n              case 75:\n                _context4.prev = 75;\n\n                _iterator3.f();\n\n                return _context4.finish(75);\n\n              case 78:\n                _context4.next = 80;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n\n              case 80:\n                return _context4.abrupt(\"return\", nativeAudioWorkletNode);\n\n              case 81:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[43, 53, 56, 59], [62, 72, 75, 78]]);\n      }));\n\n      return function createAudioNode(_x8, _x9) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n        var renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["copyFromChannel","copyToChannel","createNestedArrays","getAudioNodeConnections","getAudioWorkletProcessor","isOwnedByContext","processBuffer","proxy","renderedBuffer","nativeOfflineAudioContext","options","outputChannelCount","processorConstructor","exposeCurrentFrameAndCurrentTime","length","Math","ceil","context","numberOfInputChannels","channelCount","numberOfInputs","numberOfOutputChannels","reduce","sum","value","processedBuffer","createBuffer","sampleRate","undefined","Error","audioNodeConnections","audioWorkletProcessor","inputs","outputs","numberOfOutputs","parameters","Array","from","keys","prmtrs","name","Float32Array","i","j","k","parameterDescriptors","forEach","index","byteLength","potentiallyEmptyInputs","map","input","activeInputs","size","activeSourceFlag","process","outputChannelSplitterNodeOutput","error","dispatchEvent","ErrorEvent","colno","filename","lineno","message","createAudioWorkletNodeRendererFactory","connectAudioParam","connectMultipleOutputs","createNativeAudioBufferSourceNode","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeConstantSourceNode","createNativeGainNode","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","getNativeAudioNode","nativeAudioWorkletNodeConstructor","nativeOfflineAudioContextConstructor","renderAutomation","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","processedBufferPromise","createAudioNode","nativeAudioWorkletNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","isArray","outputChannelSplitterNode","max","channelCountMode","channelInterpretation","outputChannelMergerNodes","push","outputGainNode","gain","connect","bind","disconnect","set","numberOfParameters","numberOfChannels","renderBuffer","partialOfflineAudioContext","gainNodes","inputChannelSplitterNodes","Promise","all","values","audioParam","constantSourceNode","offset","constantSourceNodes","inputChannelMergerNode","entries","start","destination","gainNode","audioBufferSourceNode","buffer","loop","loopEnd","loopStart","playbackRate","outputChannelMergerNode","nm","get","render","renderedNativeAudioWorkletNodeOrGainNode","resolve"],"sourceRoot":"","sources":["../../../src/factories/audio-worklet-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}