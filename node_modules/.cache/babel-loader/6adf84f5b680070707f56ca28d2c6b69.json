{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Merge } from \"./Merge\";\n/**\n * Mono coerces the incoming mono or stereo signal into a mono signal\n * where both left and right channels have the same value. This can be useful\n * for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n * @category Component\n */\n\nexport var Mono = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Mono, _ToneAudioNode);\n\n  var _super = _createSuper(Mono);\n\n  function Mono() {\n    var _this;\n\n    _classCallCheck(this, Mono);\n\n    _this = _super.call(this, optionsFromArguments(Mono.getDefaults(), arguments));\n    _this.name = \"Mono\";\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this._merge = _this.output = new Merge({\n      channels: 2,\n      context: _this.context\n    });\n\n    _this.input.connect(_this._merge, 0, 0);\n\n    _this.input.connect(_this._merge, 0, 1);\n\n    return _this;\n  }\n\n  _createClass(Mono, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Mono.prototype), \"dispose\", this).call(this);\n\n      this._merge.dispose();\n\n      this.input.dispose();\n      return this;\n    }\n  }]);\n\n  return Mono;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,IAAT,QAAqB,yBAArB;AACA,SAAqBC,aAArB,QAAgE,kCAAhE;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,KAAT,QAAsB,SAAtB;AAIA;;;;;;;AAMA,WAAaC,IAAb;AAAA;;AAAA;;AAoBC;AAAA;;AAAA;;AAEC,8BAAMF,oBAAoB,CAACE,IAAI,CAACC,WAAL,EAAD,EAAqBC,SAArB,CAA1B;AApBQ,iBAAe,MAAf;AAsBR,UAAKC,KAAL,GAAa,IAAIP,IAAJ,CAAS;AAAEQ,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAb;AAEA,UAAKC,MAAL,GAAc,MAAKC,MAAL,GAAc,IAAIP,KAAJ,CAAU;AACrCQ,cAAQ,EAAE,CAD2B;AAErCH,aAAO,EAAE,MAAKA;AAFuB,KAAV,CAA5B;;AAKA,UAAKD,KAAL,CAAWK,OAAX,CAAmB,MAAKH,MAAxB,EAAgC,CAAhC,EAAmC,CAAnC;;AACA,UAAKF,KAAL,CAAWK,OAAX,CAAmB,MAAKH,MAAxB,EAAgC,CAAhC,EAAmC,CAAnC;;AAZD;AAaC;;AAjCF;AAAA;AAAA,WAmCC,mBAAO;AACN;;AACA,WAAKA,MAAL,CAAYI,OAAZ;;AACA,WAAKN,KAAL,CAAWM,OAAX;AACA,aAAO,IAAP;AACA;AAxCF;;AAAA;AAAA,EAA0BZ,aAA1B","names":["Gain","ToneAudioNode","optionsFromArguments","Merge","Mono","getDefaults","arguments","input","context","_merge","output","channels","connect","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Mono.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}