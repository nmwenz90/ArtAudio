{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  curve: null,\n  oversample: 'none'\n};\nexport var createWaveShaperNodeConstructor = function createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(WaveShaperNode, _audioNodeConstructor);\n\n    var _super = _createSuper(WaveShaperNode);\n\n    function WaveShaperNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, WaveShaperNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null; // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n\n      _this = _super.call(this, context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n      _this._isCurveNullified = false;\n      _this._nativeWaveShaperNode = nativeWaveShaperNode; // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(_assertThisInitialized(_this), 1);\n      return _this;\n    }\n\n    _createClass(WaveShaperNode, [{\n      key: \"curve\",\n      get: function get() {\n        if (this._isCurveNullified) {\n          return null;\n        }\n\n        return this._nativeWaveShaperNode.curve;\n      },\n      set: function set(value) {\n        // Bug #103: Safari does not allow to set the curve to null.\n        if (value === null) {\n          this._isCurveNullified = true;\n          this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n        } else {\n          // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n          // Bug #104: Chrome, Edge and Opera will throw an InvalidAccessError when the curve has less than two samples.\n          if (value.length < 2) {\n            throw createInvalidStateError();\n          }\n\n          this._isCurveNullified = false;\n          this._nativeWaveShaperNode.curve = value;\n        }\n      }\n    }, {\n      key: \"oversample\",\n      get: function get() {\n        return this._nativeWaveShaperNode.oversample;\n      },\n      set: function set(value) {\n        this._nativeWaveShaperNode.oversample = value;\n      }\n    }]);\n\n    return WaveShaperNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":";;;;;;AAGA,IAAMA,eAAe,GAAG;AACpBC,cAAY,EAAE,CADM;AAEpBC,kBAAgB,EAAE,KAFE;AAGpBC,uBAAqB,EAAE,UAHH;AAIpBC,OAAK,EAAE,IAJa;AAKpBC,YAAU,EAAE;AALQ,CAAxB;AAQA,OAAO,IAAMC,+BAA+B,GAAsC,SAArEA,+BAAqE,CAC9EC,oBAD8E,EAE9EC,uBAF8E,EAG9EC,0BAH8E,EAI9EC,4BAJ8E,EAK9EC,gBAL8E,EAM9EC,2BAN8E,EAO9EC,oBAP8E,EAQ9E;AACA;AAAA;;AAAA;;AAKI,4BAAYC,OAAZ,EAAwBC,OAAxB,EAA6D;AAAA;;AAAA;;AACzD,UAAMC,aAAa,GAAGL,gBAAgB,CAACG,OAAD,CAAtC;;AACA,UAAMG,aAAa,mCAAQjB,eAAR,GAA4Be,OAA5B,CAAnB;;AACA,UAAMG,oBAAoB,GAAGT,0BAA0B,CAACO,aAAD,EAAgBC,aAAhB,CAAvD;AACA,UAAME,SAAS,GAAGP,2BAA2B,CAACI,aAAD,CAA7C;AACA,UAAMI,sBAAsB,GAAiCD,SAAS,GAAGT,4BAA4B,EAA/B,GAAoC,IAA1G,CALyD,CAOzD;;AACA,gCAAMI,OAAN,EAAe,IAAf,EAAqBI,oBAArB,EAA2CE,sBAA3C;AAEA,YAAKC,iBAAL,GAAyB,KAAzB;AACA,YAAKC,qBAAL,GAA6BJ,oBAA7B,CAXyD,CAazD;;AACAL,0BAAoB,gCAAO,CAAP,CAApB;AAdyD;AAe5D;;AApBL;AAAA;AAAA,WAsBI,eAAS;AACL,YAAI,KAAKQ,iBAAT,EAA4B;AACxB,iBAAO,IAAP;AACH;;AAED,eAAO,KAAKC,qBAAL,CAA2BlB,KAAlC;AACH,OA5BL;AAAA,WA8BI,aAAUmB,KAAV,EAAe;AACX;AACA,YAAIA,KAAK,KAAK,IAAd,EAAoB;AAChB,eAAKF,iBAAL,GAAyB,IAAzB;AACA,eAAKC,qBAAL,CAA2BlB,KAA3B,GAAmC,IAAIoB,YAAJ,CAAiB,CAAC,CAAD,EAAI,CAAJ,CAAjB,CAAnC;AACH,SAHD,MAGO;AACH;AACA;AACA,cAAID,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;AAClB,kBAAMjB,uBAAuB,EAA7B;AACH;;AAED,eAAKa,iBAAL,GAAyB,KAAzB;AACA,eAAKC,qBAAL,CAA2BlB,KAA3B,GAAmCmB,KAAnC;AACH;AACJ;AA7CL;AAAA;AAAA,WA+CI,eAAc;AACV,eAAO,KAAKD,qBAAL,CAA2BjB,UAAlC;AACH,OAjDL;AAAA,WAmDI,aAAekB,KAAf,EAAoB;AAChB,aAAKD,qBAAL,CAA2BjB,UAA3B,GAAwCkB,KAAxC;AACH;AArDL;;AAAA;AAAA,IAAwDhB,oBAAxD;AAuDH,CAhEM","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","curve","oversample","createWaveShaperNodeConstructor","audioNodeConstructor","createInvalidStateError","createNativeWaveShaperNode","createWaveShaperNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativeWaveShaperNode","isOffline","waveShaperNodeRenderer","_isCurveNullified","_nativeWaveShaperNode","value","Float32Array","length"],"sourceRoot":"","sources":["../../../src/factories/wave-shaper-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}