{"ast":null,"code":"export var testAudioNodeDisconnectMethodSupport = function testAudioNodeDisconnectMethodSupport(nativeAudioContext, nativeAudioWorkletNodeConstructor) {\n  return new Promise(function (resolve) {\n    /*\n     * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n     * constructor for an AudioWorkletNode can be used here to skip the test.\n     */\n    if (nativeAudioWorkletNodeConstructor !== null) {\n      resolve(true);\n    } else {\n      var analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n\n      var dummy = nativeAudioContext.createGain(); // Bug #95: Safari does not play one sample buffers.\n\n      var ones = nativeAudioContext.createBuffer(1, 2, 44100);\n      var channelData = ones.getChannelData(0);\n      channelData[0] = 1;\n      channelData[1] = 1;\n      var source = nativeAudioContext.createBufferSource();\n      source.buffer = ones;\n      source.loop = true;\n      source.connect(analyzer).connect(nativeAudioContext.destination);\n      source.connect(dummy);\n      source.disconnect(dummy); // tslint:disable-next-line:deprecation\n\n      analyzer.onaudioprocess = function (event) {\n        var chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n\n        if (Array.prototype.some.call(chnnlDt, function (sample) {\n          return sample === 1;\n        })) {\n          resolve(true);\n        } else {\n          resolve(false);\n        }\n\n        source.stop();\n        analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n\n        source.disconnect(analyzer);\n        analyzer.disconnect(nativeAudioContext.destination);\n      };\n\n      source.start();\n    }\n  });\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,oCAAoC,GAAG,SAAvCA,oCAAuC,CAChDC,kBADgD,EAEhDC,iCAFgD,EAG9B;AAClB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAY;AAC3B;;;;AAIA,QAAIF,iCAAiC,KAAK,IAA1C,EAAgD;AAC5CE,aAAO,CAAC,IAAD,CAAP;AACH,KAFD,MAEO;AACH,UAAMC,QAAQ,GAAGJ,kBAAkB,CAACK,qBAAnB,CAAyC,GAAzC,EAA8C,CAA9C,EAAiD,CAAjD,CAAjB,CADG,CACmE;;AACtE,UAAMC,KAAK,GAAGN,kBAAkB,CAACO,UAAnB,EAAd,CAFG,CAGH;;AACA,UAAMC,IAAI,GAAGR,kBAAkB,CAACS,YAAnB,CAAgC,CAAhC,EAAmC,CAAnC,EAAsC,KAAtC,CAAb;AACA,UAAMC,WAAW,GAAGF,IAAI,CAACG,cAAL,CAAoB,CAApB,CAApB;AAEAD,iBAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;AACAA,iBAAW,CAAC,CAAD,CAAX,GAAiB,CAAjB;AAEA,UAAME,MAAM,GAAGZ,kBAAkB,CAACa,kBAAnB,EAAf;AAEAD,YAAM,CAACE,MAAP,GAAgBN,IAAhB;AACAI,YAAM,CAACG,IAAP,GAAc,IAAd;AAEAH,YAAM,CAACI,OAAP,CAAeZ,QAAf,EAAyBY,OAAzB,CAAiChB,kBAAkB,CAACiB,WAApD;AACAL,YAAM,CAACI,OAAP,CAAeV,KAAf;AACAM,YAAM,CAACM,UAAP,CAAkBZ,KAAlB,EAjBG,CAmBH;;AACAF,cAAQ,CAACe,cAAT,GAA0B,UAACC,KAAD,EAAU;AAChC,YAAMC,OAAO,GAAGD,KAAK,CAACE,WAAN,CAAkBX,cAAlB,CAAiC,CAAjC,CAAhB,CADgC,CACqB;;AAErD,YAAIY,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBC,IAArB,CAA0BL,OAA1B,EAAmC,UAACM,MAAD;AAAA,iBAAoBA,MAAM,KAAK,CAA/B;AAAA,SAAnC,CAAJ,EAA0E;AACtExB,iBAAO,CAAC,IAAD,CAAP;AACH,SAFD,MAEO;AACHA,iBAAO,CAAC,KAAD,CAAP;AACH;;AAEDS,cAAM,CAACgB,IAAP;AAEAxB,gBAAQ,CAACe,cAAT,GAA0B,IAA1B,CAXgC,CAWA;;AAEhCP,cAAM,CAACM,UAAP,CAAkBd,QAAlB;AACAA,gBAAQ,CAACc,UAAT,CAAoBlB,kBAAkB,CAACiB,WAAvC;AACH,OAfD;;AAiBAL,YAAM,CAACiB,KAAP;AACH;AACJ,GA9CM,CAAP;AA+CH,CAnDM","names":["testAudioNodeDisconnectMethodSupport","nativeAudioContext","nativeAudioWorkletNodeConstructor","Promise","resolve","analyzer","createScriptProcessor","dummy","createGain","ones","createBuffer","channelData","getChannelData","source","createBufferSource","buffer","loop","connect","destination","disconnect","onaudioprocess","event","chnnlDt","inputBuffer","Array","prototype","some","call","sample","stop","start"],"sourceRoot":"","sources":["../../../src/helpers/test-audio-node-disconnect-method-support.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}