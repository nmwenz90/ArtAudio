{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nvar DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport var createOfflineAudioContextConstructor = function createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, _startRendering) {\n  return /*#__PURE__*/function (_baseAudioContextCons) {\n    _inherits(OfflineAudioContext, _baseAudioContextCons);\n\n    var _super = _createSuper(OfflineAudioContext);\n\n    function OfflineAudioContext(a, b, c) {\n      var _this;\n\n      _classCallCheck(this, OfflineAudioContext);\n\n      var options;\n\n      if (typeof a === 'number' && b !== undefined && c !== undefined) {\n        options = {\n          length: b,\n          numberOfChannels: a,\n          sampleRate: c\n        };\n      } else if (typeof a === 'object') {\n        options = a;\n      } else {\n        throw new Error('The given parameters are not valid.');\n      }\n\n      var _DEFAULT_OPTIONS$opti = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options),\n          length = _DEFAULT_OPTIONS$opti.length,\n          numberOfChannels = _DEFAULT_OPTIONS$opti.numberOfChannels,\n          sampleRate = _DEFAULT_OPTIONS$opti.sampleRate;\n\n      var nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n\n      if (!cacheTestResult(testPromiseSupport, function () {\n        return testPromiseSupport(nativeOfflineAudioContext);\n      })) {\n        nativeOfflineAudioContext.addEventListener('statechange', function () {\n          var i = 0;\n\n          var delayStateChangeEvent = function delayStateChangeEvent(event) {\n            if (_this._state === 'running') {\n              if (i > 0) {\n                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                event.stopImmediatePropagation();\n\n                _this._waitForThePromiseToSettle(event);\n              } else {\n                i += 1;\n              }\n            }\n          };\n\n          return delayStateChangeEvent;\n        }());\n      }\n\n      _this = _super.call(this, nativeOfflineAudioContext, numberOfChannels);\n      _this._length = length;\n      _this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n      _this._state = null;\n      return _this;\n    }\n\n    _createClass(OfflineAudioContext, [{\n      key: \"length\",\n      get: function get() {\n        // Bug #17: Safari does not yet expose the length.\n        if (this._nativeOfflineAudioContext.length === undefined) {\n          return this._length;\n        }\n\n        return this._nativeOfflineAudioContext.length;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n      }\n    }, {\n      key: \"startRendering\",\n      value: function startRendering() {\n        var _this2 = this;\n\n        /*\n         * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n         * the state of the nativeOfflineAudioContext might no transition to running immediately.\n         */\n        if (this._state === 'running') {\n          return Promise.reject(createInvalidStateError());\n        }\n\n        this._state = 'running';\n        return _startRendering(this.destination, this._nativeOfflineAudioContext).finally(function () {\n          _this2._state = null;\n          deactivateAudioGraph(_this2);\n        });\n      }\n    }, {\n      key: \"_waitForThePromiseToSettle\",\n      value: function _waitForThePromiseToSettle(event) {\n        var _this3 = this;\n\n        if (this._state === null) {\n          this._nativeOfflineAudioContext.dispatchEvent(event);\n        } else {\n          setTimeout(function () {\n            return _this3._waitForThePromiseToSettle(event);\n          });\n        }\n      }\n    }]);\n\n    return OfflineAudioContext;\n  }(baseAudioContextConstructor);\n};","map":{"version":3,"mappings":"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","names":["deactivateAudioGraph","testPromiseSupport","DEFAULT_OPTIONS","numberOfChannels","createOfflineAudioContextConstructor","baseAudioContextConstructor","cacheTestResult","createInvalidStateError","createNativeOfflineAudioContext","startRendering","a","b","c","options","undefined","length","sampleRate","Error","nativeOfflineAudioContext","addEventListener","i","delayStateChangeEvent","event","_state","removeEventListener","stopImmediatePropagation","_waitForThePromiseToSettle","_length","_nativeOfflineAudioContext","state","Promise","reject","destination","finally","dispatchEvent","setTimeout"],"sourceRoot":"","sources":["../../../src/factories/offline-audio-context-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}