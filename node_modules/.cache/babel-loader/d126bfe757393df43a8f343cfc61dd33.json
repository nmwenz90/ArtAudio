{"ast":null,"code":"import _slicedToArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from \"tslib\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { generateWaveform } from \"./OscillatorInterface\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { clamp } from \"../../core/util/Math\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * // make and start a 440hz sine tone\n * const osc = new Tone.Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\n\nexport var Oscillator = /*#__PURE__*/function (_Source) {\n  _inherits(Oscillator, _Source);\n\n  var _super = _createSuper(Oscillator);\n\n  function Oscillator() {\n    var _this;\n\n    _classCallCheck(this, Oscillator);\n\n    _this = _super.call(this, optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"Oscillator\";\n    /**\n     * the main oscillator\n     */\n\n    _this._oscillator = null;\n    var options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    readOnly(_assertThisInitialized(_this), \"frequency\");\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    readOnly(_assertThisInitialized(_this), \"detune\");\n    _this._partials = options.partials;\n    _this._partialCount = options.partialCount;\n    _this._type = options.type;\n\n    if (options.partialCount && options.type !== \"custom\") {\n      _this._type = _this.baseType + options.partialCount.toString();\n    }\n\n    _this.phase = options.phase;\n    return _this;\n  }\n\n  _createClass(Oscillator, [{\n    key: \"_start\",\n    value:\n    /**\n     * start the oscillator\n     */\n    function _start(time) {\n      var _this2 = this;\n\n      var computedTime = this.toSeconds(time); // new oscillator with previous values\n\n      var oscillator = new ToneOscillatorNode({\n        context: this.context,\n        onended: function onended() {\n          return _this2.onstop(_this2);\n        }\n      });\n      this._oscillator = oscillator;\n\n      if (this._wave) {\n        this._oscillator.setPeriodicWave(this._wave);\n      } else {\n        this._oscillator.type = this._type;\n      } // connect the control signal to the oscillator frequency & detune\n\n\n      this._oscillator.connect(this.output);\n\n      this.frequency.connect(this._oscillator.frequency);\n      this.detune.connect(this._oscillator.detune); // start the oscillator\n\n      this._oscillator.start(computedTime);\n    }\n    /**\n     * stop the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      var computedTime = this.toSeconds(time);\n\n      if (this._oscillator) {\n        this._oscillator.stop(computedTime);\n      }\n    }\n    /**\n     * Restart the oscillator. Does not stop the oscillator, but instead\n     * just cancels any scheduled 'stop' from being invoked.\n     */\n\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      var computedTime = this.toSeconds(time);\n      this.log(\"restart\", computedTime);\n\n      if (this._oscillator) {\n        this._oscillator.cancelStop();\n      }\n\n      this._state.cancel(computedTime);\n\n      return this;\n    }\n    /**\n     * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n     * will also affect the oscillators frequency.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination().start();\n     * osc.frequency.value = 440;\n     * // the ratio between the bpm and the frequency will be maintained\n     * osc.syncFrequency();\n     * // double the tempo\n     * Tone.Transport.bpm.value *= 2;\n     * // the frequency of the oscillator is doubled to 880\n     */\n\n  }, {\n    key: \"syncFrequency\",\n    value: function syncFrequency() {\n      this.context.transport.syncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * Unsync the oscillator's frequency from the Transport.\n     * See Oscillator.syncFrequency\n     */\n\n  }, {\n    key: \"unsyncFrequency\",\n    value: function unsyncFrequency() {\n      this.context.transport.unsyncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * Get a cached periodic wave. Avoids having to recompute\n     * the oscillator values when they have already been computed\n     * with the same values.\n     */\n\n  }, {\n    key: \"_getCachedPeriodicWave\",\n    value: function _getCachedPeriodicWave() {\n      var _this3 = this;\n\n      if (this._type === \"custom\") {\n        var oscProps = Oscillator._periodicWaveCache.find(function (description) {\n          return description.phase === _this3._phase && deepEquals(description.partials, _this3._partials);\n        });\n\n        return oscProps;\n      } else {\n        var _oscProps = Oscillator._periodicWaveCache.find(function (description) {\n          return description.type === _this3._type && description.phase === _this3._phase;\n        });\n\n        this._partialCount = _oscProps ? _oscProps.partialCount : this._partialCount;\n        return _oscProps;\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      this._type = type;\n      var isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n\n      if (this._phase === 0 && isBasicType) {\n        this._wave = undefined;\n        this._partialCount = 0; // just go with the basic approach\n\n        if (this._oscillator !== null) {\n          // already tested that it's a basic type\n          this._oscillator.type = type;\n        }\n      } else {\n        // first check if the value is cached\n        var cache = this._getCachedPeriodicWave();\n\n        if (isDefined(cache)) {\n          var partials = cache.partials,\n              wave = cache.wave;\n          this._wave = wave;\n          this._partials = partials;\n\n          if (this._oscillator !== null) {\n            this._oscillator.setPeriodicWave(this._wave);\n          }\n        } else {\n          var _this$_getRealImagina = this._getRealImaginary(type, this._phase),\n              _this$_getRealImagina2 = _slicedToArray(_this$_getRealImagina, 2),\n              real = _this$_getRealImagina2[0],\n              imag = _this$_getRealImagina2[1];\n\n          var periodicWave = this.context.createPeriodicWave(real, imag);\n          this._wave = periodicWave;\n\n          if (this._oscillator !== null) {\n            this._oscillator.setPeriodicWave(this._wave);\n          } // set the cache\n\n\n          Oscillator._periodicWaveCache.push({\n            imag: imag,\n            partialCount: this._partialCount,\n            partials: this._partials,\n            phase: this._phase,\n            real: real,\n            type: this._type,\n            wave: this._wave\n          });\n\n          if (Oscillator._periodicWaveCache.length > 100) {\n            Oscillator._periodicWaveCache.shift();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return this._type.replace(this.partialCount.toString(), \"\");\n    },\n    set: function set(baseType) {\n      if (this.partialCount && this._type !== \"custom\" && baseType !== \"custom\") {\n        this.type = baseType + this.partialCount;\n      } else {\n        this.type = baseType;\n      }\n    }\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return this._partialCount;\n    },\n    set: function set(p) {\n      assertRange(p, 0);\n      var type = this._type;\n      var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n\n      if (partial) {\n        type = partial[1];\n      }\n\n      if (this._type !== \"custom\") {\n        if (p === 0) {\n          this.type = type;\n        } else {\n          this.type = type + p.toString();\n        }\n      } else {\n        // extend or shorten the partials array\n        var fullPartials = new Float32Array(p); // copy over the partials array\n\n        this._partials.forEach(function (v, i) {\n          return fullPartials[i] = v;\n        });\n\n        this._partials = Array.from(fullPartials);\n        this.type = this._type;\n      }\n    }\n    /**\n     * Returns the real and imaginary components based\n     * on the oscillator type.\n     * @returns [real: Float32Array, imaginary: Float32Array]\n     */\n\n  }, {\n    key: \"_getRealImaginary\",\n    value: function _getRealImaginary(type, phase) {\n      var fftSize = 4096;\n      var periodicWaveSize = fftSize / 2;\n      var real = new Float32Array(periodicWaveSize);\n      var imag = new Float32Array(periodicWaveSize);\n      var partialCount = 1;\n\n      if (type === \"custom\") {\n        partialCount = this._partials.length + 1;\n        this._partialCount = this._partials.length;\n        periodicWaveSize = partialCount; // if the partial count is 0, don't bother doing any computation\n\n        if (this._partials.length === 0) {\n          return [real, imag];\n        }\n      } else {\n        var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\n        if (partial) {\n          partialCount = parseInt(partial[2], 10) + 1;\n          this._partialCount = parseInt(partial[2], 10);\n          type = partial[1];\n          partialCount = Math.max(partialCount, 2);\n          periodicWaveSize = partialCount;\n        } else {\n          this._partialCount = 0;\n        }\n\n        this._partials = [];\n      }\n\n      for (var n = 1; n < periodicWaveSize; ++n) {\n        var piFactor = 2 / (n * Math.PI);\n        var b = void 0;\n\n        switch (type) {\n          case \"sine\":\n            b = n <= partialCount ? 1 : 0;\n            this._partials[n - 1] = b;\n            break;\n\n          case \"square\":\n            b = n & 1 ? 2 * piFactor : 0;\n            this._partials[n - 1] = b;\n            break;\n\n          case \"sawtooth\":\n            b = piFactor * (n & 1 ? 1 : -1);\n            this._partials[n - 1] = b;\n            break;\n\n          case \"triangle\":\n            if (n & 1) {\n              b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n            } else {\n              b = 0;\n            }\n\n            this._partials[n - 1] = b;\n            break;\n\n          case \"custom\":\n            b = this._partials[n - 1];\n            break;\n\n          default:\n            throw new TypeError(\"Oscillator: invalid type: \" + type);\n        }\n\n        if (b !== 0) {\n          real[n] = -b * Math.sin(phase * n);\n          imag[n] = b * Math.cos(phase * n);\n        } else {\n          real[n] = 0;\n          imag[n] = 0;\n        }\n      }\n\n      return [real, imag];\n    }\n    /**\n     * Compute the inverse FFT for a given phase.\n     */\n\n  }, {\n    key: \"_inverseFFT\",\n    value: function _inverseFFT(real, imag, phase) {\n      var sum = 0;\n      var len = real.length;\n\n      for (var i = 0; i < len; i++) {\n        sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n      }\n\n      return sum;\n    }\n    /**\n     * Returns the initial value of the oscillator when stopped.\n     * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n     */\n\n  }, {\n    key: \"getInitialValue\",\n    value: function getInitialValue() {\n      var _this$_getRealImagina3 = this._getRealImaginary(this._type, 0),\n          _this$_getRealImagina4 = _slicedToArray(_this$_getRealImagina3, 2),\n          real = _this$_getRealImagina4[0],\n          imag = _this$_getRealImagina4[1];\n\n      var maxValue = 0;\n      var twoPi = Math.PI * 2;\n      var testPositions = 32; // check for peaks in 16 places\n\n      for (var i = 0; i < testPositions; i++) {\n        maxValue = Math.max(this._inverseFFT(real, imag, i / testPositions * twoPi), maxValue);\n      }\n\n      return clamp(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);\n    }\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return this._partials.slice(0, this.partialCount);\n    },\n    set: function set(partials) {\n      this._partials = partials;\n      this._partialCount = this._partials.length;\n\n      if (partials.length) {\n        this.type = \"custom\";\n      }\n    }\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._phase * (180 / Math.PI);\n    },\n    set: function set(phase) {\n      this._phase = phase * Math.PI / 180; // reset the type\n\n      this.type = this._type;\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Oscillator.prototype), \"dispose\", this).call(this);\n\n      if (this._oscillator !== null) {\n        this._oscillator.dispose();\n      }\n\n      this._wave = undefined;\n      this.frequency.dispose();\n      this.detune.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        detune: 0,\n        frequency: 440,\n        partialCount: 0,\n        partials: [],\n        phase: 0,\n        type: \"sine\"\n      });\n    }\n  }]);\n\n  return Oscillator;\n}(Source);\n/**\n * Cache the periodic waves to avoid having to redo computations\n */\n\nOscillator._periodicWaveCache = [];","map":{"version":3,"mappings":"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","names":["deepEquals","optionsFromArguments","readOnly","isDefined","Signal","Source","generateWaveform","ToneOscillatorNode","assertRange","clamp","Oscillator","getDefaults","arguments","options","frequency","context","units","value","detune","_partials","partials","_partialCount","partialCount","_type","type","baseType","toString","phase","time","computedTime","toSeconds","oscillator","onended","onstop","_oscillator","_wave","setPeriodicWave","connect","output","start","stop","log","cancelStop","_state","cancel","transport","syncSignal","unsyncSignal","oscProps","_periodicWaveCache","find","description","_phase","isBasicType","indexOf","undefined","cache","_getCachedPeriodicWave","wave","_getRealImaginary","real","imag","periodicWave","createPeriodicWave","push","length","shift","replace","p","partial","exec","fullPartials","Float32Array","forEach","v","i","Array","from","fftSize","periodicWaveSize","parseInt","Math","max","n","piFactor","PI","b","TypeError","sin","cos","sum","len","maxValue","twoPi","testPositions","_inverseFFT","slice","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/source/oscillator/Oscillator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}