{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { connect } from \"../../core/context/ToneAudioNode\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isDefined } from \"../../core/util/TypeCheck\";\nimport { assert } from \"../../core/util/Debug\";\nimport { OneShotSource } from \"../OneShotSource\";\nimport { EQ, GTE, LT } from \"../../core/util/Math\";\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\n\nexport var ToneBufferSource = /*#__PURE__*/function (_OneShotSource) {\n  _inherits(ToneBufferSource, _OneShotSource);\n\n  var _super = _createSuper(ToneBufferSource);\n\n  function ToneBufferSource() {\n    var _this;\n\n    _classCallCheck(this, ToneBufferSource);\n\n    _this = _super.call(this, optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"ToneBufferSource\";\n    /**\n     * The oscillator\n     */\n\n    _this._source = _this.context.createBufferSource();\n    _this._internalChannels = [_this._source];\n    /**\n     * indicators if the source has started/stopped\n     */\n\n    _this._sourceStarted = false;\n    _this._sourceStopped = false;\n    var options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]);\n    connect(_this._source, _this._gainNode);\n\n    _this._source.onended = function () {\n      return _this._stopSource();\n    };\n    /**\n     * The playbackRate of the buffer\n     */\n\n\n    _this.playbackRate = new Param({\n      context: _this.context,\n      param: _this._source.playbackRate,\n      units: \"positive\",\n      value: options.playbackRate\n    }); // set some values initially\n\n    _this.loop = options.loop;\n    _this.loopStart = options.loopStart;\n    _this.loopEnd = options.loopEnd;\n    _this._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);\n\n    _this._internalChannels.push(_this._source);\n\n    return _this;\n  }\n\n  _createClass(ToneBufferSource, [{\n    key: \"fadeIn\",\n    get:\n    /**\n     * The fadeIn time of the amplitude envelope.\n     */\n    function get() {\n      return this._fadeIn;\n    },\n    set: function set(t) {\n      this._fadeIn = t;\n    }\n    /**\n     * The fadeOut time of the amplitude envelope.\n     */\n\n  }, {\n    key: \"fadeOut\",\n    get: function get() {\n      return this._fadeOut;\n    },\n    set: function set(t) {\n      this._fadeOut = t;\n    }\n    /**\n     * The curve applied to the fades, either \"linear\" or \"exponential\"\n     */\n\n  }, {\n    key: \"curve\",\n    get: function get() {\n      return this._curve;\n    },\n    set: function set(t) {\n      this._curve = t;\n    }\n    /**\n     * Start the buffer\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     * @param  gain  The gain to play the buffer back at.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(time, offset, duration) {\n      var gain = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n      var computedTime = this.toSeconds(time); // apply the gain envelope\n\n      this._startGain(computedTime, gain); // if it's a loop the default offset is the loopstart point\n\n\n      if (this.loop) {\n        offset = defaultArg(offset, this.loopStart);\n      } else {\n        // otherwise the default offset is 0\n        offset = defaultArg(offset, 0);\n      } // make sure the offset is not less than 0\n\n\n      var computedOffset = Math.max(this.toSeconds(offset), 0); // start the buffer source\n\n      if (this.loop) {\n        // modify the offset if it's greater than the loop time\n        var loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n        var loopStart = this.toSeconds(this.loopStart);\n        var loopDuration = loopEnd - loopStart; // move the offset back\n\n        if (GTE(computedOffset, loopEnd)) {\n          computedOffset = (computedOffset - loopStart) % loopDuration + loopStart;\n        } // when the offset is very close to the duration, set it to 0\n\n\n        if (EQ(computedOffset, this.buffer.duration)) {\n          computedOffset = 0;\n        }\n      } // this.buffer.loaded would have return false if the AudioBuffer was undefined\n\n\n      this._source.buffer = this.buffer.get();\n      this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n\n      if (LT(computedOffset, this.buffer.duration)) {\n        this._sourceStarted = true;\n\n        this._source.start(computedTime, computedOffset);\n      } // if a duration is given, schedule a stop\n\n\n      if (isDefined(duration)) {\n        var computedDur = this.toSeconds(duration); // make sure it's never negative\n\n        computedDur = Math.max(computedDur, 0);\n        this.stop(computedTime + computedDur);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_stopSource\",\n    value: function _stopSource(time) {\n      if (!this._sourceStopped && this._sourceStarted) {\n        this._sourceStopped = true;\n\n        this._source.stop(this.toSeconds(time));\n\n        this._onended();\n      }\n    }\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return this._source.loopStart;\n    },\n    set: function set(loopStart) {\n      this._source.loopStart = this.toSeconds(loopStart);\n    }\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return this._source.loopEnd;\n    },\n    set: function set(loopEnd) {\n      this._source.loopEnd = this.toSeconds(loopEnd);\n    }\n    /**\n     * The audio buffer belonging to the player.\n     */\n\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      return this._buffer;\n    },\n    set: function set(buffer) {\n      this._buffer.set(buffer);\n    }\n    /**\n     * If the buffer should loop once it's over.\n     */\n\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._source.loop;\n    },\n    set: function set(loop) {\n      this._source.loop = loop;\n\n      if (this._sourceStarted) {\n        this.cancelStop();\n      }\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneBufferSource.prototype), \"dispose\", this).call(this);\n\n      this._source.onended = null;\n\n      this._source.disconnect();\n\n      this._buffer.dispose();\n\n      this.playbackRate.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(OneShotSource.getDefaults(), {\n        url: new ToneAudioBuffer(),\n        loop: false,\n        loopEnd: 0,\n        loopStart: 0,\n        onload: noOp,\n        onerror: noOp,\n        playbackRate: 1\n      });\n    }\n  }]);\n\n  return ToneBufferSource;\n}(OneShotSource);","map":{"version":3,"mappings":"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","names":["connect","Param","ToneAudioBuffer","defaultArg","optionsFromArguments","noOp","isDefined","assert","OneShotSource","EQ","GTE","LT","ToneBufferSource","getDefaults","arguments","context","createBufferSource","_source","options","_gainNode","onended","_stopSource","playbackRate","param","units","value","loop","loopStart","loopEnd","_buffer","url","onload","onerror","_internalChannels","push","_fadeIn","t","_fadeOut","_curve","time","offset","duration","gain","buffer","loaded","computedTime","toSeconds","_startGain","computedOffset","Math","max","loopDuration","get","_sourceStarted","start","computedDur","stop","_sourceStopped","_onended","set","cancelStop","disconnect","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/source/buffer/ToneBufferSource.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}