{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\n\nexport var PulseOscillator = /*#__PURE__*/function (_Source) {\n  _inherits(PulseOscillator, _Source);\n\n  var _super = _createSuper(PulseOscillator);\n\n  function PulseOscillator() {\n    var _this;\n\n    _classCallCheck(this, PulseOscillator);\n\n    _this = _super.call(this, optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n    _this.name = \"PulseOscillator\";\n    /**\n     * gate the width amount\n     */\n\n    _this._widthGate = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * Threshold the signal to turn it into a square\n     */\n\n    _this._thresh = new WaveShaper({\n      context: _this.context,\n      mapping: function mapping(val) {\n        return val <= 0 ? -1 : 1;\n      }\n    });\n    var options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n    _this.width = new Signal({\n      context: _this.context,\n      units: \"audioRange\",\n      value: options.width\n    });\n    _this._triangle = new Oscillator({\n      context: _this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: function onstop() {\n        return _this.onstop(_assertThisInitialized(_this));\n      },\n      phase: options.phase,\n      type: \"triangle\"\n    });\n    _this.frequency = _this._triangle.frequency;\n    _this.detune = _this._triangle.detune; // connections\n\n    _this._triangle.chain(_this._thresh, _this.output);\n\n    _this.width.chain(_this._widthGate, _this._thresh);\n\n    readOnly(_assertThisInitialized(_this), [\"width\", \"frequency\", \"detune\"]);\n    return _this;\n  }\n\n  _createClass(PulseOscillator, [{\n    key: \"_start\",\n    value:\n    /**\n     * start the oscillator\n     */\n    function _start(time) {\n      time = this.toSeconds(time);\n\n      this._triangle.start(time);\n\n      this._widthGate.gain.setValueAtTime(1, time);\n    }\n    /**\n     * stop the oscillator\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      time = this.toSeconds(time);\n\n      this._triangle.stop(time); // the width is still connected to the output.\n      // that needs to be stopped also\n\n\n      this._widthGate.gain.cancelScheduledValues(time);\n\n      this._widthGate.gain.setValueAtTime(0, time);\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      this._triangle.restart(time);\n\n      this._widthGate.gain.cancelScheduledValues(time);\n\n      this._widthGate.gain.setValueAtTime(1, time);\n    }\n    /**\n     * The phase of the oscillator in degrees.\n     */\n\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._triangle.phase;\n    },\n    set: function set(phase) {\n      this._triangle.phase = phase;\n    }\n    /**\n     * The type of the oscillator. Always returns \"pulse\".\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"pulse\";\n    }\n    /**\n     * The baseType of the oscillator. Always returns \"pulse\".\n     */\n\n  }, {\n    key: \"baseType\",\n    get: function get() {\n      return \"pulse\";\n    }\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return [];\n    }\n    /**\n     * No partials for this waveform type.\n     */\n\n  }, {\n    key: \"partialCount\",\n    get: function get() {\n      return 0;\n    }\n    /**\n     * *Internal use* The carrier oscillator type is fed through the\n     * waveshaper node to create the pulse. Using different carrier oscillators\n     * changes oscillator's behavior.\n     */\n\n  }, {\n    key: \"carrierType\",\n    set: function set(type) {\n      this._triangle.type = type;\n    }\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", generateWaveform(this, length));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Clean up method.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(PulseOscillator.prototype), \"dispose\", this).call(this);\n\n      this._triangle.dispose();\n\n      this.width.dispose();\n\n      this._widthGate.dispose();\n\n      this._thresh.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        detune: 0,\n        frequency: 440,\n        phase: 0,\n        type: \"pulse\",\n        width: 0.2\n      });\n    }\n  }]);\n\n  return PulseOscillator;\n}(Source);","map":{"version":3,"mappings":"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","names":["Gain","optionsFromArguments","readOnly","Signal","WaveShaper","Source","Oscillator","generateWaveform","PulseOscillator","getDefaults","arguments","context","gain","mapping","val","options","width","units","value","_triangle","detune","frequency","onstop","phase","type","chain","_thresh","output","_widthGate","time","toSeconds","start","setValueAtTime","stop","cancelScheduledValues","restart","length","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/source/oscillator/PulseOscillator.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}