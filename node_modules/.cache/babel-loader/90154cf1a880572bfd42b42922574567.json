{"ast":null,"code":"import _toConsumableArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Synth is composed simply of a [[OmniOscillator]] routed through an [[AmplitudeEnvelope]].\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\n\nexport var Synth = /*#__PURE__*/function (_Monophonic) {\n  _inherits(Synth, _Monophonic);\n\n  var _super = _createSuper(Synth);\n\n  function Synth() {\n    var _this;\n\n    _classCallCheck(this, Synth);\n\n    _this = _super.call(this, optionsFromArguments(Synth.getDefaults(), arguments));\n    _this.name = \"Synth\";\n    var options = optionsFromArguments(Synth.getDefaults(), arguments);\n    _this.oscillator = new OmniOscillator(Object.assign({\n      context: _this.context,\n      detune: options.detune,\n      onstop: function onstop() {\n        return _this.onsilence(_assertThisInitialized(_this));\n      }\n    }, options.oscillator));\n    _this.frequency = _this.oscillator.frequency;\n    _this.detune = _this.oscillator.detune;\n    _this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: _this.context\n    }, options.envelope)); // connect the oscillators to the output\n\n    _this.oscillator.chain(_this.envelope, _this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n    return _this;\n  }\n\n  _createClass(Synth, [{\n    key: \"_triggerEnvelopeAttack\",\n    value:\n    /**\n     * start the attack portion of the envelope\n     * @param time the time the attack should start\n     * @param velocity the velocity of the note (0-1)\n     */\n    function _triggerEnvelopeAttack(time, velocity) {\n      // the envelopes\n      this.envelope.triggerAttack(time, velocity);\n      this.oscillator.start(time); // if there is no release portion, stop the oscillator\n\n      if (this.envelope.sustain === 0) {\n        var computedAttack = this.toSeconds(this.envelope.attack);\n        var computedDecay = this.toSeconds(this.envelope.decay);\n        this.oscillator.stop(time + computedAttack + computedDecay);\n      }\n    }\n    /**\n     * start the release portion of the envelope\n     * @param time the time the release should start\n     */\n\n  }, {\n    key: \"_triggerEnvelopeRelease\",\n    value: function _triggerEnvelopeRelease(time) {\n      this.envelope.triggerRelease(time);\n      this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n    }\n  }, {\n    key: \"getLevelAtTime\",\n    value: function getLevelAtTime(time) {\n      time = this.toSeconds(time);\n      return this.envelope.getValueAtTime(time);\n    }\n    /**\n     * clean up\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Synth.prototype), \"dispose\", this).call(this);\n\n      this.oscillator.dispose();\n      this.envelope.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Monophonic.getDefaults(), {\n        envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.005,\n          decay: 0.1,\n          release: 1,\n          sustain: 0.3\n        }),\n        oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [].concat(_toConsumableArray(Object.keys(Source.getDefaults())), [\"frequency\", \"detune\"])), {\n          type: \"triangle\"\n        })\n      });\n    }\n  }]);\n\n  return Synth;\n}(Monophonic);","map":{"version":3,"mappings":"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","names":["AmplitudeEnvelope","Envelope","ToneAudioNode","omitFromObject","optionsFromArguments","readOnly","OmniOscillator","Source","Monophonic","Synth","getDefaults","arguments","options","oscillator","Object","assign","context","detune","onstop","onsilence","frequency","envelope","chain","output","time","velocity","triggerAttack","start","sustain","computedAttack","toSeconds","attack","computedDecay","decay","stop","triggerRelease","release","getValueAtTime","dispose","keys","type"],"sourceRoot":"","sources":["../../../Tone/instrument/Synth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}