{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\n\nexport var Negate = /*#__PURE__*/function (_SignalOperator) {\n  _inherits(Negate, _SignalOperator);\n\n  var _super = _createSuper(Negate);\n\n  function Negate() {\n    var _this;\n\n    _classCallCheck(this, Negate);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"Negate\";\n    /**\n     * negation is done by multiplying by -1\n     */\n\n    _this._multiply = new Multiply({\n      context: _this.context,\n      value: -1\n    });\n    /**\n     * The input and output are equal to the multiply node\n     */\n\n    _this.input = _this._multiply;\n    _this.output = _this._multiply;\n    return _this;\n  }\n  /**\n   * clean up\n   * @returns {Negate} this\n   */\n\n\n  _createClass(Negate, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Negate.prototype), \"dispose\", this).call(this);\n\n      this._multiply.dispose();\n\n      return this;\n    }\n  }]);\n\n  return Negate;\n}(SignalOperator);","map":{"version":3,"mappings":";;;;;;AACA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA;;;;;;;;;;AASA,WAAaC,MAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAEU,iBAAe,QAAf;AAET;;;;AAGQ,sBAAsB,IAAIF,QAAJ,CAAa;AAC1CG,aAAO,EAAE,MAAKA,OAD4B;AAE1CC,WAAK,EAAE,CAAC;AAFkC,KAAb,CAAtB;AAKR;;;;AAGA,kBAAQ,MAAKC,SAAb;AACA,mBAAS,MAAKA,SAAd;AAhBD;AA2BC;AATA;;;;;;AAlBD;AAAA;AAAA,WAsBC,mBAAO;AACN;;AACA,WAAKA,SAAL,CAAeC,OAAf;;AACA,aAAO,IAAP;AACA;AA1BF;;AAAA;AAAA,EAA4BL,cAA5B","names":["Multiply","SignalOperator","Negate","context","value","_multiply","dispose"],"sourceRoot":"","sources":["../../../Tone/signal/Negate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}