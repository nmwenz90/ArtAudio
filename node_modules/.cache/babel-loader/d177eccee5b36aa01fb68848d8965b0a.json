{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\".\n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop.\n * References:\n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/\n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\n\nexport var OnePoleFilter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(OnePoleFilter, _ToneAudioNode);\n\n  var _super = _createSuper(OnePoleFilter);\n\n  function OnePoleFilter() {\n    var _this;\n\n    _classCallCheck(this, OnePoleFilter);\n\n    _this = _super.call(this, optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"OnePoleFilter\";\n    var options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this._frequency = options.frequency;\n    _this._type = options.type;\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n\n    _this._createFilter();\n\n    return _this;\n  }\n\n  _createClass(OnePoleFilter, [{\n    key: \"_createFilter\",\n    value:\n    /**\n     * Create a filter and dispose the old one\n     */\n    function _createFilter() {\n      var _this2 = this;\n\n      var oldFilter = this._filter;\n      var freq = this.toFrequency(this._frequency);\n      var t = 1 / (2 * Math.PI * freq);\n\n      if (this._type === \"lowpass\") {\n        var a0 = 1 / (t * this.context.sampleRate);\n        var b1 = a0 - 1;\n        this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n      } else {\n        var _b = 1 / (t * this.context.sampleRate) - 1;\n\n        this._filter = this.context.createIIRFilter([1, -1], [1, _b]);\n      }\n\n      this.input.chain(this._filter, this.output);\n\n      if (oldFilter) {\n        // dispose it on the next block\n        this.context.setTimeout(function () {\n          if (!_this2.disposed) {\n            _this2.input.disconnect(oldFilter);\n\n            oldFilter.disconnect();\n          }\n        }, this.blockTime);\n      }\n    }\n    /**\n     * The frequency value.\n     */\n\n  }, {\n    key: \"frequency\",\n    get: function get() {\n      return this._frequency;\n    },\n    set: function set(fq) {\n      this._frequency = fq;\n\n      this._createFilter();\n    }\n    /**\n     * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(t) {\n      this._type = t;\n\n      this._createFilter();\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n\n  }, {\n    key: \"getFrequencyResponse\",\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      var freqValues = new Float32Array(len);\n\n      for (var i = 0; i < len; i++) {\n        var norm = Math.pow(i / len, 2);\n        var freq = norm * (20000 - 20) + 20;\n        freqValues[i] = freq;\n      }\n\n      var magValues = new Float32Array(len);\n      var phaseValues = new Float32Array(len);\n\n      this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\n      return magValues;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(OnePoleFilter.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n      this.output.dispose();\n\n      this._filter.disconnect();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        frequency: 880,\n        type: \"lowpass\"\n      });\n    }\n  }]);\n\n  return OnePoleFilter;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Gain","OnePoleFilter","getDefaults","arguments","options","_frequency","frequency","_type","type","input","context","output","_createFilter","oldFilter","_filter","freq","toFrequency","t","Math","PI","a0","sampleRate","b1","createIIRFilter","chain","setTimeout","disposed","disconnect","blockTime","fq","len","freqValues","Float32Array","i","norm","pow","magValues","phaseValues","getFrequencyResponse","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/filter/OnePoleFilter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}