{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof as _mtof } from \"./Conversions\";\nimport { ftom as _ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\n\nexport var FrequencyClass = /*#__PURE__*/function (_TimeClass) {\n  _inherits(FrequencyClass, _TimeClass);\n\n  var _super = _createSuper(FrequencyClass);\n\n  function FrequencyClass() {\n    var _this;\n\n    _classCallCheck(this, FrequencyClass);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"Frequency\";\n    _this.defaultUnits = \"hz\";\n    return _this;\n  }\n  /**\n   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n   * to generate all the other pitch values from notes. A4's values in Hertz.\n   */\n\n\n  _createClass(FrequencyClass, [{\n    key: \"_getExpressions\",\n    value: //-------------------------------------\n    // \tAUGMENT BASE EXPRESSIONS\n    //-------------------------------------\n    function _getExpressions() {\n      return Object.assign({}, _get(_getPrototypeOf(FrequencyClass.prototype), \"_getExpressions\", this).call(this), {\n        midi: {\n          regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n          method: function method(value) {\n            if (this.defaultUnits === \"midi\") {\n              return value;\n            } else {\n              return FrequencyClass.mtof(value);\n            }\n          }\n        },\n        note: {\n          regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n          method: function method(pitch, octave) {\n            var index = noteToScaleIndex[pitch.toLowerCase()];\n            var noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\n            if (this.defaultUnits === \"midi\") {\n              return noteNumber;\n            } else {\n              return FrequencyClass.mtof(noteNumber);\n            }\n          }\n        },\n        tr: {\n          regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n          method: function method(m, q, s) {\n            var total = 1;\n\n            if (m && m !== \"0\") {\n              total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n            }\n\n            if (q && q !== \"0\") {\n              total *= this._beatsToUnits(parseFloat(q));\n            }\n\n            if (s && s !== \"0\") {\n              total *= this._beatsToUnits(parseFloat(s) / 4);\n            }\n\n            return total;\n          }\n        }\n      });\n    } //-------------------------------------\n    // \tEXPRESSIONS\n    //-------------------------------------\n\n    /**\n     * Transposes the frequency by the given number of semitones.\n     * @return  A new transposed frequency\n     * @example\n     * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n     */\n\n  }, {\n    key: \"transpose\",\n    value: function transpose(interval) {\n      return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n    }\n    /**\n     * Takes an array of semitone intervals and returns\n     * an array of frequencies transposed by those intervals.\n     * @return  Returns an array of Frequencies\n     * @example\n     * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n     */\n\n  }, {\n    key: \"harmonize\",\n    value: function harmonize(intervals) {\n      var _this2 = this;\n\n      return intervals.map(function (interval) {\n        return _this2.transpose(interval);\n      });\n    } //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Frequency(\"C4\").toMidi(); // 60\n     */\n\n  }, {\n    key: \"toMidi\",\n    value: function toMidi() {\n      return _ftom(this.valueOf());\n    }\n    /**\n     * Return the value of the frequency in Scientific Pitch Notation\n     * @example\n     * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n     */\n\n  }, {\n    key: \"toNote\",\n    value: function toNote() {\n      var freq = this.toFrequency();\n      var log = Math.log2(freq / FrequencyClass.A4);\n      var noteNumber = Math.round(12 * log) + 57;\n      var octave = Math.floor(noteNumber / 12);\n\n      if (octave < 0) {\n        noteNumber += -12 * octave;\n      }\n\n      var noteName = scaleIndexToNote[noteNumber % 12];\n      return noteName + octave.toString();\n    }\n    /**\n     * Return the duration of one cycle in seconds.\n     */\n\n  }, {\n    key: \"toSeconds\",\n    value: function toSeconds() {\n      return 1 / _get(_getPrototypeOf(FrequencyClass.prototype), \"toSeconds\", this).call(this);\n    }\n    /**\n     * Return the duration of one cycle in ticks\n     */\n\n  }, {\n    key: \"toTicks\",\n    value: function toTicks() {\n      var quarterTime = this._beatsToUnits(1);\n\n      var quarters = this.valueOf() / quarterTime;\n      return Math.floor(quarters * this._getPPQ());\n    } //-------------------------------------\n    // \tUNIT CONVERSIONS HELPERS\n    //-------------------------------------\n\n    /**\n     * With no arguments, return 0\n     */\n\n  }, {\n    key: \"_noArg\",\n    value: function _noArg() {\n      return 0;\n    }\n    /**\n     * Returns the value of a frequency in the current units\n     */\n\n  }, {\n    key: \"_frequencyToUnits\",\n    value: function _frequencyToUnits(freq) {\n      return freq;\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n\n  }, {\n    key: \"_ticksToUnits\",\n    value: function _ticksToUnits(ticks) {\n      return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n\n  }, {\n    key: \"_beatsToUnits\",\n    value: function _beatsToUnits(beats) {\n      return 1 / _get(_getPrototypeOf(FrequencyClass.prototype), \"_beatsToUnits\", this).call(this, beats);\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n\n  }, {\n    key: \"_secondsToUnits\",\n    value: function _secondsToUnits(seconds) {\n      return 1 / seconds;\n    }\n    /**\n     * Convert a MIDI note to frequency value.\n     * @param  midi The midi number to convert.\n     * @return The corresponding frequency value\n     */\n\n  }], [{\n    key: \"A4\",\n    get: function get() {\n      return getA4();\n    },\n    set: function set(freq) {\n      setA4(freq);\n    }\n  }, {\n    key: \"mtof\",\n    value: function mtof(midi) {\n      return _mtof(midi);\n    }\n    /**\n     * Convert a frequency value to a MIDI note.\n     * @param frequency The value to frequency value to convert.\n     */\n\n  }, {\n    key: \"ftom\",\n    value: function ftom(frequency) {\n      return _ftom(frequency);\n    }\n  }]);\n\n  return FrequencyClass;\n}(TimeClass); //-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index.\n * @hidden\n */\n\nvar noteToScaleIndex = {\n  cbb: -2,\n  cb: -1,\n  c: 0,\n  \"c#\": 1,\n  cx: 2,\n  dbb: 0,\n  db: 1,\n  d: 2,\n  \"d#\": 3,\n  dx: 4,\n  ebb: 2,\n  eb: 3,\n  e: 4,\n  \"e#\": 5,\n  ex: 6,\n  fbb: 3,\n  fb: 4,\n  f: 5,\n  \"f#\": 6,\n  fx: 7,\n  gbb: 5,\n  gb: 6,\n  g: 7,\n  \"g#\": 8,\n  gx: 9,\n  abb: 7,\n  ab: 8,\n  a: 9,\n  \"a#\": 10,\n  ax: 11,\n  bbb: 9,\n  bb: 10,\n  b: 11,\n  \"b#\": 12,\n  bx: 13\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\n\nvar scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\n\nexport function Frequency(value, units) {\n  return new FrequencyClass(getContext(), value, units);\n}","map":{"version":3,"mappings":"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","names":["getContext","intervalToFrequencyRatio","mtof","ftom","getA4","setA4","TimeClass","FrequencyClass","Object","assign","midi","regexp","method","value","defaultUnits","note","pitch","octave","index","noteToScaleIndex","toLowerCase","noteNumber","parseInt","tr","m","q","s","total","_beatsToUnits","_getTimeSignature","parseFloat","interval","context","valueOf","intervals","map","transpose","freq","toFrequency","log","Math","log2","A4","round","floor","noteName","scaleIndexToNote","toString","quarterTime","quarters","_getPPQ","ticks","_getBpm","beats","seconds","frequency","cbb","cb","c","cx","dbb","db","d","dx","ebb","eb","e","ex","fbb","fb","f","fx","gbb","gb","g","gx","abb","ab","a","ax","bbb","bb","b","bx","Frequency","units"],"sourceRoot":"","sources":["../../../../Tone/core/type/Frequency.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}