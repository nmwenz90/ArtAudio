{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getContext } from \"../Global\";\nimport { ftom, mtof } from \"./Conversions\";\nimport { FrequencyClass } from \"./Frequency\";\n/**\n * Midi is a primitive type for encoding Time values.\n * Midi can be constructed with or without the `new` keyword. Midi can be passed\n * into the parameter of any method which takes time as an argument.\n * @category Unit\n */\n\nexport var MidiClass = /*#__PURE__*/function (_FrequencyClass) {\n  _inherits(MidiClass, _FrequencyClass);\n\n  var _super = _createSuper(MidiClass);\n\n  function MidiClass() {\n    var _this;\n\n    _classCallCheck(this, MidiClass);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"MidiClass\";\n    _this.defaultUnits = \"midi\";\n    return _this;\n  }\n  /**\n   * Returns the value of a frequency in the current units\n   */\n\n\n  _createClass(MidiClass, [{\n    key: \"_frequencyToUnits\",\n    value: function _frequencyToUnits(freq) {\n      return ftom(_get(_getPrototypeOf(MidiClass.prototype), \"_frequencyToUnits\", this).call(this, freq));\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n\n  }, {\n    key: \"_ticksToUnits\",\n    value: function _ticksToUnits(ticks) {\n      return ftom(_get(_getPrototypeOf(MidiClass.prototype), \"_ticksToUnits\", this).call(this, ticks));\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n\n  }, {\n    key: \"_beatsToUnits\",\n    value: function _beatsToUnits(beats) {\n      return ftom(_get(_getPrototypeOf(MidiClass.prototype), \"_beatsToUnits\", this).call(this, beats));\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n\n  }, {\n    key: \"_secondsToUnits\",\n    value: function _secondsToUnits(seconds) {\n      return ftom(_get(_getPrototypeOf(MidiClass.prototype), \"_secondsToUnits\", this).call(this, seconds));\n    }\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Midi(60).toMidi(); // 60\n     */\n\n  }, {\n    key: \"toMidi\",\n    value: function toMidi() {\n      return this.valueOf();\n    }\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Midi(60).toFrequency(); // 261.6255653005986\n     */\n\n  }, {\n    key: \"toFrequency\",\n    value: function toFrequency() {\n      return mtof(this.toMidi());\n    }\n    /**\n     * Transposes the frequency by the given number of semitones.\n     * @return A new transposed MidiClass\n     * @example\n     * Tone.Midi(\"A4\").transpose(3); // \"C5\"\n     */\n\n  }, {\n    key: \"transpose\",\n    value: function transpose(interval) {\n      return new MidiClass(this.context, this.toMidi() + interval);\n    }\n  }]);\n\n  return MidiClass;\n}(FrequencyClass);\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n */\n\nexport function Midi(value, units) {\n  return new MidiClass(getContext(), value, units);\n}","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,WAA3B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,eAA3B;AACA,SAASC,cAAT,QAA8C,aAA9C;AAIA;;;;;;;AAMA,WAAaC,SAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAEU,iBAAe,WAAf;AAEA,yBAAe,MAAf;AAJV;AA6DC;AAvDA;;;;;AAND;AAAA;AAAA,WASW,2BAAkBC,IAAlB,EAA6B;AACtC,aAAOJ,IAAI,kFAAyBI,IAAzB,EAAX;AACA;AAED;;;;AAbD;AAAA;AAAA,WAgBW,uBAAcC,KAAd,EAA0B;AACnC,aAAOL,IAAI,8EAAqBK,KAArB,EAAX;AACA;AAED;;;;AApBD;AAAA;AAAA,WAuBW,uBAAcC,KAAd,EAA2B;AACpC,aAAON,IAAI,8EAAqBM,KAArB,EAAX;AACA;AAED;;;;AA3BD;AAAA;AAAA,WA8BW,yBAAgBC,OAAhB,EAAgC;AACzC,aAAOP,IAAI,gFAAuBO,OAAvB,EAAX;AACA;AAED;;;;;;AAlCD;AAAA;AAAA,WAuCC,kBAAM;AACL,aAAO,KAAKC,OAAL,EAAP;AACA;AAED;;;;;;AA3CD;AAAA;AAAA,WAgDC,uBAAW;AACV,aAAOP,IAAI,CAAC,KAAKQ,MAAL,EAAD,CAAX;AACA;AAED;;;;;;;AApDD;AAAA;AAAA,WA0DC,mBAAUC,QAAV,EAA4B;AAC3B,aAAO,IAAIP,SAAJ,CAAc,KAAKQ,OAAnB,EAA4B,KAAKF,MAAL,KAAgBC,QAA5C,CAAP;AACA;AA5DF;;AAAA;AAAA,EAA+BR,cAA/B;AA+DA;;;;;AAIA,OAAM,SAAUU,IAAV,CAAeC,KAAf,EAAkCC,KAAlC,EAAuD;AAC5D,SAAO,IAAIX,SAAJ,CAAcJ,UAAU,EAAxB,EAA4Bc,KAA5B,EAAmCC,KAAnC,CAAP;AACA","names":["getContext","ftom","mtof","FrequencyClass","MidiClass","freq","ticks","beats","seconds","valueOf","toMidi","interval","context","Midi","value","units"],"sourceRoot":"","sources":["../../../../Tone/core/type/Midi.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}