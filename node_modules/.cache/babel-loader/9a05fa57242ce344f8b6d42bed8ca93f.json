{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getContext } from \"../Global\";\nimport { ftom } from \"./Conversions\";\nimport { TimeBaseClass } from \"./TimeBase\";\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * const time = Tone.Time(\"4n\"); // a quarter note\n * @category Unit\n */\n\nexport var TimeClass = /*#__PURE__*/function (_TimeBaseClass) {\n  _inherits(TimeClass, _TimeBaseClass);\n\n  var _super = _createSuper(TimeClass);\n\n  function TimeClass() {\n    var _this;\n\n    _classCallCheck(this, TimeClass);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"TimeClass\";\n    return _this;\n  }\n\n  _createClass(TimeClass, [{\n    key: \"_getExpressions\",\n    value: function _getExpressions() {\n      var _this2 = this;\n\n      return Object.assign(_get(_getPrototypeOf(TimeClass.prototype), \"_getExpressions\", this).call(this), {\n        now: {\n          method: function method(capture) {\n            return _this2._now() + new _this2.constructor(_this2.context, capture).valueOf();\n          },\n          regexp: /^\\+(.+)/\n        },\n        quantize: {\n          method: function method(capture) {\n            var quantTo = new TimeClass(_this2.context, capture).valueOf();\n            return _this2._secondsToUnits(_this2.context.transport.nextSubdivision(quantTo));\n          },\n          regexp: /^@(.+)/\n        }\n      });\n    }\n    /**\n     * Quantize the time by the given subdivision. Optionally add a\n     * percentage which will move the time value towards the ideal\n     * quantized value by that percentage.\n     * @param  subdiv    The subdivision to quantize to\n     * @param  percent  Move the time value towards the quantized value by a percentage.\n     * @example\n     * Tone.Time(21).quantize(2); // returns 22\n     * Tone.Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n     */\n\n  }, {\n    key: \"quantize\",\n    value: function quantize(subdiv) {\n      var percent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var subdivision = new this.constructor(this.context, subdiv).valueOf();\n      var value = this.valueOf();\n      var multiple = Math.round(value / subdivision);\n      var ideal = multiple * subdivision;\n      var diff = ideal - value;\n      return value + diff * percent;\n    } //-------------------------------------\n    // CONVERSIONS\n    //-------------------------------------\n\n    /**\n     * Convert a Time to Notation. The notation values are will be the\n     * closest representation between 1m to 128th note.\n     * @return {Notation}\n     * @example\n     * // if the Transport is at 120bpm:\n     * Tone.Time(2).toNotation(); // returns \"1m\"\n     */\n\n  }, {\n    key: \"toNotation\",\n    value: function toNotation() {\n      var _this3 = this;\n\n      var time = this.toSeconds();\n      var testNotations = [\"1m\"];\n\n      for (var power = 1; power < 9; power++) {\n        var subdiv = Math.pow(2, power);\n        testNotations.push(subdiv + \"n.\");\n        testNotations.push(subdiv + \"n\");\n        testNotations.push(subdiv + \"t\");\n      }\n\n      testNotations.push(\"0\"); // find the closets notation representation\n\n      var closest = testNotations[0];\n      var closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n      testNotations.forEach(function (notation) {\n        var notationSeconds = new TimeClass(_this3.context, notation).toSeconds();\n\n        if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {\n          closest = notation;\n          closestSeconds = notationSeconds;\n        }\n      });\n      return closest;\n    }\n    /**\n     * Return the time encoded as Bars:Beats:Sixteenths.\n     */\n\n  }, {\n    key: \"toBarsBeatsSixteenths\",\n    value: function toBarsBeatsSixteenths() {\n      var quarterTime = this._beatsToUnits(1);\n\n      var quarters = this.valueOf() / quarterTime;\n      quarters = parseFloat(quarters.toFixed(4));\n      var measures = Math.floor(quarters / this._getTimeSignature());\n      var sixteenths = quarters % 1 * 4;\n      quarters = Math.floor(quarters) % this._getTimeSignature();\n      var sixteenthString = sixteenths.toString();\n\n      if (sixteenthString.length > 3) {\n        // the additional parseFloat removes insignificant trailing zeroes\n        sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n      }\n\n      var progress = [measures, quarters, sixteenths];\n      return progress.join(\":\");\n    }\n    /**\n     * Return the time in ticks.\n     */\n\n  }, {\n    key: \"toTicks\",\n    value: function toTicks() {\n      var quarterTime = this._beatsToUnits(1);\n\n      var quarters = this.valueOf() / quarterTime;\n      return Math.round(quarters * this._getPPQ());\n    }\n    /**\n     * Return the time in seconds.\n     */\n\n  }, {\n    key: \"toSeconds\",\n    value: function toSeconds() {\n      return this.valueOf();\n    }\n    /**\n     * Return the value as a midi note.\n     */\n\n  }, {\n    key: \"toMidi\",\n    value: function toMidi() {\n      return ftom(this.toFrequency());\n    }\n  }, {\n    key: \"_now\",\n    value: function _now() {\n      return this.context.now();\n    }\n  }]);\n\n  return TimeClass;\n}(TimeBaseClass);\n/**\n * Create a TimeClass from a time string or number. The time is computed against the\n * global Tone.Context. To use a specific context, use [[TimeClass]]\n * @param value A value which represents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n * @example\n * const time = Tone.Time(\"4n\").toSeconds();\n * console.log(time);\n * @example\n * const note = Tone.Time(1).toNotation();\n * console.log(note);\n * @example\n * const freq = Tone.Time(0.5).toFrequency();\n * console.log(freq);\n */\n\nexport function Time(value, units) {\n  return new TimeClass(getContext(), value, units);\n}","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,WAA3B;AACA,SAASC,IAAT,QAAqB,eAArB;AACA,SAASC,aAAT,QAAuE,YAAvE;AAGA;;;;;;;;;;AASA,WAAaC,SAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAGU,iBAAe,WAAf;AAHV;AAyHC;;AAzHD;AAAA;AAAA,WAKW,2BAAe;AAAA;;AACxB,aAAOC,MAAM,CAACC,MAAP,iFAAuC;AAC7CC,WAAG,EAAE;AACJC,gBAAM,EAAE,gBAACC,OAAD,EAA0B;AACjC,mBAAO,MAAI,CAACC,IAAL,KAAc,IAAK,MAAI,CAACC,WAAV,CAA2C,MAAI,CAACC,OAAhD,EAAyDH,OAAzD,EAAkEI,OAAlE,EAArB;AACA,WAHG;AAIJC,gBAAM,EAAE;AAJJ,SADwC;AAO7CC,gBAAQ,EAAE;AACTP,gBAAM,EAAE,gBAACC,OAAD,EAA0B;AACjC,gBAAMO,OAAO,GAAG,IAAIZ,SAAJ,CAAc,MAAI,CAACQ,OAAnB,EAA4BH,OAA5B,EAAqCI,OAArC,EAAhB;AACA,mBAAO,MAAI,CAACI,eAAL,CAAqB,MAAI,CAACL,OAAL,CAAaM,SAAb,CAAuBC,eAAvB,CAAuCH,OAAvC,CAArB,CAAP;AACA,WAJQ;AAKTF,gBAAM,EAAE;AALC;AAPmC,OAAvC,CAAP;AAeA;AAED;;;;;;;;;;;AAvBD;AAAA;AAAA,WAiCC,kBAASM,MAAT,EAAkC;AAAA,UAAXC,OAAW,uEAAD,CAAC;AACjC,UAAMC,WAAW,GAAG,IAAK,KAAKX,WAAV,CAA2C,KAAKC,OAAhD,EAAyDQ,MAAzD,EAAiEP,OAAjE,EAApB;AACA,UAAMU,KAAK,GAAG,KAAKV,OAAL,EAAd;AACA,UAAMW,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,GAAGD,WAAnB,CAAjB;AACA,UAAMK,KAAK,GAAGH,QAAQ,GAAGF,WAAzB;AACA,UAAMM,IAAI,GAAGD,KAAK,GAAGJ,KAArB;AACA,aAAOA,KAAK,GAAGK,IAAI,GAAGP,OAAtB;AACA,KAxCF,CA0CC;AACA;AACA;;AACA;;;;;;;;;AA7CD;AAAA;AAAA,WAqDC,sBAAU;AAAA;;AACT,UAAMQ,IAAI,GAAG,KAAKC,SAAL,EAAb;AACA,UAAMC,aAAa,GAAkB,CAAC,IAAD,CAArC;;AACA,WAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,CAA5B,EAA+BA,KAAK,EAApC,EAAwC;AACvC,YAAMZ,MAAM,GAAGK,IAAI,CAACQ,GAAL,CAAS,CAAT,EAAYD,KAAZ,CAAf;AACAD,qBAAa,CAACG,IAAd,CAAmBd,MAAM,GAAG,IAA5B;AACAW,qBAAa,CAACG,IAAd,CAAmBd,MAAM,GAAG,GAA5B;AACAW,qBAAa,CAACG,IAAd,CAAmBd,MAAM,GAAG,GAA5B;AACA;;AACDW,mBAAa,CAACG,IAAd,CAAmB,GAAnB,EATS,CAUT;;AACA,UAAIC,OAAO,GAAGJ,aAAa,CAAC,CAAD,CAA3B;AACA,UAAIK,cAAc,GAAG,IAAIhC,SAAJ,CAAc,KAAKQ,OAAnB,EAA4BmB,aAAa,CAAC,CAAD,CAAzC,EAA8CD,SAA9C,EAArB;AACAC,mBAAa,CAACM,OAAd,CAAsB,kBAAQ,EAAG;AAChC,YAAMC,eAAe,GAAG,IAAIlC,SAAJ,CAAc,MAAI,CAACQ,OAAnB,EAA4B2B,QAA5B,EAAsCT,SAAtC,EAAxB;;AACA,YAAIL,IAAI,CAACe,GAAL,CAASF,eAAe,GAAGT,IAA3B,IAAmCJ,IAAI,CAACe,GAAL,CAASJ,cAAc,GAAGP,IAA1B,CAAvC,EAAwE;AACvEM,iBAAO,GAAGI,QAAV;AACAH,wBAAc,GAAGE,eAAjB;AACA;AACD,OAND;AAOA,aAAOH,OAAP;AACA;AAED;;;;AA5ED;AAAA;AAAA,WA+EC,iCAAqB;AACpB,UAAMM,WAAW,GAAG,KAAKC,aAAL,CAAmB,CAAnB,CAApB;;AACA,UAAIC,QAAQ,GAAG,KAAK9B,OAAL,KAAiB4B,WAAhC;AACAE,cAAQ,GAAGC,UAAU,CAACD,QAAQ,CAACE,OAAT,CAAiB,CAAjB,CAAD,CAArB;AACA,UAAMC,QAAQ,GAAGrB,IAAI,CAACsB,KAAL,CAAWJ,QAAQ,GAAG,KAAKK,iBAAL,EAAtB,CAAjB;AACA,UAAIC,UAAU,GAAIN,QAAQ,GAAG,CAAZ,GAAiB,CAAlC;AACAA,cAAQ,GAAGlB,IAAI,CAACsB,KAAL,CAAWJ,QAAX,IAAuB,KAAKK,iBAAL,EAAlC;AACA,UAAME,eAAe,GAAGD,UAAU,CAACE,QAAX,EAAxB;;AACA,UAAID,eAAe,CAACE,MAAhB,GAAyB,CAA7B,EAAgC;AAC/B;AACAH,kBAAU,GAAGL,UAAU,CAACA,UAAU,CAACM,eAAD,CAAV,CAA4BL,OAA5B,CAAoC,CAApC,CAAD,CAAvB;AACA;;AACD,UAAMQ,QAAQ,GAAG,CAACP,QAAD,EAAWH,QAAX,EAAqBM,UAArB,CAAjB;AACA,aAAOI,QAAQ,CAACC,IAAT,CAAc,GAAd,CAAP;AACA;AAED;;;;AA/FD;AAAA;AAAA,WAkGC,mBAAO;AACN,UAAMb,WAAW,GAAG,KAAKC,aAAL,CAAmB,CAAnB,CAApB;;AACA,UAAMC,QAAQ,GAAG,KAAK9B,OAAL,KAAiB4B,WAAlC;AACA,aAAOhB,IAAI,CAACC,KAAL,CAAWiB,QAAQ,GAAG,KAAKY,OAAL,EAAtB,CAAP;AACA;AAED;;;;AAxGD;AAAA;AAAA,WA2GC,qBAAS;AACR,aAAO,KAAK1C,OAAL,EAAP;AACA;AAED;;;;AA/GD;AAAA;AAAA,WAkHC,kBAAM;AACL,aAAOX,IAAI,CAAC,KAAKsD,WAAL,EAAD,CAAX;AACA;AApHF;AAAA;AAAA,WAsHW,gBAAI;AACb,aAAO,KAAK5C,OAAL,CAAaL,GAAb,EAAP;AACA;AAxHF;;AAAA;AAAA,EACSJ,aADT;AA2HA;;;;;;;;;;;;;;;;;AAgBA,OAAM,SAAUsD,IAAV,CAAelC,KAAf,EAAkCmC,KAAlC,EAAsD;AAC3D,SAAO,IAAItD,SAAJ,CAAcH,UAAU,EAAxB,EAA4BsB,KAA5B,EAAmCmC,KAAnC,CAAP;AACA","names":["getContext","ftom","TimeBaseClass","TimeClass","Object","assign","now","method","capture","_now","constructor","context","valueOf","regexp","quantize","quantTo","_secondsToUnits","transport","nextSubdivision","subdiv","percent","subdivision","value","multiple","Math","round","ideal","diff","time","toSeconds","testNotations","power","pow","push","closest","closestSeconds","forEach","notationSeconds","notation","abs","quarterTime","_beatsToUnits","quarters","parseFloat","toFixed","measures","floor","_getTimeSignature","sixteenths","sixteenthString","toString","length","progress","join","_getPPQ","toFrequency","Time","units"],"sourceRoot":"","sources":["../../../../Tone/core/type/Time.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}