{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Scale } from \"../../signal/Scale\";\nimport { connectSignal, Signal } from \"../../signal/Signal\";\nimport { Zero } from \"../../signal/Zero\";\nimport { Oscillator } from \"./Oscillator\";\n/**\n * LFO stands for low frequency oscillator. LFO produces an output signal\n * which can be attached to an AudioParam or Tone.Signal\n * in order to modulate that parameter with an oscillator. The LFO can\n * also be synced to the transport to start/stop and change when the tempo changes.\n * @example\n * return Tone.Offline(() => {\n * \tconst lfo = new Tone.LFO(\"4n\", 400, 4000).start().toDestination();\n * }, 0.5, 1);\n * @category Source\n */\n\nexport var LFO = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(LFO, _ToneAudioNode);\n\n  var _super = _createSuper(LFO);\n\n  function LFO() {\n    var _this;\n\n    _classCallCheck(this, LFO);\n\n    _this = _super.call(this, optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]));\n    _this.name = \"LFO\";\n    /**\n     * The value that the LFO outputs when it's stopped\n     */\n\n    _this._stoppedValue = 0;\n    /**\n     * A private placeholder for the units\n     */\n\n    _this._units = \"number\";\n    /**\n     * If the input value is converted using the [[units]]\n     */\n\n    _this.convert = true;\n    /**\n     * Private methods borrowed from Param\n     */\n    // @ts-ignore\n\n    _this._fromType = Param.prototype._fromType; // @ts-ignore\n\n    _this._toType = Param.prototype._toType; // @ts-ignore\n\n    _this._is = Param.prototype._is; // @ts-ignore\n\n    _this._clampValue = Param.prototype._clampValue;\n    var options = optionsFromArguments(LFO.getDefaults(), arguments, [\"frequency\", \"min\", \"max\"]);\n    _this._oscillator = new Oscillator(options);\n    _this.frequency = _this._oscillator.frequency;\n    _this._amplitudeGain = new Gain({\n      context: _this.context,\n      gain: options.amplitude,\n      units: \"normalRange\"\n    });\n    _this.amplitude = _this._amplitudeGain.gain;\n    _this._stoppedSignal = new Signal({\n      context: _this.context,\n      units: \"audioRange\",\n      value: 0\n    });\n    _this._zeros = new Zero({\n      context: _this.context\n    });\n    _this._a2g = new AudioToGain({\n      context: _this.context\n    });\n    _this._scaler = _this.output = new Scale({\n      context: _this.context,\n      max: options.max,\n      min: options.min\n    });\n    _this.units = options.units;\n    _this.min = options.min;\n    _this.max = options.max; // connect it up\n\n    _this._oscillator.chain(_this._amplitudeGain, _this._a2g, _this._scaler);\n\n    _this._zeros.connect(_this._a2g);\n\n    _this._stoppedSignal.connect(_this._a2g);\n\n    readOnly(_assertThisInitialized(_this), [\"amplitude\", \"frequency\"]);\n    _this.phase = options.phase;\n    return _this;\n  }\n\n  _createClass(LFO, [{\n    key: \"start\",\n    value:\n    /**\n     * Start the LFO.\n     * @param time The time the LFO will start\n     */\n    function start(time) {\n      time = this.toSeconds(time);\n\n      this._stoppedSignal.setValueAtTime(0, time);\n\n      this._oscillator.start(time);\n\n      return this;\n    }\n    /**\n     * Stop the LFO.\n     * @param  time The time the LFO will stop\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      time = this.toSeconds(time);\n\n      this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\n      this._oscillator.stop(time);\n\n      return this;\n    }\n    /**\n     * Sync the start/stop/pause to the transport\n     * and the frequency to the bpm of the transport\n     * @example\n     * const lfo = new Tone.LFO(\"8n\");\n     * lfo.sync().start(0);\n     * // the rate of the LFO will always be an eighth note, even as the tempo changes\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._oscillator.sync();\n\n      this._oscillator.syncFrequency();\n\n      return this;\n    }\n    /**\n     * unsync the LFO from transport control\n     */\n\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._oscillator.unsync();\n\n      this._oscillator.unsyncFrequency();\n\n      return this;\n    }\n    /**\n     * After the oscillator waveform is updated, reset the `_stoppedSignal` value to match the updated waveform\n     */\n\n  }, {\n    key: \"_setStoppedValue\",\n    value: function _setStoppedValue() {\n      this._stoppedValue = this._oscillator.getInitialValue();\n      this._stoppedSignal.value = this._stoppedValue;\n    }\n    /**\n     * The minimum output of the LFO.\n     */\n\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this._toType(this._scaler.min);\n    },\n    set: function set(min) {\n      min = this._fromType(min);\n      this._scaler.min = min;\n    }\n    /**\n     * The maximum output of the LFO.\n     */\n\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._toType(this._scaler.max);\n    },\n    set: function set(max) {\n      max = this._fromType(max);\n      this._scaler.max = max;\n    }\n    /**\n     * The type of the oscillator: See [[Oscillator.type]]\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._oscillator.type;\n    },\n    set: function set(type) {\n      this._oscillator.type = type;\n\n      this._setStoppedValue();\n    }\n    /**\n     * The oscillator's partials array: See [[Oscillator.partials]]\n     */\n\n  }, {\n    key: \"partials\",\n    get: function get() {\n      return this._oscillator.partials;\n    },\n    set: function set(partials) {\n      this._oscillator.partials = partials;\n\n      this._setStoppedValue();\n    }\n    /**\n     * The phase of the LFO.\n     */\n\n  }, {\n    key: \"phase\",\n    get: function get() {\n      return this._oscillator.phase;\n    },\n    set: function set(phase) {\n      this._oscillator.phase = phase;\n\n      this._setStoppedValue();\n    }\n    /**\n     * The output units of the LFO.\n     */\n\n  }, {\n    key: \"units\",\n    get: function get() {\n      return this._units;\n    },\n    set: function set(val) {\n      var currentMin = this.min;\n      var currentMax = this.max; // convert the min and the max\n\n      this._units = val;\n      this.min = currentMin;\n      this.max = currentMax;\n    }\n    /**\n     * Returns the playback state of the source, either \"started\" or \"stopped\".\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._oscillator.state;\n    }\n    /**\n     * @param node the destination to connect to\n     * @param outputNum the optional output number\n     * @param inputNum the input number\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(node, outputNum, inputNum) {\n      if (node instanceof Param || node instanceof Signal) {\n        this.convert = node.convert;\n        this.units = node.units;\n      }\n\n      connectSignal(this, node, outputNum, inputNum);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(LFO.prototype), \"dispose\", this).call(this);\n\n      this._oscillator.dispose();\n\n      this._stoppedSignal.dispose();\n\n      this._zeros.dispose();\n\n      this._scaler.dispose();\n\n      this._a2g.dispose();\n\n      this._amplitudeGain.dispose();\n\n      this.amplitude.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Oscillator.getDefaults(), {\n        amplitude: 1,\n        frequency: \"4n\",\n        max: 1,\n        min: 0,\n        type: \"sine\",\n        units: \"number\"\n      });\n    }\n  }]);\n\n  return LFO;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","Param","ToneAudioNode","optionsFromArguments","readOnly","AudioToGain","Scale","connectSignal","Signal","Zero","Oscillator","LFO","getDefaults","arguments","prototype","_fromType","_toType","_is","_clampValue","options","_oscillator","frequency","_amplitudeGain","context","gain","amplitude","units","_stoppedSignal","value","_zeros","_a2g","_scaler","output","max","min","chain","connect","phase","time","toSeconds","setValueAtTime","start","_stoppedValue","stop","sync","syncFrequency","unsync","unsyncFrequency","getInitialValue","type","_setStoppedValue","partials","_units","val","currentMin","currentMax","state","node","outputNum","inputNum","convert","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/source/oscillator/LFO.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}