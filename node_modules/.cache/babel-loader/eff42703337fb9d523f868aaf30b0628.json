{"ast":null,"code":"import _toConsumableArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\n\nvar combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\n\nvar allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\n\nexport var Freeverb = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Freeverb, _StereoEffect);\n\n  var _super = _createSuper(Freeverb);\n\n  function Freeverb() {\n    var _this;\n\n    _classCallCheck(this, Freeverb);\n\n    _this = _super.call(this, optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n    _this.name = \"Freeverb\";\n    /**\n     * the comb filters\n     */\n\n    _this._combFilters = [];\n    /**\n     * the allpass filters on the left\n     */\n\n    _this._allpassFiltersL = [];\n    /**\n     * the allpass filters on the right\n     */\n\n    _this._allpassFiltersR = [];\n    var options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n    _this.roomSize = new Signal({\n      context: _this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    }); // make the allpass filters on the right\n\n    _this._allpassFiltersL = allpassFilterFrequencies.map(function (freq) {\n      var allpassL = _this.context.createBiquadFilter();\n\n      allpassL.type = \"allpass\";\n      allpassL.frequency.value = freq;\n      return allpassL;\n    }); // make the allpass filters on the left\n\n    _this._allpassFiltersR = allpassFilterFrequencies.map(function (freq) {\n      var allpassR = _this.context.createBiquadFilter();\n\n      allpassR.type = \"allpass\";\n      allpassR.frequency.value = freq;\n      return allpassR;\n    }); // make the comb filters\n\n    _this._combFilters = combFilterTunings.map(function (delayTime, index) {\n      var lfpf = new LowpassCombFilter({\n        context: _this.context,\n        dampening: options.dampening,\n        delayTime: delayTime\n      });\n\n      if (index < combFilterTunings.length / 2) {\n        var _this2;\n\n        (_this2 = _this).connectEffectLeft.apply(_this2, [lfpf].concat(_toConsumableArray(_this._allpassFiltersL)));\n      } else {\n        var _this3;\n\n        (_this3 = _this).connectEffectRight.apply(_this3, [lfpf].concat(_toConsumableArray(_this._allpassFiltersR)));\n      }\n\n      _this.roomSize.connect(lfpf.resonance);\n\n      return lfpf;\n    });\n    readOnly(_assertThisInitialized(_this), [\"roomSize\"]);\n    return _this;\n  }\n\n  _createClass(Freeverb, [{\n    key: \"dampening\",\n    get:\n    /**\n     * The amount of dampening of the reverberant signal.\n     */\n    function get() {\n      return this._combFilters[0].dampening;\n    },\n    set: function set(d) {\n      this._combFilters.forEach(function (c) {\n        return c.dampening = d;\n      });\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Freeverb.prototype), \"dispose\", this).call(this);\n\n      this._allpassFiltersL.forEach(function (al) {\n        return al.disconnect();\n      });\n\n      this._allpassFiltersR.forEach(function (ar) {\n        return ar.disconnect();\n      });\n\n      this._combFilters.forEach(function (cf) {\n        return cf.dispose();\n      });\n\n      this.roomSize.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        roomSize: 0.7,\n        dampening: 3000\n      });\n    }\n  }]);\n\n  return Freeverb;\n}(StereoEffect);","map":{"version":3,"mappings":"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","names":["StereoEffect","optionsFromArguments","readOnly","Signal","LowpassCombFilter","combFilterTunings","allpassFilterFrequencies","Freeverb","getDefaults","arguments","options","roomSize","context","value","units","_allpassFiltersL","map","allpassL","createBiquadFilter","type","frequency","freq","_allpassFiltersR","allpassR","_combFilters","delayTime","index","lfpf","dampening","length","connectEffectLeft","connectEffectRight","connect","resonance","d","forEach","c","al","disconnect","ar","cf","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/Freeverb.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}