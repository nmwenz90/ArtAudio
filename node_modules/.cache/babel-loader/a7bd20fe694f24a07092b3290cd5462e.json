{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { connect, connectSeries, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Split } from \"../component/channel/Split\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Merge } from \"../component/channel/Merge\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for Stereo effects.\n */\n\nexport var StereoEffect = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(StereoEffect, _ToneAudioNode);\n\n  var _super = _createSuper(StereoEffect);\n\n  function StereoEffect(options) {\n    var _this;\n\n    _classCallCheck(this, StereoEffect);\n\n    _this = _super.call(this, options);\n    _this.name = \"StereoEffect\";\n    _this.input = new Gain({\n      context: _this.context\n    }); // force mono sources to be stereo\n\n    _this.input.channelCount = 2;\n    _this.input.channelCountMode = \"explicit\";\n    _this._dryWet = _this.output = new CrossFade({\n      context: _this.context,\n      fade: options.wet\n    });\n    _this.wet = _this._dryWet.fade;\n    _this._split = new Split({\n      context: _this.context,\n      channels: 2\n    });\n    _this._merge = new Merge({\n      context: _this.context,\n      channels: 2\n    }); // connections\n\n    _this.input.connect(_this._split); // dry wet connections\n\n\n    _this.input.connect(_this._dryWet.a);\n\n    _this._merge.connect(_this._dryWet.b);\n\n    readOnly(_assertThisInitialized(_this), [\"wet\"]);\n    return _this;\n  }\n  /**\n   * Connect the left part of the effect\n   */\n\n\n  _createClass(StereoEffect, [{\n    key: \"connectEffectLeft\",\n    value: function connectEffectLeft() {\n      var _ref;\n\n      this._split.connect(arguments.length <= 0 ? undefined : arguments[0], 0, 0);\n\n      connectSeries.apply(void 0, arguments);\n      connect((_ref = arguments.length - 1, _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref]), this._merge, 0, 0);\n    }\n    /**\n     * Connect the right part of the effect\n     */\n\n  }, {\n    key: \"connectEffectRight\",\n    value: function connectEffectRight() {\n      var _ref2;\n\n      this._split.connect(arguments.length <= 0 ? undefined : arguments[0], 1, 0);\n\n      connectSeries.apply(void 0, arguments);\n      connect((_ref2 = arguments.length - 1, _ref2 < 0 || arguments.length <= _ref2 ? undefined : arguments[_ref2]), this._merge, 0, 1);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(StereoEffect.prototype), \"dispose\", this).call(this);\n\n      this._dryWet.dispose();\n\n      this._split.dispose();\n\n      this._merge.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        wet: 1\n      });\n    }\n  }]);\n\n  return StereoEffect;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AACA,SAASA,OAAT,EAAkBC,aAAlB,EAA6CC,aAA7C,QAAkE,+BAAlE;AACA,SAASC,SAAT,QAA0B,gCAA1B;AAEA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAIA;;;;AAGA,WAAaC,YAAb;AAAA;;AAAA;;AA4BC,wBAAYC,OAAZ,EAAwC;AAAA;;AAAA;;AAEvC,8BAAMA,OAAN;AA5BQ,iBAAe,cAAf;AA8BR,UAAKC,KAAL,GAAa,IAAIL,IAAJ,CAAS;AAAEM,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAb,CAJuC,CAKvC;;AACA,UAAKD,KAAL,CAAWE,YAAX,GAA0B,CAA1B;AACA,UAAKF,KAAL,CAAWG,gBAAX,GAA8B,UAA9B;AAEA,UAAKC,OAAL,GAAe,MAAKC,MAAL,GAAc,IAAIZ,SAAJ,CAAc;AAC1CQ,aAAO,EAAE,MAAKA,OAD4B;AAE1CK,UAAI,EAAEP,OAAO,CAACQ;AAF4B,KAAd,CAA7B;AAIA,UAAKA,GAAL,GAAW,MAAKH,OAAL,CAAaE,IAAxB;AACA,UAAKE,MAAL,GAAc,IAAId,KAAJ,CAAU;AAAEO,aAAO,EAAE,MAAKA,OAAhB;AAAyBQ,cAAQ,EAAE;AAAnC,KAAV,CAAd;AACA,UAAKC,MAAL,GAAc,IAAId,KAAJ,CAAU;AAAEK,aAAO,EAAE,MAAKA,OAAhB;AAAyBQ,cAAQ,EAAE;AAAnC,KAAV,CAAd,CAfuC,CAiBvC;;AACA,UAAKT,KAAL,CAAWV,OAAX,CAAmB,MAAKkB,MAAxB,EAlBuC,CAmBvC;;;AACA,UAAKR,KAAL,CAAWV,OAAX,CAAmB,MAAKc,OAAL,CAAaO,CAAhC;;AACA,UAAKD,MAAL,CAAYpB,OAAZ,CAAoB,MAAKc,OAAL,CAAaQ,CAAjC;;AACAf,YAAQ,gCAAO,CAAC,KAAD,CAAP,CAAR;AAtBuC;AAuBvC;AAED;;;;;AArDD;AAAA;AAAA,WAwDW,6BAAwC;AAAA;;AACjD,WAAKW,MAAL,CAAYlB,OAAZ,mDAA8B,CAA9B,EAAiC,CAAjC;;AACAC,mBAAa,MAAb;AACAD,aAAO,SAAO,UAAMuB,MAAN,GAAa,CAApB,uEAAwB,KAAKH,MAA7B,EAAqC,CAArC,EAAwC,CAAxC,CAAP;AACA;AAED;;;;AA9DD;AAAA;AAAA,WAiEW,8BAAyC;AAAA;;AAClD,WAAKF,MAAL,CAAYlB,OAAZ,mDAA8B,CAA9B,EAAiC,CAAjC;;AACAC,mBAAa,MAAb;AACAD,aAAO,UAAO,UAAMuB,MAAN,GAAa,CAApB,0EAAwB,KAAKH,MAA7B,EAAqC,CAArC,EAAwC,CAAxC,CAAP;AACA;AArEF;AAAA;AAAA,WA6EC,mBAAO;AACN;;AACA,WAAKN,OAAL,CAAaU,OAAb;;AACA,WAAKN,MAAL,CAAYM,OAAZ;;AACA,WAAKJ,MAAL,CAAYI,OAAZ;;AACA,aAAO,IAAP;AACA;AAnFF;AAAA;AAAA,WAuEC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAcxB,aAAa,CAACyB,WAAd,EAAd,EAA2C;AACjDV,WAAG,EAAE;AAD4C,OAA3C,CAAP;AAGA;AA3EF;;AAAA;AAAA,EAAuEf,aAAvE","names":["connect","connectSeries","ToneAudioNode","CrossFade","Split","Gain","Merge","readOnly","StereoEffect","options","input","context","channelCount","channelCountMode","_dryWet","output","fade","wet","_split","channels","_merge","a","b","length","dispose","Object","assign","getDefaults"],"sourceRoot":"","sources":["../../../Tone/effect/StereoEffect.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}