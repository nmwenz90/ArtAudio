{"ast":null,"code":"import _slicedToArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\n\nexport var ToneAudioBuffers = /*#__PURE__*/function (_Tone) {\n  _inherits(ToneAudioBuffers, _Tone);\n\n  var _super = _createSuper(ToneAudioBuffers);\n\n  function ToneAudioBuffers() {\n    var _this;\n\n    _classCallCheck(this, ToneAudioBuffers);\n\n    _this = _super.call(this);\n    _this.name = \"ToneAudioBuffers\";\n    /**\n     * All of the buffers\n     */\n\n    _this._buffers = new Map();\n    /**\n     * Keep track of the number of loaded buffers\n     */\n\n    _this._loadingCount = 0;\n    var options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    _this.baseUrl = options.baseUrl; // add each one\n\n    Object.keys(options.urls).forEach(function (name) {\n      _this._loadingCount++;\n      var url = options.urls[name];\n\n      _this.add(name, url, _this._bufferLoaded.bind(_assertThisInitialized(_this), options.onload), options.onerror);\n    });\n    return _this;\n  }\n\n  _createClass(ToneAudioBuffers, [{\n    key: \"has\",\n    value:\n    /**\n     * True if the buffers object has a buffer by that name.\n     * @param  name  The key or index of the buffer.\n     */\n    function has(name) {\n      return this._buffers.has(name.toString());\n    }\n    /**\n     * Get a buffer by name. If an array was loaded,\n     * then use the array index.\n     * @param  name  The key or index of the buffer.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      assert(this.has(name), \"ToneAudioBuffers has no buffer named: \".concat(name));\n      return this._buffers.get(name.toString());\n    }\n    /**\n     * A buffer was loaded. decrement the counter.\n     */\n\n  }, {\n    key: \"_bufferLoaded\",\n    value: function _bufferLoaded(callback) {\n      this._loadingCount--;\n\n      if (this._loadingCount === 0 && callback) {\n        callback();\n      }\n    }\n    /**\n     * If the buffers are loaded or not\n     */\n\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return Array.from(this._buffers).every(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            _ = _ref2[0],\n            buffer = _ref2[1];\n\n        return buffer.loaded;\n      });\n    }\n    /**\n     * Add a buffer by name and url to the Buffers\n     * @param  name      A unique name to give the buffer\n     * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n     * @param  callback  The callback to invoke when the url is loaded.\n     * @param  onerror  Invoked if the buffer can't be loaded\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(name, url) {\n      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noOp;\n      var onerror = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noOp;\n\n      if (isString(url)) {\n        this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n      } else {\n        this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(ToneAudioBuffers.prototype), \"dispose\", this).call(this);\n\n      this._buffers.forEach(function (buffer) {\n        return buffer.dispose();\n      });\n\n      this._buffers.clear();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return {\n        baseUrl: \"\",\n        onerror: noOp,\n        onload: noOp,\n        urls: {}\n      };\n    }\n  }]);\n\n  return ToneAudioBuffers;\n}(Tone);","map":{"version":3,"mappings":"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","names":["Tone","optionsFromArguments","noOp","isString","ToneAudioBuffer","assert","ToneAudioBuffers","Map","options","getDefaults","arguments","baseUrl","Object","keys","urls","forEach","_loadingCount","url","name","add","_bufferLoaded","bind","onload","onerror","_buffers","has","toString","get","callback","Array","from","every","_","buffer","loaded","set","dispose","clear"],"sourceRoot":"","sources":["../../../../Tone/core/context/ToneAudioBuffers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}