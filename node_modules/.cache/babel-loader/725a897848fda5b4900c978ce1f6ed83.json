{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioWorklet } from \"../../core/worklet/ToneAudioWorklet\";\nimport { workletName } from \"./FeedbackCombFilter.worklet\";\n/**\n * Comb filters are basic building blocks for physical modeling. Read more\n * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n *\n * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the\n * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the\n * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode.\n * @category Component\n */\n\nexport var FeedbackCombFilter = /*#__PURE__*/function (_ToneAudioWorklet) {\n  _inherits(FeedbackCombFilter, _ToneAudioWorklet);\n\n  var _super = _createSuper(FeedbackCombFilter);\n\n  function FeedbackCombFilter() {\n    var _this;\n\n    _classCallCheck(this, FeedbackCombFilter);\n\n    _this = _super.call(this, optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]));\n    _this.name = \"FeedbackCombFilter\";\n    var options = optionsFromArguments(FeedbackCombFilter.getDefaults(), arguments, [\"delayTime\", \"resonance\"]);\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this.delayTime = new Param({\n      context: _this.context,\n      value: options.delayTime,\n      units: \"time\",\n      minValue: 0,\n      maxValue: 1,\n      param: _this._dummyParam,\n      swappable: true\n    });\n    _this.resonance = new Param({\n      context: _this.context,\n      value: options.resonance,\n      units: \"normalRange\",\n      param: _this._dummyParam,\n      swappable: true\n    });\n    readOnly(_assertThisInitialized(_this), [\"resonance\", \"delayTime\"]);\n    return _this;\n  }\n\n  _createClass(FeedbackCombFilter, [{\n    key: \"_audioWorkletName\",\n    value: function _audioWorkletName() {\n      return workletName;\n    }\n    /**\n     * The default parameters\n     */\n\n  }, {\n    key: \"onReady\",\n    value: function onReady(node) {\n      connectSeries(this.input, node, this.output);\n      var delayTime = node.parameters.get(\"delayTime\");\n      ;\n      this.delayTime.setParam(delayTime);\n      var feedback = node.parameters.get(\"feedback\");\n      ;\n      this.resonance.setParam(feedback);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FeedbackCombFilter.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n      this.output.dispose();\n      this.delayTime.dispose();\n      this.resonance.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        delayTime: 0.1,\n        resonance: 0.5\n      });\n    }\n  }]);\n\n  return FeedbackCombFilter;\n}(ToneAudioWorklet);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,IAAT,QAAqB,yBAArB;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAAmE,kCAAnE;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,QAA2C,2BAA3C;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAOA;;;;;;;;;;AASA,WAAaC,kBAAb;AAAA;;AAAA;;AAuBC;AAAA;;AAAA;;AACC,8BAAMJ,oBAAoB,CAACI,kBAAkB,CAACC,WAAnB,EAAD,EAAmCC,SAAnC,EAA8C,CAAC,WAAD,EAAc,WAAd,CAA9C,CAA1B;AAtBQ,iBAAO,oBAAP;AAuBR,QAAMC,OAAO,GAAGP,oBAAoB,CAACI,kBAAkB,CAACC,WAAnB,EAAD,EAAmCC,SAAnC,EAA8C,CAAC,WAAD,EAAc,WAAd,CAA9C,CAApC;AAEA,UAAKE,KAAL,GAAa,IAAIZ,IAAJ,CAAS;AAAEa,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAb;AACA,UAAKC,MAAL,GAAc,IAAId,IAAJ,CAAS;AAAEa,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAd;AAEA,UAAKE,SAAL,GAAiB,IAAId,KAAJ,CAAkB;AAClCY,aAAO,EAAE,MAAKA,OADoB;AAElCG,WAAK,EAAEL,OAAO,CAACI,SAFmB;AAGlCE,WAAK,EAAE,MAH2B;AAIlCC,cAAQ,EAAE,CAJwB;AAKlCC,cAAQ,EAAE,CALwB;AAMlCC,WAAK,EAAE,MAAKC,WANsB;AAOlCC,eAAS,EAAE;AAPuB,KAAlB,CAAjB;AAUA,UAAKC,SAAL,GAAiB,IAAItB,KAAJ,CAAyB;AACzCY,aAAO,EAAE,MAAKA,OAD2B;AAEzCG,WAAK,EAAEL,OAAO,CAACY,SAF0B;AAGzCN,WAAK,EAAE,aAHkC;AAIzCG,WAAK,EAAE,MAAKC,WAJ6B;AAKzCC,eAAS,EAAE;AAL8B,KAAzB,CAAjB;AAQAjB,YAAQ,gCAAO,CAAC,WAAD,EAAc,WAAd,CAAP,CAAR;AAzBD;AA0BC;;AAjDF;AAAA;AAAA,WAmDW,6BAAiB;AAC1B,aAAOE,WAAP;AACA;AAED;;;;AAvDD;AAAA;AAAA,WAiEC,iBAAQiB,IAAR,EAA8B;AAC7BtB,mBAAa,CAAC,KAAKU,KAAN,EAAaY,IAAb,EAAmB,KAAKV,MAAxB,CAAb;AACA,UAAMC,SAAS,GAAGS,IAAI,CAACC,UAAL,CAAgBC,GAAhB,CAAoB,WAApB,CAAlB;AAAiE;AACjE,WAAKX,SAAL,CAAeY,QAAf,CAAwBZ,SAAxB;AACA,UAAMa,QAAQ,GAAGJ,IAAI,CAACC,UAAL,CAAgBC,GAAhB,CAAoB,UAApB,CAAjB;AAA+D;AAC/D,WAAKH,SAAL,CAAeI,QAAf,CAAwBC,QAAxB;AACA;AAvEF;AAAA;AAAA,WAyEC,mBAAO;AACN;;AACA,WAAKhB,KAAL,CAAWiB,OAAX;AACA,WAAKf,MAAL,CAAYe,OAAZ;AACA,WAAKd,SAAL,CAAec,OAAf;AACA,WAAKN,SAAL,CAAeM,OAAf;AACA,aAAO,IAAP;AACA;AAhFF;AAAA;AAAA,WA0DC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAc5B,aAAa,CAACM,WAAd,EAAd,EAA2C;AACjDM,iBAAS,EAAE,GADsC;AAEjDQ,iBAAS,EAAE;AAFsC,OAA3C,CAAP;AAIA;AA/DF;;AAAA;AAAA,EAAwCjB,gBAAxC","names":["Gain","Param","connectSeries","ToneAudioNode","optionsFromArguments","readOnly","ToneAudioWorklet","workletName","FeedbackCombFilter","getDefaults","arguments","options","input","context","output","delayTime","value","units","minValue","maxValue","param","_dummyParam","swappable","resonance","node","parameters","get","setParam","feedback","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/filter/FeedbackCombFilter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}