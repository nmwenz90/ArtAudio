{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Effect } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]].\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\n\nexport var AutoWah = /*#__PURE__*/function (_Effect) {\n  _inherits(AutoWah, _Effect);\n\n  var _super = _createSuper(AutoWah);\n\n  function AutoWah() {\n    var _this;\n\n    _classCallCheck(this, AutoWah);\n\n    _this = _super.call(this, optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n    _this.name = \"AutoWah\";\n    var options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n    _this._follower = new Follower({\n      context: _this.context,\n      smoothing: options.follower\n    });\n    _this._sweepRange = new ScaleExp({\n      context: _this.context,\n      min: 0,\n      max: 1,\n      exponent: 0.5\n    });\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._octaves = options.octaves;\n    _this._inputBoost = new Gain({\n      context: _this.context\n    });\n    _this._bandpass = new Filter({\n      context: _this.context,\n      rolloff: -48,\n      frequency: 0,\n      Q: options.Q\n    });\n    _this._peaking = new Filter({\n      context: _this.context,\n      type: \"peaking\"\n    });\n    _this._peaking.gain.value = options.gain;\n    _this.gain = _this._peaking.gain;\n    _this.Q = _this._bandpass.Q; // the control signal path\n\n    _this.effectSend.chain(_this._inputBoost, _this._follower, _this._sweepRange);\n\n    _this._sweepRange.connect(_this._bandpass.frequency);\n\n    _this._sweepRange.connect(_this._peaking.frequency); // the filtered path\n\n\n    _this.effectSend.chain(_this._bandpass, _this._peaking, _this.effectReturn); // set the initial value\n\n\n    _this._setSweepRange();\n\n    _this.sensitivity = options.sensitivity;\n    readOnly(_assertThisInitialized(_this), [\"gain\", \"Q\"]);\n    return _this;\n  }\n\n  _createClass(AutoWah, [{\n    key: \"octaves\",\n    get:\n    /**\n     * The number of octaves that the filter will sweep above the baseFrequency.\n     */\n    function get() {\n      return this._octaves;\n    },\n    set: function set(octaves) {\n      this._octaves = octaves;\n\n      this._setSweepRange();\n    }\n    /**\n     * The follower's smoothing time\n     */\n\n  }, {\n    key: \"follower\",\n    get: function get() {\n      return this._follower.smoothing;\n    },\n    set: function set(follower) {\n      this._follower.smoothing = follower;\n    }\n    /**\n     * The base frequency from which the sweep will start from.\n     */\n\n  }, {\n    key: \"baseFrequency\",\n    get: function get() {\n      return this._baseFrequency;\n    },\n    set: function set(baseFreq) {\n      this._baseFrequency = this.toFrequency(baseFreq);\n\n      this._setSweepRange();\n    }\n    /**\n     * The sensitivity to control how responsive to the input signal the filter is.\n     */\n\n  }, {\n    key: \"sensitivity\",\n    get: function get() {\n      return gainToDb(1 / this._inputBoost.gain.value);\n    },\n    set: function set(sensitivity) {\n      this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n    }\n    /**\n     * sets the sweep range of the scaler\n     */\n\n  }, {\n    key: \"_setSweepRange\",\n    value: function _setSweepRange() {\n      this._sweepRange.min = this._baseFrequency;\n      this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(AutoWah.prototype), \"dispose\", this).call(this);\n\n      this._follower.dispose();\n\n      this._sweepRange.dispose();\n\n      this._bandpass.dispose();\n\n      this._peaking.dispose();\n\n      this._inputBoost.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        baseFrequency: 100,\n        octaves: 6,\n        sensitivity: 0,\n        Q: 2,\n        gain: 2,\n        follower: 0.2\n      });\n    }\n  }]);\n\n  return AutoWah;\n}(Effect);","map":{"version":3,"mappings":"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","names":["Effect","Filter","Follower","optionsFromArguments","Gain","dbToGain","gainToDb","ScaleExp","readOnly","AutoWah","getDefaults","arguments","options","_follower","context","smoothing","follower","_sweepRange","min","max","exponent","_baseFrequency","toFrequency","baseFrequency","_octaves","octaves","_inputBoost","_bandpass","rolloff","frequency","Q","_peaking","type","gain","value","effectSend","chain","connect","effectReturn","_setSweepRange","sensitivity","baseFreq","Math","pow","sampleRate","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/AutoWah.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}