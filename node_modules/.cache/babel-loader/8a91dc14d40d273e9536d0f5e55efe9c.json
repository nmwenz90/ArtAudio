{"ast":null,"code":"/*!\n * @pixi/ticker - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/ticker is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { settings } from '@pixi/settings';\n/**\n * Target frames per millisecond.\n *\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\n\nsettings.TARGET_FPMS = 0.06;\n/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n *\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @enum {number}\n * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.InteractionManager}\n * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.\n * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.BasePrepare} utility.\n */\n\nvar UPDATE_PRIORITY;\n\n(function (UPDATE_PRIORITY) {\n  UPDATE_PRIORITY[UPDATE_PRIORITY[\"INTERACTION\"] = 50] = \"INTERACTION\";\n  UPDATE_PRIORITY[UPDATE_PRIORITY[\"HIGH\"] = 25] = \"HIGH\";\n  UPDATE_PRIORITY[UPDATE_PRIORITY[\"NORMAL\"] = 0] = \"NORMAL\";\n  UPDATE_PRIORITY[UPDATE_PRIORITY[\"LOW\"] = -25] = \"LOW\";\n  UPDATE_PRIORITY[UPDATE_PRIORITY[\"UTILITY\"] = -50] = \"UTILITY\";\n})(UPDATE_PRIORITY || (UPDATE_PRIORITY = {}));\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n *\n * @private\n * @class\n * @memberof PIXI\n */\n\n\nvar TickerListener =\n/** @class */\nfunction () {\n  /**\n   * Constructor\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @param priority - The priority for emitting\n   * @param once - If the handler should fire once\n   */\n  function TickerListener(fn, context, priority, once) {\n    if (context === void 0) {\n      context = null;\n    }\n\n    if (priority === void 0) {\n      priority = 0;\n    }\n\n    if (once === void 0) {\n      once = false;\n    }\n    /** The next item in chain. */\n\n\n    this.next = null;\n    /** The previous item in chain. */\n\n    this.previous = null;\n    /** `true` if this listener has been destroyed already. */\n\n    this._destroyed = false;\n    this.fn = fn;\n    this.context = context;\n    this.priority = priority;\n    this.once = once;\n  }\n  /**\n   * Simple compare function to figure out if a function and context match.\n   * @private\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @return `true` if the listener match the arguments\n   */\n\n\n  TickerListener.prototype.match = function (fn, context) {\n    if (context === void 0) {\n      context = null;\n    }\n\n    return this.fn === fn && this.context === context;\n  };\n  /**\n   * Emit by calling the current function.\n   * @private\n   * @param deltaTime - time since the last emit.\n   * @return Next ticker\n   */\n\n\n  TickerListener.prototype.emit = function (deltaTime) {\n    if (this.fn) {\n      if (this.context) {\n        this.fn.call(this.context, deltaTime);\n      } else {\n        this.fn(deltaTime);\n      }\n    }\n\n    var redirect = this.next;\n\n    if (this.once) {\n      this.destroy(true);\n    } // Soft-destroying should remove\n    // the next reference\n\n\n    if (this._destroyed) {\n      this.next = null;\n    }\n\n    return redirect;\n  };\n  /**\n   * Connect to the list.\n   * @private\n   * @param previous - Input node, previous listener\n   */\n\n\n  TickerListener.prototype.connect = function (previous) {\n    this.previous = previous;\n\n    if (previous.next) {\n      previous.next.previous = this;\n    }\n\n    this.next = previous.next;\n    previous.next = this;\n  };\n  /**\n   * Destroy and don't use after this.\n   * @private\n   * @param hard - `true` to remove the `next` reference, this\n   *        is considered a hard destroy. Soft destroy maintains the next reference.\n   * @return The listener to redirect while emitting or removing.\n   */\n\n\n  TickerListener.prototype.destroy = function (hard) {\n    if (hard === void 0) {\n      hard = false;\n    }\n\n    this._destroyed = true;\n    this.fn = null;\n    this.context = null; // Disconnect, hook up next and previous\n\n    if (this.previous) {\n      this.previous.next = this.next;\n    }\n\n    if (this.next) {\n      this.next.previous = this.previous;\n    } // Redirect to the next item\n\n\n    var redirect = this.next; // Remove references\n\n    this.next = hard ? null : redirect;\n    this.previous = null;\n    return redirect;\n  };\n\n  return TickerListener;\n}();\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar Ticker =\n/** @class */\nfunction () {\n  function Ticker() {\n    var _this = this;\n    /**\n     * Whether or not this ticker should invoke the method\n     * {@link PIXI.Ticker#start} automatically\n     * when a listener is added.\n     */\n\n\n    this.autoStart = false;\n    /**\n     * Scalar time value from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     */\n\n    this.deltaTime = 1;\n    /**\n     * The last time {@link PIXI.Ticker#update} was invoked.\n     * This value is also reset internally outside of invoking\n     * update, but only when a new animation frame is requested.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 Âµs.\n     */\n\n    this.lastTime = -1;\n    /**\n     * Factor of current {@link PIXI.Ticker#deltaTime}.\n     * @example\n     * // Scales ticker.deltaTime to what would be\n     * // the equivalent of approximately 120 FPS\n     * ticker.speed = 2;\n     */\n\n    this.speed = 1;\n    /**\n     * Whether or not this ticker has been started.\n     * `true` if {@link PIXI.Ticker#start} has been called.\n     * `false` if {@link PIXI.Ticker#stop} has been called.\n     * While `false`, this value may change to `true` in the\n     * event of {@link PIXI.Ticker#autoStart} being `true`\n     * and a listener is added.\n     */\n\n    this.started = false;\n    /** Internal current frame request ID */\n\n    this._requestId = null;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the maximum allowed milliseconds between updates.\n     */\n\n    this._maxElapsedMS = 100;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the minimum allowed milliseconds between updates.\n     */\n\n    this._minElapsedMS = 0;\n    /** If enabled, deleting is disabled.*/\n\n    this._protected = false;\n    /**\n     * The last time keyframe was executed.\n     * Maintains a relatively fixed interval with the previous value.\n     */\n\n    this._lastFrame = -1;\n    this._head = new TickerListener(null, null, Infinity);\n    this.deltaMS = 1 / settings.TARGET_FPMS;\n    this.elapsedMS = 1 / settings.TARGET_FPMS;\n\n    this._tick = function (time) {\n      _this._requestId = null;\n\n      if (_this.started) {\n        // Invoke listeners now\n        _this.update(time); // Listener side effects may have modified ticker state.\n\n\n        if (_this.started && _this._requestId === null && _this._head.next) {\n          _this._requestId = requestAnimationFrame(_this._tick);\n        }\n      }\n    };\n  }\n  /**\n   * Conditionally requests a new animation frame.\n   * If a frame has not already been requested, and if the internal\n   * emitter has listeners, a new frame is requested.\n   *\n   * @private\n   */\n\n\n  Ticker.prototype._requestIfNeeded = function () {\n    if (this._requestId === null && this._head.next) {\n      // ensure callbacks get correct delta\n      this.lastTime = performance.now();\n      this._lastFrame = this.lastTime;\n      this._requestId = requestAnimationFrame(this._tick);\n    }\n  };\n  /**\n   * Conditionally cancels a pending animation frame.\n   * @private\n   */\n\n\n  Ticker.prototype._cancelIfNeeded = function () {\n    if (this._requestId !== null) {\n      cancelAnimationFrame(this._requestId);\n      this._requestId = null;\n    }\n  };\n  /**\n   * Conditionally requests a new animation frame.\n   * If the ticker has been started it checks if a frame has not already\n   * been requested, and if the internal emitter has listeners. If these\n   * conditions are met, a new frame is requested. If the ticker has not\n   * been started, but autoStart is `true`, then the ticker starts now,\n   * and continues with the previous conditions to request a new frame.\n   *\n   * @private\n   */\n\n\n  Ticker.prototype._startIfPossible = function () {\n    if (this.started) {\n      this._requestIfNeeded();\n    } else if (this.autoStart) {\n      this.start();\n    }\n  };\n  /**\n   * Register a handler for tick events. Calls continuously unless\n   * it is removed or the ticker is stopped.\n   *\n   * @param fn - The listener function to be added for updates\n   * @param context - The listener context\n   * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n   * @returns This instance of a ticker\n   */\n\n\n  Ticker.prototype.add = function (fn, context, priority) {\n    if (priority === void 0) {\n      priority = UPDATE_PRIORITY.NORMAL;\n    }\n\n    return this._addListener(new TickerListener(fn, context, priority));\n  };\n  /**\n   * Add a handler for the tick event which is only execute once.\n   *\n   * @param fn - The listener function to be added for one update\n   * @param context - The listener context\n   * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n   * @returns This instance of a ticker\n   */\n\n\n  Ticker.prototype.addOnce = function (fn, context, priority) {\n    if (priority === void 0) {\n      priority = UPDATE_PRIORITY.NORMAL;\n    }\n\n    return this._addListener(new TickerListener(fn, context, priority, true));\n  };\n  /**\n   * Internally adds the event handler so that it can be sorted by priority.\n   * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n   * before the rendering.\n   *\n   * @private\n   * @param listener - Current listener being added.\n   * @returns This instance of a ticker\n   */\n\n\n  Ticker.prototype._addListener = function (listener) {\n    // For attaching to head\n    var current = this._head.next;\n    var previous = this._head; // Add the first item\n\n    if (!current) {\n      listener.connect(previous);\n    } else {\n      // Go from highest to lowest priority\n      while (current) {\n        if (listener.priority > current.priority) {\n          listener.connect(previous);\n          break;\n        }\n\n        previous = current;\n        current = current.next;\n      } // Not yet connected\n\n\n      if (!listener.previous) {\n        listener.connect(previous);\n      }\n    }\n\n    this._startIfPossible();\n\n    return this;\n  };\n  /**\n   * Removes any handlers matching the function and context parameters.\n   * If no handlers are left after removing, then it cancels the animation frame.\n   *\n   * @param fn - The listener function to be removed\n   * @param context - The listener context to be removed\n   * @returns This instance of a ticker\n   */\n\n\n  Ticker.prototype.remove = function (fn, context) {\n    var listener = this._head.next;\n\n    while (listener) {\n      // We found a match, lets remove it\n      // no break to delete all possible matches\n      // incase a listener was added 2+ times\n      if (listener.match(fn, context)) {\n        listener = listener.destroy();\n      } else {\n        listener = listener.next;\n      }\n    }\n\n    if (!this._head.next) {\n      this._cancelIfNeeded();\n    }\n\n    return this;\n  };\n\n  Object.defineProperty(Ticker.prototype, \"count\", {\n    /**\n     * The number of listeners on this ticker, calculated by walking through linked list\n     *\n     * @readonly\n     * @member {number}\n     */\n    get: function get() {\n      if (!this._head) {\n        return 0;\n      }\n\n      var count = 0;\n      var current = this._head;\n\n      while (current = current.next) {\n        count++;\n      }\n\n      return count;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Starts the ticker. If the ticker has listeners\n   * a new animation frame is requested at this point.\n   */\n\n  Ticker.prototype.start = function () {\n    if (!this.started) {\n      this.started = true;\n\n      this._requestIfNeeded();\n    }\n  };\n  /**\n   * Stops the ticker. If the ticker has requested\n   * an animation frame it is canceled at this point.\n   */\n\n\n  Ticker.prototype.stop = function () {\n    if (this.started) {\n      this.started = false;\n\n      this._cancelIfNeeded();\n    }\n  };\n  /**\n   * Destroy the ticker and don't use after this. Calling\n   * this method removes all references to internal events.\n   */\n\n\n  Ticker.prototype.destroy = function () {\n    if (!this._protected) {\n      this.stop();\n      var listener = this._head.next;\n\n      while (listener) {\n        listener = listener.destroy(true);\n      }\n\n      this._head.destroy();\n\n      this._head = null;\n    }\n  };\n  /**\n   * Triggers an update. An update entails setting the\n   * current {@link PIXI.Ticker#elapsedMS},\n   * the current {@link PIXI.Ticker#deltaTime},\n   * invoking all listeners with current deltaTime,\n   * and then finally setting {@link PIXI.Ticker#lastTime}\n   * with the value of currentTime that was provided.\n   * This method will be called automatically by animation\n   * frame callbacks if the ticker instance has been started\n   * and listeners are added.\n   *\n   * @param {number} [currentTime=performance.now()] - the current time of execution\n   */\n\n\n  Ticker.prototype.update = function (currentTime) {\n    if (currentTime === void 0) {\n      currentTime = performance.now();\n    }\n\n    var elapsedMS; // If the difference in time is zero or negative, we ignore most of the work done here.\n    // If there is no valid difference, then should be no reason to let anyone know about it.\n    // A zero delta, is exactly that, nothing should update.\n    //\n    // The difference in time can be negative, and no this does not mean time traveling.\n    // This can be the result of a race condition between when an animation frame is requested\n    // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n    // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n    // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n    // can receive a time argument that can be less than the lastTime value that was set within\n    // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n    //\n    // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n    // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n\n    if (currentTime > this.lastTime) {\n      // Save uncapped elapsedMS for measurement\n      elapsedMS = this.elapsedMS = currentTime - this.lastTime; // cap the milliseconds elapsed used for deltaTime\n\n      if (elapsedMS > this._maxElapsedMS) {\n        elapsedMS = this._maxElapsedMS;\n      }\n\n      elapsedMS *= this.speed; // If not enough time has passed, exit the function.\n      // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n      // adjustment to ensure a relatively stable interval.\n\n      if (this._minElapsedMS) {\n        var delta = currentTime - this._lastFrame | 0;\n\n        if (delta < this._minElapsedMS) {\n          return;\n        }\n\n        this._lastFrame = currentTime - delta % this._minElapsedMS;\n      }\n\n      this.deltaMS = elapsedMS;\n      this.deltaTime = this.deltaMS * settings.TARGET_FPMS; // Cache a local reference, in-case ticker is destroyed\n      // during the emit, we can still check for head.next\n\n      var head = this._head; // Invoke listeners added to internal emitter\n\n      var listener = head.next;\n\n      while (listener) {\n        listener = listener.emit(this.deltaTime);\n      }\n\n      if (!head.next) {\n        this._cancelIfNeeded();\n      }\n    } else {\n      this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n    }\n\n    this.lastTime = currentTime;\n  };\n\n  Object.defineProperty(Ticker.prototype, \"FPS\", {\n    /**\n     * The frames per second at which this ticker is running.\n     * The default is approximately 60 in most modern browsers.\n     * **Note:** This does not factor in the value of\n     * {@link PIXI.Ticker#speed}, which is specific\n     * to scaling {@link PIXI.Ticker#deltaTime}.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get: function get() {\n      return 1000 / this.elapsedMS;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Ticker.prototype, \"minFPS\", {\n    /**\n     * Manages the maximum amount of milliseconds allowed to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This value is used to cap {@link PIXI.Ticker#deltaTime},\n     * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n     * When setting this property it is clamped to a value between\n     * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n     *\n     * @member {number}\n     * @default 10\n     */\n    get: function get() {\n      return 1000 / this._maxElapsedMS;\n    },\n    set: function set(fps) {\n      // Minimum must be below the maxFPS\n      var minFPS = Math.min(this.maxFPS, fps); // Must be at least 0, but below 1 / settings.TARGET_FPMS\n\n      var minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);\n      this._maxElapsedMS = 1 / minFPMS;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Ticker.prototype, \"maxFPS\", {\n    /**\n     * Manages the minimum amount of milliseconds required to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n     * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n     * Otherwise it will be at least `minFPS`\n     *\n     * @member {number}\n     * @default 0\n     */\n    get: function get() {\n      if (this._minElapsedMS) {\n        return Math.round(1000 / this._minElapsedMS);\n      }\n\n      return 0;\n    },\n    set: function set(fps) {\n      if (fps === 0) {\n        this._minElapsedMS = 0;\n      } else {\n        // Max must be at least the minFPS\n        var maxFPS = Math.max(this.minFPS, fps);\n        this._minElapsedMS = 1 / (maxFPS / 1000);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Ticker, \"shared\", {\n    /**\n     * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n     * {@link PIXI.VideoResource} to update animation frames / video textures.\n     *\n     * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n     *\n     * @example\n     * let ticker = PIXI.Ticker.shared;\n     * // Set this to prevent starting this ticker when listeners are added.\n     * // By default this is true only for the PIXI.Ticker.shared instance.\n     * ticker.autoStart = false;\n     * // FYI, call this to ensure the ticker is stopped. It should be stopped\n     * // if you have not attempted to render anything yet.\n     * ticker.stop();\n     * // Call this when you are ready for a running shared ticker.\n     * ticker.start();\n     *\n     * @example\n     * // You may use the shared ticker to render...\n     * let renderer = PIXI.autoDetectRenderer();\n     * let stage = new PIXI.Container();\n     * document.body.appendChild(renderer.view);\n     * ticker.add(function (time) {\n     *     renderer.render(stage);\n     * });\n     *\n     * @example\n     * // Or you can just update it manually.\n     * ticker.autoStart = false;\n     * ticker.stop();\n     * function animate(time) {\n     *     ticker.update(time);\n     *     renderer.render(stage);\n     *     requestAnimationFrame(animate);\n     * }\n     * animate(performance.now());\n     *\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    get: function get() {\n      if (!Ticker._shared) {\n        var shared = Ticker._shared = new Ticker();\n        shared.autoStart = true;\n        shared._protected = true;\n      }\n\n      return Ticker._shared;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Ticker, \"system\", {\n    /**\n     * The system ticker instance used by {@link PIXI.InteractionManager} and by\n     * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n     * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     *\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    get: function get() {\n      if (!Ticker._system) {\n        var system = Ticker._system = new Ticker();\n        system.autoStart = true;\n        system._protected = true;\n      }\n\n      return Ticker._system;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Ticker;\n}();\n/**\n * Middleware for for Application Ticker.\n *\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * Application.registerPlugin(TickerPlugin);\n *\n * @class\n * @memberof PIXI\n */\n\n\nvar TickerPlugin =\n/** @class */\nfunction () {\n  function TickerPlugin() {}\n  /**\n   * Initialize the plugin with scope of application instance\n   *\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n\n\n  TickerPlugin.init = function (options) {\n    var _this = this; // Set default\n\n\n    options = Object.assign({\n      autoStart: true,\n      sharedTicker: false\n    }, options); // Create ticker setter\n\n    Object.defineProperty(this, 'ticker', {\n      set: function set(ticker) {\n        if (this._ticker) {\n          this._ticker.remove(this.render, this);\n        }\n\n        this._ticker = ticker;\n\n        if (ticker) {\n          ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n        }\n      },\n      get: function get() {\n        return this._ticker;\n      }\n    });\n    /**\n     * Convenience method for stopping the render.\n     *\n     * @method\n     * @memberof PIXI.Application\n     * @instance\n     */\n\n    this.stop = function () {\n      _this._ticker.stop();\n    };\n    /**\n     * Convenience method for starting the render.\n     *\n     * @method\n     * @memberof PIXI.Application\n     * @instance\n     */\n\n\n    this.start = function () {\n      _this._ticker.start();\n    };\n    /**\n     * Internal reference to the ticker.\n     *\n     * @type {PIXI.Ticker}\n     * @name _ticker\n     * @memberof PIXI.Application#\n     * @private\n     */\n\n\n    this._ticker = null;\n    /**\n     * Ticker for doing render updates.\n     *\n     * @type {PIXI.Ticker}\n     * @name ticker\n     * @memberof PIXI.Application#\n     * @default PIXI.Ticker.shared\n     */\n\n    this.ticker = options.sharedTicker ? Ticker.shared : new Ticker(); // Start the rendering\n\n    if (options.autoStart) {\n      this.start();\n    }\n  };\n  /**\n   * Clean up the ticker, scoped to application.\n   *\n   * @static\n   * @private\n   */\n\n\n  TickerPlugin.destroy = function () {\n    if (this._ticker) {\n      var oldTicker = this._ticker;\n      this.ticker = null;\n      oldTicker.destroy();\n    }\n  };\n\n  return TickerPlugin;\n}();\n\nexport { Ticker, TickerPlugin, UPDATE_PRIORITY };","map":{"version":3,"mappings":"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","names":["settings","TARGET_FPMS","UPDATE_PRIORITY","fn","context","priority","once","TickerListener","deltaTime","call","redirect","next","destroy","_destroyed","previous","hard","_head","Infinity","deltaMS","elapsedMS","_tick","time","_this","_requestId","started","update","requestAnimationFrame","Ticker","lastTime","performance","now","_lastFrame","cancelAnimationFrame","_requestIfNeeded","autoStart","start","NORMAL","_addListener","listener","current","connect","_startIfPossible","match","_cancelIfNeeded","Object","count","_protected","stop","currentTime","_maxElapsedMS","speed","_minElapsedMS","delta","head","emit","fps","minFPS","Math","min","maxFPS","minFPMS","max","round","_shared","shared","_system","system","TickerPlugin","options","assign","sharedTicker","defineProperty","set","ticker","_ticker","remove","render","add","LOW","get","oldTicker"],"sources":["../../src/settings.ts","../../src/const.ts","../../src/TickerListener.ts","../../src/Ticker.ts","../../src/TickerPlugin.ts"],"sourcesContent":["import { settings } from '@pixi/settings';\n\n/**\n * Target frames per millisecond.\n *\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\nsettings.TARGET_FPMS = 0.06;\n\nexport { settings };\n","/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n *\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @enum {number}\n * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.InteractionManager}\n * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.\n * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.BasePrepare} utility.\n */\nexport enum UPDATE_PRIORITY {\n    INTERACTION = 50,\n    HIGH = 25,\n    NORMAL = 0,\n    LOW = -25,\n    UTILITY = -50,\n}\n","import { TickerCallback } from './Ticker';\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n *\n * @private\n * @class\n * @memberof PIXI\n */\nexport class TickerListener<T = any>\n{\n    /** The current priority. */\n    public priority: number;\n    /** The next item in chain. */\n    public next: TickerListener = null;\n    /** The previous item in chain. */\n    public previous: TickerListener = null;\n\n    /** The handler function to execute. */\n    private fn: TickerCallback<T>;\n    /** The calling to execute. */\n    private context: T;\n    /** If this should only execute once. */\n    private once: boolean;\n    /** `true` if this listener has been destroyed already. */\n    private _destroyed = false;\n\n    /**\n     * Constructor\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param priority - The priority for emitting\n     * @param once - If the handler should fire once\n     */\n    constructor(fn: TickerCallback<T>, context: T = null, priority = 0, once = false)\n    {\n        this.fn = fn;\n        this.context = context;\n        this.priority = priority;\n        this.once = once;\n    }\n\n    /**\n     * Simple compare function to figure out if a function and context match.\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @return `true` if the listener match the arguments\n     */\n    match(fn: TickerCallback<T>, context: any = null): boolean\n    {\n        return this.fn === fn && this.context === context;\n    }\n\n    /**\n     * Emit by calling the current function.\n     * @private\n     * @param deltaTime - time since the last emit.\n     * @return Next ticker\n     */\n    emit(deltaTime: number): TickerListener\n    {\n        if (this.fn)\n        {\n            if (this.context)\n            {\n                this.fn.call(this.context, deltaTime);\n            }\n            else\n            {\n                (this as TickerListener<any>).fn(deltaTime);\n            }\n        }\n\n        const redirect = this.next;\n\n        if (this.once)\n        {\n            this.destroy(true);\n        }\n\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed)\n        {\n            this.next = null;\n        }\n\n        return redirect;\n    }\n\n    /**\n     * Connect to the list.\n     * @private\n     * @param previous - Input node, previous listener\n     */\n    connect(previous: TickerListener): void\n    {\n        this.previous = previous;\n        if (previous.next)\n        {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @private\n     * @param hard - `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @return The listener to redirect while emitting or removing.\n     */\n    destroy(hard = false): TickerListener\n    {\n        this._destroyed = true;\n        this.fn = null;\n        this.context = null;\n\n        // Disconnect, hook up next and previous\n        if (this.previous)\n        {\n            this.previous.next = this.next;\n        }\n\n        if (this.next)\n        {\n            this.next.previous = this.previous;\n        }\n\n        // Redirect to the next item\n        const redirect = this.next;\n\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n\n        return redirect;\n    }\n}\n","import { settings } from './settings';\nimport { UPDATE_PRIORITY } from './const';\nimport { TickerListener } from './TickerListener';\n\nexport type TickerCallback<T> = (this: T, dt: number) => any;\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n *\n * @class\n * @memberof PIXI\n */\nexport class Ticker\n{\n    /** The private shared ticker instance */\n    private static _shared: Ticker;\n    /** The private system ticker instance  */\n    private static _system: Ticker;\n\n    /**\n     * Whether or not this ticker should invoke the method\n     * {@link PIXI.Ticker#start} automatically\n     * when a listener is added.\n     */\n    public autoStart = false;\n    /**\n     * Scalar time value from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     */\n    public deltaTime = 1;\n    /**\n     * Scaler time elapsed in milliseconds from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 Âµs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public deltaMS: number;\n    /**\n     * Time elapsed in milliseconds from last frame to this frame.\n     * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}\n     * is based, this value is neither capped nor scaled.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 Âµs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public elapsedMS: number;\n    /**\n     * The last time {@link PIXI.Ticker#update} was invoked.\n     * This value is also reset internally outside of invoking\n     * update, but only when a new animation frame is requested.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 Âµs.\n     */\n    public lastTime = -1;\n    /**\n     * Factor of current {@link PIXI.Ticker#deltaTime}.\n     * @example\n     * // Scales ticker.deltaTime to what would be\n     * // the equivalent of approximately 120 FPS\n     * ticker.speed = 2;\n     */\n    public speed = 1;\n    /**\n     * Whether or not this ticker has been started.\n     * `true` if {@link PIXI.Ticker#start} has been called.\n     * `false` if {@link PIXI.Ticker#stop} has been called.\n     * While `false`, this value may change to `true` in the\n     * event of {@link PIXI.Ticker#autoStart} being `true`\n     * and a listener is added.\n     */\n    public started = false;\n\n    /** The first listener. All new listeners added are chained on this. */\n    private _head: TickerListener;\n    /** Internal current frame request ID */\n    private _requestId: number = null;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the maximum allowed milliseconds between updates.\n     */\n    private _maxElapsedMS = 100;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the minimum allowed milliseconds between updates.\n     */\n    private _minElapsedMS = 0;\n    /** If enabled, deleting is disabled.*/\n    private _protected = false;\n    /**\n     * The last time keyframe was executed.\n     * Maintains a relatively fixed interval with the previous value.\n     */\n    private _lastFrame = -1;\n    /**\n     * Internal tick method bound to ticker instance.\n     * This is because in early 2015, Function.bind\n     * is still 60% slower in high performance scenarios.\n     * Also separating frame requests from update method\n     * so listeners may be called at any time and with\n     * any animation API, just invoke ticker.update(time).\n     *\n     * @param time - Time since last tick.\n     */\n    private _tick: (time: number) => any;\n\n    constructor()\n    {\n        this._head = new TickerListener(null, null, Infinity);\n        this.deltaMS = 1 / settings.TARGET_FPMS;\n        this.elapsedMS = 1 / settings.TARGET_FPMS;\n\n        this._tick = (time: number): void =>\n        {\n            this._requestId = null;\n\n            if (this.started)\n            {\n                // Invoke listeners now\n                this.update(time);\n                // Listener side effects may have modified ticker state.\n                if (this.started && this._requestId === null && this._head.next)\n                {\n                    this._requestId = requestAnimationFrame(this._tick);\n                }\n            }\n        };\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     *\n     * @private\n     */\n    private _requestIfNeeded(): void\n    {\n        if (this._requestId === null && this._head.next)\n        {\n            // ensure callbacks get correct delta\n            this.lastTime = performance.now();\n            this._lastFrame = this.lastTime;\n            this._requestId = requestAnimationFrame(this._tick);\n        }\n    }\n\n    /**\n     * Conditionally cancels a pending animation frame.\n     * @private\n     */\n    private _cancelIfNeeded(): void\n    {\n        if (this._requestId !== null)\n        {\n            cancelAnimationFrame(this._requestId);\n            this._requestId = null;\n        }\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     *\n     * @private\n     */\n    private _startIfPossible(): void\n    {\n        if (this.started)\n        {\n            this._requestIfNeeded();\n        }\n        else if (this.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     *\n     * @param fn - The listener function to be added for updates\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    add<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority));\n    }\n\n    /**\n     * Add a handler for the tick event which is only execute once.\n     *\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    addOnce<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority, true));\n    }\n\n    /**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     *\n     * @private\n     * @param listener - Current listener being added.\n     * @returns This instance of a ticker\n     */\n    private _addListener(listener: TickerListener): this\n    {\n        // For attaching to head\n        let current = this._head.next;\n        let previous = this._head;\n\n        // Add the first item\n        if (!current)\n        {\n            listener.connect(previous);\n        }\n        else\n        {\n            // Go from highest to lowest priority\n            while (current)\n            {\n                if (listener.priority > current.priority)\n                {\n                    listener.connect(previous);\n                    break;\n                }\n                previous = current;\n                current = current.next;\n            }\n\n            // Not yet connected\n            if (!listener.previous)\n            {\n                listener.connect(previous);\n            }\n        }\n\n        this._startIfPossible();\n\n        return this;\n    }\n\n    /**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     *\n     * @param fn - The listener function to be removed\n     * @param context - The listener context to be removed\n     * @returns This instance of a ticker\n     */\n    remove<T = any>(fn: TickerCallback<T>, context?: T): this\n    {\n        let listener = this._head.next;\n\n        while (listener)\n        {\n            // We found a match, lets remove it\n            // no break to delete all possible matches\n            // incase a listener was added 2+ times\n            if (listener.match(fn, context))\n            {\n                listener = listener.destroy();\n            }\n            else\n            {\n                listener = listener.next;\n            }\n        }\n\n        if (!this._head.next)\n        {\n            this._cancelIfNeeded();\n        }\n\n        return this;\n    }\n\n    /**\n     * The number of listeners on this ticker, calculated by walking through linked list\n     *\n     * @readonly\n     * @member {number}\n     */\n    get count(): number\n    {\n        if (!this._head)\n        {\n            return 0;\n        }\n\n        let count = 0;\n        let current = this._head;\n\n        while ((current = current.next))\n        {\n            count++;\n        }\n\n        return count;\n    }\n\n    /**\n     * Starts the ticker. If the ticker has listeners\n     * a new animation frame is requested at this point.\n     */\n    start(): void\n    {\n        if (!this.started)\n        {\n            this.started = true;\n            this._requestIfNeeded();\n        }\n    }\n\n    /**\n     * Stops the ticker. If the ticker has requested\n     * an animation frame it is canceled at this point.\n     */\n    stop(): void\n    {\n        if (this.started)\n        {\n            this.started = false;\n            this._cancelIfNeeded();\n        }\n    }\n\n    /**\n     * Destroy the ticker and don't use after this. Calling\n     * this method removes all references to internal events.\n     */\n    destroy(): void\n    {\n        if (!this._protected)\n        {\n            this.stop();\n\n            let listener = this._head.next;\n\n            while (listener)\n            {\n                listener = listener.destroy(true);\n            }\n\n            this._head.destroy();\n            this._head = null;\n        }\n    }\n\n    /**\n     * Triggers an update. An update entails setting the\n     * current {@link PIXI.Ticker#elapsedMS},\n     * the current {@link PIXI.Ticker#deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link PIXI.Ticker#lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     *\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */\n    update(currentTime = performance.now()): void\n    {\n        let elapsedMS;\n\n        // If the difference in time is zero or negative, we ignore most of the work done here.\n        // If there is no valid difference, then should be no reason to let anyone know about it.\n        // A zero delta, is exactly that, nothing should update.\n        //\n        // The difference in time can be negative, and no this does not mean time traveling.\n        // This can be the result of a race condition between when an animation frame is requested\n        // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n        // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n        // can receive a time argument that can be less than the lastTime value that was set within\n        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n        //\n        // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n\n        if (currentTime > this.lastTime)\n        {\n            // Save uncapped elapsedMS for measurement\n            elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n\n            // cap the milliseconds elapsed used for deltaTime\n            if (elapsedMS > this._maxElapsedMS)\n            {\n                elapsedMS = this._maxElapsedMS;\n            }\n\n            elapsedMS *= this.speed;\n\n            // If not enough time has passed, exit the function.\n            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n            // adjustment to ensure a relatively stable interval.\n            if (this._minElapsedMS)\n            {\n                const delta = currentTime - this._lastFrame | 0;\n\n                if (delta < this._minElapsedMS)\n                {\n                    return;\n                }\n\n                this._lastFrame = currentTime - (delta % this._minElapsedMS);\n            }\n\n            this.deltaMS = elapsedMS;\n            this.deltaTime = this.deltaMS * settings.TARGET_FPMS;\n\n            // Cache a local reference, in-case ticker is destroyed\n            // during the emit, we can still check for head.next\n            const head = this._head;\n\n            // Invoke listeners added to internal emitter\n            let listener = head.next;\n\n            while (listener)\n            {\n                listener = listener.emit(this.deltaTime);\n            }\n\n            if (!head.next)\n            {\n                this._cancelIfNeeded();\n            }\n        }\n        else\n        {\n            this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n        }\n\n        this.lastTime = currentTime;\n    }\n\n    /**\n     * The frames per second at which this ticker is running.\n     * The default is approximately 60 in most modern browsers.\n     * **Note:** This does not factor in the value of\n     * {@link PIXI.Ticker#speed}, which is specific\n     * to scaling {@link PIXI.Ticker#deltaTime}.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get FPS(): number\n    {\n        return 1000 / this.elapsedMS;\n    }\n\n    /**\n     * Manages the maximum amount of milliseconds allowed to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This value is used to cap {@link PIXI.Ticker#deltaTime},\n     * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n     * When setting this property it is clamped to a value between\n     * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n     *\n     * @member {number}\n     * @default 10\n     */\n    get minFPS(): number\n    {\n        return 1000 / this._maxElapsedMS;\n    }\n\n    set minFPS(fps: number)\n    {\n        // Minimum must be below the maxFPS\n        const minFPS = Math.min(this.maxFPS, fps);\n\n        // Must be at least 0, but below 1 / settings.TARGET_FPMS\n        const minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);\n\n        this._maxElapsedMS = 1 / minFPMS;\n    }\n\n    /**\n     * Manages the minimum amount of milliseconds required to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n     * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n     * Otherwise it will be at least `minFPS`\n     *\n     * @member {number}\n     * @default 0\n     */\n    get maxFPS(): number\n    {\n        if (this._minElapsedMS)\n        {\n            return Math.round(1000 / this._minElapsedMS);\n        }\n\n        return 0;\n    }\n\n    set maxFPS(fps: number)\n    {\n        if (fps === 0)\n        {\n            this._minElapsedMS = 0;\n        }\n        else\n        {\n            // Max must be at least the minFPS\n            const maxFPS = Math.max(this.minFPS, fps);\n\n            this._minElapsedMS = 1 / (maxFPS / 1000);\n        }\n    }\n\n    /**\n     * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n     * {@link PIXI.VideoResource} to update animation frames / video textures.\n     *\n     * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n     *\n     * @example\n     * let ticker = PIXI.Ticker.shared;\n     * // Set this to prevent starting this ticker when listeners are added.\n     * // By default this is true only for the PIXI.Ticker.shared instance.\n     * ticker.autoStart = false;\n     * // FYI, call this to ensure the ticker is stopped. It should be stopped\n     * // if you have not attempted to render anything yet.\n     * ticker.stop();\n     * // Call this when you are ready for a running shared ticker.\n     * ticker.start();\n     *\n     * @example\n     * // You may use the shared ticker to render...\n     * let renderer = PIXI.autoDetectRenderer();\n     * let stage = new PIXI.Container();\n     * document.body.appendChild(renderer.view);\n     * ticker.add(function (time) {\n     *     renderer.render(stage);\n     * });\n     *\n     * @example\n     * // Or you can just update it manually.\n     * ticker.autoStart = false;\n     * ticker.stop();\n     * function animate(time) {\n     *     ticker.update(time);\n     *     renderer.render(stage);\n     *     requestAnimationFrame(animate);\n     * }\n     * animate(performance.now());\n     *\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get shared(): Ticker\n    {\n        if (!Ticker._shared)\n        {\n            const shared = Ticker._shared = new Ticker();\n\n            shared.autoStart = true;\n            shared._protected = true;\n        }\n\n        return Ticker._shared;\n    }\n\n    /**\n     * The system ticker instance used by {@link PIXI.InteractionManager} and by\n     * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n     * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     *\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get system(): Ticker\n    {\n        if (!Ticker._system)\n        {\n            const system = Ticker._system = new Ticker();\n\n            system.autoStart = true;\n            system._protected = true;\n        }\n\n        return Ticker._system;\n    }\n}\n","import { UPDATE_PRIORITY } from './const';\nimport { Ticker } from './Ticker';\n\n/**\n * Middleware for for Application Ticker.\n *\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * Application.registerPlugin(TickerPlugin);\n *\n * @class\n * @memberof PIXI\n */\nexport class TickerPlugin\n{\n    static start: () => void;\n    static stop: () => void;\n    static _ticker: Ticker;\n    static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     *\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: GlobalMixins.IApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         *\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         *\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         *\n         * @type {PIXI.Ticker}\n         * @name _ticker\n         * @memberof PIXI.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         *\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     *\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}