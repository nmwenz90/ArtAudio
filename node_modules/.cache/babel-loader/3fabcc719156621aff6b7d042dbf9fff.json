{"ast":null,"code":"import _defineProperty from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport var createNativeAudioWorkletNodeFakerFactory = function createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections) {\n  return function (nativeContext, baseLatency, processorConstructor, options) {\n    if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n      throw createNotSupportedError();\n    }\n\n    var outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount); // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n\n    if (outputChannelCount.some(function (channelCount) {\n      return channelCount < 1;\n    })) {\n      throw createNotSupportedError();\n    }\n\n    if (outputChannelCount.length !== options.numberOfOutputs) {\n      throw createIndexSizeError();\n    } // Bug #61: This is not part of the standard but required for the faker to work.\n\n\n    if (options.channelCountMode !== 'explicit') {\n      throw createNotSupportedError();\n    }\n\n    var numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    var numberOfOutputChannels = outputChannelCount.reduce(function (sum, value) {\n      return sum + value;\n    }, 0);\n    var numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length; // Bug #61: This is not part of the standard but required for the faker to work.\n\n    if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n      throw createNotSupportedError();\n    }\n\n    var messageChannel = new MessageChannel();\n    var gainNodes = [];\n    var inputChannelSplitterNodes = [];\n\n    for (var i = 0; i < options.numberOfInputs; i += 1) {\n      gainNodes.push(createNativeGainNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: options.channelCountMode,\n        channelInterpretation: options.channelInterpretation,\n        gain: 1\n      }));\n      inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n        channelCount: options.channelCount,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        numberOfOutputs: options.channelCount\n      }));\n    }\n\n    var constantSourceNodes = [];\n\n    if (processorConstructor.parameterDescriptors !== undefined) {\n      var _iterator = _createForOfIteratorHelper(processorConstructor.parameterDescriptors),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var _step$value = _step.value,\n              defaultValue = _step$value.defaultValue,\n              maxValue = _step$value.maxValue,\n              minValue = _step$value.minValue,\n              name = _step$value.name;\n          var constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue\n          });\n          Object.defineProperties(constantSourceNode.offset, {\n            defaultValue: {\n              get: function get() {\n                return defaultValue === undefined ? 0 : defaultValue;\n              }\n            },\n            maxValue: {\n              get: function get() {\n                return maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue;\n              }\n            },\n            minValue: {\n              get: function get() {\n                return minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue;\n              }\n            }\n          });\n          constantSourceNodes.push(constantSourceNode);\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    var inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'speakers',\n      numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n    });\n    var bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n    var scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n    Math.max(1, numberOfOutputChannels));\n    var outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: Math.max(1, numberOfOutputChannels),\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: Math.max(1, numberOfOutputChannels)\n    });\n    var outputChannelMergerNodes = [];\n\n    for (var _i = 0; _i < options.numberOfOutputs; _i += 1) {\n      outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'speakers',\n        numberOfInputs: outputChannelCount[_i]\n      }));\n    }\n\n    for (var _i2 = 0; _i2 < options.numberOfInputs; _i2 += 1) {\n      gainNodes[_i2].connect(inputChannelSplitterNodes[_i2]);\n\n      for (var j = 0; j < options.channelCount; j += 1) {\n        inputChannelSplitterNodes[_i2].connect(inputChannelMergerNode, j, _i2 * options.channelCount + j);\n      }\n    }\n\n    var parameterMap = new ReadOnlyMap(processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map(function (_ref, index) {\n      var name = _ref.name;\n      var constantSourceNode = constantSourceNodes[index];\n      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n      constantSourceNode.start(0);\n      return [name, constantSourceNode.offset];\n    }));\n    inputChannelMergerNode.connect(scriptProcessorNode);\n    var channelInterpretation = options.channelInterpretation;\n    var onprocessorerror = null; // Bug #87: Expose at least one output to make this node connectable.\n\n    var outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n    var nativeAudioWorkletNodeFaker = {\n      get bufferSize() {\n        return bufferSize;\n      },\n\n      get channelCount() {\n        return options.channelCount;\n      },\n\n      set channelCount(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n\n      get channelCountMode() {\n        return options.channelCountMode;\n      },\n\n      set channelCountMode(_) {\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        throw createInvalidStateError();\n      },\n\n      get channelInterpretation() {\n        return channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        var _iterator2 = _createForOfIteratorHelper(gainNodes),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var gainNode = _step2.value;\n            gainNode.channelInterpretation = value;\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        channelInterpretation = value;\n      },\n\n      get context() {\n        return scriptProcessorNode.context;\n      },\n\n      get inputs() {\n        return gainNodes;\n      },\n\n      get numberOfInputs() {\n        return options.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return options.numberOfOutputs;\n      },\n\n      get onprocessorerror() {\n        return onprocessorerror;\n      },\n\n      set onprocessorerror(value) {\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n        }\n\n        onprocessorerror = typeof value === 'function' ? value : null;\n\n        if (typeof onprocessorerror === 'function') {\n          nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n        }\n      },\n\n      get parameters() {\n        return parameterMap;\n      },\n\n      get port() {\n        return messageChannel.port2;\n      },\n\n      addEventListener: function addEventListener() {\n        return scriptProcessorNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n      disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n      dispatchEvent: function dispatchEvent() {\n        return scriptProcessorNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return scriptProcessorNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    var patchedEventListeners = new Map();\n\n    messageChannel.port1.addEventListener = function (addEventListener) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (args[0] === 'message') {\n          var unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;\n\n          if (unpatchedEventListener !== null) {\n            var patchedEventListener = patchedEventListeners.get(args[1]);\n\n            if (patchedEventListener !== undefined) {\n              args[1] = patchedEventListener;\n            } else {\n              args[1] = function (event) {\n                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, function () {\n                  return unpatchedEventListener(event);\n                });\n              };\n\n              patchedEventListeners.set(unpatchedEventListener, args[1]);\n            }\n          }\n        }\n\n        return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    }(messageChannel.port1.addEventListener);\n\n    messageChannel.port1.removeEventListener = function (removeEventListener) {\n      return function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        if (args[0] === 'message') {\n          var patchedEventListener = patchedEventListeners.get(args[1]);\n\n          if (patchedEventListener !== undefined) {\n            patchedEventListeners.delete(args[1]);\n            args[1] = patchedEventListener;\n          }\n        }\n\n        return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n      };\n    }(messageChannel.port1.removeEventListener);\n\n    var onmessage = null;\n    Object.defineProperty(messageChannel.port1, 'onmessage', {\n      get: function get() {\n        return onmessage;\n      },\n      set: function set(value) {\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.removeEventListener('message', onmessage);\n        }\n\n        onmessage = typeof value === 'function' ? value : null;\n\n        if (typeof onmessage === 'function') {\n          messageChannel.port1.addEventListener('message', onmessage);\n          messageChannel.port1.start();\n        }\n      }\n    });\n    processorConstructor.prototype.port = messageChannel.port1;\n    var audioWorkletProcessor = null;\n    var audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n    audioWorkletProcessorPromise.then(function (dWrkltPrcssr) {\n      return audioWorkletProcessor = dWrkltPrcssr;\n    });\n    var inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    var outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n    var parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce(function (prmtrs, _ref2) {\n      var name = _ref2.name;\n      return _objectSpread(_objectSpread({}, prmtrs), {}, _defineProperty({}, name, new Float32Array(128)));\n    }, {});\n    var isActive = true;\n\n    var disconnectOutputsGraph = function disconnectOutputsGraph() {\n      if (options.numberOfOutputs > 0) {\n        scriptProcessorNode.disconnect(outputChannelSplitterNode);\n      }\n\n      for (var _i3 = 0, outputChannelSplitterNodeOutput = 0; _i3 < options.numberOfOutputs; _i3 += 1) {\n        var outputChannelMergerNode = outputChannelMergerNodes[_i3];\n\n        for (var _j = 0; _j < outputChannelCount[_i3]; _j += 1) {\n          outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + _j, _j);\n        }\n\n        outputChannelSplitterNodeOutput += outputChannelCount[_i3];\n      }\n    };\n\n    var activeInputIndexes = new Map(); // tslint:disable-next-line:deprecation\n\n    scriptProcessorNode.onaudioprocess = function (_ref3) {\n      var inputBuffer = _ref3.inputBuffer,\n          outputBuffer = _ref3.outputBuffer;\n\n      if (audioWorkletProcessor !== null) {\n        (function () {\n          var activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);\n\n          var _loop2 = function _loop2(_i4) {\n            for (var _j2 = 0; _j2 < options.numberOfInputs; _j2 += 1) {\n              for (var k = 0; k < options.channelCount; k += 1) {\n                copyFromChannel(inputBuffer, inputs[_j2], k, k, _i4);\n              }\n            }\n\n            if (processorConstructor.parameterDescriptors !== undefined) {\n              processorConstructor.parameterDescriptors.forEach(function (_ref4, index) {\n                var name = _ref4.name;\n                copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, _i4);\n              });\n            }\n\n            for (var _j3 = 0; _j3 < options.numberOfInputs; _j3 += 1) {\n              for (var _k = 0; _k < outputChannelCount[_j3]; _k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[_j3][_k].byteLength === 0) {\n                  outputs[_j3][_k] = new Float32Array(128);\n                }\n              }\n            }\n\n            try {\n              var potentiallyEmptyInputs = inputs.map(function (input, index) {\n                var activeInput = activeInputs[index];\n\n                if (activeInput.size > 0) {\n                  activeInputIndexes.set(index, bufferSize / 128);\n                  return input;\n                }\n\n                var count = activeInputIndexes.get(index);\n\n                if (count === undefined) {\n                  return [];\n                }\n\n                if (input.every(function (channelData) {\n                  return channelData.every(function (sample) {\n                    return sample === 0;\n                  });\n                })) {\n                  if (count === 1) {\n                    activeInputIndexes.delete(index);\n                  } else {\n                    activeInputIndexes.set(index, count - 1);\n                  }\n                }\n\n                return input;\n              });\n              var activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + _i4 / nativeContext.sampleRate, nativeContext.sampleRate, function () {\n                return audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters);\n              });\n              isActive = activeSourceFlag;\n\n              for (var _j4 = 0, outputChannelSplitterNodeOutput = 0; _j4 < options.numberOfOutputs; _j4 += 1) {\n                for (var _k2 = 0; _k2 < outputChannelCount[_j4]; _k2 += 1) {\n                  copyToChannel(outputBuffer, outputs[_j4], _k2, outputChannelSplitterNodeOutput + _k2, _i4);\n                }\n\n                outputChannelSplitterNodeOutput += outputChannelCount[_j4];\n              }\n            } catch (error) {\n              isActive = false;\n              nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {\n                colno: error.colno,\n                filename: error.filename,\n                lineno: error.lineno,\n                message: error.message\n              }));\n            }\n\n            if (!isActive) {\n              for (var _j5 = 0; _j5 < options.numberOfInputs; _j5 += 1) {\n                gainNodes[_j5].disconnect(inputChannelSplitterNodes[_j5]);\n\n                for (var _k3 = 0; _k3 < options.channelCount; _k3 += 1) {\n                  inputChannelSplitterNodes[_i4].disconnect(inputChannelMergerNode, _k3, _j5 * options.channelCount + _k3);\n                }\n              }\n\n              if (processorConstructor.parameterDescriptors !== undefined) {\n                var length = processorConstructor.parameterDescriptors.length;\n\n                for (var _j6 = 0; _j6 < length; _j6 += 1) {\n                  var constantSourceNode = constantSourceNodes[_j6];\n                  constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + _j6);\n                  constantSourceNode.stop();\n                }\n              }\n\n              inputChannelMergerNode.disconnect(scriptProcessorNode);\n              scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n              if (isConnected) {\n                disconnectOutputsGraph();\n              } else {\n                disconnectFakeGraph();\n              }\n\n              return \"break\";\n            }\n          };\n\n          for (var _i4 = 0; _i4 < bufferSize; _i4 += 128) {\n            var _ret = _loop2(_i4);\n\n            if (_ret === \"break\") break;\n          }\n        })();\n      }\n    };\n\n    var isConnected = false; // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n\n    var nativeGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: 0\n    });\n\n    var connectFakeGraph = function connectFakeGraph() {\n      return scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);\n    };\n\n    var disconnectFakeGraph = function disconnectFakeGraph() {\n      scriptProcessorNode.disconnect(nativeGainNode);\n      nativeGainNode.disconnect();\n    };\n\n    var whenConnected = function whenConnected() {\n      if (isActive) {\n        disconnectFakeGraph();\n\n        if (options.numberOfOutputs > 0) {\n          scriptProcessorNode.connect(outputChannelSplitterNode);\n        }\n\n        for (var _i5 = 0, outputChannelSplitterNodeOutput = 0; _i5 < options.numberOfOutputs; _i5 += 1) {\n          var outputChannelMergerNode = outputChannelMergerNodes[_i5];\n\n          for (var _j7 = 0; _j7 < outputChannelCount[_i5]; _j7 += 1) {\n            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + _j7, _j7);\n          }\n\n          outputChannelSplitterNodeOutput += outputChannelCount[_i5];\n        }\n      }\n\n      isConnected = true;\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      if (isActive) {\n        connectFakeGraph();\n        disconnectOutputsGraph();\n      }\n\n      isConnected = false;\n    };\n\n    connectFakeGraph();\n    return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","computeBufferSize","copyFromChannel","copyToChannel","createAudioWorkletProcessor","createNestedArrays","ReadOnlyMap","createNativeAudioWorkletNodeFakerFactory","connectMultipleOutputs","createIndexSizeError","createInvalidStateError","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeConstantSourceNode","createNativeGainNode","createNativeScriptProcessorNode","createNotSupportedError","disconnectMultipleOutputs","exposeCurrentFrameAndCurrentTime","getActiveAudioWorkletNodeInputs","monitorConnections","nativeContext","baseLatency","processorConstructor","options","numberOfInputs","numberOfOutputs","outputChannelCount","Array","isArray","from","some","channelCount","length","channelCountMode","numberOfInputChannels","numberOfOutputChannels","reduce","sum","value","numberOfParameters","parameterDescriptors","undefined","messageChannel","MessageChannel","gainNodes","inputChannelSplitterNodes","i","push","channelInterpretation","gain","constantSourceNodes","defaultValue","maxValue","minValue","name","constantSourceNode","offset","parameterData","Object","defineProperties","get","inputChannelMergerNode","Math","max","bufferSize","sampleRate","scriptProcessorNode","outputChannelSplitterNode","outputChannelMergerNodes","connect","j","parameterMap","map","index","start","onprocessorerror","outputAudioNodes","nativeAudioWorkletNodeFaker","_","gainNode","context","inputs","removeEventListener","addEventListener","parameters","port","port2","bind","disconnect","dispatchEvent","patchedEventListeners","Map","port1","args","unpatchedEventListener","handleEvent","patchedEventListener","event","currentTime","set","call","delete","onmessage","defineProperty","prototype","audioWorkletProcessor","audioWorkletProcessorPromise","then","dWrkltPrcssr","outputs","prmtrs","Float32Array","isActive","disconnectOutputsGraph","outputChannelSplitterNodeOutput","outputChannelMergerNode","activeInputIndexes","onaudioprocess","inputBuffer","outputBuffer","activeInputs","k","forEach","byteLength","potentiallyEmptyInputs","input","activeInput","size","count","every","channelData","sample","activeSourceFlag","process","error","ErrorEvent","colno","filename","lineno","message","stop","isConnected","disconnectFakeGraph","nativeGainNode","connectFakeGraph","destination","whenConnected","whenDisconnected"],"sourceRoot":"","sources":["../../../src/factories/native-audio-worklet-node-faker-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}