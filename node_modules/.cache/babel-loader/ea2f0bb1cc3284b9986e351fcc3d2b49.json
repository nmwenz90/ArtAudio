{"ast":null,"code":"import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport var createStartRendering = function createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n  return function (destination, nativeOfflineAudioContext) {\n    return getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext)\n    /*\n     * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n     * destination.\n     */\n    .then(function () {\n      return Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(function (audioWorkletNode) {\n        return getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext);\n      }));\n    }).then(function () {\n      return renderNativeOfflineAudioContext(nativeOfflineAudioContext);\n    }).then(function (audioBuffer) {\n      // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n      if (typeof audioBuffer.copyFromChannel !== 'function') {\n        wrapAudioBufferCopyChannelMethods(audioBuffer);\n        wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n      } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n        return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n      })) {\n        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n      }\n\n      audioBufferStore.add(audioBuffer);\n      return audioBuffer;\n    });\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,mCAAT,QAAoD,sDAApD;AAGA,OAAO,IAAMC,oBAAoB,GAA2B,SAA/CA,oBAA+C,CACxDC,gBADwD,EAExDC,eAFwD,EAGxDC,oBAHwD,EAIxDC,8BAJwD,EAKxDC,+BALwD,EAMxDC,mDANwD,EAOxDC,iCAPwD,EAQxDC,4CARwD,EASxD;AACA,SAAO,UAACC,WAAD,EAAcC,yBAAd;AAAA,WACHP,oBAAoB,CAACM,WAAD,CAApB,CACKE,MADL,CACYF,WADZ,EACyBC,yBADzB;AAEI;;;;AAFJ,KAMKE,IANL,CAMU;AAAA,aACFC,OAAO,CAACC,GAAR,CACIC,KAAK,CAACC,IAAN,CAAWZ,8BAA8B,CAACM,yBAAD,CAAzC,EAAsEO,GAAtE,CAA0E,UAACC,gBAAD;AAAA,eACtEf,oBAAoB,CAACe,gBAAD,CAApB,CAAuCP,MAAvC,CAA8CO,gBAA9C,EAAgER,yBAAhE,CADsE;AAAA,OAA1E,CADJ,CADE;AAAA,KANV,EAaKE,IAbL,CAaU;AAAA,aAAMP,+BAA+B,CAACK,yBAAD,CAArC;AAAA,KAbV,EAcKE,IAdL,CAcU,UAACO,WAAD,EAAgB;AAClB;AACA;AACA,UAAI,OAAOA,WAAW,CAACC,eAAnB,KAAuC,UAA3C,EAAuD;AACnDb,yCAAiC,CAACY,WAAD,CAAjC;AACApB,2CAAmC,CAACoB,WAAD,CAAnC,CAFmD,CAGnD;AACH,OAJD,MAIO,IACH,CAACjB,eAAe,CAACI,mDAAD,EAAsD;AAAA,eAClEA,mDAAmD,CAACa,WAAD,CADe;AAAA,OAAtD,CADb,EAIL;AACEX,oDAA4C,CAACW,WAAD,CAA5C;AACH;;AAEDlB,sBAAgB,CAACoB,GAAjB,CAAqBF,WAArB;AAEA,aAAOA,WAAP;AACH,KAhCL,CADG;AAAA,GAAP;AAkCH,CA5CM","names":["wrapAudioBufferGetChannelDataMethod","createStartRendering","audioBufferStore","cacheTestResult","getAudioNodeRenderer","getUnrenderedAudioWorkletNodes","renderNativeOfflineAudioContext","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","destination","nativeOfflineAudioContext","render","then","Promise","all","Array","from","map","audioWorkletNode","audioBuffer","copyFromChannel","add"],"sourceRoot":"","sources":["../../../src/factories/start-rendering.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}