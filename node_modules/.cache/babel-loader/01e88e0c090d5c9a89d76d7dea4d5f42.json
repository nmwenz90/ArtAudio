{"ast":null,"code":"import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport var createNativeOscillatorNodeFactory = function createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) {\n  return function (nativeContext, options) {\n    var nativeOscillatorNode = nativeContext.createOscillator();\n    assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n    assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n\n    if (options.periodicWave !== undefined) {\n      nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n    } else {\n      assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n    } // Bug #44: Only Chrome, Edge & Opera throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, function () {\n      return testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext);\n    })) {\n      wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, function () {\n      return testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext);\n    })) {\n      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n    } // Bug #44: Only Firefox does not throw a RangeError yet.\n\n\n    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, function () {\n      return testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext);\n    })) {\n      wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n    } // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n\n\n    addSilentConnection(nativeContext, nativeOscillatorNode);\n    return nativeOscillatorNode;\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,oCAAT,QAAqD,uDAArD;AACA,SAASC,2BAAT,QAA4C,4CAA5C;AACA,SAASC,4BAAT,QAA6C,6CAA7C;AACA,SAASC,yDAAT,QAA0E,8EAA1E;AACA,SAASC,wDAAT,QAAyE,6EAAzE;AAGA,OAAO,IAAMC,iCAAiC,GAAwC,SAAzEA,iCAAyE,CAClFC,mBADkF,EAElFC,eAFkF,EAGlFC,gEAHkF,EAIlFC,6DAJkF,EAKlFC,+DALkF,EAMlFC,sDANkF,EAOlF;AACA,SAAO,UAACC,aAAD,EAAgBC,OAAhB,EAA2B;AAC9B,QAAMC,oBAAoB,GAAGF,aAAa,CAACG,gBAAd,EAA7B;AAEAb,gCAA4B,CAACY,oBAAD,EAAuBD,OAAvB,CAA5B;AAEAb,wCAAoC,CAACc,oBAAD,EAAuBD,OAAvB,EAAgC,QAAhC,CAApC;AACAb,wCAAoC,CAACc,oBAAD,EAAuBD,OAAvB,EAAgC,WAAhC,CAApC;;AAEA,QAAIA,OAAO,CAACG,YAAR,KAAyBC,SAA7B,EAAwC;AACpCH,0BAAoB,CAACI,eAArB,CAAqCL,OAAO,CAACG,YAA7C;AACH,KAFD,MAEO;AACHf,iCAA2B,CAACa,oBAAD,EAAuBD,OAAvB,EAAgC,MAAhC,CAA3B;AACH,KAZ6B,CAc9B;;;AACA,QACI,CAACN,eAAe,CAACC,gEAAD,EAAmE;AAAA,aAC/EA,gEAAgE,CAACI,aAAD,CADe;AAAA,KAAnE,CADpB,EAIE;AACET,+DAAyD,CAACW,oBAAD,CAAzD;AACH,KArB6B,CAuB9B;;;AACA,QACI,CAACP,eAAe,CAACE,6DAAD,EAAgE;AAAA,aAC5EA,6DAA6D,CAACG,aAAD,CADe;AAAA,KAAhE,CADpB,EAIE;AACED,4DAAsD,CAACG,oBAAD,EAAuBF,aAAvB,CAAtD;AACH,KA9B6B,CAgC9B;;;AACA,QACI,CAACL,eAAe,CAACG,+DAAD,EAAkE;AAAA,aAC9EA,+DAA+D,CAACE,aAAD,CADe;AAAA,KAAlE,CADpB,EAIE;AACER,8DAAwD,CAACU,oBAAD,CAAxD;AACH,KAvC6B,CAyC9B;;;AACAR,uBAAmB,CAACM,aAAD,EAAgBE,oBAAhB,CAAnB;AAEA,WAAOA,oBAAP;AACH,GA7CD;AA8CH,CAtDM","names":["assignNativeAudioNodeAudioParamValue","assignNativeAudioNodeOption","assignNativeAudioNodeOptions","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","createNativeOscillatorNodeFactory","addSilentConnection","cacheTestResult","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","nativeContext","options","nativeOscillatorNode","createOscillator","periodicWave","undefined","setPeriodicWave"],"sourceRoot":"","sources":["../../../src/factories/native-oscillator-node-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}