{"ast":null,"code":"/*!\n * @pixi/app - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/app is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Container } from '@pixi/display';\nimport { autoDetectRenderer } from '@pixi/core';\n/**\n * Convenience class to create a new PIXI application.\n *\n * This class automatically creates the renderer, ticker and root container.\n *\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.from('something.png'));\n *\n * @class\n * @memberof PIXI\n */\n\nvar Application =\n/** @class */\nfunction () {\n  /**\n   * @param {object} [options] - The optional renderer parameters.\n   * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n   *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set\n   *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n   * @param {number} [options.width=800] - The width of the renderers view.\n   * @param {number} [options.height=600] - The height of the renderers view.\n   * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n   * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n   *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n   *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n   * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n   *   resolutions other than 1.\n   * @param {boolean} [options.antialias=false] - Sets antialias\n   * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you\n   *  need to call toDataUrl on the WebGL context.\n   * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n   * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n   *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n   *   it is ignored.\n   * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n   *  (shown if not transparent).\n   * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n   * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n   *   not before the new render pass.\n   * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n   *  for devices with dual graphics card. **(WebGL only)**.\n   * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.\n   *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.\n   *  The system ticker will always run before both the shared ticker and the app ticker.\n   * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.\n   * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n   */\n  function Application(options) {\n    var _this = this;\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n\n\n    this.stage = new Container(); // The default options\n\n    options = Object.assign({\n      forceCanvas: false\n    }, options);\n    this.renderer = autoDetectRenderer(options); // install plugins here\n\n    Application._plugins.forEach(function (plugin) {\n      plugin.init.call(_this, options);\n    });\n  }\n  /**\n   * Register a middleware plugin for the application\n   * @static\n   * @param {PIXI.IApplicationPlugin} plugin - Plugin being installed\n   */\n\n\n  Application.registerPlugin = function (plugin) {\n    Application._plugins.push(plugin);\n  };\n  /**\n   * Render the current stage.\n   */\n\n\n  Application.prototype.render = function () {\n    this.renderer.render(this.stage);\n  };\n\n  Object.defineProperty(Application.prototype, \"view\", {\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {HTMLCanvasElement}\n     * @readonly\n     */\n    get: function get() {\n      return this.renderer.view;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Application.prototype, \"screen\", {\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get: function get() {\n      return this.renderer.screen;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Destroy and don't use after this.\n   * @param {Boolean} [removeView=false] - Automatically remove canvas from DOM.\n   * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n   *  method called as well. 'stageOptions' will be passed on to those calls.\n   * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n   *  to true. Should it destroy the texture of the child sprite\n   * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n   *  to true. Should it destroy the base texture of the child sprite\n   */\n\n  Application.prototype.destroy = function (removeView, stageOptions) {\n    var _this = this; // Destroy plugins in the opposite order\n    // which they were constructed\n\n\n    var plugins = Application._plugins.slice(0);\n\n    plugins.reverse();\n    plugins.forEach(function (plugin) {\n      plugin.destroy.call(_this);\n    });\n    this.stage.destroy(stageOptions);\n    this.stage = null;\n    this.renderer.destroy(removeView);\n    this.renderer = null;\n  };\n  /** Collection of installed plugins. */\n\n\n  Application._plugins = [];\n  return Application;\n}();\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\n\n\nvar ResizePlugin =\n/** @class */\nfunction () {\n  function ResizePlugin() {}\n  /**\n   * Initialize the plugin with scope of application instance\n   * @static\n   * @private\n   * @param {object} [options] - See application options\n   */\n\n\n  ResizePlugin.init = function (options) {\n    var _this = this;\n\n    Object.defineProperty(this, 'resizeTo',\n    /**\n     * The HTML element or window to automatically resize the\n     * renderer's view element to match width and height.\n     * @member {Window|HTMLElement}\n     * @name resizeTo\n     * @memberof PIXI.Application#\n     */\n    {\n      set: function set(dom) {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this._resizeTo = dom;\n\n        if (dom) {\n          globalThis.addEventListener('resize', this.queueResize);\n          this.resize();\n        }\n      },\n      get: function get() {\n        return this._resizeTo;\n      }\n    });\n    /**\n     * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n     * only be called once.\n     *\n     * @memberof PIXI.Application#\n     * @method queueResize\n     * @private\n     */\n\n    this.queueResize = function () {\n      if (!_this._resizeTo) {\n        return;\n      }\n\n      _this.cancelResize(); // // Throttle resize events per raf\n\n\n      _this._resizeId = requestAnimationFrame(function () {\n        return _this.resize();\n      });\n    };\n    /**\n     * Cancel the resize queue.\n     *\n     * @memberof PIXI.Application#\n     * @method cancelResize\n     * @private\n     */\n\n\n    this.cancelResize = function () {\n      if (_this._resizeId) {\n        cancelAnimationFrame(_this._resizeId);\n        _this._resizeId = null;\n      }\n    };\n    /**\n     * Execute an immediate resize on the renderer, this is not\n     * throttled and can be expensive to call many times in a row.\n     * Will resize only if `resizeTo` property is set.\n     *\n     * @memberof PIXI.Application#\n     * @method resize\n     */\n\n\n    this.resize = function () {\n      if (!_this._resizeTo) {\n        return;\n      } // clear queue resize\n\n\n      _this.cancelResize();\n\n      var width;\n      var height; // Resize to the window\n\n      if (_this._resizeTo === globalThis.window) {\n        width = globalThis.innerWidth;\n        height = globalThis.innerHeight;\n      } // Resize to other HTML entities\n      else {\n        var _a = _this._resizeTo,\n            clientWidth = _a.clientWidth,\n            clientHeight = _a.clientHeight;\n        width = clientWidth;\n        height = clientHeight;\n      }\n\n      _this.renderer.resize(width, height);\n    }; // On resize\n\n\n    this._resizeId = null;\n    this._resizeTo = null;\n    this.resizeTo = options.resizeTo || null;\n  };\n  /**\n   * Clean up the ticker, scoped to application\n   *\n   * @static\n   * @private\n   */\n\n\n  ResizePlugin.destroy = function () {\n    globalThis.removeEventListener('resize', this.queueResize);\n    this.cancelResize();\n    this.cancelResize = null;\n    this.queueResize = null;\n    this.resizeTo = null;\n    this.resize = null;\n  };\n\n  return ResizePlugin;\n}();\n\nApplication.registerPlugin(ResizePlugin);\nexport { Application };","map":{"version":3,"mappings":";;;;;;;;;AA+BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEI,uBAAYA,OAAZ,EAAyC;AAAzC;;;;;;;AAzCO,iBAAmB,IAAIC,SAAJ,EAAnB,CAyCkC;;AAGrCD,WAAO,GAAGE,MAAM,CAACC,MAAP,CAAc;AACpBC,iBAAW,EAAE;AADO,KAAd,EAEPJ,OAFO,CAAV;AAIA,SAAKK,QAAL,GAAgBC,kBAAkB,CAACN,OAAD,CAAlC,CAPqC;;AAUrCO,eAAW,CAACC,QAAZ,CAAqBC,OAArB,CAA6B,UAACC,MAAD,EAAO;AAEhCA,YAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBC,KAAjB,EAAuBb,OAAvB;AACH,KAHD;AAIH;;;;;;;;AAOMO,+BAAP,UAAsBG,MAAtB,EAAgD;AAE5CH,eAAW,CAACC,QAAZ,CAAqBM,IAArB,CAA0BJ,MAA1B;AACH,GAHM;;;;;;AAQAH,iCAAP;AAEI,SAAKF,QAAL,CAAcU,MAAd,CAAqB,KAAKC,KAA1B;AACH,GAHM;;AAUPd,wBAAIK,qBAAJ,EAAI,MAAJ,EAAQ;;;;;;SAAR;AAEI,aAAO,KAAKF,QAAL,CAAcY,IAArB;AACH,KAHO;qBAAA;;AAAA,GAAR;AAUAf,wBAAIK,qBAAJ,EAAI,QAAJ,EAAU;;;;;;SAAV;AAEI,aAAO,KAAKF,QAAL,CAAca,MAArB;AACH,KAHS;qBAAA;;AAAA,GAAV;;;;;;;;;;;;;;AAiBOX,kCAAP,UAAeY,UAAf,EAAqCC,YAArC,EAA2E;AAA3E,qBAA2E;;;;AAIvE,QAAMC,OAAO,GAAGd,WAAW,CAACC,QAAZ,CAAqBc,KAArB,CAA2B,CAA3B,CAAhB;;AAEAD,WAAO,CAACE,OAAR;AACAF,WAAO,CAACZ,OAAR,CAAgB,UAACC,MAAD,EAAO;AAEnBA,YAAM,CAACc,OAAP,CAAeZ,IAAf,CAAoBC,KAApB;AACH,KAHD;AAKA,SAAKG,KAAL,CAAWQ,OAAX,CAAmBJ,YAAnB;AACA,SAAKJ,KAAL,GAAa,IAAb;AAEA,SAAKX,QAAL,CAAcmB,OAAd,CAAsBL,UAAtB;AACA,SAAKd,QAAL,GAAgB,IAAhB;AACH,GAjBM;;;;AAjHQE,yBAAiC,EAAjC;AAmInB;AAtIA;AC7CA;;;;;;;AAKA;AAAA;AAAA;AAAA,2BA4IC;;;;;;;;;AA5HUkB,sBAAP,UAAYzB,OAAZ,EAAyC;AAAzC;;AAEIE,UAAM,CAACwB,cAAP,CAAsB,IAAtB,EAA4B,UAA5B;;;;;;;;AAQI;AACIC,SAAG,EAAH,aAAIC,GAAJ,EAA2B;AAEvBC,kBAAU,CAACC,mBAAX,CAA+B,QAA/B,EAAyC,KAAKC,WAA9C;AACA,aAAKC,SAAL,GAAiBJ,GAAjB;;AACA,YAAIA,GAAJ,EACA;AACIC,oBAAU,CAACI,gBAAX,CAA4B,QAA5B,EAAsC,KAAKF,WAA3C;AACA,eAAKG,MAAL;AACH;AACJ,OAVL;AAWIC,SAAG;AAEC,eAAO,KAAKH,SAAZ;AACH;AAdL,KARJ;;;;;;;;;;AAiCA,SAAKD,WAAL,GAAmB;AAEf,UAAI,CAAClB,KAAI,CAACmB,SAAV,EACA;AACI;AACH;;AAEDnB,WAAI,CAACuB,YAAL,GAPe;;;AAUfvB,WAAI,CAACwB,SAAL,GAAiBC,qBAAqB,CAAC;AAAM,oBAAI,CAACJ,MAAL;AAAa,OAApB,CAAtC;AACH,KAXD;;;;;;;;;;AAoBA,SAAKE,YAAL,GAAoB;AAEhB,UAAIvB,KAAI,CAACwB,SAAT,EACA;AACIE,4BAAoB,CAAC1B,KAAI,CAACwB,SAAN,CAApB;AACAxB,aAAI,CAACwB,SAAL,GAAiB,IAAjB;AACH;AACJ,KAPD;;;;;;;;;;;AAiBA,SAAKH,MAAL,GAAc;AAEV,UAAI,CAACrB,KAAI,CAACmB,SAAV,EACA;AACI;AACH,OALS;;;AAQVnB,WAAI,CAACuB,YAAL;;AAEA,UAAII,KAAJ;AACA,UAAIC,MAAJ,CAXU;;AAcV,UAAI5B,KAAI,CAACmB,SAAL,KAAmBH,UAAU,CAACa,MAAlC,EACA;AACIF,aAAK,GAAGX,UAAU,CAACc,UAAnB;AACAF,cAAM,GAAGZ,UAAU,CAACe,WAApB;AACH,OAJD;AAAA,WAOA;AACU,iBAAgC/B,KAAI,CAACmB,SAArC;AAAA,YAAEa,WAAW,iBAAb;AAAA,YAAeC,YAAY,kBAA3B;AAENN,aAAK,GAAGK,WAAR;AACAJ,cAAM,GAAGK,YAAT;AACH;;AAEDjC,WAAI,CAACR,QAAL,CAAc6B,MAAd,CAAqBM,KAArB,EAA4BC,MAA5B;AACH,KA7BD,CAxEqC;;;AAwGrC,SAAKJ,SAAL,GAAiB,IAAjB;AACA,SAAKL,SAAL,GAAiB,IAAjB;AACA,SAAKe,QAAL,GAAgB/C,OAAO,CAAC+C,QAAR,IAAoB,IAApC;AACH,GA3GM;;;;;;;;;AAmHAtB,yBAAP;AAEII,cAAU,CAACC,mBAAX,CAA+B,QAA/B,EAAyC,KAAKC,WAA9C;AACA,SAAKK,YAAL;AACA,SAAKA,YAAL,GAAoB,IAApB;AACA,SAAKL,WAAL,GAAmB,IAAnB;AACA,SAAKgB,QAAL,GAAgB,IAAhB;AACA,SAAKb,MAAL,GAAc,IAAd;AACH,GARM;;AASX;AAAC,CA5ID;;ACNA3B,WAAW,CAACyC,cAAZ,CAA2BvB,YAA3B","names":["options","Container","Object","assign","forceCanvas","renderer","autoDetectRenderer","Application","_plugins","forEach","plugin","init","call","_this","push","render","stage","view","screen","removeView","stageOptions","plugins","slice","reverse","destroy","ResizePlugin","defineProperty","set","dom","globalThis","removeEventListener","queueResize","_resizeTo","addEventListener","resize","get","cancelResize","_resizeId","requestAnimationFrame","cancelAnimationFrame","width","height","window","innerWidth","innerHeight","clientWidth","clientHeight","resizeTo","registerPlugin"],"sources":["../../src/Application.ts","../../src/ResizePlugin.ts","../../src/index.ts"],"sourcesContent":["import { Container } from '@pixi/display';\nimport { autoDetectRenderer } from '@pixi/core';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Renderer, IRendererOptionsAuto, AbstractRenderer } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\n\n/**\n * Any plugin that's usable for Application should contain these methods.\n * @memberof PIXI\n * @see {@link PIXI.Application.registerPlugin}\n */\nexport interface IApplicationPlugin {\n    /**\n     * Called when Application is constructed, scoped to Application instance.\n     * Passes in `options` as the only argument, which are Application constructor options.\n     * @param {object} options - Application options.\n     */\n    init(options: IApplicationOptions): void;\n    /**\n     * Called when destroying Application, scoped to Application instance.\n     */\n    destroy(): void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IApplicationOptions extends IRendererOptionsAuto, GlobalMixins.IApplicationOptions {}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Application extends GlobalMixins.Application {}\n\n/**\n * Convenience class to create a new PIXI application.\n *\n * This class automatically creates the renderer, ticker and root container.\n *\n * @example\n * // Create the application\n * const app = new PIXI.Application();\n *\n * // Add the view to the DOM\n * document.body.appendChild(app.view);\n *\n * // ex, add display objects\n * app.stage.addChild(PIXI.Sprite.from('something.png'));\n *\n * @class\n * @memberof PIXI\n */\nexport class Application\n{\n    /** Collection of installed plugins. */\n    private static _plugins: IApplicationPlugin[] = [];\n\n    /**\n     * The root display container that's rendered.\n     * @member {PIXI.Container}\n     */\n    public stage: Container = new Container();\n\n    /**\n     * WebGL renderer if available, otherwise CanvasRenderer.\n     * @member {PIXI.Renderer|PIXI.CanvasRenderer}\n     */\n    public renderer: Renderer|AbstractRenderer;\n\n    /**\n     * @param {object} [options] - The optional renderer parameters.\n     * @param {boolean} [options.autoStart=true] - Automatically starts the rendering after the construction.\n     *     **Note**: Setting this parameter to false does NOT stop the shared ticker even if you set\n     *     options.sharedTicker to true in case that it is already started. Stop it by your own.\n     * @param {number} [options.width=800] - The width of the renderers view.\n     * @param {number} [options.height=600] - The height of the renderers view.\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n     * @param {boolean} [options.useContextAlpha=true] - Pass-through value for canvas' context `alpha` property.\n     *   If you want to set transparency, please use `backgroundAlpha`. This option is for cases where the\n     *   canvas needs to be opaque, possibly for performance reasons on some older devices.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1.\n     * @param {boolean} [options.antialias=false] - Sets antialias\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation, enable this if you\n     *  need to call toDataUrl on the WebGL context.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n     *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n     *   it is ignored.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {number} [options.backgroundAlpha=1] - Value from 0 (fully transparent) to 1 (fully opaque).\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *   not before the new render pass.\n     * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n     *  for devices with dual graphics card. **(WebGL only)**.\n     * @param {boolean} [options.sharedTicker=false] - `true` to use PIXI.Ticker.shared, `false` to create new ticker.\n     *  If set to false, you cannot register a handler to occur before anything that runs on the shared ticker.\n     *  The system ticker will always run before both the shared ticker and the app ticker.\n     * @param {boolean} [options.sharedLoader=false] - `true` to use PIXI.Loader.shared, `false` to create new Loader.\n     * @param {Window|HTMLElement} [options.resizeTo] - Element to automatically resize stage to.\n     */\n    constructor(options?: IApplicationOptions)\n    {\n        // The default options\n        options = Object.assign({\n            forceCanvas: false,\n        }, options);\n\n        this.renderer = autoDetectRenderer(options);\n\n        // install plugins here\n        Application._plugins.forEach((plugin) =>\n        {\n            plugin.init.call(this, options);\n        });\n    }\n\n    /**\n     * Register a middleware plugin for the application\n     * @static\n     * @param {PIXI.IApplicationPlugin} plugin - Plugin being installed\n     */\n    static registerPlugin(plugin: IApplicationPlugin): void\n    {\n        Application._plugins.push(plugin);\n    }\n\n    /**\n     * Render the current stage.\n     */\n    public render(): void\n    {\n        this.renderer.render(this.stage);\n    }\n\n    /**\n     * Reference to the renderer's canvas element.\n     * @member {HTMLCanvasElement}\n     * @readonly\n     */\n    get view(): HTMLCanvasElement\n    {\n        return this.renderer.view;\n    }\n\n    /**\n     * Reference to the renderer's screen rectangle. Its safe to use as `filterArea` or `hitArea` for the whole screen.\n     * @member {PIXI.Rectangle}\n     * @readonly\n     */\n    get screen(): Rectangle\n    {\n        return this.renderer.screen;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @param {Boolean} [removeView=false] - Automatically remove canvas from DOM.\n     * @param {object|boolean} [stageOptions] - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [stageOptions.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'stageOptions' will be passed on to those calls.\n     * @param {boolean} [stageOptions.texture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the texture of the child sprite\n     * @param {boolean} [stageOptions.baseTexture=false] - Only used for child Sprites if stageOptions.children is set\n     *  to true. Should it destroy the base texture of the child sprite\n     */\n    public destroy(removeView?: boolean, stageOptions?: IDestroyOptions|boolean): void\n    {\n        // Destroy plugins in the opposite order\n        // which they were constructed\n        const plugins = Application._plugins.slice(0);\n\n        plugins.reverse();\n        plugins.forEach((plugin) =>\n        {\n            plugin.destroy.call(this);\n        });\n\n        this.stage.destroy(stageOptions);\n        this.stage = null;\n\n        this.renderer.destroy(removeView);\n        this.renderer = null;\n    }\n}\n","import type { CanvasRenderer } from '@pixi/canvas-renderer';\nimport type { Renderer } from '@pixi/core';\nimport type { IApplicationOptions } from './Application';\n\n/**\n * Middleware for for Application's resize functionality\n * @private\n * @class\n */\nexport class ResizePlugin\n{\n    public static resizeTo: Window|HTMLElement;\n    public static resize: () => void;\n    public static renderer: Renderer|CanvasRenderer;\n    public static queueResize: () => void;\n    private static _resizeId: number;\n    private static _resizeTo: Window|HTMLElement;\n    private static cancelResize: () => void;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: IApplicationOptions): void\n    {\n        Object.defineProperty(this, 'resizeTo',\n            /**\n             * The HTML element or window to automatically resize the\n             * renderer's view element to match width and height.\n             * @member {Window|HTMLElement}\n             * @name resizeTo\n             * @memberof PIXI.Application#\n             */\n            {\n                set(dom: Window|HTMLElement)\n                {\n                    globalThis.removeEventListener('resize', this.queueResize);\n                    this._resizeTo = dom;\n                    if (dom)\n                    {\n                        globalThis.addEventListener('resize', this.queueResize);\n                        this.resize();\n                    }\n                },\n                get()\n                {\n                    return this._resizeTo;\n                },\n            });\n\n        /**\n         * Resize is throttled, so it's safe to call this multiple times per frame and it'll\n         * only be called once.\n         *\n         * @memberof PIXI.Application#\n         * @method queueResize\n         * @private\n         */\n        this.queueResize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            this.cancelResize();\n\n            // // Throttle resize events per raf\n            this._resizeId = requestAnimationFrame(() => this.resize());\n        };\n\n        /**\n         * Cancel the resize queue.\n         *\n         * @memberof PIXI.Application#\n         * @method cancelResize\n         * @private\n         */\n        this.cancelResize = (): void =>\n        {\n            if (this._resizeId)\n            {\n                cancelAnimationFrame(this._resizeId);\n                this._resizeId = null;\n            }\n        };\n\n        /**\n         * Execute an immediate resize on the renderer, this is not\n         * throttled and can be expensive to call many times in a row.\n         * Will resize only if `resizeTo` property is set.\n         *\n         * @memberof PIXI.Application#\n         * @method resize\n         */\n        this.resize = (): void =>\n        {\n            if (!this._resizeTo)\n            {\n                return;\n            }\n\n            // clear queue resize\n            this.cancelResize();\n\n            let width: number;\n            let height: number;\n\n            // Resize to the window\n            if (this._resizeTo === globalThis.window)\n            {\n                width = globalThis.innerWidth;\n                height = globalThis.innerHeight;\n            }\n            // Resize to other HTML entities\n            else\n            {\n                const { clientWidth, clientHeight } = this._resizeTo as HTMLElement;\n\n                width = clientWidth;\n                height = clientHeight;\n            }\n\n            this.renderer.resize(width, height);\n        };\n\n        // On resize\n        this._resizeId = null;\n        this._resizeTo = null;\n        this.resizeTo = options.resizeTo || null;\n    }\n\n    /**\n     * Clean up the ticker, scoped to application\n     *\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        globalThis.removeEventListener('resize', this.queueResize);\n        this.cancelResize();\n        this.cancelResize = null;\n        this.queueResize = null;\n        this.resizeTo = null;\n        this.resize = null;\n    }\n}\n","import { Application } from './Application';\nimport { ResizePlugin } from './ResizePlugin';\n\nApplication.registerPlugin(ResizePlugin);\n\nexport * from './Application';\n"]},"metadata":{},"sourceType":"module"}