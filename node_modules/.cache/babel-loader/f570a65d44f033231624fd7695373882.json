{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Compressor } from \"./Compressor\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MidSideSplit } from \"../channel/MidSideSplit\";\nimport { MidSideMerge } from \"../channel/MidSideMerge\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * MidSideCompressor applies two different compressors to the [[mid]]\n * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].\n * @category Component\n */\n\nexport var MidSideCompressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MidSideCompressor, _ToneAudioNode);\n\n  var _super = _createSuper(MidSideCompressor);\n\n  function MidSideCompressor() {\n    var _this;\n\n    _classCallCheck(this, MidSideCompressor);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(), arguments)));\n    _this.name = \"MidSideCompressor\";\n    var options = optionsFromArguments(MidSideCompressor.getDefaults(), arguments);\n    _this._midSideSplit = _this.input = new MidSideSplit({\n      context: _this.context\n    });\n    _this._midSideMerge = _this.output = new MidSideMerge({\n      context: _this.context\n    });\n    _this.mid = new Compressor(Object.assign(options.mid, {\n      context: _this.context\n    }));\n    _this.side = new Compressor(Object.assign(options.side, {\n      context: _this.context\n    }));\n\n    _this._midSideSplit.mid.chain(_this.mid, _this._midSideMerge.mid);\n\n    _this._midSideSplit.side.chain(_this.side, _this._midSideMerge.side);\n\n    readOnly(_assertThisInitialized(_this), [\"mid\", \"side\"]);\n    return _this;\n  }\n\n  _createClass(MidSideCompressor, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideCompressor.prototype), \"dispose\", this).call(this);\n\n      this.mid.dispose();\n      this.side.dispose();\n\n      this._midSideSplit.dispose();\n\n      this._midSideMerge.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        mid: {\n          ratio: 3,\n          threshold: -24,\n          release: 0.03,\n          attack: 0.02,\n          knee: 16\n        },\n        side: {\n          ratio: 6,\n          threshold: -30,\n          release: 0.25,\n          attack: 0.03,\n          knee: 10\n        }\n      });\n    }\n  }]);\n\n  return MidSideCompressor;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AAAA,SAAgCA,aAAhC,QAA2E,kCAA3E;AACA,SAASC,UAAT,QAA8C,cAA9C;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,SAASC,QAAT,QAA2C,2BAA3C;AAOA;;;;;;AAKA,WAAaC,iBAAb;AAAA;;AAAA;;AA4BC;AAAA;;AAAA;;AACC,8BAAMC,MAAM,CAACC,MAAP,CAAcN,oBAAoB,CAACI,iBAAiB,CAACG,WAAlB,EAAD,EAAkCC,SAAlC,CAAlC,CAAN;AA3BQ,iBAAe,mBAAf;AA4BR,QAAMC,OAAO,GAAGT,oBAAoB,CAACI,iBAAiB,CAACG,WAAlB,EAAD,EAAkCC,SAAlC,CAApC;AAEA,UAAKE,aAAL,GAAqB,MAAKC,KAAL,GAAa,IAAIV,YAAJ,CAAiB;AAAEW,aAAO,EAAE,MAAKA;AAAhB,KAAjB,CAAlC;AACA,UAAKC,aAAL,GAAqB,MAAKC,MAAL,GAAc,IAAIZ,YAAJ,CAAiB;AAAEU,aAAO,EAAE,MAAKA;AAAhB,KAAjB,CAAnC;AACA,UAAKG,GAAL,GAAW,IAAIhB,UAAJ,CAAeM,MAAM,CAACC,MAAP,CAAcG,OAAO,CAACM,GAAtB,EAA2B;AAAEH,aAAO,EAAE,MAAKA;AAAhB,KAA3B,CAAf,CAAX;AACA,UAAKI,IAAL,GAAY,IAAIjB,UAAJ,CAAeM,MAAM,CAACC,MAAP,CAAcG,OAAO,CAACO,IAAtB,EAA4B;AAAEJ,aAAO,EAAE,MAAKA;AAAhB,KAA5B,CAAf,CAAZ;;AAEA,UAAKF,aAAL,CAAmBK,GAAnB,CAAuBE,KAAvB,CAA6B,MAAKF,GAAlC,EAAuC,MAAKF,aAAL,CAAmBE,GAA1D;;AACA,UAAKL,aAAL,CAAmBM,IAAnB,CAAwBC,KAAxB,CAA8B,MAAKD,IAAnC,EAAyC,MAAKH,aAAL,CAAmBG,IAA5D;;AACAb,YAAQ,gCAAO,CAAC,KAAD,EAAQ,MAAR,CAAP,CAAR;AAXD;AAYC;;AAxCF;AAAA;AAAA,WA6DC,mBAAO;AACN;;AACA,WAAKY,GAAL,CAASG,OAAT;AACA,WAAKF,IAAL,CAAUE,OAAV;;AACA,WAAKR,aAAL,CAAmBQ,OAAnB;;AACA,WAAKL,aAAL,CAAmBK,OAAnB;;AACA,aAAO,IAAP;AACA;AApEF;AAAA;AAAA,WA0CC,uBAAkB;AACjB,aAAOb,MAAM,CAACC,MAAP,CAAcR,aAAa,CAACS,WAAd,EAAd,EAA2C;AACjDQ,WAAG,EAAE;AACJI,eAAK,EAAE,CADH;AAEJC,mBAAS,EAAE,CAAC,EAFR;AAGJC,iBAAO,EAAE,IAHL;AAIJC,gBAAM,EAAE,IAJJ;AAKJC,cAAI,EAAE;AALF,SAD4C;AAQjDP,YAAI,EAAE;AACLG,eAAK,EAAE,CADF;AAELC,mBAAS,EAAE,CAAC,EAFP;AAGLC,iBAAO,EAAE,IAHJ;AAILC,gBAAM,EAAE,IAJH;AAKLC,cAAI,EAAE;AALD;AAR2C,OAA3C,CAAP;AAgBA;AA3DF;;AAAA;AAAA,EAAuCzB,aAAvC","names":["ToneAudioNode","Compressor","optionsFromArguments","MidSideSplit","MidSideMerge","readOnly","MidSideCompressor","Object","assign","getDefaults","arguments","options","_midSideSplit","input","context","_midSideMerge","output","mid","side","chain","dispose","ratio","threshold","release","attack","knee"],"sourceRoot":"","sources":["../../../../Tone/component/dynamics/MidSideCompressor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}