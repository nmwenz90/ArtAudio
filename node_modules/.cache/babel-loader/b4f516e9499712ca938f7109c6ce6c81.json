{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { WaveShaper } from \"../signal/WaveShaper\";\nimport { Effect } from \"./Effect\";\n/**\n * A simple distortion effect using Tone.WaveShaper.\n * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).\n *\n * @example\n * const dist = new Tone.Distortion(0.8).toDestination();\n * const fm = new Tone.FMSynth().connect(dist);\n * fm.triggerAttackRelease(\"A1\", \"8n\");\n * @category Effect\n */\n\nexport var Distortion = /*#__PURE__*/function (_Effect) {\n  _inherits(Distortion, _Effect);\n\n  var _super = _createSuper(Distortion);\n\n  function Distortion() {\n    var _this;\n\n    _classCallCheck(this, Distortion);\n\n    _this = _super.call(this, optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]));\n    _this.name = \"Distortion\";\n    var options = optionsFromArguments(Distortion.getDefaults(), arguments, [\"distortion\"]);\n    _this._shaper = new WaveShaper({\n      context: _this.context,\n      length: 4096\n    });\n    _this._distortion = options.distortion;\n\n    _this.connectEffect(_this._shaper);\n\n    _this.distortion = options.distortion;\n    _this.oversample = options.oversample;\n    return _this;\n  }\n\n  _createClass(Distortion, [{\n    key: \"distortion\",\n    get:\n    /**\n     * The amount of distortion. Nominal range is between 0 and 1.\n     */\n    function get() {\n      return this._distortion;\n    },\n    set: function set(amount) {\n      this._distortion = amount;\n      var k = amount * 100;\n      var deg = Math.PI / 180;\n\n      this._shaper.setMap(function (x) {\n        if (Math.abs(x) < 0.001) {\n          // should output 0 when input is 0\n          return 0;\n        } else {\n          return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n        }\n      });\n    }\n    /**\n     * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n     */\n\n  }, {\n    key: \"oversample\",\n    get: function get() {\n      return this._shaper.oversample;\n    },\n    set: function set(oversampling) {\n      this._shaper.oversample = oversampling;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Distortion.prototype), \"dispose\", this).call(this);\n\n      this._shaper.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        distortion: 0.4,\n        oversample: \"none\"\n      });\n    }\n  }]);\n\n  return Distortion;\n}(Effect);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,oBAAT,QAAqC,uBAArC;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,MAAT,QAAsC,UAAtC;AAOA;;;;;;;;;;;AAUA,WAAaC,UAAb;AAAA;;AAAA;;AAmBC;AAAA;;AAAA;;AAEC,8BAAMH,oBAAoB,CAACG,UAAU,CAACC,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,YAAD,CAAtC,CAA1B;AAnBQ,iBAAe,YAAf;AAoBR,QAAMC,OAAO,GAAGN,oBAAoB,CAACG,UAAU,CAACC,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,YAAD,CAAtC,CAApC;AAEA,UAAKE,OAAL,GAAe,IAAIN,UAAJ,CAAe;AAC7BO,aAAO,EAAE,MAAKA,OADe;AAE7BC,YAAM,EAAE;AAFqB,KAAf,CAAf;AAKA,UAAKC,WAAL,GAAmBJ,OAAO,CAACK,UAA3B;;AAEA,UAAKC,aAAL,CAAmB,MAAKL,OAAxB;;AACA,UAAKI,UAAL,GAAkBL,OAAO,CAACK,UAA1B;AACA,UAAKE,UAAL,GAAkBP,OAAO,CAACO,UAA1B;AAdD;AAeC;;AAlCF;AAAA;AAAA;AA2CC;;;AAGA,mBAAc;AACb,aAAO,KAAKH,WAAZ;AACA,KAhDF;AAAA,SAiDC,aAAeI,MAAf,EAAqB;AACpB,WAAKJ,WAAL,GAAmBI,MAAnB;AACA,UAAMC,CAAC,GAAGD,MAAM,GAAG,GAAnB;AACA,UAAME,GAAG,GAAGC,IAAI,CAACC,EAAL,GAAU,GAAtB;;AACA,WAAKX,OAAL,CAAaY,MAAb,CAAoB,UAACC,CAAD,EAAM;AACzB,YAAIH,IAAI,CAACI,GAAL,CAASD,CAAT,IAAc,KAAlB,EAAyB;AACxB;AACA,iBAAO,CAAP;AACA,SAHD,MAGO;AACN,iBAAO,CAAC,IAAIL,CAAL,IAAUK,CAAV,GAAc,EAAd,GAAmBJ,GAAnB,IAA0BC,IAAI,CAACC,EAAL,GAAUH,CAAC,GAAGE,IAAI,CAACI,GAAL,CAASD,CAAT,CAAxC,CAAP;AACA;AACD,OAPD;AAQA;AAED;;;;AA/DD;AAAA;AAAA,SAkEC,eAAc;AACb,aAAO,KAAKb,OAAL,CAAaM,UAApB;AACA,KApEF;AAAA,SAqEC,aAAeS,YAAf,EAA2B;AAC1B,WAAKf,OAAL,CAAaM,UAAb,GAA0BS,YAA1B;AACA;AAvEF;AAAA;AAAA,WAyEC,mBAAO;AACN;;AACA,WAAKf,OAAL,CAAagB,OAAb;;AACA,aAAO,IAAP;AACA;AA7EF;AAAA;AAAA,WAoCC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAcvB,MAAM,CAACE,WAAP,EAAd,EAAoC;AAC1CO,kBAAU,EAAE,GAD8B;AAE1CE,kBAAU,EAAE;AAF8B,OAApC,CAAP;AAIA;AAzCF;;AAAA;AAAA,EAAgCX,MAAhC","names":["optionsFromArguments","WaveShaper","Effect","Distortion","getDefaults","arguments","options","_shaper","context","length","_distortion","distortion","connectEffect","oversample","amount","k","deg","Math","PI","setMap","x","abs","oversampling","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/Distortion.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}