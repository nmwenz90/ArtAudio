{"ast":null,"code":"/*!\n * @pixi/sprite - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/sprite is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { BLEND_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\nimport { Bounds, Container } from '@pixi/display';\nimport { Point, Rectangle, ObservablePoint } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { sign } from '@pixi/utils';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar tempPoint = new Point();\nvar indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n*\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * let sprite = PIXI.Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n *   let sprite = new PIXI.Sprite(sheet.textures[\"image.png\"]);\n *   ...\n * }\n * ```\n *\n * @memberof PIXI\n */\n\nvar Sprite =\n/** @class */\nfunction (_super) {\n  __extends(Sprite, _super);\n  /** @param texture - The texture for this sprite. */\n\n\n  function Sprite(texture) {\n    var _this = _super.call(this) || this;\n\n    _this._anchor = new ObservablePoint(_this._onAnchorUpdate, _this, texture ? texture.defaultAnchor.x : 0, texture ? texture.defaultAnchor.y : 0);\n    _this._texture = null;\n    _this._width = 0;\n    _this._height = 0;\n    _this._tint = null;\n    _this._tintRGB = null;\n    _this.tint = 0xFFFFFF;\n    _this.blendMode = BLEND_MODES.NORMAL;\n    _this._cachedTint = 0xFFFFFF;\n    _this.uvs = null; // call texture setter\n\n    _this.texture = texture || Texture.EMPTY;\n    _this.vertexData = new Float32Array(8);\n    _this.vertexTrimmedData = null;\n    _this._transformID = -1;\n    _this._textureID = -1;\n    _this._transformTrimmedID = -1;\n    _this._textureTrimmedID = -1; // Batchable stuff..\n    // TODO could make this a mixin?\n\n    _this.indices = indices;\n    _this.pluginName = 'batch';\n    /**\n     * Used to fast check if a sprite is.. a sprite!\n     * @member {boolean}\n     */\n\n    _this.isSprite = true;\n    _this._roundPixels = settings.ROUND_PIXELS;\n    return _this;\n  }\n  /** When the texture is updated, this event will fire to update the scale and frame. */\n\n\n  Sprite.prototype._onTextureUpdate = function () {\n    this._textureID = -1;\n    this._textureTrimmedID = -1;\n    this._cachedTint = 0xFFFFFF; // so if _width is 0 then width was not set..\n\n    if (this._width) {\n      this.scale.x = sign(this.scale.x) * this._width / this._texture.orig.width;\n    }\n\n    if (this._height) {\n      this.scale.y = sign(this.scale.y) * this._height / this._texture.orig.height;\n    }\n  };\n  /** Called when the anchor position updates. */\n\n\n  Sprite.prototype._onAnchorUpdate = function () {\n    this._transformID = -1;\n    this._transformTrimmedID = -1;\n  };\n  /** Calculates worldTransform * vertices, store it in vertexData. */\n\n\n  Sprite.prototype.calculateVertices = function () {\n    var texture = this._texture;\n\n    if (this._transformID === this.transform._worldID && this._textureID === texture._updateID) {\n      return;\n    } // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n\n\n    if (this._textureID !== texture._updateID) {\n      this.uvs = this._texture._uvs.uvsFloat32;\n    }\n\n    this._transformID = this.transform._worldID;\n    this._textureID = texture._updateID; // set the vertex data\n\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var vertexData = this.vertexData;\n    var trim = texture.trim;\n    var orig = texture.orig;\n    var anchor = this._anchor;\n    var w0 = 0;\n    var w1 = 0;\n    var h0 = 0;\n    var h1 = 0;\n\n    if (trim) {\n      // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n      // space before transforming the sprite coords.\n      w1 = trim.x - anchor._x * orig.width;\n      w0 = w1 + trim.width;\n      h1 = trim.y - anchor._y * orig.height;\n      h0 = h1 + trim.height;\n    } else {\n      w1 = -anchor._x * orig.width;\n      w0 = w1 + orig.width;\n      h1 = -anchor._y * orig.height;\n      h0 = h1 + orig.height;\n    } // xy\n\n\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty; // xy\n\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty; // xy\n\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty; // xy\n\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n\n    if (this._roundPixels) {\n      var resolution = settings.RESOLUTION;\n\n      for (var i = 0; i < vertexData.length; ++i) {\n        vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n      }\n    }\n  };\n  /**\n   * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n   *\n   * This is used to ensure that the true width and height of a trimmed texture is respected.\n   */\n\n\n  Sprite.prototype.calculateTrimmedVertices = function () {\n    if (!this.vertexTrimmedData) {\n      this.vertexTrimmedData = new Float32Array(8);\n    } else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID) {\n      return;\n    }\n\n    this._transformTrimmedID = this.transform._worldID;\n    this._textureTrimmedID = this._texture._updateID; // lets do some special trim code!\n\n    var texture = this._texture;\n    var vertexData = this.vertexTrimmedData;\n    var orig = texture.orig;\n    var anchor = this._anchor; // lets calculate the new untrimmed bounds..\n\n    var wt = this.transform.worldTransform;\n    var a = wt.a;\n    var b = wt.b;\n    var c = wt.c;\n    var d = wt.d;\n    var tx = wt.tx;\n    var ty = wt.ty;\n    var w1 = -anchor._x * orig.width;\n    var w0 = w1 + orig.width;\n    var h1 = -anchor._y * orig.height;\n    var h0 = h1 + orig.height; // xy\n\n    vertexData[0] = a * w1 + c * h1 + tx;\n    vertexData[1] = d * h1 + b * w1 + ty; // xy\n\n    vertexData[2] = a * w0 + c * h1 + tx;\n    vertexData[3] = d * h1 + b * w0 + ty; // xy\n\n    vertexData[4] = a * w0 + c * h0 + tx;\n    vertexData[5] = d * h0 + b * w0 + ty; // xy\n\n    vertexData[6] = a * w1 + c * h0 + tx;\n    vertexData[7] = d * h0 + b * w1 + ty;\n  };\n  /**\n   *\n   * Renders the object using the WebGL renderer\n   *\n   * @param renderer - The webgl renderer to use.\n   */\n\n\n  Sprite.prototype._render = function (renderer) {\n    this.calculateVertices();\n    renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n    renderer.plugins[this.pluginName].render(this);\n  };\n  /** Updates the bounds of the sprite. */\n\n\n  Sprite.prototype._calculateBounds = function () {\n    var trim = this._texture.trim;\n    var orig = this._texture.orig; // First lets check to see if the current texture has a trim..\n\n    if (!trim || trim.width === orig.width && trim.height === orig.height) {\n      // no trim! lets use the usual calculations..\n      this.calculateVertices();\n\n      this._bounds.addQuad(this.vertexData);\n    } else {\n      // lets calculate a special trimmed bounds...\n      this.calculateTrimmedVertices();\n\n      this._bounds.addQuad(this.vertexTrimmedData);\n    }\n  };\n  /**\n   * Gets the local bounds of the sprite object.\n   *\n   * @param rect - Optional output rectangle.\n   * @return The bounds.\n   */\n\n\n  Sprite.prototype.getLocalBounds = function (rect) {\n    // we can do a fast local bounds if the sprite has no children!\n    if (this.children.length === 0) {\n      if (!this._localBounds) {\n        this._localBounds = new Bounds();\n      }\n\n      this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n      this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n      this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n      this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n      if (!rect) {\n        if (!this._localBoundsRect) {\n          this._localBoundsRect = new Rectangle();\n        }\n\n        rect = this._localBoundsRect;\n      }\n\n      return this._localBounds.getRectangle(rect);\n    }\n\n    return _super.prototype.getLocalBounds.call(this, rect);\n  };\n  /**\n   * Tests if a point is inside this sprite\n   *\n   * @param point - the point to test\n   * @return The result of the test\n   */\n\n\n  Sprite.prototype.containsPoint = function (point) {\n    this.worldTransform.applyInverse(point, tempPoint);\n    var width = this._texture.orig.width;\n    var height = this._texture.orig.height;\n    var x1 = -width * this.anchor.x;\n    var y1 = 0;\n\n    if (tempPoint.x >= x1 && tempPoint.x < x1 + width) {\n      y1 = -height * this.anchor.y;\n\n      if (tempPoint.y >= y1 && tempPoint.y < y1 + height) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * Destroys this sprite and optionally its texture and children.\n   *\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param [options.children=false] - if set to true, all the children will have their destroy\n   *      method called as well. 'options' will be passed on to those calls.\n   * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n   * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n   */\n\n\n  Sprite.prototype.destroy = function (options) {\n    _super.prototype.destroy.call(this, options);\n\n    this._texture.off('update', this._onTextureUpdate, this);\n\n    this._anchor = null;\n    var destroyTexture = typeof options === 'boolean' ? options : options && options.texture;\n\n    if (destroyTexture) {\n      var destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;\n\n      this._texture.destroy(!!destroyBaseTexture);\n    }\n\n    this._texture = null;\n  }; // some helper functions..\n\n  /**\n   * Helper function that creates a new sprite based on the source you provide.\n   * The source can be - frame id, image url, video url, canvas element, video element, base texture\n   *\n   * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n   * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n   * @return The newly created sprite\n   */\n\n\n  Sprite.from = function (source, options) {\n    var texture = source instanceof Texture ? source : Texture.from(source, options);\n    return new Sprite(texture);\n  };\n\n  Object.defineProperty(Sprite.prototype, \"roundPixels\", {\n    get: function get() {\n      return this._roundPixels;\n    },\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     *\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     *\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n     *\n     * @default false\n     */\n    set: function set(value) {\n      if (this._roundPixels !== value) {\n        this._transformID = -1;\n      }\n\n      this._roundPixels = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"width\", {\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get: function get() {\n      return Math.abs(this.scale.x) * this._texture.orig.width;\n    },\n    set: function set(value) {\n      var s = sign(this.scale.x) || 1;\n      this.scale.x = s * value / this._texture.orig.width;\n      this._width = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"height\", {\n    /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get: function get() {\n      return Math.abs(this.scale.y) * this._texture.orig.height;\n    },\n    set: function set(value) {\n      var s = sign(this.scale.y) || 1;\n      this.scale.y = s * value / this._texture.orig.height;\n      this._height = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"anchor\", {\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     */\n    get: function get() {\n      return this._anchor;\n    },\n    set: function set(value) {\n      this._anchor.copyFrom(value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"tint\", {\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     *\n     * A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @default 0xFFFFFF\n     */\n    get: function get() {\n      return this._tint;\n    },\n    set: function set(value) {\n      this._tint = value;\n      this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sprite.prototype, \"texture\", {\n    /** The texture that the sprite is using. */\n    get: function get() {\n      return this._texture;\n    },\n    set: function set(value) {\n      if (this._texture === value) {\n        return;\n      }\n\n      if (this._texture) {\n        this._texture.off('update', this._onTextureUpdate, this);\n      }\n\n      this._texture = value || Texture.EMPTY;\n      this._cachedTint = 0xFFFFFF;\n      this._textureID = -1;\n      this._textureTrimmedID = -1;\n\n      if (value) {\n        // wait for the texture to load\n        if (value.baseTexture.valid) {\n          this._onTextureUpdate();\n        } else {\n          value.once('update', this._onTextureUpdate, this);\n        }\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Sprite;\n}(Container);\n\nexport { Sprite };","map":{"version":3,"mappings":"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","names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","tempPoint","Point","indices","Uint16Array","texture","_super","_this","_anchor","ObservablePoint","_onAnchorUpdate","defaultAnchor","x","y","_texture","_width","_height","_tint","_tintRGB","tint","blendMode","BLEND_MODES","NORMAL","_cachedTint","uvs","Texture","EMPTY","vertexData","Float32Array","vertexTrimmedData","_transformID","_textureID","_transformTrimmedID","_textureTrimmedID","pluginName","isSprite","_roundPixels","settings","ROUND_PIXELS","Sprite","scale","sign","orig","width","height","transform","_worldID","_updateID","_uvs","uvsFloat32","wt","worldTransform","a","c","tx","ty","trim","anchor","w0","w1","h0","h1","_x","_y","resolution","RESOLUTION","i","length","Math","round","renderer","calculateVertices","batch","setObjectRenderer","plugins","render","_bounds","addQuad","calculateTrimmedVertices","rect","children","_localBounds","Bounds","minX","minY","maxX","maxY","_localBoundsRect","Rectangle","getRectangle","getLocalBounds","call","point","applyInverse","x1","y1","options","destroy","off","_onTextureUpdate","destroyTexture","destroyBaseTexture","baseTexture","source","from","value","abs","s","copyFrom","valid","once","Container"],"sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/Sprite.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { BLEND_MODES } from '@pixi/constants';\nimport { Texture } from '@pixi/core';\nimport { Bounds, Container } from '@pixi/display';\nimport { ObservablePoint, Point, Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { sign } from '@pixi/utils';\n\nimport type { IBaseTextureOptions, Renderer, TextureSource } from '@pixi/core';\nimport type { IDestroyOptions } from '@pixi/display';\nimport type { IPointData } from '@pixi/math';\n\nconst tempPoint = new Point();\nconst indices = new Uint16Array([0, 1, 2, 0, 2, 3]);\n\nexport type SpriteSource = TextureSource|Texture;\n\nexport interface Sprite extends GlobalMixins.Sprite, Container {}\n\n/**\n * The Sprite object is the base for all textured objects that are rendered to the screen\n*\n * A sprite can be created directly from an image like this:\n *\n * ```js\n * let sprite = PIXI.Sprite.from('assets/image.png');\n * ```\n *\n * The more efficient way to create sprites is using a {@link PIXI.Spritesheet},\n * as swapping base textures when rendering to the screen is inefficient.\n *\n * ```js\n * PIXI.Loader.shared.add(\"assets/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"assets/spritesheet.json\"].spritesheet;\n *   let sprite = new PIXI.Sprite(sheet.textures[\"image.png\"]);\n *   ...\n * }\n * ```\n *\n * @memberof PIXI\n */\nexport class Sprite extends Container\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n    public indices: Uint16Array;\n\n    /**\n     * Plugin that is responsible for rendering this element.\n     * Allows to customize the rendering process without overriding '_render' & '_renderCanvas' methods.\n     *\n     * @default 'batch'\n     */\n    public pluginName: string;\n\n    /**\n     * The width of the sprite (this is initially set by the texture).\n     *\n     * @protected\n     */\n    _width: number;\n\n    /**\n     * The height of the sprite (this is initially set by the texture)\n     *\n     * @protected\n     */\n    _height: number;\n\n    /**\n     * The texture that the sprite is using.\n     *\n     * @private\n     */\n    _texture: Texture;\n    _textureID: number;\n\n    /**\n     * Cached tint value so we can tell when the tint is changed.\n     * Value is used for 2d CanvasRenderer.\n     *\n     * @protected\n     * @default 0xFFFFFF\n     */\n    _cachedTint: number;\n    protected _textureTrimmedID: number;\n\n    /**\n     * This is used to store the uvs data of the sprite, assigned at the same time\n     * as the vertexData in calculateVertices().\n     *\n     * @member {Float32Array}\n     */\n    protected uvs: Float32Array;\n\n    /**\n     * The anchor point defines the normalized coordinates\n     * in the texture that map to the position of this\n     * sprite.\n     *\n     * By default, this is `(0,0)` (or `texture.defaultAnchor`\n     * if you have modified that), which means the position\n     * `(x,y)` of this `Sprite` will be the top-left corner.\n     *\n     * Note: Updating `texture.defaultAnchor` after\n     * constructing a `Sprite` does _not_ update its anchor.\n     *\n     * {@link https://docs.cocos2d-x.org/cocos2d-x/en/sprites/manipulation.html}\n     *\n     * @default `this.texture.defaultAnchor`\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * This is used to store the vertex data of the sprite (basically a quad).\n     *\n     * @member {Float32Array}\n     */\n    protected vertexData: Float32Array;\n\n    /**\n     * This is used to calculate the bounds of the object IF it is a trimmed sprite.\n     *\n     * @member {Float32Array}\n     */\n    private vertexTrimmedData: Float32Array;\n\n    /**\n     * Internal roundPixels field\n     *\n     * @private\n     */\n    private _roundPixels: boolean;\n    private _transformID: number;\n    private _transformTrimmedID: number;\n\n    /**\n     * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @default 0xFFFFFF\n     */\n    private _tint: number;\n\n    // Internal-only properties\n    /**\n     * The tint applied to the sprite. This is a RGB value. A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @private\n     * @default 16777215\n     */\n    _tintRGB: number;\n\n    /** @param texture - The texture for this sprite. */\n    constructor(texture?: Texture)\n    {\n        super();\n\n        this._anchor = new ObservablePoint(\n            this._onAnchorUpdate,\n            this,\n            (texture ? texture.defaultAnchor.x : 0),\n            (texture ? texture.defaultAnchor.y : 0)\n        );\n\n        this._texture = null;\n\n        this._width = 0;\n        this._height = 0;\n        this._tint = null;\n        this._tintRGB = null;\n\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this._cachedTint = 0xFFFFFF;\n        this.uvs = null;\n\n        // call texture setter\n        this.texture = texture || Texture.EMPTY;\n        this.vertexData = new Float32Array(8);\n        this.vertexTrimmedData = null;\n\n        this._transformID = -1;\n        this._textureID = -1;\n\n        this._transformTrimmedID = -1;\n        this._textureTrimmedID = -1;\n\n        // Batchable stuff..\n        // TODO could make this a mixin?\n        this.indices = indices;\n\n        this.pluginName = 'batch';\n\n        /**\n         * Used to fast check if a sprite is.. a sprite!\n         * @member {boolean}\n         */\n        this.isSprite = true;\n        this._roundPixels = settings.ROUND_PIXELS;\n    }\n\n    /** When the texture is updated, this event will fire to update the scale and frame. */\n    protected _onTextureUpdate(): void\n    {\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n        this._cachedTint = 0xFFFFFF;\n\n        // so if _width is 0 then width was not set..\n        if (this._width)\n        {\n            this.scale.x = sign(this.scale.x) * this._width / this._texture.orig.width;\n        }\n\n        if (this._height)\n        {\n            this.scale.y = sign(this.scale.y) * this._height / this._texture.orig.height;\n        }\n    }\n\n    /** Called when the anchor position updates. */\n    private _onAnchorUpdate(): void\n    {\n        this._transformID = -1;\n        this._transformTrimmedID = -1;\n    }\n\n    /** Calculates worldTransform * vertices, store it in vertexData. */\n    public calculateVertices(): void\n    {\n        const texture = this._texture;\n\n        if (this._transformID === this.transform._worldID && this._textureID === texture._updateID)\n        {\n            return;\n        }\n\n        // update texture UV here, because base texture can be changed without calling `_onTextureUpdate`\n        if (this._textureID !== texture._updateID)\n        {\n            this.uvs = this._texture._uvs.uvsFloat32;\n        }\n\n        this._transformID = this.transform._worldID;\n        this._textureID = texture._updateID;\n\n        // set the vertex data\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n        const vertexData = this.vertexData;\n        const trim = texture.trim;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        if (trim)\n        {\n            // if the sprite is trimmed and is not a tilingsprite then we need to add the extra\n            // space before transforming the sprite coords.\n            w1 = trim.x - (anchor._x * orig.width);\n            w0 = w1 + trim.width;\n\n            h1 = trim.y - (anchor._y * orig.height);\n            h0 = h1 + trim.height;\n        }\n        else\n        {\n            w1 = -anchor._x * orig.width;\n            w0 = w1 + orig.width;\n\n            h1 = -anchor._y * orig.height;\n            h0 = h1 + orig.height;\n        }\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n\n        if (this._roundPixels)\n        {\n            const resolution = settings.RESOLUTION;\n\n            for (let i = 0; i < vertexData.length; ++i)\n            {\n                vertexData[i] = Math.round((vertexData[i] * resolution | 0) / resolution);\n            }\n        }\n    }\n\n    /**\n     * Calculates worldTransform * vertices for a non texture with a trim. store it in vertexTrimmedData.\n     *\n     * This is used to ensure that the true width and height of a trimmed texture is respected.\n     */\n    public calculateTrimmedVertices(): void\n    {\n        if (!this.vertexTrimmedData)\n        {\n            this.vertexTrimmedData = new Float32Array(8);\n        }\n        else if (this._transformTrimmedID === this.transform._worldID && this._textureTrimmedID === this._texture._updateID)\n        {\n            return;\n        }\n\n        this._transformTrimmedID = this.transform._worldID;\n        this._textureTrimmedID = this._texture._updateID;\n\n        // lets do some special trim code!\n        const texture = this._texture;\n        const vertexData = this.vertexTrimmedData;\n        const orig = texture.orig;\n        const anchor = this._anchor;\n\n        // lets calculate the new untrimmed bounds..\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const w1 = -anchor._x * orig.width;\n        const w0 = w1 + orig.width;\n\n        const h1 = -anchor._y * orig.height;\n        const h0 = h1 + orig.height;\n\n        // xy\n        vertexData[0] = (a * w1) + (c * h1) + tx;\n        vertexData[1] = (d * h1) + (b * w1) + ty;\n\n        // xy\n        vertexData[2] = (a * w0) + (c * h1) + tx;\n        vertexData[3] = (d * h1) + (b * w0) + ty;\n\n        // xy\n        vertexData[4] = (a * w0) + (c * h0) + tx;\n        vertexData[5] = (d * h0) + (b * w0) + ty;\n\n        // xy\n        vertexData[6] = (a * w1) + (c * h0) + tx;\n        vertexData[7] = (d * h0) + (b * w1) + ty;\n    }\n\n    /**\n     *\n     * Renders the object using the WebGL renderer\n     *\n     * @param renderer - The webgl renderer to use.\n     */\n    protected _render(renderer: Renderer): void\n    {\n        this.calculateVertices();\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n        renderer.plugins[this.pluginName].render(this);\n    }\n\n    /** Updates the bounds of the sprite. */\n    protected _calculateBounds(): void\n    {\n        const trim = this._texture.trim;\n        const orig = this._texture.orig;\n\n        // First lets check to see if the current texture has a trim..\n        if (!trim || (trim.width === orig.width && trim.height === orig.height))\n        {\n            // no trim! lets use the usual calculations..\n            this.calculateVertices();\n            this._bounds.addQuad(this.vertexData);\n        }\n        else\n        {\n            // lets calculate a special trimmed bounds...\n            this.calculateTrimmedVertices();\n            this._bounds.addQuad(this.vertexTrimmedData);\n        }\n    }\n\n    /**\n     * Gets the local bounds of the sprite object.\n     *\n     * @param rect - Optional output rectangle.\n     * @return The bounds.\n     */\n    public getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        // we can do a fast local bounds if the sprite has no children!\n        if (this.children.length === 0)\n        {\n            if (!this._localBounds)\n            {\n                this._localBounds = new Bounds();\n            }\n\n            this._localBounds.minX = this._texture.orig.width * -this._anchor._x;\n            this._localBounds.minY = this._texture.orig.height * -this._anchor._y;\n            this._localBounds.maxX = this._texture.orig.width * (1 - this._anchor._x);\n            this._localBounds.maxY = this._texture.orig.height * (1 - this._anchor._y);\n\n            if (!rect)\n            {\n                if (!this._localBoundsRect)\n                {\n                    this._localBoundsRect = new Rectangle();\n                }\n\n                rect = this._localBoundsRect;\n            }\n\n            return this._localBounds.getRectangle(rect);\n        }\n\n        return super.getLocalBounds.call(this, rect);\n    }\n\n    /**\n     * Tests if a point is inside this sprite\n     *\n     * @param point - the point to test\n     * @return The result of the test\n     */\n    public containsPoint(point: IPointData): boolean\n    {\n        this.worldTransform.applyInverse(point, tempPoint);\n\n        const width = this._texture.orig.width;\n        const height = this._texture.orig.height;\n        const x1 = -width * this.anchor.x;\n        let y1 = 0;\n\n        if (tempPoint.x >= x1 && tempPoint.x < x1 + width)\n        {\n            y1 = -height * this.anchor.y;\n\n            if (tempPoint.y >= y1 && tempPoint.y < y1 + height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Destroys this sprite and optionally its texture and children.\n     *\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param [options.children=false] - if set to true, all the children will have their destroy\n     *      method called as well. 'options' will be passed on to those calls.\n     * @param [options.texture=false] - Should it destroy the current texture of the sprite as well\n     * @param [options.baseTexture=false] - Should it destroy the base texture of the sprite as well\n     */\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        this._texture.off('update', this._onTextureUpdate, this);\n\n        this._anchor = null;\n\n        const destroyTexture = typeof options === 'boolean' ? options : options && options.texture;\n\n        if (destroyTexture)\n        {\n            const destroyBaseTexture = typeof options === 'boolean' ? options : options && options.baseTexture;\n\n            this._texture.destroy(!!destroyBaseTexture);\n        }\n\n        this._texture = null;\n    }\n\n    // some helper functions..\n\n    /**\n     * Helper function that creates a new sprite based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @param {string|PIXI.Texture|HTMLCanvasElement|HTMLVideoElement} source - Source to create texture from\n     * @param {object} [options] - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @return The newly created sprite\n     */\n    static from(source: SpriteSource, options?: IBaseTextureOptions): Sprite\n    {\n        const texture = (source instanceof Texture)\n            ? source\n            : Texture.from(source, options);\n\n        return new Sprite(texture);\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     *\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     *\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}.\n     *\n     * @default false\n     */\n    set roundPixels(value: boolean)\n    {\n        if (this._roundPixels !== value)\n        {\n            this._transformID = -1;\n        }\n        this._roundPixels = value;\n    }\n\n    get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    /** The width of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return Math.abs(this.scale.x) * this._texture.orig.width;\n    }\n\n    set width(value: number)\n    {\n        const s = sign(this.scale.x) || 1;\n\n        this.scale.x = s * value / this._texture.orig.width;\n        this._width = value;\n    }\n\n    /** The height of the sprite, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return Math.abs(this.scale.y) * this._texture.orig.height;\n    }\n\n    set height(value: number)\n    {\n        const s = sign(this.scale.y) || 1;\n\n        this.scale.y = s * value / this._texture.orig.height;\n        this._height = value;\n    }\n\n    /**\n     * The anchor sets the origin point of the sprite. The default value is taken from the {@link PIXI.Texture|Texture}\n     * and passed to the constructor.\n     *\n     * The default is `(0,0)`, this means the sprite's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the sprite's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the sprite's origin point will be the bottom right corner.\n     *\n     * If you pass only single parameter, it will set both x and y to the same value as shown in the example below.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.anchor.set(0.5); // This will set the origin to center. (0.5) is same as (0.5, 0.5).\n     */\n    get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    set anchor(value: ObservablePoint)\n    {\n        this._anchor.copyFrom(value);\n    }\n\n    /**\n     * The tint applied to the sprite. This is a hex value.\n     *\n     * A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        this._tintRGB = (value >> 16) + (value & 0xff00) + ((value & 0xff) << 16);\n    }\n\n    /** The texture that the sprite is using. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        if (this._texture === value)\n        {\n            return;\n        }\n\n        if (this._texture)\n        {\n            this._texture.off('update', this._onTextureUpdate, this);\n        }\n\n        this._texture = value || Texture.EMPTY;\n        this._cachedTint = 0xFFFFFF;\n\n        this._textureID = -1;\n        this._textureTrimmedID = -1;\n\n        if (value)\n        {\n            // wait for the texture to load\n            if (value.baseTexture.valid)\n            {\n                this._onTextureUpdate();\n            }\n            else\n            {\n                value.once('update', this._onTextureUpdate, this);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}