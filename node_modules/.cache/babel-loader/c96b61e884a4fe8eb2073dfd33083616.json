{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Envelope } from \"./Envelope\";\nimport { Scale } from \"../../signal/Scale\";\nimport { Pow } from \"../../signal/Pow\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]\n * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve\n * which it ramps.\n * @example\n * const oscillator = new Tone.Oscillator().toDestination().start();\n * const freqEnv = new Tone.FrequencyEnvelope({\n * \tattack: 0.2,\n * \tbaseFrequency: \"C2\",\n * \toctaves: 4\n * });\n * freqEnv.connect(oscillator.frequency);\n * freqEnv.triggerAttack();\n * @category Component\n */\n\nexport var FrequencyEnvelope = /*#__PURE__*/function (_Envelope) {\n  _inherits(FrequencyEnvelope, _Envelope);\n\n  var _super = _createSuper(FrequencyEnvelope);\n\n  function FrequencyEnvelope() {\n    var _this;\n\n    _classCallCheck(this, FrequencyEnvelope);\n\n    _this = _super.call(this, optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]));\n    _this.name = \"FrequencyEnvelope\";\n    var options = optionsFromArguments(FrequencyEnvelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n    _this._octaves = options.octaves;\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._exponent = _this.input = new Pow({\n      context: _this.context,\n      value: options.exponent\n    });\n    _this._scale = _this.output = new Scale({\n      context: _this.context,\n      min: _this._baseFrequency,\n      max: _this._baseFrequency * Math.pow(2, _this._octaves)\n    });\n\n    _this._sig.chain(_this._exponent, _this._scale);\n\n    return _this;\n  }\n\n  _createClass(FrequencyEnvelope, [{\n    key: \"baseFrequency\",\n    get:\n    /**\n     * The envelope's minimum output value. This is the value which it\n     * starts at.\n     */\n    function get() {\n      return this._baseFrequency;\n    },\n    set: function set(min) {\n      var freq = this.toFrequency(min);\n      assertRange(freq, 0);\n      this._baseFrequency = freq;\n      this._scale.min = this._baseFrequency; // update the max value when the min changes\n\n      this.octaves = this._octaves;\n    }\n    /**\n     * The number of octaves above the baseFrequency that the\n     * envelope will scale to.\n     */\n\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(octaves) {\n      this._octaves = octaves;\n      this._scale.max = this._baseFrequency * Math.pow(2, octaves);\n    }\n    /**\n     * The envelope's exponent value.\n     */\n\n  }, {\n    key: \"exponent\",\n    get: function get() {\n      return this._exponent.value;\n    },\n    set: function set(exponent) {\n      this._exponent.value = exponent;\n    }\n    /**\n     * Clean up\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FrequencyEnvelope.prototype), \"dispose\", this).call(this);\n\n      this._exponent.dispose();\n\n      this._scale.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Envelope.getDefaults(), {\n        baseFrequency: 200,\n        exponent: 1,\n        octaves: 4\n      });\n    }\n  }]);\n\n  return FrequencyEnvelope;\n}(Envelope);","map":{"version":3,"mappings":"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","names":["optionsFromArguments","Envelope","Scale","Pow","assertRange","FrequencyEnvelope","getDefaults","arguments","options","_octaves","octaves","_baseFrequency","toFrequency","baseFrequency","_exponent","input","context","value","exponent","_scale","output","min","max","Math","pow","_sig","chain","freq","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/envelope/FrequencyEnvelope.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}