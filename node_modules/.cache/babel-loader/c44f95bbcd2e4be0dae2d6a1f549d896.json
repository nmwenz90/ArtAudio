{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { ReadOnlyMap } from '../read-only-map';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n  channelCountMode: 'explicit',\n  channelInterpretation: 'speakers',\n  numberOfInputs: 1,\n  numberOfOutputs: 1,\n  parameterData: {},\n  processorOptions: {}\n};\nexport var createAudioWorkletNodeConstructor = function createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(AudioWorkletNode, _audioNodeConstructor);\n\n    var _super = _createSuper(AudioWorkletNode);\n\n    function AudioWorkletNode(context, name, options) {\n      var _this;\n\n      _classCallCheck(this, AudioWorkletNode);\n\n      var _a;\n\n      var nativeContext = getNativeContext(context);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var mergedOptions = sanitizeAudioWorkletNodeOptions(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options)); // Bug #191: Safari doesn't throw an error if the options aren't clonable.\n\n      testAudioWorkletNodeOptionsClonability(mergedOptions);\n      var nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n      var processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name); // Bug #186: Chrome, Edge and Opera do not allow to create an AudioWorkletNode on a closed AudioContext.\n\n      var nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed' ? nativeContext : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;\n      var nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n      var audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null;\n      /*\n       * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n       * returns false.\n       */\n\n      _this = _super.call(this, context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n      var parameters = [];\n      nativeAudioWorkletNode.parameters.forEach(function (nativeAudioParam, nm) {\n        var audioParam = createAudioParam(_assertThisInitialized(_this), isOffline, nativeAudioParam);\n        parameters.push([nm, audioParam]);\n      });\n      _this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n      _this._onprocessorerror = null;\n      _this._parameters = new ReadOnlyMap(parameters);\n      /*\n       * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n       * the destination.\n       */\n\n      if (isOffline) {\n        addUnrenderedAudioWorkletNode(nativeContext, _assertThisInitialized(_this));\n      }\n\n      var _getAudioNodeConnecti = getAudioNodeConnections(_assertThisInitialized(_this)),\n          activeInputs = _getAudioNodeConnecti.activeInputs;\n\n      setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);\n      return _this;\n    }\n\n    _createClass(AudioWorkletNode, [{\n      key: \"onprocessorerror\",\n      get: function get() {\n        return this._onprocessorerror;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n        var nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n        this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value : nativeOnProcessorError;\n      }\n    }, {\n      key: \"parameters\",\n      get: function get() {\n        if (this._parameters === null) {\n          // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n          return this._nativeAudioWorkletNode.parameters;\n        }\n\n        return this._parameters;\n      }\n    }, {\n      key: \"port\",\n      get: function get() {\n        return this._nativeAudioWorkletNode.port;\n      }\n    }]);\n\n    return AudioWorkletNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","ReadOnlyMap","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","numberOfInputs","numberOfOutputs","parameterData","processorOptions","createAudioWorkletNodeConstructor","addUnrenderedAudioWorkletNode","audioNodeConstructor","createAudioParam","createAudioWorkletNodeRenderer","createNativeAudioWorkletNode","getAudioNodeConnections","getBackupOfflineAudioContext","getNativeContext","isNativeOfflineAudioContext","nativeAudioWorkletNodeConstructor","sanitizeAudioWorkletNodeOptions","setActiveAudioWorkletNodeInputs","testAudioWorkletNodeOptionsClonability","wrapEventListener","context","name","options","nativeContext","isOffline","mergedOptions","nodeNameToProcessorConstructorMap","get","processorConstructor","nativeContextOrBackupOfflineAudioContext","state","_a","nativeAudioWorkletNode","baseLatency","audioWorkletNodeRenderer","parameters","forEach","nativeAudioParam","nm","audioParam","push","_nativeAudioWorkletNode","_onprocessorerror","_parameters","activeInputs","value","wrappedListener","onprocessorerror","nativeOnProcessorError","port"],"sourceRoot":"","sources":["../../../src/factories/audio-worklet-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}