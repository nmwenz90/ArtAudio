{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioBuffer } from \"../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Source } from \"../source/Source\";\nimport { ToneBufferSource } from \"./buffer/ToneBufferSource\";\n/**\n * Noise is a noise generator. It uses looped noise buffers to save on performance.\n * Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n *\n * @example\n * // initialize the noise and start\n * const noise = new Tone.Noise(\"pink\").start();\n * // make an autofilter to shape the noise\n * const autoFilter = new Tone.AutoFilter({\n * \tfrequency: \"8n\",\n * \tbaseFrequency: 200,\n * \toctaves: 8\n * }).toDestination().start();\n * // connect the noise\n * noise.connect(autoFilter);\n * // start the autofilter LFO\n * autoFilter.start();\n * @category Source\n */\n\nexport var Noise = /*#__PURE__*/function (_Source) {\n  _inherits(Noise, _Source);\n\n  var _super = _createSuper(Noise);\n\n  function Noise() {\n    var _this;\n\n    _classCallCheck(this, Noise);\n\n    _this = _super.call(this, optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]));\n    _this.name = \"Noise\";\n    /**\n     * Private reference to the source\n     */\n\n    _this._source = null;\n    var options = optionsFromArguments(Noise.getDefaults(), arguments, [\"type\"]);\n    _this._playbackRate = options.playbackRate;\n    _this.type = options.type;\n    _this._fadeIn = options.fadeIn;\n    _this._fadeOut = options.fadeOut;\n    return _this;\n  }\n\n  _createClass(Noise, [{\n    key: \"type\",\n    get:\n    /**\n     * The type of the noise. Can be \"white\", \"brown\", or \"pink\".\n     * @example\n     * const noise = new Tone.Noise().toDestination().start();\n     * noise.type = \"brown\";\n     */\n    function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      assert(type in _noiseBuffers, \"Noise: invalid type: \" + type);\n\n      if (this._type !== type) {\n        this._type = type; // if it's playing, stop and restart it\n\n        if (this.state === \"started\") {\n          var now = this.now();\n\n          this._stop(now);\n\n          this._start(now);\n        }\n      }\n    }\n    /**\n     * The playback rate of the noise. Affects\n     * the \"frequency\" of the noise.\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      this._playbackRate = rate;\n\n      if (this._source) {\n        this._source.playbackRate.value = rate;\n      }\n    }\n    /**\n     * internal start method\n     */\n\n  }, {\n    key: \"_start\",\n    value: function _start(time) {\n      var _this2 = this;\n\n      var buffer = _noiseBuffers[this._type];\n      this._source = new ToneBufferSource({\n        url: buffer,\n        context: this.context,\n        fadeIn: this._fadeIn,\n        fadeOut: this._fadeOut,\n        loop: true,\n        onended: function onended() {\n          return _this2.onstop(_this2);\n        },\n        playbackRate: this._playbackRate\n      }).connect(this.output);\n\n      this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n    }\n    /**\n     * internal stop method\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      if (this._source) {\n        this._source.stop(this.toSeconds(time));\n\n        this._source = null;\n      }\n    }\n    /**\n     * The fadeIn time of the amplitude envelope.\n     */\n\n  }, {\n    key: \"fadeIn\",\n    get: function get() {\n      return this._fadeIn;\n    },\n    set: function set(time) {\n      this._fadeIn = time;\n\n      if (this._source) {\n        this._source.fadeIn = this._fadeIn;\n      }\n    }\n    /**\n     * The fadeOut time of the amplitude envelope.\n     */\n\n  }, {\n    key: \"fadeOut\",\n    get: function get() {\n      return this._fadeOut;\n    },\n    set: function set(time) {\n      this._fadeOut = time;\n\n      if (this._source) {\n        this._source.fadeOut = this._fadeOut;\n      }\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time) {\n      // TODO could be optimized by cancelling the buffer source 'stop'\n      this._stop(time);\n\n      this._start(time);\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Noise.prototype), \"dispose\", this).call(this);\n\n      if (this._source) {\n        this._source.disconnect();\n      }\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        fadeIn: 0,\n        fadeOut: 0,\n        playbackRate: 1,\n        type: \"white\"\n      });\n    }\n  }]);\n\n  return Noise;\n}(Source); //--------------------\n// THE NOISE BUFFERS\n//--------------------\n// Noise buffer stats\n\nvar BUFFER_LENGTH = 44100 * 5;\nvar NUM_CHANNELS = 2;\n/**\n * Cache the noise buffers\n */\n\nvar _noiseCache = {\n  brown: null,\n  pink: null,\n  white: null\n};\n/**\n * The noise arrays. Generated on initialization.\n * borrowed heavily from https://github.com/zacharydenton/noise.js\n * (c) 2013 Zach Denton (MIT)\n */\n\nvar _noiseBuffers = {\n  get brown() {\n    if (!_noiseCache.brown) {\n      var buffer = [];\n\n      for (var channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        var channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        var lastOut = 0.0;\n\n        for (var i = 0; i < BUFFER_LENGTH; i++) {\n          var white = Math.random() * 2 - 1;\n          channel[i] = (lastOut + 0.02 * white) / 1.02;\n          lastOut = channel[i];\n          channel[i] *= 3.5; // (roughly) compensate for gain\n        }\n      }\n\n      _noiseCache.brown = new ToneAudioBuffer().fromArray(buffer);\n    }\n\n    return _noiseCache.brown;\n  },\n\n  get pink() {\n    if (!_noiseCache.pink) {\n      var buffer = [];\n\n      for (var channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        var channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n        var b0 = void 0,\n            b1 = void 0,\n            b2 = void 0,\n            b3 = void 0,\n            b4 = void 0,\n            b5 = void 0,\n            b6 = void 0;\n        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\n        for (var i = 0; i < BUFFER_LENGTH; i++) {\n          var white = Math.random() * 2 - 1;\n          b0 = 0.99886 * b0 + white * 0.0555179;\n          b1 = 0.99332 * b1 + white * 0.0750759;\n          b2 = 0.96900 * b2 + white * 0.1538520;\n          b3 = 0.86650 * b3 + white * 0.3104856;\n          b4 = 0.55000 * b4 + white * 0.5329522;\n          b5 = -0.7616 * b5 - white * 0.0168980;\n          channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n          channel[i] *= 0.11; // (roughly) compensate for gain\n\n          b6 = white * 0.115926;\n        }\n      }\n\n      _noiseCache.pink = new ToneAudioBuffer().fromArray(buffer);\n    }\n\n    return _noiseCache.pink;\n  },\n\n  get white() {\n    if (!_noiseCache.white) {\n      var buffer = [];\n\n      for (var channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {\n        var channel = new Float32Array(BUFFER_LENGTH);\n        buffer[channelNum] = channel;\n\n        for (var i = 0; i < BUFFER_LENGTH; i++) {\n          channel[i] = Math.random() * 2 - 1;\n        }\n      }\n\n      _noiseCache.white = new ToneAudioBuffer().fromArray(buffer);\n    }\n\n    return _noiseCache.white;\n  }\n\n};","map":{"version":3,"mappings":"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","names":["ToneAudioBuffer","optionsFromArguments","assert","Source","ToneBufferSource","Noise","getDefaults","arguments","options","_playbackRate","playbackRate","type","_fadeIn","fadeIn","_fadeOut","fadeOut","_type","_noiseBuffers","state","now","_stop","_start","rate","_source","value","time","buffer","url","context","loop","onended","onstop","connect","output","start","toSeconds","Math","random","duration","stop","disconnect","Object","assign","BUFFER_LENGTH","NUM_CHANNELS","_noiseCache","brown","pink","white","channelNum","channel","Float32Array","lastOut","i","fromArray","b0","b1","b2","b3","b4","b5","b6"],"sourceRoot":"","sources":["../../../Tone/source/Noise.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}