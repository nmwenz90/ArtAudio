{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FMOscillator } from \"../source/oscillator/FMOscillator\";\nimport { Monophonic } from \"./Monophonic\";\n/**\n * Inharmonic ratio of frequencies based on the Roland TR-808\n * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n */\n\nvar inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];\n/**\n * A highly inharmonic and spectrally complex source with a highpass filter\n * and amplitude envelope which is good for making metallophone sounds.\n * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).\n * @category Instrument\n */\n\nexport var MetalSynth = /*#__PURE__*/function (_Monophonic) {\n  _inherits(MetalSynth, _Monophonic);\n\n  var _super = _createSuper(MetalSynth);\n\n  function MetalSynth() {\n    var _this;\n\n    _classCallCheck(this, MetalSynth);\n\n    _this = _super.call(this, optionsFromArguments(MetalSynth.getDefaults(), arguments));\n    _this.name = \"MetalSynth\";\n    /**\n     * The array of FMOscillators\n     */\n\n    _this._oscillators = [];\n    /**\n     * The frequency multipliers\n     */\n\n    _this._freqMultipliers = [];\n    var options = optionsFromArguments(MetalSynth.getDefaults(), arguments);\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\"\n    });\n    _this._amplitude = new Gain({\n      context: _this.context,\n      gain: 0\n    }).connect(_this.output);\n    _this._highpass = new Filter({\n      // Q: -3.0102999566398125,\n      Q: 0,\n      context: _this.context,\n      type: \"highpass\"\n    }).connect(_this._amplitude);\n\n    for (var i = 0; i < inharmRatios.length; i++) {\n      var osc = new FMOscillator({\n        context: _this.context,\n        harmonicity: options.harmonicity,\n        modulationIndex: options.modulationIndex,\n        modulationType: \"square\",\n        onstop: i === 0 ? function () {\n          return _this.onsilence(_assertThisInitialized(_this));\n        } : noOp,\n        type: \"square\"\n      });\n      osc.connect(_this._highpass);\n      _this._oscillators[i] = osc;\n      var mult = new Multiply({\n        context: _this.context,\n        value: inharmRatios[i]\n      });\n      _this._freqMultipliers[i] = mult;\n\n      _this.frequency.chain(mult, osc.frequency);\n\n      _this.detune.connect(osc.detune);\n    }\n\n    _this._filterFreqScaler = new Scale({\n      context: _this.context,\n      max: 7000,\n      min: _this.toFrequency(options.resonance)\n    });\n    _this.envelope = new Envelope({\n      attack: options.envelope.attack,\n      attackCurve: \"linear\",\n      context: _this.context,\n      decay: options.envelope.decay,\n      release: options.envelope.release,\n      sustain: 0\n    });\n\n    _this.envelope.chain(_this._filterFreqScaler, _this._highpass.frequency);\n\n    _this.envelope.connect(_this._amplitude.gain); // set the octaves\n\n\n    _this._octaves = options.octaves;\n    _this.octaves = options.octaves;\n    return _this;\n  }\n\n  _createClass(MetalSynth, [{\n    key: \"_triggerEnvelopeAttack\",\n    value:\n    /**\n     * Trigger the attack.\n     * @param time When the attack should be triggered.\n     * @param velocity The velocity that the envelope should be triggered at.\n     */\n    function _triggerEnvelopeAttack(time) {\n      var _this2 = this;\n\n      var velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      this.envelope.triggerAttack(time, velocity);\n\n      this._oscillators.forEach(function (osc) {\n        return osc.start(time);\n      });\n\n      if (this.envelope.sustain === 0) {\n        this._oscillators.forEach(function (osc) {\n          osc.stop(time + _this2.toSeconds(_this2.envelope.attack) + _this2.toSeconds(_this2.envelope.decay));\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Trigger the release of the envelope.\n     * @param time When the release should be triggered.\n     */\n\n  }, {\n    key: \"_triggerEnvelopeRelease\",\n    value: function _triggerEnvelopeRelease(time) {\n      var _this3 = this;\n\n      this.envelope.triggerRelease(time);\n\n      this._oscillators.forEach(function (osc) {\n        return osc.stop(time + _this3.toSeconds(_this3.envelope.release));\n      });\n\n      return this;\n    }\n  }, {\n    key: \"getLevelAtTime\",\n    value: function getLevelAtTime(time) {\n      time = this.toSeconds(time);\n      return this.envelope.getValueAtTime(time);\n    }\n    /**\n     * The modulationIndex of the oscillators which make up the source.\n     * see [[FMOscillator.modulationIndex]]\n     * @min 1\n     * @max 100\n     */\n\n  }, {\n    key: \"modulationIndex\",\n    get: function get() {\n      return this._oscillators[0].modulationIndex.value;\n    },\n    set: function set(val) {\n      this._oscillators.forEach(function (osc) {\n        return osc.modulationIndex.value = val;\n      });\n    }\n    /**\n     * The harmonicity of the oscillators which make up the source.\n     * see Tone.FMOscillator.harmonicity\n     * @min 0.1\n     * @max 10\n     */\n\n  }, {\n    key: \"harmonicity\",\n    get: function get() {\n      return this._oscillators[0].harmonicity.value;\n    },\n    set: function set(val) {\n      this._oscillators.forEach(function (osc) {\n        return osc.harmonicity.value = val;\n      });\n    }\n    /**\n     * The lower level of the highpass filter which is attached to the envelope.\n     * This value should be between [0, 7000]\n     * @min 0\n     * @max 7000\n     */\n\n  }, {\n    key: \"resonance\",\n    get: function get() {\n      return this._filterFreqScaler.min;\n    },\n    set: function set(val) {\n      this._filterFreqScaler.min = this.toFrequency(val);\n      this.octaves = this._octaves;\n    }\n    /**\n     * The number of octaves above the \"resonance\" frequency\n     * that the filter ramps during the attack/decay envelope\n     * @min 0\n     * @max 8\n     */\n\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(val) {\n      this._octaves = val;\n      this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MetalSynth.prototype), \"dispose\", this).call(this);\n\n      this._oscillators.forEach(function (osc) {\n        return osc.dispose();\n      });\n\n      this._freqMultipliers.forEach(function (freqMult) {\n        return freqMult.dispose();\n      });\n\n      this.frequency.dispose();\n      this.detune.dispose();\n\n      this._filterFreqScaler.dispose();\n\n      this._amplitude.dispose();\n\n      this.envelope.dispose();\n\n      this._highpass.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return deepMerge(Monophonic.getDefaults(), {\n        envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          attack: 0.001,\n          decay: 1.4,\n          release: 0.2\n        }),\n        harmonicity: 5.1,\n        modulationIndex: 32,\n        octaves: 1.5,\n        resonance: 4000\n      });\n    }\n  }]);\n\n  return MetalSynth;\n}(Monophonic);","map":{"version":3,"mappings":"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","names":["Envelope","Filter","Gain","ToneAudioNode","deepMerge","omitFromObject","optionsFromArguments","noOp","Multiply","Scale","Signal","FMOscillator","Monophonic","inharmRatios","MetalSynth","getDefaults","arguments","options","detune","context","units","value","frequency","_amplitude","gain","connect","output","_highpass","Q","type","i","length","osc","harmonicity","modulationIndex","modulationType","onstop","onsilence","_oscillators","mult","_freqMultipliers","chain","_filterFreqScaler","max","min","toFrequency","resonance","envelope","attack","attackCurve","decay","release","sustain","_octaves","octaves","time","velocity","triggerAttack","forEach","start","stop","toSeconds","triggerRelease","getValueAtTime","val","Math","pow","dispose","freqMult","Object","assign","keys"],"sourceRoot":"","sources":["../../../Tone/instrument/MetalSynth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}