{"ast":null,"code":"import _slicedToArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nexport var createRenderInputsOfAudioParam = function createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(audioParam, nativeOfflineAudioContext, nativeAudioParam) {\n      var audioParamConnections;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              audioParamConnections = getAudioParamConnections(audioParam);\n              _context2.next = 3;\n              return Promise.all(Array.from(audioParamConnections.activeInputs).map( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n                  var _ref4, source, output, audioNodeRenderer, renderedNativeAudioNode;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _ref4 = _slicedToArray(_ref2, 2), source = _ref4[0], output = _ref4[1];\n                          audioNodeRenderer = getAudioNodeRenderer(source);\n                          _context.next = 4;\n                          return audioNodeRenderer.render(source, nativeOfflineAudioContext);\n\n                        case 4:\n                          renderedNativeAudioNode = _context.sent;\n\n                          if (!isPartOfACycle(source)) {\n                            renderedNativeAudioNode.connect(nativeAudioParam, output);\n                          }\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x4) {\n                  return _ref3.apply(this, arguments);\n                };\n              }()));\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"mappings":";;;AAGA,OAAO,IAAMA,8BAA8B,GAAqC,SAAnEA,8BAAmE,CAC5EC,oBAD4E,EAE5EC,wBAF4E,EAG5EC,cAH4E,EAI5E;AACA;AAAA,wEAAO,kBACHC,UADG,EAEHC,yBAFG,EAGHC,gBAHG;AAAA;AAAA;AAAA;AAAA;AAAA;AAKGC,mCALH,GAK2BL,wBAAwB,CAAIE,UAAJ,CALnD;AAAA;AAAA,qBAOGI,OAAO,CAACC,GAAR,CACFC,KAAK,CAACC,IAAN,CAAWJ,qBAAqB,CAACK,YAAjC,EAA+CC,GAA/C;AAAA,qFAAmD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,4DAAQC,MAAR,aAAgBC,MAAhB;AACzCC,2CADyC,GACrBf,oBAAoB,CAACa,MAAD,CADC;AAAA;AAAA,iCAETE,iBAAiB,CAACC,MAAlB,CAAyBH,MAAzB,EAAiCT,yBAAjC,CAFS;;AAAA;AAEzCa,iDAFyC;;AAI/C,8BAAI,CAACf,cAAc,CAACW,MAAD,CAAnB,EAA6B;AACzBI,mDAAuB,CAACC,OAAxB,CAAgCb,gBAAhC,EAAkDS,MAAlD;AACH;;AAN8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAnD;;AAAA;AAAA;AAAA;AAAA,kBADE,CAPH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA;AAkBH,CAvBM","names":["createRenderInputsOfAudioParam","getAudioNodeRenderer","getAudioParamConnections","isPartOfACycle","audioParam","nativeOfflineAudioContext","nativeAudioParam","audioParamConnections","Promise","all","Array","from","activeInputs","map","source","output","audioNodeRenderer","render","renderedNativeAudioNode","connect"],"sourceRoot":"","sources":["../../../src/factories/render-inputs-of-audio-param.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}