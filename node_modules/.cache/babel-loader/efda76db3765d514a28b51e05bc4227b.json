{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport var Ticker = /*#__PURE__*/function () {\n  function Ticker(callback, type, updateInterval) {\n    _classCallCheck(this, Ticker);\n\n    this._callback = callback;\n    this._type = type;\n    this._updateInterval = updateInterval; // create the clock source for the first time\n\n    this._createClock();\n  }\n  /**\n   * Generate a web worker\n   */\n\n\n  _createClass(Ticker, [{\n    key: \"_createWorker\",\n    value: function _createWorker() {\n      var blob = new Blob([\n      /* javascript */\n      \"\\n\\t\\t\\t// the initial timeout time\\n\\t\\t\\tlet timeoutTime =  \".concat((this._updateInterval * 1000).toFixed(1), \";\\n\\t\\t\\t// onmessage callback\\n\\t\\t\\tself.onmessage = function(msg){\\n\\t\\t\\t\\ttimeoutTime = parseInt(msg.data);\\n\\t\\t\\t};\\n\\t\\t\\t// the tick function which posts a message\\n\\t\\t\\t// and schedules a new tick\\n\\t\\t\\tfunction tick(){\\n\\t\\t\\t\\tsetTimeout(tick, timeoutTime);\\n\\t\\t\\t\\tself.postMessage('tick');\\n\\t\\t\\t}\\n\\t\\t\\t// call tick initially\\n\\t\\t\\ttick();\\n\\t\\t\\t\")], {\n        type: \"text/javascript\"\n      });\n      var blobUrl = URL.createObjectURL(blob);\n      var worker = new Worker(blobUrl);\n      worker.onmessage = this._callback.bind(this);\n      this._worker = worker;\n    }\n    /**\n     * Create a timeout loop\n     */\n\n  }, {\n    key: \"_createTimeout\",\n    value: function _createTimeout() {\n      var _this = this;\n\n      this._timeout = setTimeout(function () {\n        _this._createTimeout();\n\n        _this._callback();\n      }, this._updateInterval * 1000);\n    }\n    /**\n     * Create the clock source.\n     */\n\n  }, {\n    key: \"_createClock\",\n    value: function _createClock() {\n      if (this._type === \"worker\") {\n        try {\n          this._createWorker();\n        } catch (e) {\n          // workers not supported, fallback to timeout\n          this._type = \"timeout\";\n\n          this._createClock();\n        }\n      } else if (this._type === \"timeout\") {\n        this._createTimeout();\n      }\n    }\n    /**\n     * Clean up the current clock source\n     */\n\n  }, {\n    key: \"_disposeClock\",\n    value: function _disposeClock() {\n      if (this._timeout) {\n        clearTimeout(this._timeout);\n        this._timeout = 0;\n      }\n\n      if (this._worker) {\n        this._worker.terminate();\n\n        this._worker.onmessage = null;\n      }\n    }\n    /**\n     * The rate in seconds the ticker will update\n     */\n\n  }, {\n    key: \"updateInterval\",\n    get: function get() {\n      return this._updateInterval;\n    },\n    set: function set(interval) {\n      this._updateInterval = Math.max(interval, 128 / 44100);\n\n      if (this._type === \"worker\") {\n        this._worker.postMessage(Math.max(interval * 1000, 1));\n      }\n    }\n    /**\n     * The type of the ticker, either a worker or a timeout\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      this._disposeClock();\n\n      this._type = type;\n\n      this._createClock();\n    }\n    /**\n     * Clean up\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._disposeClock();\n    }\n  }]);\n\n  return Ticker;\n}();","map":{"version":3,"mappings":";;;AAIA;;;;AAIA,WAAaA,MAAb;AA2BC,kBAAYC,QAAZ,EAAkCC,IAAlC,EAA2DC,cAA3D,EAAkF;AAAA;;AAEjF,SAAKC,SAAL,GAAiBH,QAAjB;AACA,SAAKI,KAAL,GAAaH,IAAb;AACA,SAAKI,eAAL,GAAuBH,cAAvB,CAJiF,CAMjF;;AACA,SAAKI,YAAL;AACA;AAED;;;;;AArCD;AAAA;AAAA,WAwCS,yBAAa;AAEpB,UAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS;AACrB;AADqB,8EAGA,CAAC,KAAKH,eAAL,GAAuB,IAAxB,EAA8BI,OAA9B,CAAsC,CAAtC,CAHA,sXAAT,EAiBV;AAAER,YAAI,EAAE;AAAR,OAjBU,CAAb;AAkBA,UAAMS,OAAO,GAAGC,GAAG,CAACC,eAAJ,CAAoBL,IAApB,CAAhB;AACA,UAAMM,MAAM,GAAG,IAAIC,MAAJ,CAAWJ,OAAX,CAAf;AAEAG,YAAM,CAACE,SAAP,GAAmB,KAAKZ,SAAL,CAAea,IAAf,CAAoB,IAApB,CAAnB;AAEA,WAAKC,OAAL,GAAeJ,MAAf;AACA;AAED;;;;AApED;AAAA;AAAA,WAuES,0BAAc;AAAA;;AACrB,WAAKK,QAAL,GAAgBC,UAAU,CAAC,YAAK;AAC/B,aAAI,CAACC,cAAL;;AACA,aAAI,CAACjB,SAAL;AACA,OAHyB,EAGvB,KAAKE,eAAL,GAAuB,IAHA,CAA1B;AAIA;AAED;;;;AA9ED;AAAA;AAAA,WAiFS,wBAAY;AACnB,UAAI,KAAKD,KAAL,KAAe,QAAnB,EAA6B;AAC5B,YAAI;AACH,eAAKiB,aAAL;AACA,SAFD,CAEE,OAAOC,CAAP,EAAU;AACX;AACA,eAAKlB,KAAL,GAAa,SAAb;;AACA,eAAKE,YAAL;AACA;AACD,OARD,MAQO,IAAI,KAAKF,KAAL,KAAe,SAAnB,EAA8B;AACpC,aAAKgB,cAAL;AACA;AACD;AAED;;;;AA/FD;AAAA;AAAA,WAkGS,yBAAa;AACpB,UAAI,KAAKF,QAAT,EAAmB;AAClBK,oBAAY,CAAC,KAAKL,QAAN,CAAZ;AACA,aAAKA,QAAL,GAAgB,CAAhB;AACA;;AACD,UAAI,KAAKD,OAAT,EAAkB;AACjB,aAAKA,OAAL,CAAaO,SAAb;;AACA,aAAKP,OAAL,CAAaF,SAAb,GAAyB,IAAzB;AACA;AACD;AAED;;;;AA7GD;AAAA;AAAA,SAgHC,eAAkB;AACjB,aAAO,KAAKV,eAAZ;AACA,KAlHF;AAAA,SAmHC,aAAmBoB,QAAnB,EAAoC;AACnC,WAAKpB,eAAL,GAAuBqB,IAAI,CAACC,GAAL,CAASF,QAAT,EAAmB,MAAM,KAAzB,CAAvB;;AACA,UAAI,KAAKrB,KAAL,KAAe,QAAnB,EAA6B;AAC5B,aAAKa,OAAL,CAAaW,WAAb,CAAyBF,IAAI,CAACC,GAAL,CAASF,QAAQ,GAAG,IAApB,EAA0B,CAA1B,CAAzB;AACA;AACD;AAED;;;;AA1HD;AAAA;AAAA,SA6HC,eAAQ;AACP,aAAO,KAAKrB,KAAZ;AACA,KA/HF;AAAA,SAgIC,aAASH,IAAT,EAAgC;AAC/B,WAAK4B,aAAL;;AACA,WAAKzB,KAAL,GAAaH,IAAb;;AACA,WAAKK,YAAL;AACA;AAED;;;;AAtID;AAAA;AAAA,WAyIC,mBAAO;AACN,WAAKuB,aAAL;AACA;AA3IF;;AAAA;AAAA","names":["Ticker","callback","type","updateInterval","_callback","_type","_updateInterval","_createClock","blob","Blob","toFixed","blobUrl","URL","createObjectURL","worker","Worker","onmessage","bind","_worker","_timeout","setTimeout","_createTimeout","_createWorker","e","clearTimeout","terminate","interval","Math","max","postMessage","_disposeClock"],"sourceRoot":"","sources":["../../../../Tone/core/clock/Ticker.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}