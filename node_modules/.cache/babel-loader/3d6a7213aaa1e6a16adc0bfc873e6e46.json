{"ast":null,"code":"/*!\n * @pixi/prepare - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/prepare is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { settings } from '@pixi/settings';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { Graphics } from '@pixi/graphics';\nimport { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { Container } from '@pixi/display';\nimport { Text, TextStyle, TextMetrics } from '@pixi/text';\n/**\n * Default number of uploads per frame using prepare plugin.\n *\n * @static\n * @memberof PIXI.settings\n * @name UPLOADS_PER_FRAME\n * @type {number}\n * @default 4\n */\n\nsettings.UPLOADS_PER_FRAME = 4;\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n/**\n * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of items per frame.\n *\n * @memberof PIXI\n */\n\n\nvar CountLimiter =\n/** @class */\nfunction () {\n  /**\n   * @param maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n   */\n  function CountLimiter(maxItemsPerFrame) {\n    this.maxItemsPerFrame = maxItemsPerFrame;\n    this.itemsLeft = 0;\n  }\n  /** Resets any counting properties to start fresh on a new frame. */\n\n\n  CountLimiter.prototype.beginFrame = function () {\n    this.itemsLeft = this.maxItemsPerFrame;\n  };\n  /**\n   * Checks to see if another item can be uploaded. This should only be called once per item.\n   *\n   * @return If the item is allowed to be uploaded.\n   */\n\n\n  CountLimiter.prototype.allowedToUpload = function () {\n    return this.itemsLeft-- > 0;\n  };\n\n  return CountLimiter;\n}();\n/**\n * Built-in hook to find multiple textures from objects like AnimatedSprites.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return If a PIXI.Texture object was found.\n */\n\n\nfunction findMultipleBaseTextures(item, queue) {\n  var result = false; // Objects with multiple textures\n\n  if (item && item._textures && item._textures.length) {\n    for (var i = 0; i < item._textures.length; i++) {\n      if (item._textures[i] instanceof Texture) {\n        var baseTexture = item._textures[i].baseTexture;\n\n        if (queue.indexOf(baseTexture) === -1) {\n          queue.push(baseTexture);\n          result = true;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Built-in hook to find BaseTextures from Texture.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return If a PIXI.Texture object was found.\n */\n\n\nfunction findBaseTexture(item, queue) {\n  if (item.baseTexture instanceof BaseTexture) {\n    var texture = item.baseTexture;\n\n    if (queue.indexOf(texture) === -1) {\n      queue.push(texture);\n    }\n\n    return true;\n  }\n\n  return false;\n}\n/**\n * Built-in hook to find textures from objects.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return If a PIXI.Texture object was found.\n */\n\n\nfunction findTexture(item, queue) {\n  if (item._texture && item._texture instanceof Texture) {\n    var texture = item._texture.baseTexture;\n\n    if (queue.indexOf(texture) === -1) {\n      queue.push(texture);\n    }\n\n    return true;\n  }\n\n  return false;\n}\n/**\n * Built-in hook to draw PIXI.Text to its texture.\n *\n * @private\n * @param helper - Not used by this upload handler\n * @param item - Item to check\n * @return If item was uploaded.\n */\n\n\nfunction drawText(_helper, item) {\n  if (item instanceof Text) {\n    // updating text will return early if it is not dirty\n    item.updateText(true);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Built-in hook to calculate a text style for a PIXI.Text object.\n *\n * @private\n * @param helper - Not used by this upload handler\n * @param item - Item to check\n * @return If item was uploaded.\n */\n\n\nfunction calculateTextStyle(_helper, item) {\n  if (item instanceof TextStyle) {\n    var font = item.toFontString();\n    TextMetrics.measureFont(font);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Built-in hook to find Text objects.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return if a PIXI.Text object was found.\n */\n\n\nfunction findText(item, queue) {\n  if (item instanceof Text) {\n    // push the text style to prepare it - this can be really expensive\n    if (queue.indexOf(item.style) === -1) {\n      queue.push(item.style);\n    } // also push the text object so that we can render it (to canvas/texture) if needed\n\n\n    if (queue.indexOf(item) === -1) {\n      queue.push(item);\n    } // also push the Text's texture for upload to GPU\n\n\n    var texture = item._texture.baseTexture;\n\n    if (queue.indexOf(texture) === -1) {\n      queue.push(texture);\n    }\n\n    return true;\n  }\n\n  return false;\n}\n/**\n * Built-in hook to find TextStyle objects.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return If a PIXI.TextStyle object was found.\n */\n\n\nfunction findTextStyle(item, queue) {\n  if (item instanceof TextStyle) {\n    if (queue.indexOf(item) === -1) {\n      queue.push(item);\n    }\n\n    return true;\n  }\n\n  return false;\n}\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * BasePrepare handles basic queuing functionality and is extended by\n * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n * to provide preparation capabilities specific to their respective renderers.\n *\n * @example\n * // Create a sprite\n * const sprite = PIXI.Sprite.from('something.png');\n *\n * // Load object into GPU\n * app.renderer.plugins.prepare.upload(sprite, () => {\n *\n *     //Texture(s) has been uploaded to GPU\n *     app.stage.addChild(sprite);\n *\n * })\n *\n * @abstract\n * @memberof PIXI\n */\n\n\nvar BasePrepare =\n/** @class */\nfunction () {\n  /**\n   * @param {PIXI.AbstractRenderer} renderer - A reference to the current renderer\n   */\n  function BasePrepare(renderer) {\n    var _this = this;\n\n    this.limiter = new CountLimiter(settings.UPLOADS_PER_FRAME);\n    this.renderer = renderer;\n    this.uploadHookHelper = null;\n    this.queue = [];\n    this.addHooks = [];\n    this.uploadHooks = [];\n    this.completes = [];\n    this.ticking = false;\n\n    this.delayedTick = function () {\n      // unlikely, but in case we were destroyed between tick() and delayedTick()\n      if (!_this.queue) {\n        return;\n      }\n\n      _this.prepareItems();\n    }; // hooks to find the correct texture\n\n\n    this.registerFindHook(findText);\n    this.registerFindHook(findTextStyle);\n    this.registerFindHook(findMultipleBaseTextures);\n    this.registerFindHook(findBaseTexture);\n    this.registerFindHook(findTexture); // upload hooks\n\n    this.registerUploadHook(drawText);\n    this.registerUploadHook(calculateTextStyle);\n  }\n  /**\n   * Upload all the textures and graphics to the GPU.\n   *\n   * @param {Function|PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} item -\n   *        Either the container or display object to search for items to upload, the items to upload themselves,\n   *        or the callback function, if items have been added using `prepare.add`.\n   * @param {Function} [done] - Optional callback when all queued uploads have completed\n   */\n\n\n  BasePrepare.prototype.upload = function (item, done) {\n    if (typeof item === 'function') {\n      done = item;\n      item = null;\n    } // If a display object, search for items\n    // that we could upload\n\n\n    if (item) {\n      this.add(item);\n    } // Get the items for upload from the display\n\n\n    if (this.queue.length) {\n      if (done) {\n        this.completes.push(done);\n      }\n\n      if (!this.ticking) {\n        this.ticking = true;\n        Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n      }\n    } else if (done) {\n      done();\n    }\n  };\n  /**\n   * Handle tick update\n   *\n   * @private\n   */\n\n\n  BasePrepare.prototype.tick = function () {\n    setTimeout(this.delayedTick, 0);\n  };\n  /**\n   * Actually prepare items. This is handled outside of the tick because it will take a while\n   * and we do NOT want to block the current animation frame from rendering.\n   *\n   * @private\n   */\n\n\n  BasePrepare.prototype.prepareItems = function () {\n    this.limiter.beginFrame(); // Upload the graphics\n\n    while (this.queue.length && this.limiter.allowedToUpload()) {\n      var item = this.queue[0];\n      var uploaded = false;\n\n      if (item && !item._destroyed) {\n        for (var i = 0, len = this.uploadHooks.length; i < len; i++) {\n          if (this.uploadHooks[i](this.uploadHookHelper, item)) {\n            this.queue.shift();\n            uploaded = true;\n            break;\n          }\n        }\n      }\n\n      if (!uploaded) {\n        this.queue.shift();\n      }\n    } // We're finished\n\n\n    if (!this.queue.length) {\n      this.ticking = false;\n      var completes = this.completes.slice(0);\n      this.completes.length = 0;\n\n      for (var i = 0, len = completes.length; i < len; i++) {\n        completes[i]();\n      }\n    } else {\n      // if we are not finished, on the next rAF do this again\n      Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n    }\n  };\n  /**\n   * Adds hooks for finding items.\n   *\n   * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n   *          function must return `true` if it was able to add item to the queue.\n   * @return Instance of plugin for chaining.\n   */\n\n\n  BasePrepare.prototype.registerFindHook = function (addHook) {\n    if (addHook) {\n      this.addHooks.push(addHook);\n    }\n\n    return this;\n  };\n  /**\n   * Adds hooks for uploading items.\n   *\n   * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n   *          function must return `true` if it was able to handle upload of item.\n   * @return Instance of plugin for chaining.\n   */\n\n\n  BasePrepare.prototype.registerUploadHook = function (uploadHook) {\n    if (uploadHook) {\n      this.uploadHooks.push(uploadHook);\n    }\n\n    return this;\n  };\n  /**\n   * Manually add an item to the uploading queue.\n   *\n   * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n   *        add to the queue\n   * @return Instance of plugin for chaining.\n   */\n\n\n  BasePrepare.prototype.add = function (item) {\n    // Add additional hooks for finding elements on special\n    // types of objects that\n    for (var i = 0, len = this.addHooks.length; i < len; i++) {\n      if (this.addHooks[i](item, this.queue)) {\n        break;\n      }\n    } // Get children recursively\n\n\n    if (item instanceof Container) {\n      for (var i = item.children.length - 1; i >= 0; i--) {\n        this.add(item.children[i]);\n      }\n    }\n\n    return this;\n  };\n  /** Destroys the plugin, don't use after this. */\n\n\n  BasePrepare.prototype.destroy = function () {\n    if (this.ticking) {\n      Ticker.system.remove(this.tick, this);\n    }\n\n    this.ticking = false;\n    this.addHooks = null;\n    this.uploadHooks = null;\n    this.renderer = null;\n    this.completes = null;\n    this.queue = null;\n    this.limiter = null;\n    this.uploadHookHelper = null;\n  };\n\n  return BasePrepare;\n}();\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @return If item was uploaded.\n */\n\n\nfunction uploadBaseTextures(renderer, item) {\n  if (item instanceof BaseTexture) {\n    // if the texture already has a GL texture, then the texture has been prepared or rendered\n    // before now. If the texture changed, then the changer should be calling texture.update() which\n    // reuploads the texture without need for preparing it again\n    if (!item._glTextures[renderer.CONTEXT_UID]) {\n      renderer.texture.bind(item);\n    }\n\n    return true;\n  }\n\n  return false;\n}\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n *\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @return If item was uploaded.\n */\n\n\nfunction uploadGraphics(renderer, item) {\n  if (!(item instanceof Graphics)) {\n    return false;\n  }\n\n  var geometry = item.geometry; // update dirty graphics to get batches\n\n  item.finishPoly();\n  geometry.updateBatches();\n  var batches = geometry.batches; // upload all textures found in styles\n\n  for (var i = 0; i < batches.length; i++) {\n    var texture = batches[i].style.texture;\n\n    if (texture) {\n      uploadBaseTextures(renderer, texture.baseTexture);\n    }\n  } // if its not batchable - update vao for particular shader\n\n\n  if (!geometry.batchable) {\n    renderer.geometry.bind(geometry, item._resolveDirectShader(renderer));\n  }\n\n  return true;\n}\n/**\n * Built-in hook to find graphics.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return if a PIXI.Graphics object was found.\n */\n\n\nfunction findGraphics(item, queue) {\n  if (item instanceof Graphics) {\n    queue.push(item);\n    return true;\n  }\n\n  return false;\n}\n/**\n * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new application\n * const app = new PIXI.Application();\n * document.body.appendChild(app.view);\n *\n * // Don't start rendering right away\n * app.stop();\n *\n * // create a display object\n * const rect = new PIXI.Graphics()\n *     .beginFill(0x00ff00)\n *     .drawRect(40, 40, 200, 200);\n *\n * // Add to the stage\n * app.stage.addChild(rect);\n *\n * // Don't start rendering until the graphic is uploaded to the GPU\n * app.renderer.plugins.prepare.upload(app.stage, () => {\n *     app.start();\n * });\n *\n *\n * @memberof PIXI\n */\n\n\nvar Prepare =\n/** @class */\nfunction (_super) {\n  __extends(Prepare, _super);\n  /**\n   * @param {PIXI.Renderer} renderer - A reference to the current renderer\n   */\n\n\n  function Prepare(renderer) {\n    var _this = _super.call(this, renderer) || this;\n\n    _this.uploadHookHelper = _this.renderer; // Add textures and graphics to upload\n\n    _this.registerFindHook(findGraphics);\n\n    _this.registerUploadHook(uploadBaseTextures);\n\n    _this.registerUploadHook(uploadGraphics);\n\n    return _this;\n  }\n\n  return Prepare;\n}(BasePrepare);\n/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n *\n * @memberof PIXI\n */\n\n\nvar TimeLimiter =\n/** @class */\nfunction () {\n  /** @param maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame. */\n  function TimeLimiter(maxMilliseconds) {\n    this.maxMilliseconds = maxMilliseconds;\n    this.frameStart = 0;\n  }\n  /** Resets any counting properties to start fresh on a new frame. */\n\n\n  TimeLimiter.prototype.beginFrame = function () {\n    this.frameStart = Date.now();\n  };\n  /**\n   * Checks to see if another item can be uploaded. This should only be called once per item.\n   *\n   * @return - If the item is allowed to be uploaded.\n   */\n\n\n  TimeLimiter.prototype.allowedToUpload = function () {\n    return Date.now() - this.frameStart < this.maxMilliseconds;\n  };\n\n  return TimeLimiter;\n}();\n\nexport { BasePrepare, CountLimiter, Prepare, TimeLimiter };","map":{"version":3,"mappings":"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","names":["settings","UPLOADS_PER_FRAME","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","maxItemsPerFrame","itemsLeft","CountLimiter","findMultipleBaseTextures","item","queue","result","_textures","length","i","Texture","baseTexture","indexOf","push","findBaseTexture","BaseTexture","texture","findTexture","_texture","drawText","_helper","Text","updateText","calculateTextStyle","TextStyle","font","toFontString","TextMetrics","measureFont","findText","style","findTextStyle","renderer","limiter","uploadHookHelper","addHooks","uploadHooks","completes","ticking","delayedTick","_this","prepareItems","registerFindHook","registerUploadHook","BasePrepare","done","add","Ticker","system","addOnce","tick","UPDATE_PRIORITY","UTILITY","setTimeout","beginFrame","allowedToUpload","uploaded","_destroyed","len","shift","slice","addHook","uploadHook","Container","children","remove","uploadBaseTextures","_glTextures","CONTEXT_UID","bind","uploadGraphics","Graphics","finishPoly","geometry","updateBatches","batches","batchable","_resolveDirectShader","findGraphics","_super","maxMilliseconds","frameStart","TimeLimiter","Date","now"],"sources":["../../src/settings.ts","../../../../node_modules/tslib/tslib.es6.js","../../src/CountLimiter.ts","../../src/BasePrepare.ts","../../src/Prepare.ts","../../src/TimeLimiter.ts"],"sourcesContent":["import { settings } from '@pixi/settings';\n\n/**\n * Default number of uploads per frame using prepare plugin.\n *\n * @static\n * @memberof PIXI.settings\n * @name UPLOADS_PER_FRAME\n * @type {number}\n * @default 4\n */\nsettings.UPLOADS_PER_FRAME = 4;\n\nexport { settings };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * CountLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of items per frame.\n *\n * @memberof PIXI\n */\nexport class CountLimiter\n{\n    /** The maximum number of items that can be prepared each frame. */\n    public maxItemsPerFrame: number;\n\n    /**\n     * The number of items that can be prepared in the current frame. */\n    public itemsLeft: number;\n\n    /**\n     * @param maxItemsPerFrame - The maximum number of items that can be prepared each frame.\n     */\n    constructor(maxItemsPerFrame: number)\n    {\n        this.maxItemsPerFrame = maxItemsPerFrame;\n        this.itemsLeft = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.itemsLeft = this.maxItemsPerFrame;\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     *\n     * @return If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return this.itemsLeft-- > 0;\n    }\n}\n","import { Texture, BaseTexture } from '@pixi/core';\nimport { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { settings } from '@pixi/settings';\nimport { Container, DisplayObject } from '@pixi/display';\nimport { Text, TextStyle, TextMetrics } from '@pixi/text';\nimport { CountLimiter } from './CountLimiter';\n\nimport type { AbstractRenderer } from '@pixi/core';\n\ninterface IArrowFunction {\n    (): void;\n}\ninterface IUploadHook {\n    (helper: AbstractRenderer | BasePrepare, item: IDisplayObjectExtended): boolean;\n}\n\ninterface IFindHook {\n    (item: any, queue: Array<any>): boolean;\n}\n\nexport interface IDisplayObjectExtended extends DisplayObject {\n    _textures?: Array<Texture>;\n    _texture?: Texture;\n    style?: TextStyle|Partial<TextStyle>;\n}\n\n/**\n * Built-in hook to find multiple textures from objects like AnimatedSprites.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return If a PIXI.Texture object was found.\n */\nfunction findMultipleBaseTextures(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    let result = false;\n\n    // Objects with multiple textures\n    if (item && item._textures && item._textures.length)\n    {\n        for (let i = 0; i < item._textures.length; i++)\n        {\n            if (item._textures[i] instanceof Texture)\n            {\n                const baseTexture = item._textures[i].baseTexture;\n\n                if (queue.indexOf(baseTexture) === -1)\n                {\n                    queue.push(baseTexture);\n                    result = true;\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\n/**\n * Built-in hook to find BaseTextures from Texture.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return If a PIXI.Texture object was found.\n */\nfunction findBaseTexture(item: Texture, queue: Array<any>): boolean\n{\n    if (item.baseTexture instanceof BaseTexture)\n    {\n        const texture = item.baseTexture;\n\n        if (queue.indexOf(texture) === -1)\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find textures from objects.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return If a PIXI.Texture object was found.\n */\nfunction findTexture(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item._texture && item._texture instanceof Texture)\n    {\n        const texture = item._texture.baseTexture;\n\n        if (queue.indexOf(texture) === -1)\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to draw PIXI.Text to its texture.\n *\n * @private\n * @param helper - Not used by this upload handler\n * @param item - Item to check\n * @return If item was uploaded.\n */\nfunction drawText(_helper: AbstractRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof Text)\n    {\n        // updating text will return early if it is not dirty\n        item.updateText(true);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to calculate a text style for a PIXI.Text object.\n *\n * @private\n * @param helper - Not used by this upload handler\n * @param item - Item to check\n * @return If item was uploaded.\n */\nfunction calculateTextStyle(_helper: AbstractRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        const font = item.toFontString();\n\n        TextMetrics.measureFont(font);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find Text objects.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return if a PIXI.Text object was found.\n */\nfunction findText(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Text)\n    {\n        // push the text style to prepare it - this can be really expensive\n        if (queue.indexOf(item.style) === -1)\n        {\n            queue.push(item.style);\n        }\n        // also push the text object so that we can render it (to canvas/texture) if needed\n        if (queue.indexOf(item) === -1)\n        {\n            queue.push(item);\n        }\n        // also push the Text's texture for upload to GPU\n        const texture = item._texture.baseTexture;\n\n        if (queue.indexOf(texture) === -1)\n        {\n            queue.push(texture);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to find TextStyle objects.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return If a PIXI.TextStyle object was found.\n */\nfunction findTextStyle(item: TextStyle, queue: Array<any>): boolean\n{\n    if (item instanceof TextStyle)\n    {\n        if (queue.indexOf(item) === -1)\n        {\n            queue.push(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare manager provides functionality to upload content to the GPU.\n *\n * BasePrepare handles basic queuing functionality and is extended by\n * {@link PIXI.Prepare} and {@link PIXI.CanvasPrepare}\n * to provide preparation capabilities specific to their respective renderers.\n *\n * @example\n * // Create a sprite\n * const sprite = PIXI.Sprite.from('something.png');\n *\n * // Load object into GPU\n * app.renderer.plugins.prepare.upload(sprite, () => {\n *\n *     //Texture(s) has been uploaded to GPU\n *     app.stage.addChild(sprite);\n *\n * })\n *\n * @abstract\n * @memberof PIXI\n */\nexport class BasePrepare\n{\n    /**\n     * The limiter to be used to control how quickly items are prepared.\n     * @type {PIXI.CountLimiter|PIXI.TimeLimiter}\n     */\n    private limiter: CountLimiter;\n\n    /** Reference to the renderer. */\n    protected renderer: AbstractRenderer;\n\n    /**\n     * The only real difference between CanvasPrepare and Prepare is what they pass\n     * to upload hooks. That different parameter is stored here.\n     */\n    protected uploadHookHelper: any;\n\n    /** Collection of items to uploads at once. */\n    protected queue: Array<any>;\n\n    /**\n     * Collection of additional hooks for finding assets.\n     * @type {Array<Function>}\n     */\n    public addHooks: Array<any>;\n\n    /**\n     * Collection of additional hooks for processing assets.\n     * @type {Array<Function>}\n     */\n    public uploadHooks: Array<any>;\n\n    /**\n     * Callback to call after completed.\n     * @type {Array<Function>}\n     */\n    public completes: Array<any>;\n\n    /**\n     * If prepare is ticking (running).\n     * @type {boolean}\n     */\n    public ticking: boolean;\n\n    /**\n     * 'bound' call for prepareItems().\n     * @type {Function}\n     */\n    private delayedTick: IArrowFunction;\n\n    /**\n     * @param {PIXI.AbstractRenderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: AbstractRenderer)\n    {\n        this.limiter = new CountLimiter(settings.UPLOADS_PER_FRAME);\n        this.renderer = renderer;\n        this.uploadHookHelper = null;\n        this.queue = [];\n        this.addHooks = [];\n        this.uploadHooks = [];\n        this.completes = [];\n        this.ticking = false;\n        this.delayedTick = (): void =>\n        {\n            // unlikely, but in case we were destroyed between tick() and delayedTick()\n            if (!this.queue)\n            {\n                return;\n            }\n            this.prepareItems();\n        };\n\n        // hooks to find the correct texture\n        this.registerFindHook(findText);\n        this.registerFindHook(findTextStyle);\n        this.registerFindHook(findMultipleBaseTextures);\n        this.registerFindHook(findBaseTexture);\n        this.registerFindHook(findTexture);\n\n        // upload hooks\n        this.registerUploadHook(drawText);\n        this.registerUploadHook(calculateTextStyle);\n    }\n\n    /**\n     * Upload all the textures and graphics to the GPU.\n     *\n     * @param {Function|PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text} item -\n     *        Either the container or display object to search for items to upload, the items to upload themselves,\n     *        or the callback function, if items have been added using `prepare.add`.\n     * @param {Function} [done] - Optional callback when all queued uploads have completed\n     */\n    upload(item: IDisplayObjectExtended | Container | BaseTexture | Texture | (() => void), done?: () => void): void\n    {\n        if (typeof item === 'function')\n        {\n            done = item as () => void;\n            item = null;\n        }\n\n        // If a display object, search for items\n        // that we could upload\n        if (item)\n        {\n            this.add(item as IDisplayObjectExtended | Container | BaseTexture | Texture);\n        }\n\n        // Get the items for upload from the display\n        if (this.queue.length)\n        {\n            if (done)\n            {\n                this.completes.push(done);\n            }\n\n            if (!this.ticking)\n            {\n                this.ticking = true;\n                Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n            }\n        }\n        else if (done)\n        {\n            done();\n        }\n    }\n\n    /**\n     * Handle tick update\n     *\n     * @private\n     */\n    tick(): void\n    {\n        setTimeout(this.delayedTick, 0);\n    }\n\n    /**\n     * Actually prepare items. This is handled outside of the tick because it will take a while\n     * and we do NOT want to block the current animation frame from rendering.\n     *\n     * @private\n     */\n    prepareItems(): void\n    {\n        this.limiter.beginFrame();\n        // Upload the graphics\n        while (this.queue.length && this.limiter.allowedToUpload())\n        {\n            const item = this.queue[0];\n            let uploaded = false;\n\n            if (item && !item._destroyed)\n            {\n                for (let i = 0, len = this.uploadHooks.length; i < len; i++)\n                {\n                    if (this.uploadHooks[i](this.uploadHookHelper, item))\n                    {\n                        this.queue.shift();\n                        uploaded = true;\n                        break;\n                    }\n                }\n            }\n\n            if (!uploaded)\n            {\n                this.queue.shift();\n            }\n        }\n\n        // We're finished\n        if (!this.queue.length)\n        {\n            this.ticking = false;\n\n            const completes = this.completes.slice(0);\n\n            this.completes.length = 0;\n\n            for (let i = 0, len = completes.length; i < len; i++)\n            {\n                completes[i]();\n            }\n        }\n        else\n        {\n            // if we are not finished, on the next rAF do this again\n            Ticker.system.addOnce(this.tick, this, UPDATE_PRIORITY.UTILITY);\n        }\n    }\n\n    /**\n     * Adds hooks for finding items.\n     *\n     * @param {Function} addHook - Function call that takes two parameters: `item:*, queue:Array`\n     *          function must return `true` if it was able to add item to the queue.\n     * @return Instance of plugin for chaining.\n     */\n    registerFindHook(addHook: IFindHook): this\n    {\n        if (addHook)\n        {\n            this.addHooks.push(addHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Adds hooks for uploading items.\n     *\n     * @param {Function} uploadHook - Function call that takes two parameters: `prepare:CanvasPrepare, item:*` and\n     *          function must return `true` if it was able to handle upload of item.\n     * @return Instance of plugin for chaining.\n     */\n    registerUploadHook(uploadHook: IUploadHook): this\n    {\n        if (uploadHook)\n        {\n            this.uploadHooks.push(uploadHook);\n        }\n\n        return this;\n    }\n\n    /**\n     * Manually add an item to the uploading queue.\n     *\n     * @param {PIXI.DisplayObject|PIXI.Container|PIXI.BaseTexture|PIXI.Texture|PIXI.Graphics|PIXI.Text|*} item - Object to\n     *        add to the queue\n     * @return Instance of plugin for chaining.\n     */\n    add(item: IDisplayObjectExtended | Container | BaseTexture | Texture): this\n    {\n        // Add additional hooks for finding elements on special\n        // types of objects that\n        for (let i = 0, len = this.addHooks.length; i < len; i++)\n        {\n            if (this.addHooks[i](item, this.queue))\n            {\n                break;\n            }\n        }\n\n        // Get children recursively\n        if (item instanceof Container)\n        {\n            for (let i = item.children.length - 1; i >= 0; i--)\n            {\n                this.add(item.children[i]);\n            }\n        }\n\n        return this;\n    }\n\n    /** Destroys the plugin, don't use after this. */\n    destroy(): void\n    {\n        if (this.ticking)\n        {\n            Ticker.system.remove(this.tick, this);\n        }\n        this.ticking = false;\n        this.addHooks = null;\n        this.uploadHooks = null;\n        this.renderer = null;\n        this.completes = null;\n        this.queue = null;\n        this.limiter = null;\n        this.uploadHookHelper = null;\n    }\n}\n","import { BaseTexture } from '@pixi/core';\nimport { Graphics } from '@pixi/graphics';\nimport { BasePrepare, IDisplayObjectExtended } from './BasePrepare';\n\nimport type { AbstractRenderer, Renderer } from '@pixi/core';\n\n/**\n * Built-in hook to upload PIXI.Texture objects to the GPU.\n *\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @return If item was uploaded.\n */\nfunction uploadBaseTextures(renderer: AbstractRenderer | BasePrepare, item: IDisplayObjectExtended | BaseTexture): boolean\n{\n    if (item instanceof BaseTexture)\n    {\n        // if the texture already has a GL texture, then the texture has been prepared or rendered\n        // before now. If the texture changed, then the changer should be calling texture.update() which\n        // reuploads the texture without need for preparing it again\n        if (!item._glTextures[(renderer as Renderer).CONTEXT_UID])\n        {\n            (renderer as Renderer).texture.bind(item);\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Built-in hook to upload PIXI.Graphics to the GPU.\n *\n * @private\n * @param renderer - instance of the webgl renderer\n * @param item - Item to check\n * @return If item was uploaded.\n */\nfunction uploadGraphics(renderer: AbstractRenderer | BasePrepare, item: IDisplayObjectExtended): boolean\n{\n    if (!(item instanceof Graphics))\n    {\n        return false;\n    }\n\n    const { geometry } = item;\n\n    // update dirty graphics to get batches\n    item.finishPoly();\n    geometry.updateBatches();\n\n    const { batches } = geometry;\n\n    // upload all textures found in styles\n    for (let i = 0; i < batches.length; i++)\n    {\n        const { texture } = batches[i].style;\n\n        if (texture)\n        {\n            uploadBaseTextures(renderer, texture.baseTexture);\n        }\n    }\n\n    // if its not batchable - update vao for particular shader\n    if (!geometry.batchable)\n    {\n        (renderer as Renderer).geometry.bind(geometry, (item as any)._resolveDirectShader((renderer as Renderer)));\n    }\n\n    return true;\n}\n\n/**\n * Built-in hook to find graphics.\n *\n * @private\n * @param item - Display object to check\n * @param queue - Collection of items to upload\n * @return if a PIXI.Graphics object was found.\n */\nfunction findGraphics(item: IDisplayObjectExtended, queue: Array<any>): boolean\n{\n    if (item instanceof Graphics)\n    {\n        queue.push(item);\n\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * The prepare plugin provides renderer-specific plugins for pre-rendering DisplayObjects. These plugins are useful for\n * asynchronously preparing and uploading to the GPU assets, textures, graphics waiting to be displayed.\n *\n * Do not instantiate this plugin directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n * @example\n * // Create a new application\n * const app = new PIXI.Application();\n * document.body.appendChild(app.view);\n *\n * // Don't start rendering right away\n * app.stop();\n *\n * // create a display object\n * const rect = new PIXI.Graphics()\n *     .beginFill(0x00ff00)\n *     .drawRect(40, 40, 200, 200);\n *\n * // Add to the stage\n * app.stage.addChild(rect);\n *\n * // Don't start rendering until the graphic is uploaded to the GPU\n * app.renderer.plugins.prepare.upload(app.stage, () => {\n *     app.start();\n * });\n *\n *\n * @memberof PIXI\n */\nexport class Prepare extends BasePrepare\n{\n    /**\n     * @param {PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.uploadHookHelper = this.renderer;\n\n        // Add textures and graphics to upload\n        this.registerFindHook(findGraphics);\n        this.registerUploadHook(uploadBaseTextures);\n        this.registerUploadHook(uploadGraphics);\n    }\n}\n","/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n *\n * @memberof PIXI\n */\nexport class TimeLimiter\n{\n    /** The maximum milliseconds that can be spent preparing items each frame. */\n    public maxMilliseconds: number;\n\n    /**\n     * The start time of the current frame.\n     *\n     * @readonly\n     */\n    public frameStart: number;\n\n    /** @param maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame. */\n    constructor(maxMilliseconds: number)\n    {\n        this.maxMilliseconds = maxMilliseconds;\n        this.frameStart = 0;\n    }\n\n    /** Resets any counting properties to start fresh on a new frame. */\n    beginFrame(): void\n    {\n        this.frameStart = Date.now();\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     *\n     * @return - If the item is allowed to be uploaded.\n     */\n    allowedToUpload(): boolean\n    {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}