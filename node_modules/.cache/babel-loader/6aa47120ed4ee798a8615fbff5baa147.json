{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createPannerNodeRendererFactory = function createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function () {\n    var renderedNativeAudioNodes = new WeakMap();\n    var renderedBufferPromise = null;\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(proxy, nativeOfflineAudioContext) {\n        var nativeGainNode, nativePannerNode, commonAudioNodeOptions, commonNativePannerNodeOptions, nativePannerNodeIsOwnedByContext, options, _ret;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                nativeGainNode = null;\n                nativePannerNode = getNativeAudioNode(proxy);\n                commonAudioNodeOptions = {\n                  channelCount: nativePannerNode.channelCount,\n                  channelCountMode: nativePannerNode.channelCountMode,\n                  channelInterpretation: nativePannerNode.channelInterpretation\n                };\n                commonNativePannerNodeOptions = _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                  coneInnerAngle: nativePannerNode.coneInnerAngle,\n                  coneOuterAngle: nativePannerNode.coneOuterAngle,\n                  coneOuterGain: nativePannerNode.coneOuterGain,\n                  distanceModel: nativePannerNode.distanceModel,\n                  maxDistance: nativePannerNode.maxDistance,\n                  panningModel: nativePannerNode.panningModel,\n                  refDistance: nativePannerNode.refDistance,\n                  rolloffFactor: nativePannerNode.rolloffFactor\n                }); // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n\n                if ('bufferSize' in nativePannerNode) {\n                  nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                    gain: 1\n                  }));\n                } else if (!nativePannerNodeIsOwnedByContext) {\n                  options = _objectSpread(_objectSpread({}, commonNativePannerNodeOptions), {}, {\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                  });\n                  nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n\n                if (!(nativeGainNode !== null)) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                return _context4.delegateYield( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  var partialOfflineAudioContext, nativeChannelMergerNode, renderedBuffer, inputGainNode, channelDatas, i, lastOrientation, lastPosition, gateGainNode, partialPannerNode, _i, orientation, positon, currentTime;\n\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          if (!(renderedBufferPromise === null)) {\n                            _context3.next = 7;\n                            break;\n                          }\n\n                          if (!(nativeOfflineAudioContextConstructor === null)) {\n                            _context3.next = 3;\n                            break;\n                          }\n\n                          throw new Error('Missing the native OfflineAudioContext constructor.');\n\n                        case 3:\n                          partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, // Bug #17: Safari does not yet expose the length.\n                          proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                          nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: 6\n                          });\n                          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                          renderedBufferPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                            var nativeConstantSourceNodes, i;\n                            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                              while (1) {\n                                switch (_context2.prev = _context2.next) {\n                                  case 0:\n                                    _context2.next = 2;\n                                    return Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map( /*#__PURE__*/function () {\n                                      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(audioParam, index) {\n                                        var nativeConstantSourceNode;\n                                        return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                          while (1) {\n                                            switch (_context.prev = _context.next) {\n                                              case 0:\n                                                nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                                  channelCount: 1,\n                                                  channelCountMode: 'explicit',\n                                                  channelInterpretation: 'discrete',\n                                                  offset: index === 0 ? 1 : 0\n                                                });\n                                                _context.next = 3;\n                                                return renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n\n                                              case 3:\n                                                return _context.abrupt(\"return\", nativeConstantSourceNode);\n\n                                              case 4:\n                                              case \"end\":\n                                                return _context.stop();\n                                            }\n                                          }\n                                        }, _callee);\n                                      }));\n\n                                      return function (_x3, _x4) {\n                                        return _ref3.apply(this, arguments);\n                                      };\n                                    }()));\n\n                                  case 2:\n                                    nativeConstantSourceNodes = _context2.sent;\n\n                                    for (i = 0; i < 6; i += 1) {\n                                      nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                                      nativeConstantSourceNodes[i].start(0);\n                                    }\n\n                                    return _context2.abrupt(\"return\", renderNativeOfflineAudioContext(partialOfflineAudioContext));\n\n                                  case 5:\n                                  case \"end\":\n                                    return _context2.stop();\n                                }\n                              }\n                            }, _callee2);\n                          }))();\n\n                        case 7:\n                          _context3.next = 9;\n                          return renderedBufferPromise;\n\n                        case 9:\n                          renderedBuffer = _context3.sent;\n                          inputGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                            gain: 1\n                          }));\n                          _context3.next = 13;\n                          return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n\n                        case 13:\n                          channelDatas = [];\n\n                          for (i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                            channelDatas.push(renderedBuffer.getChannelData(i));\n                          }\n\n                          lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                          lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                          gateGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                            gain: 1\n                          }));\n                          partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonNativePannerNodeOptions), {}, {\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                          }));\n                          inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                          partialPannerNode.connect(nativeGainNode);\n\n                          for (_i = 128; _i < renderedBuffer.length; _i += 128) {\n                            orientation = [channelDatas[0][_i], channelDatas[1][_i], channelDatas[2][_i]];\n                            positon = [channelDatas[3][_i], channelDatas[4][_i], channelDatas[5][_i]];\n\n                            if (orientation.some(function (value, index) {\n                              return value !== lastOrientation[index];\n                            }) || positon.some(function (value, index) {\n                              return value !== lastPosition[index];\n                            })) {\n                              lastOrientation = orientation;\n                              lastPosition = positon;\n                              currentTime = _i / nativeOfflineAudioContext.sampleRate;\n                              gateGainNode.gain.setValueAtTime(0, currentTime);\n                              gateGainNode = createNativeGainNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonAudioNodeOptions), {}, {\n                                gain: 0\n                              }));\n                              partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, _objectSpread(_objectSpread({}, commonNativePannerNodeOptions), {}, {\n                                orientationX: lastOrientation[0],\n                                orientationY: lastOrientation[1],\n                                orientationZ: lastOrientation[2],\n                                positionX: lastPosition[0],\n                                positionY: lastPosition[1],\n                                positionZ: lastPosition[2]\n                              }));\n                              gateGainNode.gain.setValueAtTime(1, currentTime);\n                              inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                              partialPannerNode.connect(nativeGainNode);\n                            }\n                          }\n\n                          return _context3.abrupt(\"return\", {\n                            v: nativeGainNode\n                          });\n\n                        case 23:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                })(), \"t0\", 9);\n\n              case 9:\n                _ret = _context4.t0;\n\n                if (!(typeof _ret === \"object\")) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", _ret.v);\n\n              case 12:\n                if (nativePannerNodeIsOwnedByContext) {\n                  _context4.next = 27;\n                  break;\n                }\n\n                _context4.next = 15;\n                return renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n\n              case 15:\n                _context4.next = 17;\n                return renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n\n              case 17:\n                _context4.next = 19;\n                return renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n\n              case 19:\n                _context4.next = 21;\n                return renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n\n              case 21:\n                _context4.next = 23;\n                return renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n\n              case 23:\n                _context4.next = 25;\n                return renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n\n              case 25:\n                _context4.next = 39;\n                break;\n\n              case 27:\n                _context4.next = 29;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n\n              case 29:\n                _context4.next = 31;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n\n              case 31:\n                _context4.next = 33;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n\n              case 33:\n                _context4.next = 35;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n\n              case 35:\n                _context4.next = 37;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n\n              case 37:\n                _context4.next = 39;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n\n              case 39:\n                if (!isNativeAudioNodeFaker(nativePannerNode)) {\n                  _context4.next = 44;\n                  break;\n                }\n\n                _context4.next = 42;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n\n              case 42:\n                _context4.next = 46;\n                break;\n\n              case 44:\n                _context4.next = 46;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n\n              case 46:\n                return _context4.abrupt(\"return\", nativePannerNode);\n\n              case 47:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["isNativeAudioNodeFaker","isOwnedByContext","createPannerNodeRendererFactory","connectAudioParam","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeGainNode","createNativePannerNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderAutomation","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","renderedBufferPromise","createAudioNode","proxy","nativeOfflineAudioContext","nativeGainNode","nativePannerNode","commonAudioNodeOptions","channelCount","channelCountMode","channelInterpretation","commonNativePannerNodeOptions","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","panningModel","refDistance","rolloffFactor","nativePannerNodeIsOwnedByContext","gain","options","orientationX","value","orientationY","orientationZ","positionX","positionY","positionZ","set","Error","partialOfflineAudioContext","context","length","sampleRate","nativeChannelMergerNode","numberOfInputs","connect","destination","Promise","all","map","audioParam","index","nativeConstantSourceNode","offset","nativeConstantSourceNodes","i","start","renderedBuffer","inputGainNode","channelDatas","numberOfChannels","push","getChannelData","lastOrientation","lastPosition","gateGainNode","partialPannerNode","inputs","orientation","positon","some","currentTime","setValueAtTime","render","renderedNativeGainNodeOrNativePannerNode","get","undefined","resolve"],"sourceRoot":"","sources":["../../../src/factories/panner-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}