{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { defaultArg, optionsFromArguments } from \"../core/util/Defaults\";\nimport { StateTimeline } from \"../core/util/StateTimeline\";\nimport { isArray, isDefined, isObject, isUndef } from \"../core/util/TypeCheck\";\nimport { ToneEvent } from \"./ToneEvent\";\n/**\n * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.\n *\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const part = new Tone.Part(((time, note) => {\n * \t// the notes given as the second element in the array\n * \t// will be passed in as the second argument\n * \tsynth.triggerAttackRelease(note, \"8n\", time);\n * }), [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n * Tone.Transport.start();\n * @example\n * const synth = new Tone.Synth().toDestination();\n * // use an array of objects as long as the object has a \"time\" attribute\n * const part = new Tone.Part(((time, value) => {\n * \t// the value is an object which contains both the note and the velocity\n * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n * }), [{ time: 0, note: \"C3\", velocity: 0.9 },\n * \t{ time: \"0:2\", note: \"C4\", velocity: 0.5 }\n * ]).start(0);\n * Tone.Transport.start();\n * @category Event\n */\n\nexport var Part = /*#__PURE__*/function (_ToneEvent) {\n  _inherits(Part, _ToneEvent);\n\n  var _super = _createSuper(Part);\n\n  function Part() {\n    var _this;\n\n    _classCallCheck(this, Part);\n\n    _this = _super.call(this, optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]));\n    _this.name = \"Part\";\n    /**\n     * Tracks the scheduled events\n     */\n\n    _this._state = new StateTimeline(\"stopped\");\n    /**\n     * The events that belong to this part\n     */\n\n    _this._events = new Set();\n    var options = optionsFromArguments(Part.getDefaults(), arguments, [\"callback\", \"events\"]); // make sure things are assigned in the right order\n\n    _this._state.increasing = true; // add the events\n\n    options.events.forEach(function (event) {\n      if (isArray(event)) {\n        _this.add(event[0], event[1]);\n      } else {\n        _this.add(event);\n      }\n    });\n    return _this;\n  }\n\n  _createClass(Part, [{\n    key: \"start\",\n    value:\n    /**\n     * Start the part at the given time.\n     * @param  time    When to start the part.\n     * @param  offset  The offset from the start of the part to begin playing at.\n     */\n    function start(time, offset) {\n      var _this2 = this;\n\n      var ticks = this.toTicks(time);\n\n      if (this._state.getValueAtTime(ticks) !== \"started\") {\n        offset = defaultArg(offset, this._loop ? this._loopStart : 0);\n\n        if (this._loop) {\n          offset = defaultArg(offset, this._loopStart);\n        } else {\n          offset = defaultArg(offset, 0);\n        }\n\n        var computedOffset = this.toTicks(offset);\n\n        this._state.add({\n          id: -1,\n          offset: computedOffset,\n          state: \"started\",\n          time: ticks\n        });\n\n        this._forEach(function (event) {\n          _this2._startNote(event, ticks, computedOffset);\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Start the event in the given event at the correct time given\n     * the ticks and offset and looping.\n     * @param  event\n     * @param  ticks\n     * @param  offset\n     */\n\n  }, {\n    key: \"_startNote\",\n    value: function _startNote(event, ticks, offset) {\n      ticks -= offset;\n\n      if (this._loop) {\n        if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n          if (event.startOffset < offset) {\n            // start it on the next loop\n            ticks += this._getLoopDuration();\n          }\n\n          event.start(new TicksClass(this.context, ticks));\n        } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n          event.loop = false;\n          event.start(new TicksClass(this.context, ticks));\n        }\n      } else if (event.startOffset >= offset) {\n        event.start(new TicksClass(this.context, ticks));\n      }\n    }\n  }, {\n    key: \"startOffset\",\n    get: function get() {\n      return this._startOffset;\n    },\n    set: function set(offset) {\n      var _this3 = this;\n\n      this._startOffset = offset;\n\n      this._forEach(function (event) {\n        event.startOffset += _this3._startOffset;\n      });\n    }\n    /**\n     * Stop the part at the given time.\n     * @param  time  When to stop the part.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      var ticks = this.toTicks(time);\n\n      this._state.cancel(ticks);\n\n      this._state.setStateAtTime(\"stopped\", ticks);\n\n      this._forEach(function (event) {\n        event.stop(time);\n      });\n\n      return this;\n    }\n    /**\n     * Get/Set an Event's value at the given time.\n     * If a value is passed in and no event exists at\n     * the given time, one will be created with that value.\n     * If two events are at the same time, the first one will\n     * be returned.\n     * @example\n     * const part = new Tone.Part();\n     * part.at(\"1m\"); // returns the part at the first measure\n     * part.at(\"2m\", \"C2\"); // set the value at \"2m\" to C2.\n     * // if an event didn't exist at that time, it will be created.\n     * @param time The time of the event to get or set.\n     * @param value If a value is passed in, the value of the event at the given time will be set to it.\n     */\n\n  }, {\n    key: \"at\",\n    value: function at(time, value) {\n      var timeInTicks = new TransportTimeClass(this.context, time).toTicks();\n      var tickTime = new TicksClass(this.context, 1).toSeconds();\n\n      var iterator = this._events.values();\n\n      var result = iterator.next();\n\n      while (!result.done) {\n        var event = result.value;\n\n        if (Math.abs(timeInTicks - event.startOffset) < tickTime) {\n          if (isDefined(value)) {\n            event.value = value;\n          }\n\n          return event;\n        }\n\n        result = iterator.next();\n      } // if there was no event at that time, create one\n\n\n      if (isDefined(value)) {\n        this.add(time, value); // return the new event\n\n        return this.at(time);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(time, value) {\n      // extract the parameters\n      if (time instanceof Object && Reflect.has(time, \"time\")) {\n        value = time;\n        time = value.time;\n      }\n\n      var ticks = this.toTicks(time);\n      var event;\n\n      if (value instanceof ToneEvent) {\n        event = value;\n        event.callback = this._tick.bind(this);\n      } else {\n        event = new ToneEvent({\n          callback: this._tick.bind(this),\n          context: this.context,\n          value: value\n        });\n      } // the start offset\n\n\n      event.startOffset = ticks; // initialize the values\n\n      event.set({\n        humanize: this.humanize,\n        loop: this.loop,\n        loopEnd: this.loopEnd,\n        loopStart: this.loopStart,\n        playbackRate: this.playbackRate,\n        probability: this.probability\n      });\n\n      this._events.add(event); // start the note if it should be played right now\n\n\n      this._restartEvent(event);\n\n      return this;\n    }\n    /**\n     * Restart the given event\n     */\n\n  }, {\n    key: \"_restartEvent\",\n    value: function _restartEvent(event) {\n      var _this4 = this;\n\n      this._state.forEach(function (stateEvent) {\n        if (stateEvent.state === \"started\") {\n          _this4._startNote(event, stateEvent.time, stateEvent.offset);\n        } else {\n          // stop the note\n          event.stop(new TicksClass(_this4.context, stateEvent.time));\n        }\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(time, value) {\n      var _this5 = this;\n\n      // extract the parameters\n      if (isObject(time) && time.hasOwnProperty(\"time\")) {\n        value = time;\n        time = value.time;\n      }\n\n      time = this.toTicks(time);\n\n      this._events.forEach(function (event) {\n        if (event.startOffset === time) {\n          if (isUndef(value) || isDefined(value) && event.value === value) {\n            _this5._events.delete(event);\n\n            event.dispose();\n          }\n        }\n      });\n\n      return this;\n    }\n    /**\n     * Remove all of the notes from the group.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._forEach(function (event) {\n        return event.dispose();\n      });\n\n      this._events.clear();\n\n      return this;\n    }\n    /**\n     * Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n     * @param after The time after which to cancel the scheduled events.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(after) {\n      this._forEach(function (event) {\n        return event.cancel(after);\n      });\n\n      this._state.cancel(this.toTicks(after));\n\n      return this;\n    }\n    /**\n     * Iterate over all of the events\n     */\n\n  }, {\n    key: \"_forEach\",\n    value: function _forEach(callback) {\n      if (this._events) {\n        this._events.forEach(function (event) {\n          if (event instanceof Part) {\n            event._forEach(callback);\n          } else {\n            callback(event);\n          }\n        });\n      }\n\n      return this;\n    }\n    /**\n     * Set the attribute of all of the events\n     * @param  attr  the attribute to set\n     * @param  value      The value to set it to\n     */\n\n  }, {\n    key: \"_setAll\",\n    value: function _setAll(attr, value) {\n      this._forEach(function (event) {\n        event[attr] = value;\n      });\n    }\n    /**\n     * Internal tick method\n     * @param  time  The time of the event in seconds\n     */\n\n  }, {\n    key: \"_tick\",\n    value: function _tick(time, value) {\n      if (!this.mute) {\n        this.callback(time, value);\n      }\n    }\n    /**\n     * Determine if the event should be currently looping\n     * given the loop boundries of this Part.\n     * @param  event  The event to test\n     */\n\n  }, {\n    key: \"_testLoopBoundries\",\n    value: function _testLoopBoundries(event) {\n      if (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {\n        event.cancel(0);\n      } else if (event.state === \"stopped\") {\n        // reschedule it if it's stopped\n        this._restartEvent(event);\n      }\n    }\n  }, {\n    key: \"probability\",\n    get: function get() {\n      return this._probability;\n    },\n    set: function set(prob) {\n      this._probability = prob;\n\n      this._setAll(\"probability\", prob);\n    }\n  }, {\n    key: \"humanize\",\n    get: function get() {\n      return this._humanize;\n    },\n    set: function set(variation) {\n      this._humanize = variation;\n\n      this._setAll(\"humanize\", variation);\n    }\n    /**\n     * If the part should loop or not\n     * between Part.loopStart and\n     * Part.loopEnd. If set to true,\n     * the part will loop indefinitely,\n     * if set to a number greater than 1\n     * it will play a specific number of\n     * times, if set to false, 0 or 1, the\n     * part will only play once.\n     * @example\n     * const part = new Tone.Part();\n     * // loop the part 8 times\n     * part.loop = 8;\n     */\n\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._loop;\n    },\n    set: function set(loop) {\n      var _this6 = this;\n\n      this._loop = loop;\n\n      this._forEach(function (event) {\n        event.loopStart = _this6.loopStart;\n        event.loopEnd = _this6.loopEnd;\n        event.loop = loop;\n\n        _this6._testLoopBoundries(event);\n      });\n    }\n    /**\n     * The loopEnd point determines when it will\n     * loop if Part.loop is true.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return new TicksClass(this.context, this._loopEnd).toSeconds();\n    },\n    set: function set(loopEnd) {\n      var _this7 = this;\n\n      this._loopEnd = this.toTicks(loopEnd);\n\n      if (this._loop) {\n        this._forEach(function (event) {\n          event.loopEnd = loopEnd;\n\n          _this7._testLoopBoundries(event);\n        });\n      }\n    }\n    /**\n     * The loopStart point determines when it will\n     * loop if Part.loop is true.\n     */\n\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return new TicksClass(this.context, this._loopStart).toSeconds();\n    },\n    set: function set(loopStart) {\n      var _this8 = this;\n\n      this._loopStart = this.toTicks(loopStart);\n\n      if (this._loop) {\n        this._forEach(function (event) {\n          event.loopStart = _this8.loopStart;\n\n          _this8._testLoopBoundries(event);\n        });\n      }\n    }\n    /**\n     * The playback rate of the part\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      this._playbackRate = rate;\n\n      this._setAll(\"playbackRate\", rate);\n    }\n    /**\n     * The number of scheduled notes in the part.\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._events.size;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Part.prototype), \"dispose\", this).call(this);\n\n      this.clear();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneEvent.getDefaults(), {\n        events: []\n      });\n    }\n  }]);\n\n  return Part;\n}(ToneEvent);","map":{"version":3,"mappings":"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","names":["TicksClass","TransportTimeClass","defaultArg","optionsFromArguments","StateTimeline","isArray","isDefined","isObject","isUndef","ToneEvent","Part","getDefaults","arguments","Set","options","_state","increasing","events","forEach","event","add","time","offset","ticks","toTicks","getValueAtTime","_loop","_loopStart","computedOffset","id","state","_forEach","_startNote","startOffset","_loopEnd","_getLoopDuration","start","context","loop","_startOffset","cancel","setStateAtTime","stop","value","timeInTicks","tickTime","toSeconds","iterator","_events","values","result","next","done","Math","abs","at","Object","Reflect","has","callback","_tick","bind","set","humanize","loopEnd","loopStart","playbackRate","probability","_restartEvent","stateEvent","hasOwnProperty","delete","dispose","clear","after","attr","mute","_probability","prob","_setAll","_humanize","variation","_testLoopBoundries","_playbackRate","rate","size","assign"],"sourceRoot":"","sources":["../../../Tone/event/Part.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}