{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\n\nexport var MidSideMerge = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(MidSideMerge, _ToneAudioNode);\n\n  var _super = _createSuper(MidSideMerge);\n\n  function MidSideMerge() {\n    var _this;\n\n    _classCallCheck(this, MidSideMerge);\n\n    _this = _super.call(this, optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n    _this.name = \"MidSideMerge\";\n    _this.mid = new Gain({\n      context: _this.context\n    });\n    _this.side = new Gain({\n      context: _this.context\n    });\n    _this._left = new Add({\n      context: _this.context\n    });\n    _this._leftMult = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._right = new Subtract({\n      context: _this.context\n    });\n    _this._rightMult = new Multiply({\n      context: _this.context,\n      value: Math.SQRT1_2\n    });\n    _this._merge = _this.output = new Merge({\n      context: _this.context\n    });\n\n    _this.mid.fan(_this._left);\n\n    _this.side.connect(_this._left.addend);\n\n    _this.mid.connect(_this._right);\n\n    _this.side.connect(_this._right.subtrahend);\n\n    _this._left.connect(_this._leftMult);\n\n    _this._right.connect(_this._rightMult);\n\n    _this._leftMult.connect(_this._merge, 0, 0);\n\n    _this._rightMult.connect(_this._merge, 0, 1);\n\n    return _this;\n  }\n\n  _createClass(MidSideMerge, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideMerge.prototype), \"dispose\", this).call(this);\n\n      this.mid.dispose();\n      this.side.dispose();\n\n      this._leftMult.dispose();\n\n      this._rightMult.dispose();\n\n      this._left.dispose();\n\n      this._right.dispose();\n\n      return this;\n    }\n  }]);\n\n  return MidSideMerge;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,aAAT,QAAoD,kCAApD;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,oBAAT,QAAqC,0BAArC;AAIA;;;;;;;;;AAQA,WAAaC,YAAb;AAAA;;AAAA;;AAkDC;AAAA;;AAAA;;AACC,8BAAMD,oBAAoB,CAACC,YAAY,CAACC,WAAb,EAAD,EAA6BC,SAA7B,CAA1B;AAjDQ,iBAAe,cAAf;AAkDR,UAAKC,GAAL,GAAW,IAAIL,IAAJ,CAAS;AAAEM,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAX;AACA,UAAKC,IAAL,GAAY,IAAIP,IAAJ,CAAS;AAAEM,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAZ;AACA,UAAKE,KAAL,GAAa,IAAIX,GAAJ,CAAQ;AAAES,aAAO,EAAE,MAAKA;AAAhB,KAAR,CAAb;AACA,UAAKG,SAAL,GAAiB,IAAIX,QAAJ,CAAa;AAC7BQ,aAAO,EAAE,MAAKA,OADe;AAE7BI,WAAK,EAAEC,IAAI,CAACC;AAFiB,KAAb,CAAjB;AAIA,UAAKC,MAAL,GAAc,IAAId,QAAJ,CAAa;AAAEO,aAAO,EAAE,MAAKA;AAAhB,KAAb,CAAd;AACA,UAAKQ,UAAL,GAAkB,IAAIhB,QAAJ,CAAa;AAC9BQ,aAAO,EAAE,MAAKA,OADgB;AAE9BI,WAAK,EAAEC,IAAI,CAACC;AAFkB,KAAb,CAAlB;AAIA,UAAKG,MAAL,GAAc,MAAKC,MAAL,GAAc,IAAIpB,KAAJ,CAAU;AAAEU,aAAO,EAAE,MAAKA;AAAhB,KAAV,CAA5B;;AAEA,UAAKD,GAAL,CAASY,GAAT,CAAa,MAAKT,KAAlB;;AACA,UAAKD,IAAL,CAAUW,OAAV,CAAkB,MAAKV,KAAL,CAAWW,MAA7B;;AACA,UAAKd,GAAL,CAASa,OAAT,CAAiB,MAAKL,MAAtB;;AACA,UAAKN,IAAL,CAAUW,OAAV,CAAkB,MAAKL,MAAL,CAAYO,UAA9B;;AACA,UAAKZ,KAAL,CAAWU,OAAX,CAAmB,MAAKT,SAAxB;;AACA,UAAKI,MAAL,CAAYK,OAAZ,CAAoB,MAAKJ,UAAzB;;AACA,UAAKL,SAAL,CAAeS,OAAf,CAAuB,MAAKH,MAA5B,EAAoC,CAApC,EAAuC,CAAvC;;AACA,UAAKD,UAAL,CAAgBI,OAAhB,CAAwB,MAAKH,MAA7B,EAAqC,CAArC,EAAwC,CAAxC;;AAvBD;AAwBC;;AA1EF;AAAA;AAAA,WA4EC,mBAAO;AACN;;AACA,WAAKV,GAAL,CAASgB,OAAT;AACA,WAAKd,IAAL,CAAUc,OAAV;;AACA,WAAKZ,SAAL,CAAeY,OAAf;;AACA,WAAKP,UAAL,CAAgBO,OAAhB;;AACA,WAAKb,KAAL,CAAWa,OAAX;;AACA,WAAKR,MAAL,CAAYQ,OAAZ;;AACA,aAAO,IAAP;AACA;AArFF;;AAAA;AAAA,EAAkC1B,aAAlC","names":["ToneAudioNode","Merge","Add","Multiply","Subtract","Gain","optionsFromArguments","MidSideMerge","getDefaults","arguments","mid","context","side","_left","_leftMult","value","Math","SQRT1_2","_right","_rightMult","_merge","output","fan","connect","addend","subtrahend","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/channel/MidSideMerge.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}