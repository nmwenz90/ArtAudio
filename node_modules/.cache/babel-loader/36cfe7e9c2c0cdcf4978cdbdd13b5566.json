{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * return Tone.Offline(() => {\n * // move the input signal from right to left\n * \tconst panner = new Tone.Panner(1).toDestination();\n * \tpanner.pan.rampTo(-1, 0.5);\n * \tconst osc = new Tone.Oscillator(100).connect(panner).start();\n * }, 0.5, 2);\n * @category Component\n */\n\nexport var Panner = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Panner, _ToneAudioNode);\n\n  var _super = _createSuper(Panner);\n\n  function Panner() {\n    var _this;\n\n    _classCallCheck(this, Panner);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n    _this.name = \"Panner\";\n    /**\n     * the panner node\n     */\n\n    _this._panner = _this.context.createStereoPanner();\n    _this.input = _this._panner;\n    _this.output = _this._panner;\n    var options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n    _this.pan = new Param({\n      context: _this.context,\n      param: _this._panner.pan,\n      value: options.pan,\n      minValue: -1,\n      maxValue: 1\n    }); // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\n    _this._panner.channelCount = options.channelCount;\n    _this._panner.channelCountMode = \"explicit\"; // initial value\n\n    readOnly(_assertThisInitialized(_this), \"pan\");\n    return _this;\n  }\n\n  _createClass(Panner, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Panner.prototype), \"dispose\", this).call(this);\n\n      this._panner.disconnect();\n\n      this.pan.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        pan: 0,\n        channelCount: 1\n      });\n    }\n  }]);\n\n  return Panner;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,KAAT,QAAsB,0BAAtB;AACA,SAASC,aAAT,QAAoD,kCAApD;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAOA;;;;;;;;;;;;AAWA,WAAaC,MAAb;AAAA;;AAAA;;AA+BC;AAAA;;AAAA;;AACC,8BAAMC,MAAM,CAACC,MAAP,CAAcJ,oBAAoB,CAACE,MAAM,CAACG,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,KAAD,CAAlC,CAAlC,CAAN;AA9BQ,iBAAe,QAAf;AAET;;;;AAGQ,oBAA4B,MAAKC,OAAL,CAAaC,kBAAb,EAA5B;AACC,kBAA0B,MAAKC,OAA/B;AACA,mBAA2B,MAAKA,OAAhC;AAwBR,QAAMC,OAAO,GAAGV,oBAAoB,CAACE,MAAM,CAACG,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,KAAD,CAAlC,CAApC;AAEA,UAAKK,GAAL,GAAW,IAAIb,KAAJ,CAAU;AACpBS,aAAO,EAAE,MAAKA,OADM;AAEpBK,WAAK,EAAE,MAAKH,OAAL,CAAaE,GAFA;AAGpBE,WAAK,EAAEH,OAAO,CAACC,GAHK;AAIpBG,cAAQ,EAAE,CAAC,CAJS;AAKpBC,cAAQ,EAAE;AALU,KAAV,CAAX,CAJD,CAYC;AACA;AACA;;AACA,UAAKN,OAAL,CAAaO,YAAb,GAA4BN,OAAO,CAACM,YAApC;AACA,UAAKP,OAAL,CAAaQ,gBAAb,GAAgC,UAAhC,CAhBD,CAkBC;;AACAhB,YAAQ,gCAAO,KAAP,CAAR;AAnBD;AAoBC;;AAnDF;AAAA;AAAA,WA4DC,mBAAO;AACN;;AACA,WAAKQ,OAAL,CAAaS,UAAb;;AACA,WAAKP,GAAL,CAASQ,OAAT;AACA,aAAO,IAAP;AACA;AAjEF;AAAA;AAAA,WAqDC,uBAAkB;AACjB,aAAOhB,MAAM,CAACC,MAAP,CAAcL,aAAa,CAACM,WAAd,EAAd,EAA2C;AACjDM,WAAG,EAAE,CAD4C;AAEjDK,oBAAY,EAAE;AAFmC,OAA3C,CAAP;AAIA;AA1DF;;AAAA;AAAA,EAA4BjB,aAA5B","names":["Param","ToneAudioNode","optionsFromArguments","readOnly","Panner","Object","assign","getDefaults","arguments","context","createStereoPanner","_panner","options","pan","param","value","minValue","maxValue","channelCount","channelCountMode","disconnect","dispose"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Panner.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}