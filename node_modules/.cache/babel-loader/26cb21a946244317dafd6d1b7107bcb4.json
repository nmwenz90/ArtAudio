{"ast":null,"code":"/*!\n * @pixi/text-bitmap - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/text-bitmap is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Rectangle, Point, ObservablePoint } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { MeshGeometry, MeshMaterial, Mesh } from '@pixi/mesh';\nimport { hex2rgb, string2hex, getResolutionOfUrl, removeItems } from '@pixi/utils';\nimport { BaseTexture, Texture, Program } from '@pixi/core';\nimport { TEXT_GRADIENT, TextStyle, TextMetrics } from '@pixi/text';\nimport { ALPHA_MODES, BLEND_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { LoaderResource } from '@pixi/loaders';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n/* eslint-disable max-len */\n\n/**\n * Normalized parsed data from .fnt files.\n *\n * @memberof PIXI\n */\n\n\nvar BitmapFontData =\n/** @class */\nfunction () {\n  function BitmapFontData() {\n    this.info = [];\n    this.common = [];\n    this.page = [];\n    this.char = [];\n    this.kerning = [];\n    this.distanceField = [];\n  }\n\n  return BitmapFontData;\n}();\n/**\n * BitmapFont format that's Text-based.\n *\n * @private\n */\n\n\nvar TextFormat =\n/** @class */\nfunction () {\n  function TextFormat() {}\n  /**\n   * Check if resource refers to txt font data.\n   *\n   * @param data\n   * @return - True if resource could be treated as font data, false otherwise.\n   */\n\n\n  TextFormat.test = function (data) {\n    return typeof data === 'string' && data.indexOf('info face=') === 0;\n  };\n  /**\n   * Convert text font data to a javascript object.\n   *\n   * @param txt - Raw string data to be converted\n   * @return - Parsed font data\n   */\n\n\n  TextFormat.parse = function (txt) {\n    // Retrieve data item\n    var items = txt.match(/^[a-z]+\\s+.+$/gm);\n    var rawData = {\n      info: [],\n      common: [],\n      page: [],\n      char: [],\n      chars: [],\n      kerning: [],\n      kernings: [],\n      distanceField: []\n    };\n\n    for (var i in items) {\n      // Extract item name\n      var name = items[i].match(/^[a-z]+/gm)[0]; // Extract item attribute list as string ex.: \"width=10\"\n\n      var attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm); // Convert attribute list into an object\n\n      var itemData = {};\n\n      for (var i_1 in attributeList) {\n        // Split key-value pairs\n        var split = attributeList[i_1].split('=');\n        var key = split[0]; // Remove eventual quotes from value\n\n        var strValue = split[1].replace(/\"/gm, ''); // Try to convert value into float\n\n        var floatValue = parseFloat(strValue); // Use string value case float value is NaN\n\n        var value = isNaN(floatValue) ? strValue : floatValue;\n        itemData[key] = value;\n      } // Push current item to the resulting data\n\n\n      rawData[name].push(itemData);\n    }\n\n    var font = new BitmapFontData();\n    rawData.info.forEach(function (info) {\n      return font.info.push({\n        face: info.face,\n        size: parseInt(info.size, 10)\n      });\n    });\n    rawData.common.forEach(function (common) {\n      return font.common.push({\n        lineHeight: parseInt(common.lineHeight, 10)\n      });\n    });\n    rawData.page.forEach(function (page) {\n      return font.page.push({\n        id: parseInt(page.id, 10),\n        file: page.file\n      });\n    });\n    rawData.char.forEach(function (char) {\n      return font.char.push({\n        id: parseInt(char.id, 10),\n        page: parseInt(char.page, 10),\n        x: parseInt(char.x, 10),\n        y: parseInt(char.y, 10),\n        width: parseInt(char.width, 10),\n        height: parseInt(char.height, 10),\n        xoffset: parseInt(char.xoffset, 10),\n        yoffset: parseInt(char.yoffset, 10),\n        xadvance: parseInt(char.xadvance, 10)\n      });\n    });\n    rawData.kerning.forEach(function (kerning) {\n      return font.kerning.push({\n        first: parseInt(kerning.first, 10),\n        second: parseInt(kerning.second, 10),\n        amount: parseInt(kerning.amount, 10)\n      });\n    });\n    rawData.distanceField.forEach(function (df) {\n      return font.distanceField.push({\n        distanceRange: parseInt(df.distanceRange, 10),\n        fieldType: df.fieldType\n      });\n    });\n    return font;\n  };\n\n  return TextFormat;\n}();\n/**\n * BitmapFont format that's XML-based.\n *\n * @private\n */\n\n\nvar XMLFormat =\n/** @class */\nfunction () {\n  function XMLFormat() {}\n  /**\n   * Check if resource refers to xml font data.\n   *\n   * @param data\n   * @return - True if resource could be treated as font data, false otherwise.\n   */\n\n\n  XMLFormat.test = function (data) {\n    return data instanceof XMLDocument && data.getElementsByTagName('page').length && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n  };\n  /**\n   * Convert the XML into BitmapFontData that we can use.\n   *\n   * @param xml\n   * @return - Data to use for BitmapFont\n   */\n\n\n  XMLFormat.parse = function (xml) {\n    var data = new BitmapFontData();\n    var info = xml.getElementsByTagName('info');\n    var common = xml.getElementsByTagName('common');\n    var page = xml.getElementsByTagName('page');\n    var char = xml.getElementsByTagName('char');\n    var kerning = xml.getElementsByTagName('kerning');\n    var distanceField = xml.getElementsByTagName('distanceField');\n\n    for (var i = 0; i < info.length; i++) {\n      data.info.push({\n        face: info[i].getAttribute('face'),\n        size: parseInt(info[i].getAttribute('size'), 10)\n      });\n    }\n\n    for (var i = 0; i < common.length; i++) {\n      data.common.push({\n        lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10)\n      });\n    }\n\n    for (var i = 0; i < page.length; i++) {\n      data.page.push({\n        id: parseInt(page[i].getAttribute('id'), 10) || 0,\n        file: page[i].getAttribute('file')\n      });\n    }\n\n    for (var i = 0; i < char.length; i++) {\n      var letter = char[i];\n      data.char.push({\n        id: parseInt(letter.getAttribute('id'), 10),\n        page: parseInt(letter.getAttribute('page'), 10) || 0,\n        x: parseInt(letter.getAttribute('x'), 10),\n        y: parseInt(letter.getAttribute('y'), 10),\n        width: parseInt(letter.getAttribute('width'), 10),\n        height: parseInt(letter.getAttribute('height'), 10),\n        xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n        yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n        xadvance: parseInt(letter.getAttribute('xadvance'), 10)\n      });\n    }\n\n    for (var i = 0; i < kerning.length; i++) {\n      data.kerning.push({\n        first: parseInt(kerning[i].getAttribute('first'), 10),\n        second: parseInt(kerning[i].getAttribute('second'), 10),\n        amount: parseInt(kerning[i].getAttribute('amount'), 10)\n      });\n    }\n\n    for (var i = 0; i < distanceField.length; i++) {\n      data.distanceField.push({\n        fieldType: distanceField[i].getAttribute('fieldType'),\n        distanceRange: parseInt(distanceField[i].getAttribute('distanceRange'), 10)\n      });\n    }\n\n    return data;\n  };\n\n  return XMLFormat;\n}();\n/**\n * BitmapFont format that's XML-based.\n *\n * @private\n */\n\n\nvar XMLStringFormat =\n/** @class */\nfunction () {\n  function XMLStringFormat() {}\n  /**\n   * Check if resource refers to text xml font data.\n   *\n   * @param data\n   * @return - True if resource could be treated as font data, false otherwise.\n   */\n\n\n  XMLStringFormat.test = function (data) {\n    if (typeof data === 'string' && data.indexOf('<font>') > -1) {\n      var xml = new globalThis.DOMParser().parseFromString(data, 'text/xml');\n      return XMLFormat.test(xml);\n    }\n\n    return false;\n  };\n  /**\n   * Convert the text XML into BitmapFontData that we can use.\n   *\n   * @param xmlTxt\n   * @return - Data to use for BitmapFont\n   */\n\n\n  XMLStringFormat.parse = function (xmlTxt) {\n    var xml = new globalThis.DOMParser().parseFromString(xmlTxt, 'text/xml');\n    return XMLFormat.parse(xml);\n  };\n\n  return XMLStringFormat;\n}(); // Registered formats, maybe make this extensible in the future?\n\n\nvar formats = [TextFormat, XMLFormat, XMLStringFormat];\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @return {any} Format or null\n */\n\nfunction autoDetectFormat(data) {\n  for (var i = 0; i < formats.length; i++) {\n    if (formats[i].test(data)) {\n      return formats[i];\n    }\n  }\n\n  return null;\n} // TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n *\n * @private\n * @param {object} style - The style.\n * @param {string[]} lines - The lines of text.\n * @return {string|number|CanvasGradient} The fill style\n */\n\n\nfunction generateFillStyle(canvas, context, style, resolution, lines, metrics) {\n  // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n  //       the setter converts to string. See this thread for more details:\n  //       https://github.com/microsoft/TypeScript/issues/2521\n  var fillStyle = style.fill;\n\n  if (!Array.isArray(fillStyle)) {\n    return fillStyle;\n  } else if (fillStyle.length === 1) {\n    return fillStyle[0];\n  } // the gradient will be evenly spaced out according to how large the array is.\n  // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n\n\n  var gradient; // a dropshadow will enlarge the canvas and result in the gradient being\n  // generated with the incorrect dimensions\n\n  var dropShadowCorrection = style.dropShadow ? style.dropShadowDistance : 0; // should also take padding into account, padding can offset the gradient\n\n  var padding = style.padding || 0;\n  var width = canvas.width / resolution - dropShadowCorrection - padding * 2;\n  var height = canvas.height / resolution - dropShadowCorrection - padding * 2; // make a copy of the style settings, so we can manipulate them later\n\n  var fill = fillStyle.slice();\n  var fillGradientStops = style.fillGradientStops.slice(); // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n\n  if (!fillGradientStops.length) {\n    var lengthPlus1 = fill.length + 1;\n\n    for (var i = 1; i < lengthPlus1; ++i) {\n      fillGradientStops.push(i / lengthPlus1);\n    }\n  } // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n  // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n\n\n  fill.unshift(fillStyle[0]);\n  fillGradientStops.unshift(0);\n  fill.push(fillStyle[fillStyle.length - 1]);\n  fillGradientStops.push(1);\n\n  if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL) {\n    // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n    gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding); // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n    // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n    // There's potential for floating point precision issues at the seams between gradient repeats.\n    // The loop below generates the stops in order, so track the last generated one to prevent\n    // floating point precision from making us go the teeniest bit backwards, resulting in\n    // the first and last colors getting swapped.\n\n    var lastIterationStop = 0; // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n\n    var textHeight = metrics.fontProperties.fontSize + style.strokeThickness; // textHeight, but as a 0-1 size in global gradient stop space\n\n    var gradStopLineHeight = textHeight / height;\n\n    for (var i = 0; i < lines.length; i++) {\n      var thisLineTop = metrics.lineHeight * i;\n\n      for (var j = 0; j < fill.length; j++) {\n        // 0-1 stop point for the current line, multiplied to global space afterwards\n        var lineStop = 0;\n\n        if (typeof fillGradientStops[j] === 'number') {\n          lineStop = fillGradientStops[j];\n        } else {\n          lineStop = j / fill.length;\n        }\n\n        var globalStop = thisLineTop / height + lineStop * gradStopLineHeight; // Prevent color stop generation going backwards from floating point imprecision\n\n        var clampedStop = Math.max(lastIterationStop, globalStop);\n        clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n\n        gradient.addColorStop(clampedStop, fill[j]);\n        lastIterationStop = clampedStop;\n      }\n    }\n  } else {\n    // start the gradient at the center left of the canvas, and end at the center right of the canvas\n    gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2); // can just evenly space out the gradients in this case, as multiple lines makes no difference\n    // to an even left to right gradient\n\n    var totalIterations = fill.length + 1;\n    var currentIteration = 1;\n\n    for (var i = 0; i < fill.length; i++) {\n      var stop = void 0;\n\n      if (typeof fillGradientStops[i] === 'number') {\n        stop = fillGradientStops[i];\n      } else {\n        stop = currentIteration / totalIterations;\n      }\n\n      gradient.addColorStop(stop, fill[i]);\n      currentIteration++;\n    }\n  }\n\n  return gradient;\n} // TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {HTMLCanvasElement} canvas\n * @param {CanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\n\n\nfunction drawGlyph(canvas, context, metrics, x, y, resolution, style) {\n  var char = metrics.text;\n  var fontProperties = metrics.fontProperties;\n  context.translate(x, y);\n  context.scale(resolution, resolution);\n  var tx = style.strokeThickness / 2;\n  var ty = -(style.strokeThickness / 2);\n  context.font = style.toFontString();\n  context.lineWidth = style.strokeThickness;\n  context.textBaseline = style.textBaseline;\n  context.lineJoin = style.lineJoin;\n  context.miterLimit = style.miterLimit; // set canvas text styles\n\n  context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n  context.strokeStyle = style.stroke;\n\n  if (style.dropShadow) {\n    var dropShadowColor = style.dropShadowColor;\n    var rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n    var dropShadowBlur = style.dropShadowBlur * resolution;\n    var dropShadowDistance = style.dropShadowDistance * resolution;\n    context.shadowColor = \"rgba(\" + rgb[0] * 255 + \",\" + rgb[1] * 255 + \",\" + rgb[2] * 255 + \",\" + style.dropShadowAlpha + \")\";\n    context.shadowBlur = dropShadowBlur;\n    context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n    context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n  } else {\n    context.shadowColor = 'black';\n    context.shadowBlur = 0;\n    context.shadowOffsetX = 0;\n    context.shadowOffsetY = 0;\n  }\n\n  if (style.stroke && style.strokeThickness) {\n    context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n\n  if (style.fill) {\n    context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n  }\n\n  context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n\n  context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n/**\n * Ponyfill for IE because it doesn't support `Array.from`\n * @private\n */\n\n\nfunction splitTextToCharacters(text) {\n  return Array.from ? Array.from(text) : text.split('');\n}\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]}\n */\n\n\nfunction resolveCharacters(chars) {\n  // Split the chars string into individual characters\n  if (typeof chars === 'string') {\n    chars = [chars];\n  } // Handle an array of characters+ranges\n\n\n  var result = [];\n\n  for (var i = 0, j = chars.length; i < j; i++) {\n    var item = chars[i]; // Handle range delimited by start/end chars\n\n    if (Array.isArray(item)) {\n      if (item.length !== 2) {\n        throw new Error(\"[BitmapFont]: Invalid character range length, expecting 2 got \" + item.length + \".\");\n      }\n\n      var startCode = item[0].charCodeAt(0);\n      var endCode = item[1].charCodeAt(0);\n\n      if (endCode < startCode) {\n        throw new Error('[BitmapFont]: Invalid character range.');\n      }\n\n      for (var i_1 = startCode, j_1 = endCode; i_1 <= j_1; i_1++) {\n        result.push(String.fromCharCode(i_1));\n      }\n    } // Handle a character set string\n    else {\n      result.push.apply(result, splitTextToCharacters(item));\n    }\n  }\n\n  if (result.length === 0) {\n    throw new Error('[BitmapFont]: Empty set when resolving characters.');\n  }\n\n  return result;\n}\n/**\n * Ponyfill for IE because it doesn't support `codePointAt`\n * @private\n */\n\n\nfunction extractCharCode(str) {\n  return str.codePointAt ? str.codePointAt(0) : str.charCodeAt(0);\n}\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n *\n * @memberof PIXI\n */\n\n\nvar BitmapFont =\n/** @class */\nfunction () {\n  /**\n   * @param data\n   * @param textures\n   * @param ownsTextures - Setting to `true` will destroy page textures\n   *        when the font is uninstalled.\n   */\n  function BitmapFont(data, textures, ownsTextures) {\n    var _a, _b;\n\n    var info = data.info[0];\n    var common = data.common[0];\n    var page = data.page[0];\n    var distanceField = data.distanceField[0];\n    var res = getResolutionOfUrl(page.file);\n    var pageTextures = {};\n    this._ownsTextures = ownsTextures;\n    this.font = info.face;\n    this.size = info.size;\n    this.lineHeight = common.lineHeight / res;\n    this.chars = {};\n    this.pageTextures = pageTextures; // Convert the input Texture, Textures or object\n    // into a page Texture lookup by \"id\"\n\n    for (var i = 0; i < data.page.length; i++) {\n      var _c = data.page[i],\n          id = _c.id,\n          file = _c.file;\n      pageTextures[id] = textures instanceof Array ? textures[i] : textures[file]; // only MSDF and SDF fonts need no-premultiplied-alpha\n\n      if ((distanceField === null || distanceField === void 0 ? void 0 : distanceField.fieldType) && distanceField.fieldType !== 'none') {\n        pageTextures[id].baseTexture.alphaMode = ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n      }\n    } // parse letters\n\n\n    for (var i = 0; i < data.char.length; i++) {\n      var _d = data.char[i],\n          id = _d.id,\n          page_1 = _d.page;\n      var _e = data.char[i],\n          x = _e.x,\n          y = _e.y,\n          width = _e.width,\n          height = _e.height,\n          xoffset = _e.xoffset,\n          yoffset = _e.yoffset,\n          xadvance = _e.xadvance;\n      x /= res;\n      y /= res;\n      width /= res;\n      height /= res;\n      xoffset /= res;\n      yoffset /= res;\n      xadvance /= res;\n      var rect = new Rectangle(x + pageTextures[page_1].frame.x / res, y + pageTextures[page_1].frame.y / res, width, height);\n      this.chars[id] = {\n        xOffset: xoffset,\n        yOffset: yoffset,\n        xAdvance: xadvance,\n        kerning: {},\n        texture: new Texture(pageTextures[page_1].baseTexture, rect),\n        page: page_1\n      };\n    } // parse kernings\n\n\n    for (var i = 0; i < data.kerning.length; i++) {\n      var _f = data.kerning[i],\n          first = _f.first,\n          second = _f.second,\n          amount = _f.amount;\n      first /= res;\n      second /= res;\n      amount /= res;\n\n      if (this.chars[second]) {\n        this.chars[second].kerning[first] = amount;\n      }\n    } // Store distance field information\n\n\n    this.distanceFieldRange = distanceField === null || distanceField === void 0 ? void 0 : distanceField.distanceRange;\n    this.distanceFieldType = (_b = (_a = distanceField === null || distanceField === void 0 ? void 0 : distanceField.fieldType) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : 'none';\n  }\n  /** Remove references to created glyph textures. */\n\n\n  BitmapFont.prototype.destroy = function () {\n    for (var id in this.chars) {\n      this.chars[id].texture.destroy();\n      this.chars[id].texture = null;\n    }\n\n    for (var id in this.pageTextures) {\n      if (this._ownsTextures) {\n        this.pageTextures[id].destroy(true);\n      }\n\n      this.pageTextures[id] = null;\n    } // Set readonly null.\n\n\n    this.chars = null;\n    this.pageTextures = null;\n  };\n  /**\n   * Register a new bitmap font.\n   *\n   * @param data - The\n   *        characters map that could be provided as xml or raw string.\n   * @param textures - List of textures for each page.\n   * @param ownsTextures - Set to `true` to destroy page textures\n   *        when the font is uninstalled. By default fonts created with\n   *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n   * @return {PIXI.BitmapFont} Result font object with font, size, lineHeight\n   *         and char fields.\n   */\n\n\n  BitmapFont.install = function (data, textures, ownsTextures) {\n    var fontData;\n\n    if (data instanceof BitmapFontData) {\n      fontData = data;\n    } else {\n      var format = autoDetectFormat(data);\n\n      if (!format) {\n        throw new Error('Unrecognized data format for font.');\n      }\n\n      fontData = format.parse(data);\n    } // Single texture, convert to list\n\n\n    if (textures instanceof Texture) {\n      textures = [textures];\n    }\n\n    var font = new BitmapFont(fontData, textures, ownsTextures);\n    BitmapFont.available[font.font] = font;\n    return font;\n  };\n  /**\n   * Remove bitmap font by name.\n   *\n   * @param name - Name of the font to uninstall.\n   */\n\n\n  BitmapFont.uninstall = function (name) {\n    var font = BitmapFont.available[name];\n\n    if (!font) {\n      throw new Error(\"No font found named '\" + name + \"'\");\n    }\n\n    font.destroy();\n    delete BitmapFont.available[name];\n  };\n  /**\n   * Generates a bitmap-font for the given style and character set. This does not support\n   * kernings yet. With `style` properties, only the following non-layout properties are used:\n   *\n   * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n   * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n   * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n   * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n   * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n   * - {@link PIXI.TextStyle#fill|fill}\n   * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n   * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n   * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n   * - {@link PIXI.TextStyle#fontSize|fontSize}\n   * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n   * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n   * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n   * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n   * - {@link PIXI.TextStyle#stroke|stroke}\n   * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n   * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n   *\n   * @param name - The name of the custom font to use with BitmapText.\n   * @param style - Style options to render with BitmapFont.\n   * @param options - Setup options for font or name of the font.\n   * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n   *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n   *      Don't forget to include spaces ' ' in your character set!\n   * @param {number} [options.resolution=1] - Render resolution for glyphs.\n   * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n   * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n   * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n   * @return Font generated by style options.\n   * @example\n   * PIXI.BitmapFont.from(\"TitleFont\", {\n   *     fontFamily: \"Arial\",\n   *     fontSize: 12,\n   *     strokeThickness: 2,\n   *     fill: \"purple\"\n   * });\n   *\n   * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n   */\n\n\n  BitmapFont.from = function (name, textStyle, options) {\n    if (!name) {\n      throw new Error('[BitmapFont] Property `name` is required.');\n    }\n\n    var _a = Object.assign({}, BitmapFont.defaultOptions, options),\n        chars = _a.chars,\n        padding = _a.padding,\n        resolution = _a.resolution,\n        textureWidth = _a.textureWidth,\n        textureHeight = _a.textureHeight;\n\n    var charsList = resolveCharacters(chars);\n    var style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n    var lineWidth = textureWidth;\n    var fontData = new BitmapFontData();\n    fontData.info[0] = {\n      face: style.fontFamily,\n      size: style.fontSize\n    };\n    fontData.common[0] = {\n      lineHeight: style.fontSize\n    };\n    var positionX = 0;\n    var positionY = 0;\n    var canvas;\n    var context;\n    var baseTexture;\n    var maxCharHeight = 0;\n    var textures = [];\n\n    for (var i = 0; i < charsList.length; i++) {\n      if (!canvas) {\n        canvas = document.createElement('canvas');\n        canvas.width = textureWidth;\n        canvas.height = textureHeight;\n        context = canvas.getContext('2d');\n        baseTexture = new BaseTexture(canvas, {\n          resolution: resolution\n        });\n        textures.push(new Texture(baseTexture));\n        fontData.page.push({\n          id: textures.length - 1,\n          file: ''\n        });\n      } // Measure glyph dimensions\n\n\n      var metrics = TextMetrics.measureText(charsList[i], style, false, canvas);\n      var width = metrics.width;\n      var height = Math.ceil(metrics.height); // This is ugly - but italics are given more space so they don't overlap\n\n      var textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width); // Can't fit char anymore: next canvas please!\n\n      if (positionY >= textureHeight - height * resolution) {\n        if (positionY === 0) {\n          // We don't want user debugging an infinite loop (or do we? :)\n          throw new Error(\"[BitmapFont] textureHeight \" + textureHeight + \"px is \" + (\"too small for \" + style.fontSize + \"px fonts\"));\n        }\n\n        --i; // Create new atlas once current has filled up\n\n        canvas = null;\n        context = null;\n        baseTexture = null;\n        positionY = 0;\n        positionX = 0;\n        maxCharHeight = 0;\n        continue;\n      }\n\n      maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight); // Wrap line once full row has been rendered\n\n      if (textureGlyphWidth * resolution + positionX >= lineWidth) {\n        --i;\n        positionY += maxCharHeight * resolution;\n        positionY = Math.ceil(positionY);\n        positionX = 0;\n        maxCharHeight = 0;\n        continue;\n      }\n\n      drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style); // Unique (numeric) ID mapping to this glyph\n\n      var id = extractCharCode(metrics.text); // Create a texture holding just the glyph\n\n      fontData.char.push({\n        id: id,\n        page: textures.length - 1,\n        x: positionX / resolution,\n        y: positionY / resolution,\n        width: textureGlyphWidth,\n        height: height,\n        xoffset: 0,\n        yoffset: 0,\n        xadvance: Math.ceil(width - (style.dropShadow ? style.dropShadowDistance : 0) - (style.stroke ? style.strokeThickness : 0))\n      });\n      positionX += (textureGlyphWidth + 2 * padding) * resolution;\n      positionX = Math.ceil(positionX);\n    } // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n    // but we're using measureText which is native and fast.\n\n\n    for (var i = 0, len = charsList.length; i < len; i++) {\n      var first = charsList[i];\n\n      for (var j = 0; j < len; j++) {\n        var second = charsList[j];\n        var c1 = context.measureText(first).width;\n        var c2 = context.measureText(second).width;\n        var total = context.measureText(first + second).width;\n        var amount = total - (c1 + c2);\n\n        if (amount) {\n          fontData.kerning.push({\n            first: extractCharCode(first),\n            second: extractCharCode(second),\n            amount: amount\n          });\n        }\n      }\n    }\n\n    var font = new BitmapFont(fontData, textures, true); // Make it easier to replace a font\n\n    if (BitmapFont.available[name] !== undefined) {\n      BitmapFont.uninstall(name);\n    }\n\n    BitmapFont.available[name] = font;\n    return font;\n  };\n  /**\n   * This character set includes all the letters in the alphabet (both lower- and upper- case).\n   *\n   * @type {string[][]}\n   * @example\n   * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n   */\n\n\n  BitmapFont.ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n  /**\n   * This character set includes all decimal digits (from 0 to 9).\n   *\n   * @type {string[][]}\n   * @example\n   * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n   */\n\n  BitmapFont.NUMERIC = [['0', '9']];\n  /**\n   * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n   *\n   * @type {string[][]}\n   */\n\n  BitmapFont.ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n  /**\n   * This character set consists of all the ASCII table.\n   *\n   * @member {string[][]}\n   * @see http://www.asciitable.com/\n   */\n\n  BitmapFont.ASCII = [[' ', '~']];\n  /**\n   * Collection of default options when using `BitmapFont.from`.\n   *\n   * @property {number} resolution=1\n   * @property {number} textureWidth=512\n   * @property {number} textureHeight=512\n   * @property {number} padding=4\n   * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n   */\n\n  BitmapFont.defaultOptions = {\n    resolution: 1,\n    textureWidth: 512,\n    textureHeight: 512,\n    padding: 4,\n    chars: BitmapFont.ALPHANUMERIC\n  };\n  /** Collection of available/installed fonts. */\n\n  BitmapFont.available = {};\n  return BitmapFont;\n}();\n\nvar msdfFrag = \"// Pixi texture info\\r\\nvarying vec2 vTextureCoord;\\r\\nuniform sampler2D uSampler;\\r\\n\\r\\n// Tint\\r\\nuniform vec4 uColor;\\r\\n\\r\\n// on 2D applications fwidth is screenScale / glyphAtlasScale * distanceFieldRange\\r\\nuniform float uFWidth;\\r\\n\\r\\nvoid main(void) {\\r\\n\\r\\n  // To stack MSDF and SDF we need a non-pre-multiplied-alpha texture.\\r\\n  vec4 texColor = texture2D(uSampler, vTextureCoord);\\r\\n\\r\\n  // MSDF\\r\\n  float median = texColor.r + texColor.g + texColor.b -\\r\\n                  min(texColor.r, min(texColor.g, texColor.b)) -\\r\\n                  max(texColor.r, max(texColor.g, texColor.b));\\r\\n  // SDF\\r\\n  median = min(median, texColor.a);\\r\\n\\r\\n  float screenPxDistance = uFWidth * (median - 0.5);\\r\\n  float alpha = clamp(screenPxDistance + 0.5, 0.0, 1.0);\\r\\n\\r\\n  // NPM Textures, NPM outputs\\r\\n  gl_FragColor = vec4(uColor.rgb, uColor.a * alpha);\\r\\n\\r\\n}\\r\\n\";\nvar msdfVert = \"// Mesh material default fragment\\r\\nattribute vec2 aVertexPosition;\\r\\nattribute vec2 aTextureCoord;\\r\\n\\r\\nuniform mat3 projectionMatrix;\\r\\nuniform mat3 translationMatrix;\\r\\nuniform mat3 uTextureMatrix;\\r\\n\\r\\nvarying vec2 vTextureCoord;\\r\\n\\r\\nvoid main(void)\\r\\n{\\r\\n    gl_Position = vec4((projectionMatrix * translationMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\\r\\n\\r\\n    vTextureCoord = (uTextureMatrix * vec3(aTextureCoord, 1.0)).xy;\\r\\n}\\r\\n\"; // If we ever need more than two pools, please make a Dict or something better.\n\nvar pageMeshDataDefaultPageMeshData = [];\nvar pageMeshDataMSDFPageMeshData = [];\nvar charRenderDataPool = [];\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * You can also use SDF, MSDF and MTSDF BitmapFonts for vector-like scaling appearance provided by:\n * https://github.com/soimy/msdf-bmfont-xml for SDF and MSDF fnt files or\n * https://github.com/Chlumsky/msdf-atlas-gen for SDF, MSDF and MTSDF json files\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {\n *   fontName: \"Desyrel\",\n *   fontSize: 35,\n *   align: \"right\"\n * });\n * ```\n *\n * @memberof PIXI\n */\n\nvar BitmapText =\n/** @class */\nfunction (_super) {\n  __extends(BitmapText, _super);\n  /**\n   * @param text - A string that you would like the text to display.\n   * @param style - The style parameters.\n   * @param {string} style.fontName - The installed BitmapFont name.\n   * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n   *.     this will default to the BitmapFont size.\n   * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n   *      does not affect single line text.\n   * @param {number} [style.tint=0xFFFFFF] - The tint color.\n   * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n   * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n   */\n\n\n  function BitmapText(text, style) {\n    if (style === void 0) {\n      style = {};\n    }\n\n    var _this = _super.call(this) || this;\n    /**\n     * Private tracker for the current tint.\n     *\n     * @private\n     */\n\n\n    _this._tint = 0xFFFFFF; // Apply the defaults\n\n    var _a = Object.assign({}, BitmapText.styleDefaults, style),\n        align = _a.align,\n        tint = _a.tint,\n        maxWidth = _a.maxWidth,\n        letterSpacing = _a.letterSpacing,\n        fontName = _a.fontName,\n        fontSize = _a.fontSize;\n\n    if (!BitmapFont.available[fontName]) {\n      throw new Error(\"Missing BitmapFont \\\"\" + fontName + \"\\\"\");\n    }\n\n    _this._activePagesMeshData = [];\n    _this._textWidth = 0;\n    _this._textHeight = 0;\n    _this._align = align;\n    _this._tint = tint;\n    _this._fontName = fontName;\n    _this._fontSize = fontSize || BitmapFont.available[fontName].size;\n    _this._text = text;\n    _this._maxWidth = maxWidth;\n    _this._maxLineHeight = 0;\n    _this._letterSpacing = letterSpacing;\n    _this._anchor = new ObservablePoint(function () {\n      _this.dirty = true;\n    }, _this, 0, 0);\n    _this._roundPixels = settings.ROUND_PIXELS;\n    _this.dirty = true;\n    _this._textureCache = {};\n    return _this;\n  }\n  /**\n   * Renders text and updates it when needed. This should only be called\n   * if the BitmapFont is regenerated.\n   */\n\n\n  BitmapText.prototype.updateText = function () {\n    var _a;\n\n    var data = BitmapFont.available[this._fontName];\n    var scale = this._fontSize / data.size;\n    var pos = new Point();\n    var chars = [];\n    var lineWidths = [];\n    var lineSpaces = [];\n    var text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n    var charsInput = splitTextToCharacters(text);\n    var maxWidth = this._maxWidth * data.size / this._fontSize;\n    var pageMeshDataPool = data.distanceFieldType === 'none' ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n    var prevCharCode = null;\n    var lastLineWidth = 0;\n    var maxLineWidth = 0;\n    var line = 0;\n    var lastBreakPos = -1;\n    var lastBreakWidth = 0;\n    var spacesRemoved = 0;\n    var maxLineHeight = 0;\n    var spaceCount = 0;\n\n    for (var i = 0; i < charsInput.length; i++) {\n      var char = charsInput[i];\n      var charCode = extractCharCode(char);\n\n      if (/(?:\\s)/.test(char)) {\n        lastBreakPos = i;\n        lastBreakWidth = lastLineWidth;\n        spaceCount++;\n      }\n\n      if (char === '\\r' || char === '\\n') {\n        lineWidths.push(lastLineWidth);\n        lineSpaces.push(-1);\n        maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n        ++line;\n        ++spacesRemoved;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n        spaceCount = 0;\n        continue;\n      }\n\n      var charData = data.chars[charCode];\n\n      if (!charData) {\n        continue;\n      }\n\n      if (prevCharCode && charData.kerning[prevCharCode]) {\n        pos.x += charData.kerning[prevCharCode];\n      }\n\n      var charRenderData = charRenderDataPool.pop() || {\n        texture: Texture.EMPTY,\n        line: 0,\n        charCode: 0,\n        prevSpaces: 0,\n        position: new Point()\n      };\n      charRenderData.texture = charData.texture;\n      charRenderData.line = line;\n      charRenderData.charCode = charCode;\n      charRenderData.position.x = pos.x + charData.xOffset + this._letterSpacing / 2;\n      charRenderData.position.y = pos.y + charData.yOffset;\n      charRenderData.prevSpaces = spaceCount;\n      chars.push(charRenderData);\n      lastLineWidth = charRenderData.position.x + Math.max(charData.xAdvance, charData.texture.orig.width);\n      pos.x += charData.xAdvance + this._letterSpacing;\n      maxLineHeight = Math.max(maxLineHeight, charData.yOffset + charData.texture.height);\n      prevCharCode = charCode;\n\n      if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth) {\n        ++spacesRemoved;\n        removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n        i = lastBreakPos;\n        lastBreakPos = -1;\n        lineWidths.push(lastBreakWidth);\n        lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n        maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n        line++;\n        pos.x = 0;\n        pos.y += data.lineHeight;\n        prevCharCode = null;\n        spaceCount = 0;\n      }\n    }\n\n    var lastChar = charsInput[charsInput.length - 1];\n\n    if (lastChar !== '\\r' && lastChar !== '\\n') {\n      if (/(?:\\s)/.test(lastChar)) {\n        lastLineWidth = lastBreakWidth;\n      }\n\n      lineWidths.push(lastLineWidth);\n      maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n      lineSpaces.push(-1);\n    }\n\n    var lineAlignOffsets = [];\n\n    for (var i = 0; i <= line; i++) {\n      var alignOffset = 0;\n\n      if (this._align === 'right') {\n        alignOffset = maxLineWidth - lineWidths[i];\n      } else if (this._align === 'center') {\n        alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n      } else if (this._align === 'justify') {\n        alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n      }\n\n      lineAlignOffsets.push(alignOffset);\n    }\n\n    var lenChars = chars.length;\n    var pagesMeshData = {};\n    var newPagesMeshData = [];\n    var activePagesMeshData = this._activePagesMeshData;\n\n    for (var i = 0; i < activePagesMeshData.length; i++) {\n      pageMeshDataPool.push(activePagesMeshData[i]);\n    }\n\n    for (var i = 0; i < lenChars; i++) {\n      var texture = chars[i].texture;\n      var baseTextureUid = texture.baseTexture.uid;\n\n      if (!pagesMeshData[baseTextureUid]) {\n        var pageMeshData = pageMeshDataPool.pop();\n\n        if (!pageMeshData) {\n          var geometry = new MeshGeometry();\n          var material = void 0;\n          var meshBlendMode = void 0;\n\n          if (data.distanceFieldType === 'none') {\n            material = new MeshMaterial(Texture.EMPTY);\n            meshBlendMode = BLEND_MODES.NORMAL;\n          } else {\n            material = new MeshMaterial(Texture.EMPTY, {\n              program: Program.from(msdfVert, msdfFrag),\n              uniforms: {\n                uFWidth: 0\n              }\n            });\n            meshBlendMode = BLEND_MODES.NORMAL_NPM;\n          }\n\n          var mesh = new Mesh(geometry, material);\n          mesh.blendMode = meshBlendMode;\n          pageMeshData = {\n            index: 0,\n            indexCount: 0,\n            vertexCount: 0,\n            uvsCount: 0,\n            total: 0,\n            mesh: mesh,\n            vertices: null,\n            uvs: null,\n            indices: null\n          };\n        } // reset data..\n\n\n        pageMeshData.index = 0;\n        pageMeshData.indexCount = 0;\n        pageMeshData.vertexCount = 0;\n        pageMeshData.uvsCount = 0;\n        pageMeshData.total = 0; // TODO need to get page texture here somehow..\n\n        var _textureCache = this._textureCache;\n        _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new Texture(texture.baseTexture);\n        pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n        pageMeshData.mesh.tint = this._tint;\n        newPagesMeshData.push(pageMeshData);\n        pagesMeshData[baseTextureUid] = pageMeshData;\n      }\n\n      pagesMeshData[baseTextureUid].total++;\n    } // lets find any previously active pageMeshDatas that are no longer required for\n    // the updated text (if any), removed and return them to the pool.\n\n\n    for (var i = 0; i < activePagesMeshData.length; i++) {\n      if (newPagesMeshData.indexOf(activePagesMeshData[i]) === -1) {\n        this.removeChild(activePagesMeshData[i].mesh);\n      }\n    } // next lets add any new meshes, that have not yet been added to this BitmapText\n    // we only add if its not already a child of this BitmapObject\n\n\n    for (var i = 0; i < newPagesMeshData.length; i++) {\n      if (newPagesMeshData[i].mesh.parent !== this) {\n        this.addChild(newPagesMeshData[i].mesh);\n      }\n    } // active page mesh datas are set to be the new pages added.\n\n\n    this._activePagesMeshData = newPagesMeshData;\n\n    for (var i in pagesMeshData) {\n      var pageMeshData = pagesMeshData[i];\n      var total = pageMeshData.total; // lets only allocate new buffers if we can fit the new text in the current ones..\n      // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n\n      if (!(((_a = pageMeshData.indices) === null || _a === void 0 ? void 0 : _a.length) > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2) {\n        pageMeshData.vertices = new Float32Array(4 * 2 * total);\n        pageMeshData.uvs = new Float32Array(4 * 2 * total);\n        pageMeshData.indices = new Uint16Array(6 * total);\n      } else {\n        var total_1 = pageMeshData.total;\n        var vertices = pageMeshData.vertices; // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n\n        for (var i_1 = total_1 * 4 * 2; i_1 < vertices.length; i_1++) {\n          vertices[i_1] = 0;\n        }\n      } // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n      // to match the number of letters needed\n\n\n      pageMeshData.mesh.size = 6 * total;\n    }\n\n    for (var i = 0; i < lenChars; i++) {\n      var char = chars[i];\n      var offset = char.position.x + lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1);\n\n      if (this._roundPixels) {\n        offset = Math.round(offset);\n      }\n\n      var xPos = offset * scale;\n      var yPos = char.position.y * scale;\n      var texture = char.texture;\n      var pageMesh = pagesMeshData[texture.baseTexture.uid];\n      var textureFrame = texture.frame;\n      var textureUvs = texture._uvs;\n      var index = pageMesh.index++;\n      pageMesh.indices[index * 6 + 0] = 0 + index * 4;\n      pageMesh.indices[index * 6 + 1] = 1 + index * 4;\n      pageMesh.indices[index * 6 + 2] = 2 + index * 4;\n      pageMesh.indices[index * 6 + 3] = 0 + index * 4;\n      pageMesh.indices[index * 6 + 4] = 2 + index * 4;\n      pageMesh.indices[index * 6 + 5] = 3 + index * 4;\n      pageMesh.vertices[index * 8 + 0] = xPos;\n      pageMesh.vertices[index * 8 + 1] = yPos;\n      pageMesh.vertices[index * 8 + 2] = xPos + textureFrame.width * scale;\n      pageMesh.vertices[index * 8 + 3] = yPos;\n      pageMesh.vertices[index * 8 + 4] = xPos + textureFrame.width * scale;\n      pageMesh.vertices[index * 8 + 5] = yPos + textureFrame.height * scale;\n      pageMesh.vertices[index * 8 + 6] = xPos;\n      pageMesh.vertices[index * 8 + 7] = yPos + textureFrame.height * scale;\n      pageMesh.uvs[index * 8 + 0] = textureUvs.x0;\n      pageMesh.uvs[index * 8 + 1] = textureUvs.y0;\n      pageMesh.uvs[index * 8 + 2] = textureUvs.x1;\n      pageMesh.uvs[index * 8 + 3] = textureUvs.y1;\n      pageMesh.uvs[index * 8 + 4] = textureUvs.x2;\n      pageMesh.uvs[index * 8 + 5] = textureUvs.y2;\n      pageMesh.uvs[index * 8 + 6] = textureUvs.x3;\n      pageMesh.uvs[index * 8 + 7] = textureUvs.y3;\n    }\n\n    this._textWidth = maxLineWidth * scale;\n    this._textHeight = (pos.y + data.lineHeight) * scale;\n\n    for (var i in pagesMeshData) {\n      var pageMeshData = pagesMeshData[i]; // apply anchor\n\n      if (this.anchor.x !== 0 || this.anchor.y !== 0) {\n        var vertexCount = 0;\n        var anchorOffsetX = this._textWidth * this.anchor.x;\n        var anchorOffsetY = this._textHeight * this.anchor.y;\n\n        for (var i_2 = 0; i_2 < pageMeshData.total; i_2++) {\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n          pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n        }\n      }\n\n      this._maxLineHeight = maxLineHeight * scale;\n      var vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n      var textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n      var indexBuffer = pageMeshData.mesh.geometry.getIndex();\n      vertexBuffer.data = pageMeshData.vertices;\n      textureBuffer.data = pageMeshData.uvs;\n      indexBuffer.data = pageMeshData.indices;\n      vertexBuffer.update();\n      textureBuffer.update();\n      indexBuffer.update();\n    }\n\n    for (var i = 0; i < chars.length; i++) {\n      charRenderDataPool.push(chars[i]);\n    }\n  };\n\n  BitmapText.prototype.updateTransform = function () {\n    this.validate();\n    this.containerUpdateTransform();\n  };\n\n  BitmapText.prototype._render = function (renderer) {\n    // Update the uniform\n    var _a = BitmapFont.available[this._fontName],\n        distanceFieldRange = _a.distanceFieldRange,\n        distanceFieldType = _a.distanceFieldType,\n        size = _a.size;\n\n    if (distanceFieldType !== 'none') {\n      // Inject the shader code with the correct value\n      var _b = this.worldTransform,\n          a = _b.a,\n          b = _b.b,\n          c = _b.c,\n          d = _b.d;\n      var dx = Math.sqrt(a * a + b * b);\n      var dy = Math.sqrt(c * c + d * d);\n      var worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n      var fontScale = this._fontSize / size;\n\n      for (var _i = 0, _c = this._activePagesMeshData; _i < _c.length; _i++) {\n        var mesh = _c[_i];\n        mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * renderer.resolution;\n      }\n    }\n\n    _super.prototype._render.call(this, renderer);\n  };\n  /**\n   * Validates text before calling parent's getLocalBounds\n   *\n   * @return - The rectangular bounding area\n   */\n\n\n  BitmapText.prototype.getLocalBounds = function () {\n    this.validate();\n    return _super.prototype.getLocalBounds.call(this);\n  };\n  /**\n   * Updates text when needed\n   *\n   * @private\n   */\n\n\n  BitmapText.prototype.validate = function () {\n    if (this.dirty) {\n      this.updateText();\n      this.dirty = false;\n    }\n  };\n\n  Object.defineProperty(BitmapText.prototype, \"tint\", {\n    /**\n     * The tint of the BitmapText object.\n     *\n     * @default 0xffffff\n     */\n    get: function get() {\n      return this._tint;\n    },\n    set: function set(value) {\n      if (this._tint === value) {\n        return;\n      }\n\n      this._tint = value;\n\n      for (var i = 0; i < this._activePagesMeshData.length; i++) {\n        this._activePagesMeshData[i].mesh.tint = value;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"align\", {\n    /**\n     * The alignment of the BitmapText object.\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    get: function get() {\n      return this._align;\n    },\n    set: function set(value) {\n      if (this._align !== value) {\n        this._align = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"fontName\", {\n    /** The name of the BitmapFont. */\n    get: function get() {\n      return this._fontName;\n    },\n    set: function set(value) {\n      if (!BitmapFont.available[value]) {\n        throw new Error(\"Missing BitmapFont \\\"\" + value + \"\\\"\");\n      }\n\n      if (this._fontName !== value) {\n        this._fontName = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"fontSize\", {\n    /** The size of the font to display. */\n    get: function get() {\n      return this._fontSize;\n    },\n    set: function set(value) {\n      if (this._fontSize !== value) {\n        this._fontSize = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"anchor\", {\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     */\n    get: function get() {\n      return this._anchor;\n    },\n    set: function set(value) {\n      if (typeof value === 'number') {\n        this._anchor.set(value);\n      } else {\n        this._anchor.copyFrom(value);\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"text\", {\n    /** The text of the BitmapText object. */\n    get: function get() {\n      return this._text;\n    },\n    set: function set(text) {\n      text = String(text === null || text === undefined ? '' : text);\n\n      if (this._text === text) {\n        return;\n      }\n\n      this._text = text;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"maxWidth\", {\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     */\n    get: function get() {\n      return this._maxWidth;\n    },\n    set: function set(value) {\n      if (this._maxWidth === value) {\n        return;\n      }\n\n      this._maxWidth = value;\n      this.dirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"maxLineHeight\", {\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     *\n     * @readonly\n     */\n    get: function get() {\n      this.validate();\n      return this._maxLineHeight;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"textWidth\", {\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @readonly\n     */\n    get: function get() {\n      this.validate();\n      return this._textWidth;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"letterSpacing\", {\n    /** Additional space between characters. */\n    get: function get() {\n      return this._letterSpacing;\n    },\n    set: function set(value) {\n      if (this._letterSpacing !== value) {\n        this._letterSpacing = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"roundPixels\", {\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    get: function get() {\n      return this._roundPixels;\n    },\n    set: function set(value) {\n      if (value !== this._roundPixels) {\n        this._roundPixels = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BitmapText.prototype, \"textHeight\", {\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @readonly\n     */\n    get: function get() {\n      this.validate();\n      return this._textHeight;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BitmapText.prototype.destroy = function (options) {\n    var _textureCache = this._textureCache;\n\n    for (var id in _textureCache) {\n      var texture = _textureCache[id];\n      texture.destroy();\n      delete _textureCache[id];\n    }\n\n    this._textureCache = null;\n\n    _super.prototype.destroy.call(this, options);\n  };\n\n  BitmapText.styleDefaults = {\n    align: 'left',\n    tint: 0xFFFFFF,\n    maxWidth: 0,\n    letterSpacing: 0\n  };\n  return BitmapText;\n}(Container);\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n *\n * @memberof PIXI\n */\n\n\nvar BitmapFontLoader =\n/** @class */\nfunction () {\n  function BitmapFontLoader() {}\n  /**\n   * Called when the plugin is installed.\n   *\n   * @see PIXI.Loader.registerPlugin\n   */\n\n\n  BitmapFontLoader.add = function () {\n    LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.TEXT);\n  };\n  /**\n   * Called after a resource is loaded.\n   *\n   * @see PIXI.Loader.loaderMiddleware\n   * @param {PIXI.LoaderResource} resource\n   * @param {function} next\n   */\n\n\n  BitmapFontLoader.use = function (resource, next) {\n    var format = autoDetectFormat(resource.data); // Resource was not recognised as any of the expected font data format\n\n    if (!format) {\n      next();\n      return;\n    }\n\n    var baseUrl = BitmapFontLoader.getBaseUrl(this, resource);\n    var data = format.parse(resource.data);\n    var textures = {}; // Handle completed, when the number of textures\n    // load is the same number as references in the fnt file\n\n    var completed = function completed(page) {\n      textures[page.metadata.pageFile] = page.texture;\n\n      if (Object.keys(textures).length === data.page.length) {\n        resource.bitmapFont = BitmapFont.install(data, textures, true);\n        next();\n      }\n    };\n\n    for (var i = 0; i < data.page.length; ++i) {\n      var pageFile = data.page[i].file;\n      var url = baseUrl + pageFile;\n      var exists = false; // incase the image is loaded outside\n      // using the same loader, resource will be available\n\n      for (var name in this.resources) {\n        var bitmapResource = this.resources[name];\n\n        if (bitmapResource.url === url) {\n          bitmapResource.metadata.pageFile = pageFile;\n\n          if (bitmapResource.texture) {\n            completed(bitmapResource);\n          } else {\n            bitmapResource.onAfterMiddleware.add(completed);\n          }\n\n          exists = true;\n          break;\n        }\n      } // texture is not loaded, we'll attempt to add\n      // it to the load and add the texture to the list\n\n\n      if (!exists) {\n        // Standard loading options for images\n        var options = {\n          crossOrigin: resource.crossOrigin,\n          loadType: LoaderResource.LOAD_TYPE.IMAGE,\n          metadata: Object.assign({\n            pageFile: pageFile\n          }, resource.metadata.imageMetadata),\n          parentResource: resource\n        };\n        this.add(url, options, completed);\n      }\n    }\n  };\n  /** Get folder path from a resource. */\n\n\n  BitmapFontLoader.getBaseUrl = function (loader, resource) {\n    var resUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n\n    if (resource.isDataUrl) {\n      if (resUrl === '.') {\n        resUrl = '';\n      }\n\n      if (loader.baseUrl && resUrl) {\n        // if baseurl has a trailing slash then add one to resUrl so the replace works below\n        if (loader.baseUrl.charAt(loader.baseUrl.length - 1) === '/') {\n          resUrl += '/';\n        }\n      }\n    } // remove baseUrl from resUrl\n\n\n    resUrl = resUrl.replace(loader.baseUrl, ''); // if there is an resUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n\n    if (resUrl && resUrl.charAt(resUrl.length - 1) !== '/') {\n      resUrl += '/';\n    }\n\n    return resUrl;\n  };\n  /**\n   * Replacement for NodeJS's path.dirname\n   *\n   * @param {string} url - Path to get directory for\n   */\n\n\n  BitmapFontLoader.dirname = function (url) {\n    var dir = url.replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n    .replace(/\\/$/, '') // replace trailing slash\n    .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n    // File request is relative, use current directory\n\n    if (dir === url) {\n      return '.';\n    } // Started with a slash\n    else if (dir === '') {\n      return '/';\n    }\n\n    return dir;\n  };\n\n  return BitmapFontLoader;\n}();\n\nexport { BitmapFont, BitmapFontData, BitmapFontLoader, BitmapText };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AAEA,IAAIA,cAAa,GAAG,uBAASC,CAAT,EAAYC,CAAZ,EAAe;AAC/BF,gBAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,aAAS,EAAE;AAAb,eAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,KAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,GAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,SAAK,IAAIK,CAAT,IAAcL,CAAd,EAAe;AAAE,UAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAuB;AAAEN,SAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAW;AAAC;AAAE,GAF9E;;AAGA,SAAOP,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,CALD;;AAOO,SAASO,SAAT,CAAmBR,CAAnB,EAAsBC,CAAtB,EAAyB;AAC5BF,gBAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,WAASQ,EAAT,GAAc;AAAE,SAAKC,WAAL,GAAmBV,CAAnB;AAAuB;;AACvCA,GAAC,CAACW,SAAF,GAAcV,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACU,MAAP,CAAcX,CAAd,CAAb,IAAiCQ,EAAE,CAACE,SAAH,GAAeV,CAAC,CAACU,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACJ;AC3BA;;AAEA;;;;;;;AAKA;AAAA;AAAA;AAoBI;AAEI,SAAKI,IAAL,GAAY,EAAZ;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,aAAL,GAAqB,EAArB;AACH;;AACL;AAAC,CA7BD;ACqCA;;;;;;;AAKA;AAAA;AAAA;AAAA,yBA4GC;;;;;;;;;AApGUC,oBAAP,UAAYC,IAAZ,EAAyB;AAErB,WAAO,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACC,OAAL,CAAa,YAAb,MAA+B,CAAlE;AACH,GAHM;;;;;;;;;AAWAF,qBAAP,UAAaG,GAAb,EAAwB;;AAGpB,QAAMC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,iBAAV,CAAd;AACA,QAAMC,OAAO,GAAuB;AAChCZ,UAAI,EAAE,EAD0B;AAEhCC,YAAM,EAAE,EAFwB;AAGhCC,UAAI,EAAE,EAH0B;AAIhCC,UAAI,EAAE,EAJ0B;AAKhCU,WAAK,EAAE,EALyB;AAMhCT,aAAO,EAAE,EANuB;AAOhCU,cAAQ,EAAE,EAPsB;AAQhCT,mBAAa,EAAE;AARiB,KAApC;;AAWA,SAAK,IAAMU,CAAX,IAAgBL,KAAhB,EACA;;AAEI,UAAMM,IAAI,GAAGN,KAAK,CAACK,CAAD,CAAL,CAASJ,KAAT,CAAe,WAAf,EAA4B,CAA5B,CAAb,CAFJ;;AAKI,UAAMM,aAAa,GAAGP,KAAK,CAACK,CAAD,CAAL,CAASJ,KAAT,CAAe,kCAAf,CAAtB,CALJ;;AAQI,UAAMO,QAAQ,GAAQ,EAAtB;;AAEA,WAAK,IAAMC,GAAX,IAAgBF,aAAhB,EACA;;AAEI,YAAMG,KAAK,GAAGH,aAAa,CAACE,GAAD,CAAb,CAAiBC,KAAjB,CAAuB,GAAvB,CAAd;AACA,YAAMC,GAAG,GAAGD,KAAK,CAAC,CAAD,CAAjB,CAHJ;;AAMI,YAAME,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,CAAjB,CANJ;;AASI,YAAMC,UAAU,GAAGC,UAAU,CAACH,QAAD,CAA7B,CATJ;;AAYI,YAAMI,KAAK,GAAGC,KAAK,CAACH,UAAD,CAAL,GAAoBF,QAApB,GAA+BE,UAA7C;AAEAN,gBAAQ,CAACG,GAAD,CAAR,GAAgBK,KAAhB;AACH,OA1BL;;;AA6BId,aAAO,CAACI,IAAD,CAAP,CAAcY,IAAd,CAAmBV,QAAnB;AACH;;AAED,QAAMW,IAAI,GAAG,IAAIC,cAAJ,EAAb;AAEAlB,WAAO,CAACZ,IAAR,CAAa+B,OAAb,CAAqB,UAAC/B,IAAD,EAAK;AAAK,iBAAI,CAACA,IAAL,CAAU4B,IAAV,CAAe;AAC1CI,YAAI,EAAEhC,IAAI,CAACgC,IAD+B;AAE1CC,YAAI,EAAEC,QAAQ,CAAClC,IAAI,CAACiC,IAAN,EAAY,EAAZ;AAF4B,OAAf;AAG7B,KAHF;AAKArB,WAAO,CAACX,MAAR,CAAe8B,OAAf,CAAuB,UAAC9B,MAAD,EAAO;AAAK,iBAAI,CAACA,MAAL,CAAY2B,IAAZ,CAAiB;AAChDO,kBAAU,EAAED,QAAQ,CAACjC,MAAM,CAACkC,UAAR,EAAoB,EAApB;AAD4B,OAAjB;AAEjC,KAFF;AAIAvB,WAAO,CAACV,IAAR,CAAa6B,OAAb,CAAqB,UAAC7B,IAAD,EAAK;AAAK,iBAAI,CAACA,IAAL,CAAU0B,IAAV,CAAe;AAC1CQ,UAAE,EAAEF,QAAQ,CAAChC,IAAI,CAACkC,EAAN,EAAU,EAAV,CAD8B;AAE1CC,YAAI,EAAEnC,IAAI,CAACmC;AAF+B,OAAf;AAG7B,KAHF;AAKAzB,WAAO,CAACT,IAAR,CAAa4B,OAAb,CAAqB,UAAC5B,IAAD,EAAK;AAAK,iBAAI,CAACA,IAAL,CAAUyB,IAAV,CAAe;AAC1CQ,UAAE,EAAEF,QAAQ,CAAC/B,IAAI,CAACiC,EAAN,EAAU,EAAV,CAD8B;AAE1ClC,YAAI,EAAEgC,QAAQ,CAAC/B,IAAI,CAACD,IAAN,EAAY,EAAZ,CAF4B;AAG1CoC,SAAC,EAAEJ,QAAQ,CAAC/B,IAAI,CAACmC,CAAN,EAAS,EAAT,CAH+B;AAI1CC,SAAC,EAAEL,QAAQ,CAAC/B,IAAI,CAACoC,CAAN,EAAS,EAAT,CAJ+B;AAK1CC,aAAK,EAAEN,QAAQ,CAAC/B,IAAI,CAACqC,KAAN,EAAa,EAAb,CAL2B;AAM1CC,cAAM,EAAEP,QAAQ,CAAC/B,IAAI,CAACsC,MAAN,EAAc,EAAd,CAN0B;AAO1CC,eAAO,EAAER,QAAQ,CAAC/B,IAAI,CAACuC,OAAN,EAAe,EAAf,CAPyB;AAQ1CC,eAAO,EAAET,QAAQ,CAAC/B,IAAI,CAACwC,OAAN,EAAe,EAAf,CARyB;AAS1CC,gBAAQ,EAAEV,QAAQ,CAAC/B,IAAI,CAACyC,QAAN,EAAgB,EAAhB;AATwB,OAAf;AAU7B,KAVF;AAYAhC,WAAO,CAACR,OAAR,CAAgB2B,OAAhB,CAAwB,UAAC3B,OAAD,EAAQ;AAAK,iBAAI,CAACA,OAAL,CAAawB,IAAb,CAAkB;AACnDiB,aAAK,EAAEX,QAAQ,CAAC9B,OAAO,CAACyC,KAAT,EAAgB,EAAhB,CADoC;AAEnDC,cAAM,EAAEZ,QAAQ,CAAC9B,OAAO,CAAC0C,MAAT,EAAiB,EAAjB,CAFmC;AAGnDC,cAAM,EAAEb,QAAQ,CAAC9B,OAAO,CAAC2C,MAAT,EAAiB,EAAjB;AAHmC,OAAlB;AAInC,KAJF;AAMAnC,WAAO,CAACP,aAAR,CAAsB0B,OAAtB,CAA8B,UAACiB,EAAD,EAAG;AAAK,iBAAI,CAAC3C,aAAL,CAAmBuB,IAAnB,CAAwB;AAC1DqB,qBAAa,EAAEf,QAAQ,CAACc,EAAE,CAACC,aAAJ,EAAmB,EAAnB,CADmC;AAE1DC,iBAAS,EAAEF,EAAE,CAACE;AAF4C,OAAxB;AAGpC,KAHF;AAKA,WAAOrB,IAAP;AACH,GAxFM;;AAyFX;AAAC,CA5GD;AC/CA;;;;;;;AAKA;AAAA;AAAA;AAAA,wBA0FC;;;;;;;;;AAlFUsB,mBAAP,UAAY5C,IAAZ,EAAyB;AAErB,WAAOA,IAAI,YAAY6C,WAAhB,IACA7C,IAAI,CAAC8C,oBAAL,CAA0B,MAA1B,EAAkCC,MADlC,IAEA/C,IAAI,CAAC8C,oBAAL,CAA0B,MAA1B,EAAkC,CAAlC,EAAqCE,YAArC,CAAkD,MAAlD,MAA8D,IAFrE;AAGH,GALM;;;;;;;;;AAaAJ,oBAAP,UAAaK,GAAb,EAA6B;AAEzB,QAAMjD,IAAI,GAAG,IAAIuB,cAAJ,EAAb;AACA,QAAM9B,IAAI,GAAGwD,GAAG,CAACH,oBAAJ,CAAyB,MAAzB,CAAb;AACA,QAAMpD,MAAM,GAAGuD,GAAG,CAACH,oBAAJ,CAAyB,QAAzB,CAAf;AACA,QAAMnD,IAAI,GAAGsD,GAAG,CAACH,oBAAJ,CAAyB,MAAzB,CAAb;AACA,QAAMlD,IAAI,GAAGqD,GAAG,CAACH,oBAAJ,CAAyB,MAAzB,CAAb;AACA,QAAMjD,OAAO,GAAGoD,GAAG,CAACH,oBAAJ,CAAyB,SAAzB,CAAhB;AACA,QAAMhD,aAAa,GAAGmD,GAAG,CAACH,oBAAJ,CAAyB,eAAzB,CAAtB;;AAEA,SAAK,IAAItC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,IAAI,CAACsD,MAAzB,EAAiCvC,CAAC,EAAlC,EACA;AACIR,UAAI,CAACP,IAAL,CAAU4B,IAAV,CAAe;AACXI,YAAI,EAAEhC,IAAI,CAACe,CAAD,CAAJ,CAAQwC,YAAR,CAAqB,MAArB,CADK;AAEXtB,YAAI,EAAEC,QAAQ,CAAClC,IAAI,CAACe,CAAD,CAAJ,CAAQwC,YAAR,CAAqB,MAArB,CAAD,EAA+B,EAA/B;AAFH,OAAf;AAIH;;AAED,SAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACqD,MAA3B,EAAmCvC,CAAC,EAApC,EACA;AACIR,UAAI,CAACN,MAAL,CAAY2B,IAAZ,CAAiB;AACbO,kBAAU,EAAED,QAAQ,CAACjC,MAAM,CAACc,CAAD,CAAN,CAAUwC,YAAV,CAAuB,YAAvB,CAAD,EAAuC,EAAvC;AADP,OAAjB;AAGH;;AAED,SAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAACoD,MAAzB,EAAiCvC,CAAC,EAAlC,EACA;AACIR,UAAI,CAACL,IAAL,CAAU0B,IAAV,CAAe;AACXQ,UAAE,EAAEF,QAAQ,CAAChC,IAAI,CAACa,CAAD,CAAJ,CAAQwC,YAAR,CAAqB,IAArB,CAAD,EAA6B,EAA7B,CAAR,IAA4C,CADrC;AAEXlB,YAAI,EAAEnC,IAAI,CAACa,CAAD,CAAJ,CAAQwC,YAAR,CAAqB,MAArB;AAFK,OAAf;AAIH;;AAED,SAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,IAAI,CAACmD,MAAzB,EAAiCvC,CAAC,EAAlC,EACA;AACI,UAAM0C,MAAM,GAAGtD,IAAI,CAACY,CAAD,CAAnB;AAEAR,UAAI,CAACJ,IAAL,CAAUyB,IAAV,CAAe;AACXQ,UAAE,EAAEF,QAAQ,CAACuB,MAAM,CAACF,YAAP,CAAoB,IAApB,CAAD,EAA4B,EAA5B,CADD;AAEXrD,YAAI,EAAEgC,QAAQ,CAACuB,MAAM,CAACF,YAAP,CAAoB,MAApB,CAAD,EAA8B,EAA9B,CAAR,IAA6C,CAFxC;AAGXjB,SAAC,EAAEJ,QAAQ,CAACuB,MAAM,CAACF,YAAP,CAAoB,GAApB,CAAD,EAA2B,EAA3B,CAHA;AAIXhB,SAAC,EAAEL,QAAQ,CAACuB,MAAM,CAACF,YAAP,CAAoB,GAApB,CAAD,EAA2B,EAA3B,CAJA;AAKXf,aAAK,EAAEN,QAAQ,CAACuB,MAAM,CAACF,YAAP,CAAoB,OAApB,CAAD,EAA+B,EAA/B,CALJ;AAMXd,cAAM,EAAEP,QAAQ,CAACuB,MAAM,CAACF,YAAP,CAAoB,QAApB,CAAD,EAAgC,EAAhC,CANL;AAOXb,eAAO,EAAER,QAAQ,CAACuB,MAAM,CAACF,YAAP,CAAoB,SAApB,CAAD,EAAiC,EAAjC,CAPN;AAQXZ,eAAO,EAAET,QAAQ,CAACuB,MAAM,CAACF,YAAP,CAAoB,SAApB,CAAD,EAAiC,EAAjC,CARN;AASXX,gBAAQ,EAAEV,QAAQ,CAACuB,MAAM,CAACF,YAAP,CAAoB,UAApB,CAAD,EAAkC,EAAlC;AATP,OAAf;AAWH;;AAED,SAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,OAAO,CAACkD,MAA5B,EAAoCvC,CAAC,EAArC,EACA;AACIR,UAAI,CAACH,OAAL,CAAawB,IAAb,CAAkB;AACdiB,aAAK,EAAEX,QAAQ,CAAC9B,OAAO,CAACW,CAAD,CAAP,CAAWwC,YAAX,CAAwB,OAAxB,CAAD,EAAmC,EAAnC,CADD;AAEdT,cAAM,EAAEZ,QAAQ,CAAC9B,OAAO,CAACW,CAAD,CAAP,CAAWwC,YAAX,CAAwB,QAAxB,CAAD,EAAoC,EAApC,CAFF;AAGdR,cAAM,EAAEb,QAAQ,CAAC9B,OAAO,CAACW,CAAD,CAAP,CAAWwC,YAAX,CAAwB,QAAxB,CAAD,EAAoC,EAApC;AAHF,OAAlB;AAKH;;AAED,SAAK,IAAIxC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,aAAa,CAACiD,MAAlC,EAA0CvC,CAAC,EAA3C,EACA;AACIR,UAAI,CAACF,aAAL,CAAmBuB,IAAnB,CAAwB;AACpBsB,iBAAS,EAAE7C,aAAa,CAACU,CAAD,CAAb,CAAiBwC,YAAjB,CAA8B,WAA9B,CADS;AAEpBN,qBAAa,EAAEf,QAAQ,CAAC7B,aAAa,CAACU,CAAD,CAAb,CAAiBwC,YAAjB,CAA8B,eAA9B,CAAD,EAAiD,EAAjD;AAFH,OAAxB;AAIH;;AAED,WAAOhD,IAAP;AACH,GApEM;;AAqEX;AAAC,CA1FD;ACJA;;;;;;;AAKA;AAAA;AAAA;AAAA,8BAgCC;;;;;;;;;AAxBUmD,yBAAP,UAAYnD,IAAZ,EAAyB;AAErB,QAAI,OAAOA,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,CAACC,OAAL,CAAa,QAAb,IAAyB,CAAC,CAA1D,EACA;AACI,UAAMgD,GAAG,GAAG,IAAIG,UAAU,CAACC,SAAf,GAA2BC,eAA3B,CAA2CtD,IAA3C,EAAiD,UAAjD,CAAZ;AAEA,aAAO4C,SAAS,CAACW,IAAV,CAAeN,GAAf,CAAP;AACH;;AAED,WAAO,KAAP;AACH,GAVM;;;;;;;;;AAkBAE,0BAAP,UAAaK,MAAb,EAA2B;AAEvB,QAAMP,GAAG,GAAG,IAAIG,UAAU,CAACC,SAAf,GAA2BC,eAA3B,CAA2CE,MAA3C,EAAmD,UAAnD,CAAZ;AAEA,WAAOZ,SAAS,CAACa,KAAV,CAAgBR,GAAhB,CAAP;AACH,GALM;;AAMX;AAAC,CAhCD,G,CCJA;;;AACA,IAAMS,OAAO,GAAG,CACZ3D,UADY,EAEZ6C,SAFY,EAGZO,eAHY,CAAhB;AAMA;;;;;;;AAMA,SAAgBQ,gBAAhB,CAAiC3D,IAAjC,EAA8C;AAE1C,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,OAAO,CAACX,MAA5B,EAAoCvC,CAAC,EAArC,EACA;AACI,QAAIkD,OAAO,CAAClD,CAAD,CAAP,CAAW+C,IAAX,CAAgBvD,IAAhB,CAAJ,EACA;AACI,aAAO0D,OAAO,CAAClD,CAAD,CAAd;AACH;AACJ;;AAED,SAAO,IAAP;AACH,C,CC1BD;;AAEA;;;;;;;;;;AAQA,SAAgBoD,iBAAhB,CACIC,MADJ,EAEIC,OAFJ,EAGIC,KAHJ,EAIIC,UAJJ,EAKIC,KALJ,EAMIC,OANJ,EAMwB;;;;AAMpB,MAAMC,SAAS,GAAiDJ,KAAK,CAACK,IAAtE;;AAEA,MAAI,CAACnF,KAAK,CAACoF,OAAN,CAAcF,SAAd,CAAL,EACA;AACI,WAAOA,SAAP;AACH,GAHD,MAIK,IAAIA,SAAS,CAACpB,MAAV,KAAqB,CAAzB,EACL;AACI,WAAOoB,SAAS,CAAC,CAAD,CAAhB;AACH,GAfmB;;;;AAmBpB,MAAIG,QAAJ,CAnBoB;;;AAuBpB,MAAMC,oBAAoB,GAAIR,KAAK,CAACS,UAAP,GAAqBT,KAAK,CAACU,kBAA3B,GAAgD,CAA7E,CAvBoB;;AA0BpB,MAAMC,OAAO,GAAGX,KAAK,CAACW,OAAN,IAAiB,CAAjC;AAEA,MAAMzC,KAAK,GAAI4B,MAAM,CAAC5B,KAAP,GAAe+B,UAAhB,GAA8BO,oBAA9B,GAAsDG,OAAO,GAAG,CAA9E;AACA,MAAMxC,MAAM,GAAI2B,MAAM,CAAC3B,MAAP,GAAgB8B,UAAjB,GAA+BO,oBAA/B,GAAuDG,OAAO,GAAG,CAAhF,CA7BoB;;AAgCpB,MAAMN,IAAI,GAAGD,SAAS,CAACQ,KAAV,EAAb;AACA,MAAMC,iBAAiB,GAAGb,KAAK,CAACa,iBAAN,CAAwBD,KAAxB,EAA1B,CAjCoB;;AAoCpB,MAAI,CAACC,iBAAiB,CAAC7B,MAAvB,EACA;AACI,QAAM8B,WAAW,GAAGT,IAAI,CAACrB,MAAL,GAAc,CAAlC;;AAEA,SAAK,IAAIvC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqE,WAApB,EAAiC,EAAErE,CAAnC,EACA;AACIoE,uBAAiB,CAACvD,IAAlB,CAAuBb,CAAC,GAAGqE,WAA3B;AACH;AACJ,GA5CmB;;;;AAgDpBT,MAAI,CAACU,OAAL,CAAaX,SAAS,CAAC,CAAD,CAAtB;AACAS,mBAAiB,CAACE,OAAlB,CAA0B,CAA1B;AAEAV,MAAI,CAAC/C,IAAL,CAAU8C,SAAS,CAACA,SAAS,CAACpB,MAAV,GAAmB,CAApB,CAAnB;AACA6B,mBAAiB,CAACvD,IAAlB,CAAuB,CAAvB;;AAEA,MAAI0C,KAAK,CAACgB,gBAAN,KAA2BC,aAAa,CAACC,eAA7C,EACA;;AAEIX,YAAQ,GAAGR,OAAO,CAACoB,oBAAR,CAA6BjD,KAAK,GAAG,CAArC,EAAwCyC,OAAxC,EAAiDzC,KAAK,GAAG,CAAzD,EAA4DC,MAAM,GAAGwC,OAArE,CAAX,CAFJ;;;;;;;AAWI,QAAIS,iBAAiB,GAAG,CAAxB,CAXJ;;AAcI,QAAMC,UAAU,GAAGlB,OAAO,CAACmB,cAAR,CAAuBC,QAAvB,GAAkCvB,KAAK,CAACwB,eAA3D,CAdJ;;AAiBI,QAAMC,kBAAkB,GAAGJ,UAAU,GAAGlD,MAAxC;;AAEA,SAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyD,KAAK,CAAClB,MAA1B,EAAkCvC,CAAC,EAAnC,EACA;AACI,UAAMiF,WAAW,GAAGvB,OAAO,CAACtC,UAAR,GAAqBpB,CAAzC;;AAEA,WAAK,IAAIkF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,IAAI,CAACrB,MAAzB,EAAiC2C,CAAC,EAAlC,EACA;;AAEI,YAAIC,QAAQ,GAAG,CAAf;;AAEA,YAAI,OAAOf,iBAAiB,CAACc,CAAD,CAAxB,KAAgC,QAApC,EACA;AACIC,kBAAQ,GAAGf,iBAAiB,CAACc,CAAD,CAA5B;AACH,SAHD,MAKA;AACIC,kBAAQ,GAAGD,CAAC,GAAGtB,IAAI,CAACrB,MAApB;AACH;;AAED,YAAM6C,UAAU,GAAIH,WAAW,GAAGvD,MAAf,GAA0ByD,QAAQ,GAAGH,kBAAxD,CAbJ;;AAgBI,YAAIK,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASZ,iBAAT,EAA4BS,UAA5B,CAAlB;AAEAC,mBAAW,GAAGC,IAAI,CAACE,GAAL,CAASH,WAAT,EAAsB,CAAtB,CAAd,CAlBJ,CAkB2C;;AACvCvB,gBAAQ,CAAC2B,YAAT,CAAsBJ,WAAtB,EAAmCzB,IAAI,CAACsB,CAAD,CAAvC;AACAP,yBAAiB,GAAGU,WAApB;AACH;AACJ;AACJ,GAhDD,MAkDA;;AAEIvB,YAAQ,GAAGR,OAAO,CAACoB,oBAAR,CAA6BR,OAA7B,EAAsCxC,MAAM,GAAG,CAA/C,EAAkDD,KAAK,GAAGyC,OAA1D,EAAmExC,MAAM,GAAG,CAA5E,CAAX,CAFJ;;;AAMI,QAAMgE,eAAe,GAAG9B,IAAI,CAACrB,MAAL,GAAc,CAAtC;AACA,QAAIoD,gBAAgB,GAAG,CAAvB;;AAEA,SAAK,IAAI3F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4D,IAAI,CAACrB,MAAzB,EAAiCvC,CAAC,EAAlC,EACA;AACI,UAAI4F,IAAI,SAAR;;AAEA,UAAI,OAAOxB,iBAAiB,CAACpE,CAAD,CAAxB,KAAgC,QAApC,EACA;AACI4F,YAAI,GAAGxB,iBAAiB,CAACpE,CAAD,CAAxB;AACH,OAHD,MAKA;AACI4F,YAAI,GAAGD,gBAAgB,GAAGD,eAA1B;AACH;;AACD5B,cAAQ,CAAC2B,YAAT,CAAsBG,IAAtB,EAA4BhC,IAAI,CAAC5D,CAAD,CAAhC;AACA2F,sBAAgB;AACnB;AACJ;;AAED,SAAO7B,QAAP;AACH,C,CCjJD;;AAEA;;;;;;;;;;;;;;;;AAcA,SAAgB+B,SAAhB,CACIxC,MADJ,EAEIC,OAFJ,EAGII,OAHJ,EAIInC,CAJJ,EAKIC,CALJ,EAMIgC,UANJ,EAOID,KAPJ,EAOoB;AAGhB,MAAMnE,IAAI,GAAGsE,OAAO,CAACoC,IAArB;AACA,MAAMjB,cAAc,GAAGnB,OAAO,CAACmB,cAA/B;AAEAvB,SAAO,CAACyC,SAAR,CAAkBxE,CAAlB,EAAqBC,CAArB;AACA8B,SAAO,CAAC0C,KAAR,CAAcxC,UAAd,EAA0BA,UAA1B;AAEA,MAAMyC,EAAE,GAAG1C,KAAK,CAACwB,eAAN,GAAwB,CAAnC;AACA,MAAMmB,EAAE,GAAG,EAAE3C,KAAK,CAACwB,eAAN,GAAwB,CAA1B,CAAX;AAEAzB,SAAO,CAACxC,IAAR,GAAeyC,KAAK,CAAC4C,YAAN,EAAf;AACA7C,SAAO,CAAC8C,SAAR,GAAoB7C,KAAK,CAACwB,eAA1B;AACAzB,SAAO,CAAC+C,YAAR,GAAuB9C,KAAK,CAAC8C,YAA7B;AACA/C,SAAO,CAACgD,QAAR,GAAmB/C,KAAK,CAAC+C,QAAzB;AACAhD,SAAO,CAACiD,UAAR,GAAqBhD,KAAK,CAACgD,UAA3B,CAhBgB;;AAmBhBjD,SAAO,CAACK,SAAR,GAAoBP,iBAAiB,CAACC,MAAD,EAASC,OAAT,EAAkBC,KAAlB,EAAyBC,UAAzB,EAAqC,CAACpE,IAAD,CAArC,EAA6CsE,OAA7C,CAArC;AACAJ,SAAO,CAACkD,WAAR,GAAsBjD,KAAK,CAACkD,MAA5B;;AAEA,MAAIlD,KAAK,CAACS,UAAV,EACA;AACI,QAAM0C,eAAe,GAAGnD,KAAK,CAACmD,eAA9B;AACA,QAAMC,GAAG,GAAGC,OAAO,CAAC,OAAOF,eAAP,KAA2B,QAA3B,GAAsCA,eAAtC,GAAwDG,UAAU,CAACH,eAAD,CAAnE,CAAnB;AACA,QAAMI,cAAc,GAAGvD,KAAK,CAACuD,cAAN,GAAuBtD,UAA9C;AACA,QAAMS,kBAAkB,GAAGV,KAAK,CAACU,kBAAN,GAA2BT,UAAtD;AAEAF,WAAO,CAACyD,WAAR,GAAsB,UAAQJ,GAAG,CAAC,CAAD,CAAH,GAAS,GAAjB,GAAoB,GAApB,GAAwBA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAjC,GAAoC,GAApC,GAAwCA,GAAG,CAAC,CAAD,CAAH,GAAS,GAAjD,GAAoD,GAApD,GAAwDpD,KAAK,CAACyD,eAA9D,GAA6E,GAAnG;AACA1D,WAAO,CAAC2D,UAAR,GAAqBH,cAArB;AACAxD,WAAO,CAAC4D,aAAR,GAAwB5B,IAAI,CAAC6B,GAAL,CAAS5D,KAAK,CAAC6D,eAAf,IAAkCnD,kBAA1D;AACAX,WAAO,CAAC+D,aAAR,GAAwB/B,IAAI,CAACgC,GAAL,CAAS/D,KAAK,CAAC6D,eAAf,IAAkCnD,kBAA1D;AACH,GAXD,MAaA;AACIX,WAAO,CAACyD,WAAR,GAAsB,OAAtB;AACAzD,WAAO,CAAC2D,UAAR,GAAqB,CAArB;AACA3D,WAAO,CAAC4D,aAAR,GAAwB,CAAxB;AACA5D,WAAO,CAAC+D,aAAR,GAAwB,CAAxB;AACH;;AAED,MAAI9D,KAAK,CAACkD,MAAN,IAAgBlD,KAAK,CAACwB,eAA1B,EACA;AACIzB,WAAO,CAACiE,UAAR,CAAmBnI,IAAnB,EAAyB6G,EAAzB,EAA6BC,EAAE,GAAGxC,OAAO,CAACtC,UAAb,GAA0ByD,cAAc,CAAC2C,OAAtE;AACH;;AACD,MAAIjE,KAAK,CAACK,IAAV,EACA;AACIN,WAAO,CAACmE,QAAR,CAAiBrI,IAAjB,EAAuB6G,EAAvB,EAA2BC,EAAE,GAAGxC,OAAO,CAACtC,UAAb,GAA0ByD,cAAc,CAAC2C,OAApE;AACH;;AAEDlE,SAAO,CAACoE,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC,EAnDgB,CAmDuB;;AAEvCpE,SAAO,CAACK,SAAR,GAAoB,kBAApB;AACH;ACjFD;;;;;;AAIA,SAAgBgE,qBAAhB,CAAsC7B,IAAtC,EAAkD;AAE9C,SAAOrH,KAAK,CAACmJ,IAAN,GAAanJ,KAAK,CAACmJ,IAAN,CAAW9B,IAAX,CAAb,GAAgCA,IAAI,CAACzF,KAAL,CAAW,EAAX,CAAvC;AACH;ACLD;;;;;;;;;;;AASA,SAAgBwH,iBAAhB,CAAkC/H,KAAlC,EAAuE;;AAGnE,MAAI,OAAOA,KAAP,KAAiB,QAArB,EACA;AACIA,SAAK,GAAG,CAACA,KAAD,CAAR;AACH,GANkE;;;AASnE,MAAMgI,MAAM,GAAa,EAAzB;;AAEA,OAAK,IAAI9H,CAAC,GAAG,CAAR,EAAWkF,CAAC,GAAGpF,KAAK,CAACyC,MAA1B,EAAkCvC,CAAC,GAAGkF,CAAtC,EAAyClF,CAAC,EAA1C,EACA;AACI,QAAM+H,IAAI,GAAGjI,KAAK,CAACE,CAAD,CAAlB,CADJ;;AAII,QAAIvB,KAAK,CAACoF,OAAN,CAAckE,IAAd,CAAJ,EACA;AACI,UAAIA,IAAI,CAACxF,MAAL,KAAgB,CAApB,EACA;AACI,cAAM,IAAIyF,KAAJ,CAAU,mEAAiED,IAAI,CAACxF,MAAtE,GAA4E,GAAtF,CAAN;AACH;;AAED,UAAM0F,SAAS,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQG,UAAR,CAAmB,CAAnB,CAAlB;AACA,UAAMC,OAAO,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQG,UAAR,CAAmB,CAAnB,CAAhB;;AAEA,UAAIC,OAAO,GAAGF,SAAd,EACA;AACI,cAAM,IAAID,KAAJ,CAAU,wCAAV,CAAN;AACH;;AAED,WAAK,IAAI5H,GAAC,GAAG6H,SAAR,EAAmBG,GAAC,GAAGD,OAA5B,EAAqC/H,GAAC,IAAIgI,GAA1C,EAA6ChI,GAAC,EAA9C,EACA;AACI0H,cAAM,CAACjH,IAAP,CAAYwH,MAAM,CAACC,YAAP,CAAoBlI,GAApB,CAAZ;AACH;AACJ,KAnBD;AAAA,SAsBA;AACI0H,YAAM,CAACjH,IAAP,CAAW0H,KAAX,SAAeZ,qBAAqB,CAACI,IAAD,CAApC;AACH;AACJ;;AAED,MAAID,MAAM,CAACvF,MAAP,KAAkB,CAAtB,EACA;AACI,UAAM,IAAIyF,KAAJ,CAAU,oDAAV,CAAN;AACH;;AAED,SAAOF,MAAP;AACH;AC5DD;;;;;;AAIA,SAAgBU,eAAhB,CAAgCC,GAAhC,EAA2C;AAEvC,SAAOA,GAAG,CAACC,WAAJ,GAAkBD,GAAG,CAACC,WAAJ,CAAgB,CAAhB,CAAlB,GAAuCD,GAAG,CAACP,UAAJ,CAAe,CAAf,CAA9C;AACH;ACiDD;;;;;;;;AAMA;AAAA;AAAA;;;;;;;AAoFI,sBAAY1I,IAAZ,EAAkCmJ,QAAlC,EAAqEC,YAArE,EAA2F;;;AAEhF,YAAI,GAAIpJ,IAAI,CAACP,IAAL,CAAS,CAAT,CAAR;AACA,cAAM,GAAIO,IAAI,CAACN,MAAL,CAAW,CAAX,CAAV;AACA,YAAI,GAAIM,IAAI,CAACL,IAAL,CAAS,CAAT,CAAR;AACA,qBAAa,GAAIK,IAAI,CAACF,aAAL,CAAkB,CAAlB,CAAjB;AACP,QAAMuJ,GAAG,GAAGC,kBAAkB,CAAC3J,IAAI,CAACmC,IAAN,CAA9B;AACA,QAAMyH,YAAY,GAAkB,EAApC;AAEA,SAAKC,aAAL,GAAqBJ,YAArB;AACA,SAAK9H,IAAL,GAAY7B,IAAI,CAACgC,IAAjB;AACA,SAAKC,IAAL,GAAYjC,IAAI,CAACiC,IAAjB;AACA,SAAKE,UAAL,GAAkBlC,MAAM,CAACkC,UAAP,GAAoByH,GAAtC;AACA,SAAK/I,KAAL,GAAa,EAAb;AACA,SAAKiJ,YAAL,GAAoBA,YAApB,CAduF;;;AAkBvF,SAAK,IAAI/I,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACL,IAAL,CAAUoD,MAA9B,EAAsCvC,CAAC,EAAvC,EACA;AACU,eAAeR,IAAI,CAACL,IAAL,CAAUa,CAAV,CAAf;AAAA,UAAEqB,EAAE,QAAJ;AAAA,UAAMC,IAAI,UAAV;AAENyH,kBAAY,CAAC1H,EAAD,CAAZ,GAAmBsH,QAAQ,YAAYlK,KAApB,GACbkK,QAAQ,CAAC3I,CAAD,CADK,GACC2I,QAAQ,CAACrH,IAAD,CAD5B,CAHJ;;AAOI,UAAI,cAAa,SAAb,iBAAa,WAAb,GAAa,MAAb,gBAAa,CAAEa,SAAf,KAA4B7C,aAAa,CAAC6C,SAAd,KAA4B,MAA5D,EACA;AACI4G,oBAAY,CAAC1H,EAAD,CAAZ,CAAiB4H,WAAjB,CAA6BC,SAA7B,GAAyCC,WAAW,CAACC,sBAArD;AACH;AACJ,KA9BsF;;;AAiCvF,SAAK,IAAIpJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACJ,IAAL,CAAUmD,MAA9B,EAAsCvC,CAAC,EAAvC,EACA;AACU,eAAeR,IAAI,CAACJ,IAAL,CAAUY,CAAV,CAAf;AAAA,UAAEqB,EAAE,QAAJ;AAAA,UAAMgI,MAAI,UAAV;AACF,eAAsD7J,IAAI,CAACJ,IAAL,CAAUY,CAAV,CAAtD;AAAA,UAAEuB,CAAC,OAAH;AAAA,UAAKC,CAAC,OAAN;AAAA,UAAQC,KAAK,WAAb;AAAA,UAAeC,MAAM,YAArB;AAAA,UAAuBC,OAAO,aAA9B;AAAA,UAAgCC,OAAO,aAAvC;AAAA,UAAyCC,QAAQ,cAAjD;AAEJN,OAAC,IAAIsH,GAAL;AACArH,OAAC,IAAIqH,GAAL;AACApH,WAAK,IAAIoH,GAAT;AACAnH,YAAM,IAAImH,GAAV;AACAlH,aAAO,IAAIkH,GAAX;AACAjH,aAAO,IAAIiH,GAAX;AACAhH,cAAQ,IAAIgH,GAAZ;AAEA,UAAMS,IAAI,GAAG,IAAIC,SAAJ,CACThI,CAAC,GAAIwH,YAAY,CAACM,MAAD,CAAZ,CAAmBG,KAAnB,CAAyBjI,CAAzB,GAA6BsH,GADzB,EAETrH,CAAC,GAAIuH,YAAY,CAACM,MAAD,CAAZ,CAAmBG,KAAnB,CAAyBhI,CAAzB,GAA6BqH,GAFzB,EAGTpH,KAHS,EAITC,MAJS,CAAb;AAOA,WAAK5B,KAAL,CAAWuB,EAAX,IAAiB;AACboI,eAAO,EAAE9H,OADI;AAEb+H,eAAO,EAAE9H,OAFI;AAGb+H,gBAAQ,EAAE9H,QAHG;AAIbxC,eAAO,EAAE,EAJI;AAKbuK,eAAO,EAAE,IAAIC,OAAJ,CACLd,YAAY,CAACM,MAAD,CAAZ,CAAmBJ,WADd,EAELK,IAFK,CALI;AASbnK,YAAI;AATS,OAAjB;AAWH,KAhEsF;;;AAmEvF,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACH,OAAL,CAAakD,MAAjC,EAAyCvC,CAAC,EAA1C,EACA;AACQ,eAA4BR,IAAI,CAACH,OAAL,CAAaW,CAAb,CAA5B;AAAA,UAAE8B,KAAK,WAAP;AAAA,UAASC,MAAM,YAAf;AAAA,UAAiBC,MAAM,YAAvB;AAEJF,WAAK,IAAI+G,GAAT;AACA9G,YAAM,IAAI8G,GAAV;AACA7G,YAAM,IAAI6G,GAAV;;AAEA,UAAI,KAAK/I,KAAL,CAAWiC,MAAX,CAAJ,EACA;AACI,aAAKjC,KAAL,CAAWiC,MAAX,EAAmB1C,OAAnB,CAA2ByC,KAA3B,IAAoCE,MAApC;AACH;AACJ,KA/EsF;;;AAkFvF,SAAK8H,kBAAL,GAA0BxK,aAAa,SAAb,iBAAa,WAAb,GAAa,MAAb,gBAAa,CAAE4C,aAAzC;AACA,SAAK6H,iBAAL,GAAsB,YAAGzK,aAAa,SAAb,iBAAa,WAAb,GAAa,MAAb,gBAAa,CAAE6C,SAAlB,MAA2B,IAA3B,IAA2B6H,aAA3B,GAA2B,MAA3B,GAA2BA,GAAEC,WAAF,EAA3B,MAAwC,IAAxC,IAAwCC,aAAxC,GAAwCA,EAAxC,GAA8C,MAApE;AACH;;;;AAGMC,iCAAP;AAEI,SAAK,IAAM9I,EAAX,IAAiB,KAAKvB,KAAtB,EACA;AACI,WAAKA,KAAL,CAAWuB,EAAX,EAAeuI,OAAf,CAAuBQ,OAAvB;AACA,WAAKtK,KAAL,CAAWuB,EAAX,EAAeuI,OAAf,GAAyB,IAAzB;AACH;;AAED,SAAK,IAAMvI,EAAX,IAAiB,KAAK0H,YAAtB,EACA;AACI,UAAI,KAAKC,aAAT,EACA;AACI,aAAKD,YAAL,CAAkB1H,EAAlB,EAAsB+I,OAAtB,CAA8B,IAA9B;AACH;;AAED,WAAKrB,YAAL,CAAkB1H,EAAlB,IAAwB,IAAxB;AACH,KAhBL;;;AAmBK,SAAavB,KAAb,GAAqB,IAArB;AACA,SAAaiJ,YAAb,GAA4B,IAA5B;AACJ,GArBM;;;;;;;;;;;;;;;AAmCOoB,uBAAd,UACI3K,IADJ,EAEImJ,QAFJ,EAGIC,YAHJ,EAG0B;AAGtB,QAAIyB,QAAJ;;AAEA,QAAI7K,IAAI,YAAYuB,cAApB,EACA;AACIsJ,cAAQ,GAAG7K,IAAX;AACH,KAHD,MAKA;AACI,UAAM8K,MAAM,GAAGnH,gBAAgB,CAAC3D,IAAD,CAA/B;;AAEA,UAAI,CAAC8K,MAAL,EACA;AACI,cAAM,IAAItC,KAAJ,CAAU,oCAAV,CAAN;AACH;;AAEDqC,cAAQ,GAAGC,MAAM,CAACrH,KAAP,CAAazD,IAAb,CAAX;AACH,KAnBqB;;;AAsBtB,QAAImJ,QAAQ,YAAYkB,OAAxB,EACA;AACIlB,cAAQ,GAAG,CAACA,QAAD,CAAX;AACH;;AAED,QAAM7H,IAAI,GAAG,IAAIqJ,UAAJ,CAAeE,QAAf,EAAyB1B,QAAzB,EAAmCC,YAAnC,CAAb;AAEAuB,cAAU,CAACI,SAAX,CAAqBzJ,IAAI,CAACA,IAA1B,IAAkCA,IAAlC;AAEA,WAAOA,IAAP;AACH,GAnCa;;;;;;;;AA0CAqJ,yBAAd,UAAwBlK,IAAxB,EAAoC;AAEhC,QAAMa,IAAI,GAAGqJ,UAAU,CAACI,SAAX,CAAqBtK,IAArB,CAAb;;AAEA,QAAI,CAACa,IAAL,EACA;AACI,YAAM,IAAIkH,KAAJ,CAAU,0BAAwB/H,IAAxB,GAA4B,GAAtC,CAAN;AACH;;AAEDa,QAAI,CAACsJ,OAAL;AACA,WAAOD,UAAU,CAACI,SAAX,CAAqBtK,IAArB,CAAP;AACH,GAXa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDAkK,oBAAd,UAAmBlK,IAAnB,EAAiCuK,SAAjC,EAA8EC,OAA9E,EAA0G;AAEtG,QAAI,CAACxK,IAAL,EACA;AACI,YAAM,IAAI+H,KAAJ,CAAU,2CAAV,CAAN;AACH;;AAEK,aAKgB1J,MAAM,CAACoM,MAAP,CAClB,EADkB,EACdP,UAAU,CAACQ,cADG,EACaF,OADb,CALhB;AAAA,QACF3K,KAAK,WADH;AAAA,QAEFoE,OAAO,aAFL;AAAA,QAGFV,UAAU,gBAHR;AAAA,QAIFoH,YAAY,kBAJV;AAAA,QAKFC,aAAa,mBALX;;AAQN,QAAMC,SAAS,GAAGjD,iBAAiB,CAAC/H,KAAD,CAAnC;AACA,QAAMyD,KAAK,GAAGiH,SAAS,YAAYO,SAArB,GAAiCP,SAAjC,GAA6C,IAAIO,SAAJ,CAAcP,SAAd,CAA3D;AACA,QAAMpE,SAAS,GAAGwE,YAAlB;AACA,QAAMP,QAAQ,GAAG,IAAItJ,cAAJ,EAAjB;AAEAsJ,YAAQ,CAACpL,IAAT,CAAc,CAAd,IAAmB;AACfgC,UAAI,EAAEsC,KAAK,CAACyH,UADG;AAEf9J,UAAI,EAAEqC,KAAK,CAACuB;AAFG,KAAnB;AAIAuF,YAAQ,CAACnL,MAAT,CAAgB,CAAhB,IAAqB;AACjBkC,gBAAU,EAAEmC,KAAK,CAACuB;AADD,KAArB;AAIA,QAAImG,SAAS,GAAG,CAAhB;AACA,QAAIC,SAAS,GAAG,CAAhB;AAEA,QAAI7H,MAAJ;AACA,QAAIC,OAAJ;AACA,QAAI2F,WAAJ;AACA,QAAIkC,aAAa,GAAG,CAApB;AAEA,QAAMxC,QAAQ,GAAc,EAA5B;;AAEA,SAAK,IAAI3I,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8K,SAAS,CAACvI,MAA9B,EAAsCvC,CAAC,EAAvC,EACA;AACI,UAAI,CAACqD,MAAL,EACA;AACIA,cAAM,GAAG+H,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAT;AACAhI,cAAM,CAAC5B,KAAP,GAAemJ,YAAf;AACAvH,cAAM,CAAC3B,MAAP,GAAgBmJ,aAAhB;AAEAvH,eAAO,GAAGD,MAAM,CAACiI,UAAP,CAAkB,IAAlB,CAAV;AACArC,mBAAW,GAAG,IAAIsC,WAAJ,CAAgBlI,MAAhB,EAAwB;AAAEG,oBAAU;AAAZ,SAAxB,CAAd;AAGAmF,gBAAQ,CAAC9H,IAAT,CAAc,IAAIgJ,OAAJ,CAAYZ,WAAZ,CAAd;AAEAoB,gBAAQ,CAAClL,IAAT,CAAc0B,IAAd,CAAmB;AACfQ,YAAE,EAAEsH,QAAQ,CAACpG,MAAT,GAAkB,CADP;AAEfjB,cAAI,EAAE;AAFS,SAAnB;AAIH,OAjBL;;;AAoBI,UAAMoC,OAAO,GAAG8H,WAAW,CAACC,WAAZ,CAAwBX,SAAS,CAAC9K,CAAD,CAAjC,EAAsCuD,KAAtC,EAA6C,KAA7C,EAAoDF,MAApD,CAAhB;AACA,UAAM5B,KAAK,GAAGiC,OAAO,CAACjC,KAAtB;AACA,UAAMC,MAAM,GAAG4D,IAAI,CAACoG,IAAL,CAAUhI,OAAO,CAAChC,MAAlB,CAAf,CAtBJ;;AAyBI,UAAMiK,iBAAiB,GAAGrG,IAAI,CAACoG,IAAL,CAAU,CAACnI,KAAK,CAACqI,SAAN,KAAoB,QAApB,GAA+B,CAA/B,GAAmC,CAApC,IAAyCnK,KAAnD,CAA1B,CAzBJ;;AA4BI,UAAIyJ,SAAS,IAAIL,aAAa,GAAInJ,MAAM,GAAG8B,UAA3C,EACA;AACI,YAAI0H,SAAS,KAAK,CAAlB,EACA;;AAEI,gBAAM,IAAIlD,KAAJ,CAAU,gCAA8B6C,aAA9B,GAA2C,QAA3C,IACV,mBAAiBtH,KAAK,CAACuB,QAAvB,GAA+B,UADrB,CAAV,CAAN;AAEH;;AAED,UAAE9E,CAAF,CARJ;;AAWIqD,cAAM,GAAG,IAAT;AACAC,eAAO,GAAG,IAAV;AACA2F,mBAAW,GAAG,IAAd;AACAiC,iBAAS,GAAG,CAAZ;AACAD,iBAAS,GAAG,CAAZ;AACAE,qBAAa,GAAG,CAAhB;AAEA;AACH;;AAEDA,mBAAa,GAAG7F,IAAI,CAACC,GAAL,CAAS7D,MAAM,GAAGgC,OAAO,CAACmB,cAAR,CAAuB2C,OAAzC,EAAkD2D,aAAlD,CAAhB,CAlDJ;;AAqDI,UAAKQ,iBAAiB,GAAGnI,UAArB,GAAmCyH,SAAnC,IAAgD7E,SAApD,EACA;AACI,UAAEpG,CAAF;AACAkL,iBAAS,IAAIC,aAAa,GAAG3H,UAA7B;AACA0H,iBAAS,GAAG5F,IAAI,CAACoG,IAAL,CAAUR,SAAV,CAAZ;AACAD,iBAAS,GAAG,CAAZ;AACAE,qBAAa,GAAG,CAAhB;AAEA;AACH;;AAEDtF,eAAS,CAACxC,MAAD,EAASC,OAAT,EAAkBI,OAAlB,EAA2BuH,SAA3B,EAAsCC,SAAtC,EAAiD1H,UAAjD,EAA6DD,KAA7D,CAAT,CAhEJ;;AAmEI,UAAMlC,EAAE,GAAGmH,eAAe,CAAC9E,OAAO,CAACoC,IAAT,CAA1B,CAnEJ;;AAsEIuE,cAAQ,CAACjL,IAAT,CAAcyB,IAAd,CAAmB;AACfQ,UAAE,IADa;AAEflC,YAAI,EAAEwJ,QAAQ,CAACpG,MAAT,GAAkB,CAFT;AAGfhB,SAAC,EAAE0J,SAAS,GAAGzH,UAHA;AAIfhC,SAAC,EAAE0J,SAAS,GAAG1H,UAJA;AAKf/B,aAAK,EAAEkK,iBALQ;AAMfjK,cAAM,QANS;AAOfC,eAAO,EAAE,CAPM;AAQfC,eAAO,EAAE,CARM;AASfC,gBAAQ,EAAEyD,IAAI,CAACoG,IAAL,CAAUjK,KAAK,IACd8B,KAAK,CAACS,UAAN,GAAmBT,KAAK,CAACU,kBAAzB,GAA8C,CADhC,CAAL,IAETV,KAAK,CAACkD,MAAN,GAAelD,KAAK,CAACwB,eAArB,GAAuC,CAF9B,CAAV;AATK,OAAnB;AAcAkG,eAAS,IAAI,CAACU,iBAAiB,GAAI,IAAIzH,OAA1B,IAAsCV,UAAnD;AACAyH,eAAS,GAAG3F,IAAI,CAACoG,IAAL,CAAUT,SAAV,CAAZ;AACH,KA7HqG;;;;AAiItG,SAAK,IAAIjL,CAAC,GAAG,CAAR,EAAW6L,GAAG,GAAGf,SAAS,CAACvI,MAAhC,EAAwCvC,CAAC,GAAG6L,GAA5C,EAAiD7L,CAAC,EAAlD,EACA;AACI,UAAM8B,KAAK,GAAGgJ,SAAS,CAAC9K,CAAD,CAAvB;;AAEA,WAAK,IAAIkF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2G,GAApB,EAAyB3G,CAAC,EAA1B,EACA;AACI,YAAMnD,MAAM,GAAG+I,SAAS,CAAC5F,CAAD,CAAxB;AACA,YAAM4G,EAAE,GAAGxI,OAAO,CAACmI,WAAR,CAAoB3J,KAApB,EAA2BL,KAAtC;AACA,YAAMsK,EAAE,GAAGzI,OAAO,CAACmI,WAAR,CAAoB1J,MAApB,EAA4BN,KAAvC;AACA,YAAMuK,KAAK,GAAG1I,OAAO,CAACmI,WAAR,CAAoB3J,KAAK,GAAGC,MAA5B,EAAoCN,KAAlD;AACA,YAAMO,MAAM,GAAGgK,KAAK,IAAIF,EAAE,GAAGC,EAAT,CAApB;;AAEA,YAAI/J,MAAJ,EACA;AACIqI,kBAAQ,CAAChL,OAAT,CAAiBwB,IAAjB,CAAsB;AAClBiB,iBAAK,EAAE0G,eAAe,CAAC1G,KAAD,CADJ;AAElBC,kBAAM,EAAEyG,eAAe,CAACzG,MAAD,CAFL;AAGlBC,kBAAM;AAHY,WAAtB;AAKH;AACJ;AACJ;;AAED,QAAMlB,IAAI,GAAG,IAAIqJ,UAAJ,CAAeE,QAAf,EAAyB1B,QAAzB,EAAmC,IAAnC,CAAb,CAxJsG;;AA2JtG,QAAIwB,UAAU,CAACI,SAAX,CAAqBtK,IAArB,MAA+BgM,SAAnC,EACA;AACI9B,gBAAU,CAAC+B,SAAX,CAAqBjM,IAArB;AACH;;AAEDkK,cAAU,CAACI,SAAX,CAAqBtK,IAArB,IAA6Ba,IAA7B;AAEA,WAAOA,IAAP;AACH,GAnKa;;;;;;;;;;AAvSSqJ,qBAAQ,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,EAAa,CAAC,GAAD,EAAM,GAAN,CAAb,EAAyB,GAAzB,CAAR;;;;;;;;;AASAA,uBAAU,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,CAAV;;;;;;;AAOAA,4BAAe,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,EAAa,CAAC,GAAD,EAAM,GAAN,CAAb,EAAyB,CAAC,GAAD,EAAM,GAAN,CAAzB,EAAqC,GAArC,CAAf;;;;;;;;AAQAA,qBAAQ,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,CAAR;;;;;;;;;;;AAWAA,8BAAqC;AACxD3G,cAAU,EAAE,CAD4C;AAExDoH,gBAAY,EAAE,GAF0C;AAGxDC,iBAAa,EAAE,GAHyC;AAIxD3G,WAAO,EAAE,CAJ+C;AAKxDpE,SAAK,EAAEqK,UAAU,CAACgC;AALsC,GAArC;;;AASAhC,yBAA8B,EAA9B;AA+Z3B;AApdA;;;ieC3BA;;AACA,IAAMiC,+BAA+B,GAAmB,EAAxD;AACA,IAAMC,4BAA4B,GAAmB,EAArD;AACA,IAAMC,kBAAkB,GAAqB,EAA7C;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AAAA;AAAA;AAAgC1N;;;;;;;;;;;;;;;AAuH5B,sBAAYkH,IAAZ,EAA0BvC,KAA1B,EAA+D;AAArC;AAAAA;AAAqC;;AAA/D,gBAEIgJ,qBAAO,IAFX;;;;;;;;AAxBUC,kBAAQ,QAAR,CAwBqD;;AAKrD,aAA+DlO,MAAM,CAACoM,MAAP,CACjE,EADiE,EAC7D+B,UAAU,CAACC,aADkD,EACnCnJ,KADmC,CAA/D;AAAA,QAAEoJ,KAAK,WAAP;AAAA,QAASC,IAAI,UAAb;AAAA,QAAeC,QAAQ,cAAvB;AAAA,QAAyBC,aAAa,mBAAtC;AAAA,QAAwCC,QAAQ,cAAhD;AAAA,QAAkDjI,QAAQ,cAA1D;;AAGN,QAAI,CAACqF,UAAU,CAACI,SAAX,CAAqBwC,QAArB,CAAL,EACA;AACI,YAAM,IAAI/E,KAAJ,CAAU,0BAAuB+E,QAAvB,GAA+B,IAAzC,CAAN;AACH;;AAEDP,SAAI,CAACQ,oBAAL,GAA4B,EAA5B;AACAR,SAAI,CAACS,UAAL,GAAkB,CAAlB;AACAT,SAAI,CAACU,WAAL,GAAmB,CAAnB;AACAV,SAAI,CAACW,MAAL,GAAcR,KAAd;AACAH,SAAI,CAACY,KAAL,GAAaR,IAAb;AACAJ,SAAI,CAACa,SAAL,GAAiBN,QAAjB;AACAP,SAAI,CAACc,SAAL,GAAiBxI,QAAQ,IAAIqF,UAAU,CAACI,SAAX,CAAqBwC,QAArB,EAA+B7L,IAA5D;AACAsL,SAAI,CAACe,KAAL,GAAazH,IAAb;AACA0G,SAAI,CAACgB,SAAL,GAAiBX,QAAjB;AACAL,SAAI,CAACiB,cAAL,GAAsB,CAAtB;AACAjB,SAAI,CAACkB,cAAL,GAAsBZ,aAAtB;AACAN,SAAI,CAACmB,OAAL,GAAe,IAAIC,eAAJ,CAAoB;AAAcpB,WAAI,CAACqB,KAAL,GAAa,IAAb;AAAoB,KAAtD,EAAwDrB,KAAxD,EAA8D,CAA9D,EAAiE,CAAjE,CAAf;AACAA,SAAI,CAACsB,YAAL,GAAoBC,QAAQ,CAACC,YAA7B;AACAxB,SAAI,CAACqB,KAAL,GAAa,IAAb;AACArB,SAAI,CAACyB,aAAL,GAAqB,EAArB;;AACH;;;;;;;AAMMxB,oCAAP;;;AAEI,QAAMjN,IAAI,GAAG2K,UAAU,CAACI,SAAX,CAAqB,KAAK8C,SAA1B,CAAb;AACA,QAAMrH,KAAK,GAAG,KAAKsH,SAAL,GAAiB9N,IAAI,CAAC0B,IAApC;AACA,QAAMgN,GAAG,GAAG,IAAIC,KAAJ,EAAZ;AACA,QAAMrO,KAAK,GAAqB,EAAhC;AACA,QAAMsO,UAAU,GAAG,EAAnB;AACA,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMvI,IAAI,GAAG,KAAKyH,KAAL,CAAW/M,OAAX,CAAmB,cAAnB,EAAmC,IAAnC,KAA4C,GAAzD;AACA,QAAM8N,UAAU,GAAG3G,qBAAqB,CAAC7B,IAAD,CAAxC;AACA,QAAM+G,QAAQ,GAAG,KAAKW,SAAL,GAAiBhO,IAAI,CAAC0B,IAAtB,GAA6B,KAAKoM,SAAnD;AACA,QAAMiB,gBAAgB,GAAG/O,IAAI,CAACuK,iBAAL,KAA2B,MAA3B,GACnBqC,+BADmB,GACeC,4BADxC;AAGA,QAAImC,YAAY,GAAG,IAAnB;AACA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,YAAY,GAAG,CAAnB;AACA,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,YAAY,GAAG,CAAC,CAApB;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,UAAU,GAAG,CAAjB;;AAEA,SAAK,IAAIhP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsO,UAAU,CAAC/L,MAA/B,EAAuCvC,CAAC,EAAxC,EACA;AACI,UAAMZ,IAAI,GAAGkP,UAAU,CAACtO,CAAD,CAAvB;AACA,UAAMiP,QAAQ,GAAGzG,eAAe,CAACpJ,IAAD,CAAhC;;AAEA,UAAK,QAAD,CAAW2D,IAAX,CAAgB3D,IAAhB,CAAJ,EACA;AACIwP,oBAAY,GAAG5O,CAAf;AACA6O,sBAAc,GAAGJ,aAAjB;AACAO,kBAAU;AACb;;AAED,UAAI5P,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,IAA9B,EACA;AACIgP,kBAAU,CAACvN,IAAX,CAAgB4N,aAAhB;AACAJ,kBAAU,CAACxN,IAAX,CAAgB,CAAC,CAAjB;AACA6N,oBAAY,GAAGpJ,IAAI,CAACC,GAAL,CAASmJ,YAAT,EAAuBD,aAAvB,CAAf;AACA,UAAEE,IAAF;AACA,UAAEG,aAAF;AAEAZ,WAAG,CAAC3M,CAAJ,GAAQ,CAAR;AACA2M,WAAG,CAAC1M,CAAJ,IAAShC,IAAI,CAAC4B,UAAd;AACAoN,oBAAY,GAAG,IAAf;AACAQ,kBAAU,GAAG,CAAb;AACA;AACH;;AAED,UAAME,QAAQ,GAAG1P,IAAI,CAACM,KAAL,CAAWmP,QAAX,CAAjB;;AAEA,UAAI,CAACC,QAAL,EACA;AACI;AACH;;AAED,UAAIV,YAAY,IAAIU,QAAQ,CAAC7P,OAAT,CAAiBmP,YAAjB,CAApB,EACA;AACIN,WAAG,CAAC3M,CAAJ,IAAS2N,QAAQ,CAAC7P,OAAT,CAAiBmP,YAAjB,CAAT;AACH;;AAED,UAAMW,cAAc,GAAmB7C,kBAAkB,CAAC8C,GAAnB,MAA4B;AAC/DxF,eAAO,EAAEC,OAAO,CAACwF,KAD8C;AAE/DV,YAAI,EAAE,CAFyD;AAG/DM,gBAAQ,EAAE,CAHqD;AAI/DK,kBAAU,EAAE,CAJmD;AAK/DC,gBAAQ,EAAE,IAAIpB,KAAJ;AALqD,OAAnE;AAQAgB,oBAAc,CAACvF,OAAf,GAAyBsF,QAAQ,CAACtF,OAAlC;AACAuF,oBAAc,CAACR,IAAf,GAAsBA,IAAtB;AACAQ,oBAAc,CAACF,QAAf,GAA0BA,QAA1B;AACAE,oBAAc,CAACI,QAAf,CAAwBhO,CAAxB,GAA4B2M,GAAG,CAAC3M,CAAJ,GAAQ2N,QAAQ,CAACzF,OAAjB,GAA4B,KAAKiE,cAAL,GAAsB,CAA9E;AACAyB,oBAAc,CAACI,QAAf,CAAwB/N,CAAxB,GAA4B0M,GAAG,CAAC1M,CAAJ,GAAQ0N,QAAQ,CAACxF,OAA7C;AACAyF,oBAAc,CAACG,UAAf,GAA4BN,UAA5B;AAEAlP,WAAK,CAACe,IAAN,CAAWsO,cAAX;AAEAV,mBAAa,GAAGU,cAAc,CAACI,QAAf,CAAwBhO,CAAxB,GAA4B+D,IAAI,CAACC,GAAL,CAAS2J,QAAQ,CAACvF,QAAlB,EAA4BuF,QAAQ,CAACtF,OAAT,CAAiB4F,IAAjB,CAAsB/N,KAAlD,CAA5C;AACAyM,SAAG,CAAC3M,CAAJ,IAAS2N,QAAQ,CAACvF,QAAT,GAAoB,KAAK+D,cAAlC;AACAqB,mBAAa,GAAGzJ,IAAI,CAACC,GAAL,CAASwJ,aAAT,EAAyBG,QAAQ,CAACxF,OAAT,GAAmBwF,QAAQ,CAACtF,OAAT,CAAiBlI,MAA7D,CAAhB;AACA8M,kBAAY,GAAGS,QAAf;;AAEA,UAAIL,YAAY,KAAK,CAAC,CAAlB,IAAuB/B,QAAQ,GAAG,CAAlC,IAAuCqB,GAAG,CAAC3M,CAAJ,GAAQsL,QAAnD,EACA;AACI,UAAEiC,aAAF;AACAW,mBAAW,CAAC3P,KAAD,EAAQ,IAAI8O,YAAJ,GAAmBE,aAA3B,EAA0C,IAAI9O,CAAJ,GAAQ4O,YAAlD,CAAX;AACA5O,SAAC,GAAG4O,YAAJ;AACAA,oBAAY,GAAG,CAAC,CAAhB;AAEAR,kBAAU,CAACvN,IAAX,CAAgBgO,cAAhB;AACAR,kBAAU,CAACxN,IAAX,CAAgBf,KAAK,CAACyC,MAAN,GAAe,CAAf,GAAmBzC,KAAK,CAACA,KAAK,CAACyC,MAAN,GAAe,CAAhB,CAAL,CAAwB+M,UAA3C,GAAwD,CAAxE;AACAZ,oBAAY,GAAGpJ,IAAI,CAACC,GAAL,CAASmJ,YAAT,EAAuBG,cAAvB,CAAf;AACAF,YAAI;AAEJT,WAAG,CAAC3M,CAAJ,GAAQ,CAAR;AACA2M,WAAG,CAAC1M,CAAJ,IAAShC,IAAI,CAAC4B,UAAd;AACAoN,oBAAY,GAAG,IAAf;AACAQ,kBAAU,GAAG,CAAb;AACH;AACJ;;AAED,QAAMU,QAAQ,GAAGpB,UAAU,CAACA,UAAU,CAAC/L,MAAX,GAAoB,CAArB,CAA3B;;AAEA,QAAImN,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,IAAtC,EACA;AACI,UAAK,QAAD,CAAW3M,IAAX,CAAgB2M,QAAhB,CAAJ,EACA;AACIjB,qBAAa,GAAGI,cAAhB;AACH;;AAEDT,gBAAU,CAACvN,IAAX,CAAgB4N,aAAhB;AACAC,kBAAY,GAAGpJ,IAAI,CAACC,GAAL,CAASmJ,YAAT,EAAuBD,aAAvB,CAAf;AACAJ,gBAAU,CAACxN,IAAX,CAAgB,CAAC,CAAjB;AACH;;AAED,QAAM8O,gBAAgB,GAAG,EAAzB;;AAEA,SAAK,IAAI3P,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI2O,IAArB,EAA2B3O,CAAC,EAA5B,EACA;AACI,UAAI4P,WAAW,GAAG,CAAlB;;AAEA,UAAI,KAAKzC,MAAL,KAAgB,OAApB,EACA;AACIyC,mBAAW,GAAGlB,YAAY,GAAGN,UAAU,CAACpO,CAAD,CAAvC;AACH,OAHD,MAIK,IAAI,KAAKmN,MAAL,KAAgB,QAApB,EACL;AACIyC,mBAAW,GAAG,CAAClB,YAAY,GAAGN,UAAU,CAACpO,CAAD,CAA1B,IAAiC,CAA/C;AACH,OAHI,MAIA,IAAI,KAAKmN,MAAL,KAAgB,SAApB,EACL;AACIyC,mBAAW,GAAGvB,UAAU,CAACrO,CAAD,CAAV,GAAgB,CAAhB,GAAoB,CAApB,GAAwB,CAAC0O,YAAY,GAAGN,UAAU,CAACpO,CAAD,CAA1B,IAAiCqO,UAAU,CAACrO,CAAD,CAAjF;AACH;;AAED2P,sBAAgB,CAAC9O,IAAjB,CAAsB+O,WAAtB;AACH;;AAED,QAAMC,QAAQ,GAAG/P,KAAK,CAACyC,MAAvB;AAEA,QAAMuN,aAAa,GAAiC,EAApD;AAEA,QAAMC,gBAAgB,GAAmB,EAAzC;AAEA,QAAMC,mBAAmB,GAAG,KAAKhD,oBAAjC;;AAEA,SAAK,IAAIhN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgQ,mBAAmB,CAACzN,MAAxC,EAAgDvC,CAAC,EAAjD,EACA;AACIuO,sBAAgB,CAAC1N,IAAjB,CAAsBmP,mBAAmB,CAAChQ,CAAD,CAAzC;AACH;;AAED,SAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6P,QAApB,EAA8B7P,CAAC,EAA/B,EACA;AACI,UAAM4J,OAAO,GAAG9J,KAAK,CAACE,CAAD,CAAL,CAAS4J,OAAzB;AACA,UAAMqG,cAAc,GAAGrG,OAAO,CAACX,WAAR,CAAoBiH,GAA3C;;AAEA,UAAI,CAACJ,aAAa,CAACG,cAAD,CAAlB,EACA;AACI,YAAIE,YAAY,GAAG5B,gBAAgB,CAACa,GAAjB,EAAnB;;AAEA,YAAI,CAACe,YAAL,EACA;AACI,cAAMC,QAAQ,GAAG,IAAIC,YAAJ,EAAjB;AACA,cAAIC,QAAQ,SAAZ;AACA,cAAIC,aAAa,SAAjB;;AAEA,cAAI/Q,IAAI,CAACuK,iBAAL,KAA2B,MAA/B,EACA;AACIuG,oBAAQ,GAAG,IAAIE,YAAJ,CAAiB3G,OAAO,CAACwF,KAAzB,CAAX;AACAkB,yBAAa,GAAGE,WAAW,CAACC,MAA5B;AACH,WAJD,MAMA;AACIJ,oBAAQ,GAAG,IAAIE,YAAJ,CAAiB3G,OAAO,CAACwF,KAAzB,EACP;AAAEsB,qBAAO,EAAEC,OAAO,CAAChJ,IAAR,CAAaiJ,QAAb,EAAuBC,QAAvB,CAAX;AAA6CC,sBAAQ,EAAE;AAAEC,uBAAO,EAAE;AAAX;AAAvD,aADO,CAAX;AAEAT,yBAAa,GAAGE,WAAW,CAACQ,UAA5B;AACH;;AAED,cAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASf,QAAT,EAAmBE,QAAnB,CAAb;AAEAY,cAAI,CAACE,SAAL,GAAiBb,aAAjB;AAEAJ,sBAAY,GAAG;AACXkB,iBAAK,EAAE,CADI;AAEXC,sBAAU,EAAE,CAFD;AAGXC,uBAAW,EAAE,CAHF;AAIXC,oBAAQ,EAAE,CAJC;AAKXxF,iBAAK,EAAE,CALI;AAMXkF,gBAAI,MANO;AAOXO,oBAAQ,EAAE,IAPC;AAQXC,eAAG,EAAE,IARM;AASXC,mBAAO,EAAE;AATE,WAAf;AAWH,SApCL;;;AAuCIxB,oBAAY,CAACkB,KAAb,GAAqB,CAArB;AACAlB,oBAAY,CAACmB,UAAb,GAA0B,CAA1B;AACAnB,oBAAY,CAACoB,WAAb,GAA2B,CAA3B;AACApB,oBAAY,CAACqB,QAAb,GAAwB,CAAxB;AACArB,oBAAY,CAACnE,KAAb,GAAqB,CAArB,CA3CJ;;AA8CY,yBAAa,GAAK,KAAIiC,aAAtB;AAERA,qBAAa,CAACgC,cAAD,CAAb,GAAgChC,aAAa,CAACgC,cAAD,CAAb,IAAiC,IAAIpG,OAAJ,CAAYD,OAAO,CAACX,WAApB,CAAjE;AACAkH,oBAAY,CAACe,IAAb,CAAkBtH,OAAlB,GAA4BqE,aAAa,CAACgC,cAAD,CAAzC;AAEAE,oBAAY,CAACe,IAAb,CAAkBtE,IAAlB,GAAyB,KAAKQ,KAA9B;AAEA2C,wBAAgB,CAAClP,IAAjB,CAAsBsP,YAAtB;AAEAL,qBAAa,CAACG,cAAD,CAAb,GAAgCE,YAAhC;AACH;;AAEDL,mBAAa,CAACG,cAAD,CAAb,CAA8BjE,KAA9B;AACH,KA1NL;;;;AA8NI,SAAK,IAAIhM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgQ,mBAAmB,CAACzN,MAAxC,EAAgDvC,CAAC,EAAjD,EACA;AACI,UAAI+P,gBAAgB,CAACtQ,OAAjB,CAAyBuQ,mBAAmB,CAAChQ,CAAD,CAA5C,MAAqD,CAAC,CAA1D,EACA;AACI,aAAK4R,WAAL,CAAiB5B,mBAAmB,CAAChQ,CAAD,CAAnB,CAAuBkR,IAAxC;AACH;AACJ,KApOL;;;;AAwOI,SAAK,IAAIlR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+P,gBAAgB,CAACxN,MAArC,EAA6CvC,CAAC,EAA9C,EACA;AACI,UAAI+P,gBAAgB,CAAC/P,CAAD,CAAhB,CAAoBkR,IAApB,CAAyBW,MAAzB,KAAoC,IAAxC,EACA;AACI,aAAKC,QAAL,CAAc/B,gBAAgB,CAAC/P,CAAD,CAAhB,CAAoBkR,IAAlC;AACH;AACJ,KA9OL;;;AAiPI,SAAKlE,oBAAL,GAA4B+C,gBAA5B;;AAEA,SAAK,IAAM/P,CAAX,IAAgB8P,aAAhB,EACA;AACI,UAAMK,YAAY,GAAGL,aAAa,CAAC9P,CAAD,CAAlC;AACA,UAAMgM,KAAK,GAAGmE,YAAY,CAACnE,KAA3B,CAFJ;;;AAMI,UAAI,EAAE,mBAAY,CAAC2F,OAAb,MAAoB,IAApB,IAAoB3H,aAApB,GAAoB,MAApB,GAAoBA,GAAEzH,MAAtB,IAA+B,IAAIyJ,KAArC,KAA+CmE,YAAY,CAACsB,QAAb,CAAsBlP,MAAtB,GAA+B4O,IAAI,CAACY,cAAL,GAAsB,CAAxG,EACA;AACI5B,oBAAY,CAACsB,QAAb,GAAwB,IAAIO,YAAJ,CAAiB,IAAI,CAAJ,GAAQhG,KAAzB,CAAxB;AACAmE,oBAAY,CAACuB,GAAb,GAAmB,IAAIM,YAAJ,CAAiB,IAAI,CAAJ,GAAQhG,KAAzB,CAAnB;AACAmE,oBAAY,CAACwB,OAAb,GAAuB,IAAIM,WAAJ,CAAgB,IAAIjG,KAApB,CAAvB;AACH,OALD,MAOA;AACI,YAAMkG,OAAK,GAAG/B,YAAY,CAACnE,KAA3B;AACA,YAAMyF,QAAQ,GAAGtB,YAAY,CAACsB,QAA9B,CAFJ;;AAKI,aAAK,IAAIrR,GAAC,GAAG8R,OAAK,GAAG,CAAR,GAAY,CAAzB,EAA4B9R,GAAC,GAAGqR,QAAQ,CAAClP,MAAzC,EAAiDnC,GAAC,EAAlD,EACA;AACIqR,kBAAQ,CAACrR,GAAD,CAAR,GAAc,CAAd;AACH;AACJ,OAtBL;;;;AA0BI+P,kBAAY,CAACe,IAAb,CAAkBhQ,IAAlB,GAAyB,IAAI8K,KAA7B;AACH;;AAED,SAAK,IAAIhM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6P,QAApB,EAA8B7P,CAAC,EAA/B,EACA;AACI,UAAMZ,IAAI,GAAGU,KAAK,CAACE,CAAD,CAAlB;AACA,UAAImS,MAAM,GAAG/S,IAAI,CAACmQ,QAAL,CAAchO,CAAd,GAAmBoO,gBAAgB,CAACvQ,IAAI,CAACuP,IAAN,CAAhB,IAA+B,KAAKxB,MAAL,KAAgB,SAAhB,GAA4B/N,IAAI,CAACkQ,UAAjC,GAA8C,CAA7E,CAAhC;;AAEA,UAAI,KAAKxB,YAAT,EACA;AACIqE,cAAM,GAAG7M,IAAI,CAAC8M,KAAL,CAAWD,MAAX,CAAT;AACH;;AAED,UAAME,IAAI,GAAGF,MAAM,GAAGnM,KAAtB;AACA,UAAMsM,IAAI,GAAGlT,IAAI,CAACmQ,QAAL,CAAc/N,CAAd,GAAkBwE,KAA/B;AACA,UAAM4D,OAAO,GAAGxK,IAAI,CAACwK,OAArB;AAEA,UAAM2I,QAAQ,GAAGzC,aAAa,CAAClG,OAAO,CAACX,WAAR,CAAoBiH,GAArB,CAA9B;AAEA,UAAMsC,YAAY,GAAG5I,OAAO,CAACJ,KAA7B;AACA,UAAMiJ,UAAU,GAAG7I,OAAO,CAAC8I,IAA3B;AAEA,UAAMrB,KAAK,GAAGkB,QAAQ,CAAClB,KAAT,EAAd;AAEAkB,cAAQ,CAACZ,OAAT,CAAkBN,KAAK,GAAG,CAAT,GAAc,CAA/B,IAAoC,IAAKA,KAAK,GAAG,CAAjD;AACAkB,cAAQ,CAACZ,OAAT,CAAkBN,KAAK,GAAG,CAAT,GAAc,CAA/B,IAAoC,IAAKA,KAAK,GAAG,CAAjD;AACAkB,cAAQ,CAACZ,OAAT,CAAkBN,KAAK,GAAG,CAAT,GAAc,CAA/B,IAAoC,IAAKA,KAAK,GAAG,CAAjD;AACAkB,cAAQ,CAACZ,OAAT,CAAkBN,KAAK,GAAG,CAAT,GAAc,CAA/B,IAAoC,IAAKA,KAAK,GAAG,CAAjD;AACAkB,cAAQ,CAACZ,OAAT,CAAkBN,KAAK,GAAG,CAAT,GAAc,CAA/B,IAAoC,IAAKA,KAAK,GAAG,CAAjD;AACAkB,cAAQ,CAACZ,OAAT,CAAkBN,KAAK,GAAG,CAAT,GAAc,CAA/B,IAAoC,IAAKA,KAAK,GAAG,CAAjD;AAEAkB,cAAQ,CAACd,QAAT,CAAmBJ,KAAK,GAAG,CAAT,GAAc,CAAhC,IAAqCgB,IAArC;AACAE,cAAQ,CAACd,QAAT,CAAmBJ,KAAK,GAAG,CAAT,GAAc,CAAhC,IAAqCiB,IAArC;AAEAC,cAAQ,CAACd,QAAT,CAAmBJ,KAAK,GAAG,CAAT,GAAc,CAAhC,IAAqCgB,IAAI,GAAIG,YAAY,CAAC/Q,KAAb,GAAqBuE,KAAlE;AACAuM,cAAQ,CAACd,QAAT,CAAmBJ,KAAK,GAAG,CAAT,GAAc,CAAhC,IAAqCiB,IAArC;AAEAC,cAAQ,CAACd,QAAT,CAAmBJ,KAAK,GAAG,CAAT,GAAc,CAAhC,IAAqCgB,IAAI,GAAIG,YAAY,CAAC/Q,KAAb,GAAqBuE,KAAlE;AACAuM,cAAQ,CAACd,QAAT,CAAmBJ,KAAK,GAAG,CAAT,GAAc,CAAhC,IAAqCiB,IAAI,GAAIE,YAAY,CAAC9Q,MAAb,GAAsBsE,KAAnE;AAEAuM,cAAQ,CAACd,QAAT,CAAmBJ,KAAK,GAAG,CAAT,GAAc,CAAhC,IAAqCgB,IAArC;AACAE,cAAQ,CAACd,QAAT,CAAmBJ,KAAK,GAAG,CAAT,GAAc,CAAhC,IAAqCiB,IAAI,GAAIE,YAAY,CAAC9Q,MAAb,GAAsBsE,KAAnE;AAEAuM,cAAQ,CAACb,GAAT,CAAcL,KAAK,GAAG,CAAT,GAAc,CAA3B,IAAgCoB,UAAU,CAACE,EAA3C;AACAJ,cAAQ,CAACb,GAAT,CAAcL,KAAK,GAAG,CAAT,GAAc,CAA3B,IAAgCoB,UAAU,CAACG,EAA3C;AAEAL,cAAQ,CAACb,GAAT,CAAcL,KAAK,GAAG,CAAT,GAAc,CAA3B,IAAgCoB,UAAU,CAACI,EAA3C;AACAN,cAAQ,CAACb,GAAT,CAAcL,KAAK,GAAG,CAAT,GAAc,CAA3B,IAAgCoB,UAAU,CAACK,EAA3C;AAEAP,cAAQ,CAACb,GAAT,CAAcL,KAAK,GAAG,CAAT,GAAc,CAA3B,IAAgCoB,UAAU,CAACM,EAA3C;AACAR,cAAQ,CAACb,GAAT,CAAcL,KAAK,GAAG,CAAT,GAAc,CAA3B,IAAgCoB,UAAU,CAACO,EAA3C;AAEAT,cAAQ,CAACb,GAAT,CAAcL,KAAK,GAAG,CAAT,GAAc,CAA3B,IAAgCoB,UAAU,CAACQ,EAA3C;AACAV,cAAQ,CAACb,GAAT,CAAcL,KAAK,GAAG,CAAT,GAAc,CAA3B,IAAgCoB,UAAU,CAACS,EAA3C;AACH;;AAED,SAAKjG,UAAL,GAAkByB,YAAY,GAAG1I,KAAjC;AACA,SAAKkH,WAAL,GAAmB,CAACgB,GAAG,CAAC1M,CAAJ,GAAQhC,IAAI,CAAC4B,UAAd,IAA4B4E,KAA/C;;AAEA,SAAK,IAAMhG,CAAX,IAAgB8P,aAAhB,EACA;AACI,UAAMK,YAAY,GAAGL,aAAa,CAAC9P,CAAD,CAAlC,CADJ;;AAII,UAAI,KAAKmT,MAAL,CAAY5R,CAAZ,KAAkB,CAAlB,IAAuB,KAAK4R,MAAL,CAAY3R,CAAZ,KAAkB,CAA7C,EACA;AACI,YAAI+P,WAAW,GAAG,CAAlB;AAEA,YAAM6B,aAAa,GAAG,KAAKnG,UAAL,GAAkB,KAAKkG,MAAL,CAAY5R,CAApD;AACA,YAAM8R,aAAa,GAAG,KAAKnG,WAAL,GAAmB,KAAKiG,MAAL,CAAY3R,CAArD;;AAEA,aAAK,IAAI8R,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGnD,YAAY,CAACnE,KAAjC,EAAwCsH,GAAC,EAAzC,EACA;AACInD,sBAAY,CAACsB,QAAb,CAAsBF,WAAW,EAAjC,KAAwC6B,aAAxC;AACAjD,sBAAY,CAACsB,QAAb,CAAsBF,WAAW,EAAjC,KAAwC8B,aAAxC;AAEAlD,sBAAY,CAACsB,QAAb,CAAsBF,WAAW,EAAjC,KAAwC6B,aAAxC;AACAjD,sBAAY,CAACsB,QAAb,CAAsBF,WAAW,EAAjC,KAAwC8B,aAAxC;AAEAlD,sBAAY,CAACsB,QAAb,CAAsBF,WAAW,EAAjC,KAAwC6B,aAAxC;AACAjD,sBAAY,CAACsB,QAAb,CAAsBF,WAAW,EAAjC,KAAwC8B,aAAxC;AAEAlD,sBAAY,CAACsB,QAAb,CAAsBF,WAAW,EAAjC,KAAwC6B,aAAxC;AACAjD,sBAAY,CAACsB,QAAb,CAAsBF,WAAW,EAAjC,KAAwC8B,aAAxC;AACH;AACJ;;AAED,WAAK5F,cAAL,GAAsBsB,aAAa,GAAG/I,KAAtC;AAEA,UAAMuN,YAAY,GAAGpD,YAAY,CAACe,IAAb,CAAkBd,QAAlB,CAA2BoD,SAA3B,CAAqC,iBAArC,CAArB;AACA,UAAMC,aAAa,GAAGtD,YAAY,CAACe,IAAb,CAAkBd,QAAlB,CAA2BoD,SAA3B,CAAqC,eAArC,CAAtB;AACA,UAAME,WAAW,GAAGvD,YAAY,CAACe,IAAb,CAAkBd,QAAlB,CAA2BuD,QAA3B,EAApB;AAEAJ,kBAAY,CAAC/T,IAAb,GAAoB2Q,YAAY,CAACsB,QAAjC;AACAgC,mBAAa,CAACjU,IAAd,GAAqB2Q,YAAY,CAACuB,GAAlC;AACAgC,iBAAW,CAAClU,IAAZ,GAAmB2Q,YAAY,CAACwB,OAAhC;AAEA4B,kBAAY,CAACK,MAAb;AACAH,mBAAa,CAACG,MAAd;AACAF,iBAAW,CAACE,MAAZ;AACH;;AAED,SAAK,IAAI5T,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACyC,MAA1B,EAAkCvC,CAAC,EAAnC,EACA;AACIsM,wBAAkB,CAACzL,IAAnB,CAAwBf,KAAK,CAACE,CAAD,CAA7B;AACH;AACJ,GAxXM;;AA0XPyM;AAEI,SAAKoH,QAAL;AACA,SAAKC,wBAAL;AACH,GAJD;;AAMArH,2CAAQsH,QAAR,EAA0B;;AAGhB,aAAkD5J,UAAU,CAACI,SAAX,CAAqB,KAAK8C,SAA1B,CAAlD;AAAA,QAAEvD,kBAAkB,wBAApB;AAAA,QAAsBC,iBAAiB,uBAAvC;AAAA,QAAyC7I,IAAI,UAA7C;;AAEN,QAAI6I,iBAAiB,KAAK,MAA1B,EACA;;AAEU,eAAiB,KAAKiK,cAAtB;AAAA,UAAEC,CAAC,OAAH;AAAA,UAAK5V,CAAC,OAAN;AAAA,UAAQ6V,CAAC,OAAT;AAAA,UAAW9V,CAAC,OAAZ;AAEN,UAAM+V,EAAE,GAAG7O,IAAI,CAAC8O,IAAL,CAAWH,CAAC,GAAGA,CAAL,GAAW5V,CAAC,GAAGA,CAAzB,CAAX;AACA,UAAMgW,EAAE,GAAG/O,IAAI,CAAC8O,IAAL,CAAWF,CAAC,GAAGA,CAAL,GAAW9V,CAAC,GAAGA,CAAzB,CAAX;AACA,UAAMkW,UAAU,GAAG,CAAChP,IAAI,CAACiP,GAAL,CAASJ,EAAT,IAAe7O,IAAI,CAACiP,GAAL,CAASF,EAAT,CAAhB,IAAgC,CAAnD;AAEA,UAAMG,SAAS,GAAG,KAAKlH,SAAL,GAAiBpM,IAAnC;;AAEA,WAAmB,sBAAK8L,oBAAxB,EAAmByH,cAAnB,EAAmBA,IAAnB,EACA;AADK,YAAMvD,IAAI,SAAV;AAEDA,YAAI,CAACA,IAAL,CAAUwD,MAAV,CAAiB3D,QAAjB,CAA0BC,OAA1B,GAAoCsD,UAAU,GAAGxK,kBAAb,GAAkC0K,SAAlC,GAA8CT,QAAQ,CAACvQ,UAA3F;AACH;AACJ;;AAED+I,qBAAMoI,OAAN,CAAaC,IAAb,CAAa,IAAb,EAAcb,QAAd;AACH,GAvBD;;;;;;;;AA8BOtH,wCAAP;AAEI,SAAKoH,QAAL;AAEA,WAAOtH,iBAAMsI,cAAN,CAAoBD,IAApB,CAAoB,IAApB,CAAP;AACH,GALM;;;;;;;;AAYGnI,kCAAV;AAEI,QAAI,KAAKoB,KAAT,EACA;AACI,WAAKiH,UAAL;AACA,WAAKjH,KAAL,GAAa,KAAb;AACH;AACJ,GAPS;;AAcVvP,wBAAWmO,oBAAX,EAAW,MAAX,EAAe;;;;;;SAAf;AAEI,aAAO,KAAKW,KAAZ;AACH,KAHc;SAKf,aAAgBzM,KAAhB,EAA6B;AAEzB,UAAI,KAAKyM,KAAL,KAAezM,KAAnB;AAA0B;AAAO;;AAEjC,WAAKyM,KAAL,GAAazM,KAAb;;AAEA,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKgN,oBAAL,CAA0BzK,MAA9C,EAAsDvC,CAAC,EAAvD,EACA;AACI,aAAKgN,oBAAL,CAA0BhN,CAA1B,EAA6BkR,IAA7B,CAAkCtE,IAAlC,GAAyCjM,KAAzC;AACH;AACJ,KAfc;qBAAA;;AAAA,GAAf;AAuBArC,wBAAWmO,oBAAX,EAAW,OAAX,EAAgB;;;;;;;SAAhB;AAEI,aAAO,KAAKU,MAAZ;AACH,KAHe;SAKhB,aAAiBxM,KAAjB,EAAsC;AAElC,UAAI,KAAKwM,MAAL,KAAgBxM,KAApB,EACA;AACI,aAAKwM,MAAL,GAAcxM,KAAd;AACA,aAAKkN,KAAL,GAAa,IAAb;AACH;AACJ,KAZe;qBAAA;;AAAA,GAAhB;AAeAvP,wBAAWmO,oBAAX,EAAW,UAAX,EAAmB;;SAAnB;AAEI,aAAO,KAAKY,SAAZ;AACH,KAHkB;SAKnB,aAAoB1M,KAApB,EAAiC;AAE7B,UAAI,CAACwJ,UAAU,CAACI,SAAX,CAAqB5J,KAArB,CAAL,EACA;AACI,cAAM,IAAIqH,KAAJ,CAAU,0BAAuBrH,KAAvB,GAA4B,IAAtC,CAAN;AACH;;AAED,UAAI,KAAK0M,SAAL,KAAmB1M,KAAvB,EACA;AACI,aAAK0M,SAAL,GAAiB1M,KAAjB;AACA,aAAKkN,KAAL,GAAa,IAAb;AACH;AACJ,KAjBkB;qBAAA;;AAAA,GAAnB;AAoBAvP,wBAAWmO,oBAAX,EAAW,UAAX,EAAmB;;SAAnB;AAEI,aAAO,KAAKa,SAAZ;AACH,KAHkB;SAKnB,aAAoB3M,KAApB,EAAiC;AAE7B,UAAI,KAAK2M,SAAL,KAAmB3M,KAAvB,EACA;AACI,aAAK2M,SAAL,GAAiB3M,KAAjB;AACA,aAAKkN,KAAL,GAAa,IAAb;AACH;AACJ,KAZkB;qBAAA;;AAAA,GAAnB;AAuBAvP,wBAAWmO,oBAAX,EAAW,QAAX,EAAiB;;;;;;;;;;SAAjB;AAEI,aAAO,KAAKkB,OAAZ;AACH,KAHgB;SAKjB,aAAkBhN,KAAlB,EAAwC;AAEpC,UAAI,OAAOA,KAAP,KAAiB,QAArB,EACA;AACI,aAAKgN,OAAL,CAAaoH,GAAb,CAAiBpU,KAAjB;AACH,OAHD,MAKA;AACI,aAAKgN,OAAL,CAAaqH,QAAb,CAAsBrU,KAAtB;AACH;AACJ,KAfgB;qBAAA;;AAAA,GAAjB;AAkBArC,wBAAWmO,oBAAX,EAAW,MAAX,EAAe;;SAAf;AAEI,aAAO,KAAKc,KAAZ;AACH,KAHc;SAKf,aAAgBzH,IAAhB,EAA4B;AAExBA,UAAI,GAAGuC,MAAM,CAACvC,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKmG,SAA1B,GAAsC,EAAtC,GAA2CnG,IAA5C,CAAb;;AAEA,UAAI,KAAKyH,KAAL,KAAezH,IAAnB,EACA;AACI;AACH;;AACD,WAAKyH,KAAL,GAAazH,IAAb;AACA,WAAK+H,KAAL,GAAa,IAAb;AACH,KAfc;qBAAA;;AAAA,GAAf;AAsBAvP,wBAAWmO,oBAAX,EAAW,UAAX,EAAmB;;;;;;SAAnB;AAEI,aAAO,KAAKe,SAAZ;AACH,KAHkB;SAKnB,aAAoB7M,KAApB,EAAiC;AAE7B,UAAI,KAAK6M,SAAL,KAAmB7M,KAAvB,EACA;AACI;AACH;;AACD,WAAK6M,SAAL,GAAiB7M,KAAjB;AACA,WAAKkN,KAAL,GAAa,IAAb;AACH,KAbkB;qBAAA;;AAAA,GAAnB;AAqBAvP,wBAAWmO,oBAAX,EAAW,eAAX,EAAwB;;;;;;;SAAxB;AAEI,WAAKoH,QAAL;AAEA,aAAO,KAAKpG,cAAZ;AACH,KALuB;qBAAA;;AAAA,GAAxB;AAaAnP,wBAAWmO,oBAAX,EAAW,WAAX,EAAoB;;;;;;;SAApB;AAEI,WAAKoH,QAAL;AAEA,aAAO,KAAK5G,UAAZ;AACH,KALmB;qBAAA;;AAAA,GAApB;AAQA3O,wBAAWmO,oBAAX,EAAW,eAAX,EAAwB;;SAAxB;AAEI,aAAO,KAAKiB,cAAZ;AACH,KAHuB;SAKxB,aAAyB/M,KAAzB,EAAsC;AAElC,UAAI,KAAK+M,cAAL,KAAwB/M,KAA5B,EACA;AACI,aAAK+M,cAAL,GAAsB/M,KAAtB;AACA,aAAKkN,KAAL,GAAa,IAAb;AACH;AACJ,KAZuB;qBAAA;;AAAA,GAAxB;AAsBAvP,wBAAWmO,oBAAX,EAAW,aAAX,EAAsB;;;;;;;;;SAAtB;AAEI,aAAO,KAAKqB,YAAZ;AACH,KAHqB;SAKtB,aAAuBnN,KAAvB,EAAqC;AAEjC,UAAIA,KAAK,KAAK,KAAKmN,YAAnB,EACA;AACI,aAAKA,YAAL,GAAoBnN,KAApB;AACA,aAAKkN,KAAL,GAAa,IAAb;AACH;AACJ,KAZqB;qBAAA;;AAAA,GAAtB;AAoBAvP,wBAAWmO,oBAAX,EAAW,YAAX,EAAqB;;;;;;;SAArB;AAEI,WAAKoH,QAAL;AAEA,aAAO,KAAK3G,WAAZ;AACH,KALoB;qBAAA;;AAAA,GAArB;;AAOAT,2CAAQhC,OAAR,EAA2C;AAE/B,qBAAa,GAAK,KAAIwD,aAAtB;;AAER,SAAK,IAAM5M,EAAX,IAAiB4M,aAAjB,EACA;AACI,UAAMrE,OAAO,GAAGqE,aAAa,CAAC5M,EAAD,CAA7B;AAEAuI,aAAO,CAACQ,OAAR;AACA,aAAO6D,aAAa,CAAC5M,EAAD,CAApB;AACH;;AAED,SAAK4M,aAAL,GAAqB,IAArB;;AAEA1B,qBAAMnC,OAAN,CAAawK,IAAb,CAAa,IAAb,EAAcnK,OAAd;AACH,GAfD;;AAnyBcgC,6BAA2C;AACrDE,SAAK,EAAE,MAD8C;AAErDC,QAAI,EAAE,QAF+C;AAGrDC,YAAQ,EAAE,CAH2C;AAIrDC,iBAAa,EAAE;AAJsC,GAA3C;AAmzBlB;AAAC,CArzBD,CAAgCmI,SAAhC;AC/DA;;;;;;;;AAMA;AAAA;AAAA;AAAA,+BA2JC;;;;;;;;AApJiBC,yBAAd;AAEIC,kBAAc,CAACC,mBAAf,CAAmC,KAAnC,EAA0CD,cAAc,CAACE,iBAAf,CAAiCC,IAA3E;AACH,GAHa;;;;;;;;;;AAYPJ,yBAAP,UAAyBK,QAAzB,EAAmDC,IAAnD,EAAiF;AAE7E,QAAMlL,MAAM,GAAGnH,gBAAgB,CAACoS,QAAQ,CAAC/V,IAAV,CAA/B,CAF6E;;AAK7E,QAAI,CAAC8K,MAAL,EACA;AACIkL,UAAI;AAEJ;AACH;;AAED,QAAMC,OAAO,GAAGP,gBAAgB,CAACQ,UAAjB,CAA4B,IAA5B,EAAkCH,QAAlC,CAAhB;AACA,QAAM/V,IAAI,GAAG8K,MAAM,CAACrH,KAAP,CAAasS,QAAQ,CAAC/V,IAAtB,CAAb;AACA,QAAMmJ,QAAQ,GAAkB,EAAhC,CAd6E;;;AAkB7E,QAAMgN,SAAS,GAAG,SAAZA,SAAY,CAACxW,IAAD,EAAqB;AAEnCwJ,cAAQ,CAACxJ,IAAI,CAACyW,QAAL,CAAcC,QAAf,CAAR,GAAmC1W,IAAI,CAACyK,OAAxC;;AAEA,UAAItL,MAAM,CAACwX,IAAP,CAAYnN,QAAZ,EAAsBpG,MAAtB,KAAiC/C,IAAI,CAACL,IAAL,CAAUoD,MAA/C,EACA;AACIgT,gBAAQ,CAACQ,UAAT,GAAsB5L,UAAU,CAAC6L,OAAX,CAAmBxW,IAAnB,EAAyBmJ,QAAzB,EAAmC,IAAnC,CAAtB;AACA6M,YAAI;AACP;AACJ,KATD;;AAWA,SAAK,IAAIxV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACL,IAAL,CAAUoD,MAA9B,EAAsC,EAAEvC,CAAxC,EACA;AACI,UAAM6V,QAAQ,GAAGrW,IAAI,CAACL,IAAL,CAAUa,CAAV,EAAasB,IAA9B;AACA,UAAM2U,GAAG,GAAGR,OAAO,GAAGI,QAAtB;AACA,UAAIK,MAAM,GAAG,KAAb,CAHJ;;;AAOI,WAAK,IAAMjW,IAAX,IAAmB,KAAKkW,SAAxB,EACA;AACI,YAAMC,cAAc,GAAmB,KAAKD,SAAL,CAAelW,IAAf,CAAvC;;AAEA,YAAImW,cAAc,CAACH,GAAf,KAAuBA,GAA3B,EACA;AACIG,wBAAc,CAACR,QAAf,CAAwBC,QAAxB,GAAmCA,QAAnC;;AACA,cAAIO,cAAc,CAACxM,OAAnB,EACA;AACI+L,qBAAS,CAACS,cAAD,CAAT;AACH,WAHD,MAKA;AACIA,0BAAc,CAACC,iBAAf,CAAiCC,GAAjC,CAAqCX,SAArC;AACH;;AACDO,gBAAM,GAAG,IAAT;AACA;AACH;AACJ,OAzBL;;;;AA6BI,UAAI,CAACA,MAAL,EACA;;AAEI,YAAMzL,OAAO,GAAG;AACZ8L,qBAAW,EAAEhB,QAAQ,CAACgB,WADV;AAEZC,kBAAQ,EAAErB,cAAc,CAACsB,SAAf,CAAyBC,KAFvB;AAGZd,kBAAQ,EAAEtX,MAAM,CAACoM,MAAP,CACN;AAAEmL,oBAAQ;AAAV,WADM,EAENN,QAAQ,CAACK,QAAT,CAAkBe,aAFZ,CAHE;AAOZC,wBAAc,EAAErB;AAPJ,SAAhB;AAUA,aAAKe,GAAL,CAASL,GAAT,EAAcxL,OAAd,EAAuBkL,SAAvB;AACH;AACJ;AACJ,GA3EM;;;;AA8EQT,gCAAf,UAA0B2B,MAA1B,EAA0CtB,QAA1C,EAAkE;AAE9D,QAAIuB,MAAM,GAAG,CAACvB,QAAQ,CAACwB,SAAV,GAAsB7B,gBAAgB,CAAC8B,OAAjB,CAAyBzB,QAAQ,CAACU,GAAlC,CAAtB,GAA+D,EAA5E;;AAEA,QAAIV,QAAQ,CAACwB,SAAb,EACA;AACI,UAAID,MAAM,KAAK,GAAf,EACA;AACIA,cAAM,GAAG,EAAT;AACH;;AAED,UAAID,MAAM,CAACpB,OAAP,IAAkBqB,MAAtB,EACA;;AAEI,YAAID,MAAM,CAACpB,OAAP,CAAewB,MAAf,CAAsBJ,MAAM,CAACpB,OAAP,CAAelT,MAAf,GAAwB,CAA9C,MAAqD,GAAzD,EACA;AACIuU,gBAAM,IAAI,GAAV;AACH;AACJ;AACJ,KAnB6D;;;AAsB9DA,UAAM,GAAGA,MAAM,CAACtW,OAAP,CAAeqW,MAAM,CAACpB,OAAtB,EAA+B,EAA/B,CAAT,CAtB8D;;AAyB9D,QAAIqB,MAAM,IAAIA,MAAM,CAACG,MAAP,CAAcH,MAAM,CAACvU,MAAP,GAAgB,CAA9B,MAAqC,GAAnD,EACA;AACIuU,YAAM,IAAI,GAAV;AACH;;AAED,WAAOA,MAAP;AACH,GA/Bc;;;;;;;;AAsCA5B,6BAAf,UAAuBe,GAAvB,EAAkC;AAE9B,QAAMiB,GAAG,GAAGjB,GAAG,CACVzV,OADO,CACC,KADD,EACQ,GADR,EACY;AADZ,KAEPA,OAFO,CAEC,KAFD,EAEQ,EAFR,EAEW;AAFX,KAGPA,OAHO,CAGC,WAHD,EAGc,EAHd,CAAZ,CAF8B,CAKA;;;AAG9B,QAAI0W,GAAG,KAAKjB,GAAZ,EACA;AACI,aAAO,GAAP;AACH,KAHD;AAAA,SAKK,IAAIiB,GAAG,KAAK,EAAZ,EACL;AACI,aAAO,GAAP;AACH;;AAED,WAAOA,GAAP;AACH,GAnBc;;AAoBnB;AAAC,CA3JD","names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","info","common","page","char","kerning","distanceField","TextFormat","data","indexOf","txt","items","match","rawData","chars","kernings","i","name","attributeList","itemData","i_1","split","key","strValue","replace","floatValue","parseFloat","value","isNaN","push","font","BitmapFontData","forEach","face","size","parseInt","lineHeight","id","file","x","y","width","height","xoffset","yoffset","xadvance","first","second","amount","df","distanceRange","fieldType","XMLFormat","XMLDocument","getElementsByTagName","length","getAttribute","xml","letter","XMLStringFormat","globalThis","DOMParser","parseFromString","test","xmlTxt","parse","formats","autoDetectFormat","generateFillStyle","canvas","context","style","resolution","lines","metrics","fillStyle","fill","isArray","gradient","dropShadowCorrection","dropShadow","dropShadowDistance","padding","slice","fillGradientStops","lengthPlus1","unshift","fillGradientType","TEXT_GRADIENT","LINEAR_VERTICAL","createLinearGradient","lastIterationStop","textHeight","fontProperties","fontSize","strokeThickness","gradStopLineHeight","thisLineTop","j","lineStop","globalStop","clampedStop","Math","max","min","addColorStop","totalIterations","currentIteration","stop","drawGlyph","text","translate","scale","tx","ty","toFontString","lineWidth","textBaseline","lineJoin","miterLimit","strokeStyle","stroke","dropShadowColor","rgb","hex2rgb","string2hex","dropShadowBlur","shadowColor","dropShadowAlpha","shadowBlur","shadowOffsetX","cos","dropShadowAngle","shadowOffsetY","sin","strokeText","descent","fillText","setTransform","splitTextToCharacters","from","resolveCharacters","result","item","Error","startCode","charCodeAt","endCode","j_1","String","fromCharCode","apply","extractCharCode","str","codePointAt","textures","ownsTextures","res","getResolutionOfUrl","pageTextures","_ownsTextures","baseTexture","alphaMode","ALPHA_MODES","NO_PREMULTIPLIED_ALPHA","page_1","rect","Rectangle","frame","xOffset","yOffset","xAdvance","texture","Texture","distanceFieldRange","distanceFieldType","_a","toLowerCase","_b","BitmapFont","destroy","fontData","format","available","textStyle","options","assign","defaultOptions","textureWidth","textureHeight","charsList","TextStyle","fontFamily","positionX","positionY","maxCharHeight","document","createElement","getContext","BaseTexture","TextMetrics","measureText","ceil","textureGlyphWidth","fontStyle","len","c1","c2","total","undefined","uninstall","ALPHANUMERIC","pageMeshDataDefaultPageMeshData","pageMeshDataMSDFPageMeshData","charRenderDataPool","_super","_this","BitmapText","styleDefaults","align","tint","maxWidth","letterSpacing","fontName","_activePagesMeshData","_textWidth","_textHeight","_align","_tint","_fontName","_fontSize","_text","_maxWidth","_maxLineHeight","_letterSpacing","_anchor","ObservablePoint","dirty","_roundPixels","settings","ROUND_PIXELS","_textureCache","pos","Point","lineWidths","lineSpaces","charsInput","pageMeshDataPool","prevCharCode","lastLineWidth","maxLineWidth","line","lastBreakPos","lastBreakWidth","spacesRemoved","maxLineHeight","spaceCount","charCode","charData","charRenderData","pop","EMPTY","prevSpaces","position","orig","removeItems","lastChar","lineAlignOffsets","alignOffset","lenChars","pagesMeshData","newPagesMeshData","activePagesMeshData","baseTextureUid","uid","pageMeshData","geometry","MeshGeometry","material","meshBlendMode","MeshMaterial","BLEND_MODES","NORMAL","program","Program","msdfVert","msdfFrag","uniforms","uFWidth","NORMAL_NPM","mesh","Mesh","blendMode","index","indexCount","vertexCount","uvsCount","vertices","uvs","indices","removeChild","parent","addChild","BATCHABLE_SIZE","Float32Array","Uint16Array","total_1","offset","round","xPos","yPos","pageMesh","textureFrame","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","anchor","anchorOffsetX","anchorOffsetY","i_2","vertexBuffer","getBuffer","textureBuffer","indexBuffer","getIndex","update","validate","containerUpdateTransform","renderer","worldTransform","a","c","dx","sqrt","dy","worldScale","abs","fontScale","_i","shader","_render","call","getLocalBounds","updateText","set","copyFrom","Container","BitmapFontLoader","LoaderResource","setExtensionXhrType","XHR_RESPONSE_TYPE","TEXT","resource","next","baseUrl","getBaseUrl","completed","metadata","pageFile","keys","bitmapFont","install","url","exists","resources","bitmapResource","onAfterMiddleware","add","crossOrigin","loadType","LOAD_TYPE","IMAGE","imageMetadata","parentResource","loader","resUrl","isDataUrl","dirname","charAt","dir"],"sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/BitmapFontData.ts","../../src/formats/TextFormat.ts","../../src/formats/XMLFormat.ts","../../src/formats/XMLStringFormat.ts","../../src/formats/index.ts","../../src/utils/generateFillStyle.ts","../../src/utils/drawGlyph.ts","../../src/utils/splitTextToCharacters.ts","../../src/utils/resolveCharacters.ts","../../src/utils/extractCharCode.ts","../../src/BitmapFont.ts","../../src/BitmapText.ts","../../src/BitmapFontLoader.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/* eslint-disable max-len */\n\n/**\n * Normalized parsed data from .fnt files.\n *\n * @memberof PIXI\n */\nexport class BitmapFontData\n{\n    /** @readonly */\n    public info: IBitmapFontDataInfo[];\n\n    /** @readonly */\n    public common: IBitmapFontDataCommon[];\n\n    /** @readonly */\n    public page: IBitmapFontDataPage[];\n\n    /** @readonly */\n    public char: IBitmapFontDataChar[];\n\n    /** @readonly */\n    public kerning: IBitmapFontDataKerning[];\n\n    /** @readonly */\n    public distanceField: IBitmapFontDataDistanceField[];\n\n    constructor()\n    {\n        this.info = [];\n        this.common = [];\n        this.page = [];\n        this.char = [];\n        this.kerning = [];\n        this.distanceField = [];\n    }\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataInfo {\n    /** Font face */\n    face: string;\n\n    /** Font size */\n    size: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataCommon {\n    /** Line height, in pixels. */\n    lineHeight: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataPage {\n    /** Unique id for bitmap texture */\n    id: number;\n\n    /** File name */\n    file: string;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataChar {\n    /** Unique id of character */\n    id: number;\n\n    /** {@link PIXI.IBitmapFontDataPage} id */\n    page: number;\n\n    /** x-position of character in page. */\n    x: number;\n\n    /** y-position of character in page. */\n    y: number;\n\n    /** Width of character in page. */\n    width: number;\n\n    /** Height of character in page. */\n    height: number;\n\n    /** x-offset to apply when rendering character */\n    xoffset: number;\n\n    /** y-offset to apply when rendering character. */\n    yoffset: number;\n\n    /** Advancement to apply to next character. */\n    xadvance: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataKerning {\n    /** First character of pair */\n    first: number;\n\n    /** Second character of pair */\n    second: number;\n\n    /** x-offset to apply between first & second characters when they are next to each other. */\n    amount: number;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontDataDistanceField {\n    /** Type of distance field */\n    fieldType: string;\n\n    /** Range of distance */\n    distanceRange: number;\n}\n","import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\ninterface IBitmapFontRawData {\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string;\n        page: string;\n        x: string;\n        y: string;\n        width: string;\n        height: string;\n        xoffset: string;\n        yoffset: string;\n        xadvance: string;\n    }[];\n    kernings?: {\n        count: number;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n    distanceField?: {\n        fieldType: string;\n        distanceRange: string;\n    }[]\n}\n\n/**\n * BitmapFont format that's Text-based.\n *\n * @private\n */\nexport class TextFormat\n{\n    /**\n     * Check if resource refers to txt font data.\n     *\n     * @param data\n     * @return - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return typeof data === 'string' && data.indexOf('info face=') === 0;\n    }\n\n    /**\n     * Convert text font data to a javascript object.\n     *\n     * @param txt - Raw string data to be converted\n     * @return - Parsed font data\n     */\n    static parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: IBitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n            kernings: [],\n            distanceField: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font = new BitmapFontData();\n\n        rawData.info.forEach((info) => font.info.push({\n            face: info.face,\n            size: parseInt(info.size, 10),\n        }));\n\n        rawData.common.forEach((common) => font.common.push({\n            lineHeight: parseInt(common.lineHeight, 10),\n        }));\n\n        rawData.page.forEach((page) => font.page.push({\n            id: parseInt(page.id, 10),\n            file: page.file,\n        }));\n\n        rawData.char.forEach((char) => font.char.push({\n            id: parseInt(char.id, 10),\n            page: parseInt(char.page, 10),\n            x: parseInt(char.x, 10),\n            y: parseInt(char.y, 10),\n            width: parseInt(char.width, 10),\n            height: parseInt(char.height, 10),\n            xoffset: parseInt(char.xoffset, 10),\n            yoffset: parseInt(char.yoffset, 10),\n            xadvance: parseInt(char.xadvance, 10),\n        }));\n\n        rawData.kerning.forEach((kerning) => font.kerning.push({\n            first: parseInt(kerning.first, 10),\n            second: parseInt(kerning.second, 10),\n            amount: parseInt(kerning.amount, 10),\n        }));\n\n        rawData.distanceField.forEach((df) => font.distanceField.push({\n            distanceRange: parseInt(df.distanceRange, 10),\n            fieldType: df.fieldType,\n        }));\n\n        return font;\n    }\n}\n","import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @private\n */\nexport class XMLFormat\n{\n    /**\n     * Check if resource refers to xml font data.\n     *\n     * @param data\n     * @return - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return data instanceof XMLDocument\n            && data.getElementsByTagName('page').length\n            && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    }\n\n    /**\n     * Convert the XML into BitmapFontData that we can use.\n     *\n     * @param xml\n     * @return - Data to use for BitmapFont\n     */\n    static parse(xml: XMLDocument): BitmapFontData\n    {\n        const data = new BitmapFontData();\n        const info = xml.getElementsByTagName('info');\n        const common = xml.getElementsByTagName('common');\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n        const distanceField = xml.getElementsByTagName('distanceField');\n\n        for (let i = 0; i < info.length; i++)\n        {\n            data.info.push({\n                face: info[i].getAttribute('face'),\n                size: parseInt(info[i].getAttribute('size'), 10),\n            });\n        }\n\n        for (let i = 0; i < common.length; i++)\n        {\n            data.common.push({\n                lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10),\n            });\n        }\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.page.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const letter = char[i];\n\n            data.char.push({\n                id: parseInt(letter.getAttribute('id'), 10),\n                page: parseInt(letter.getAttribute('page'), 10) || 0,\n                x: parseInt(letter.getAttribute('x'), 10),\n                y: parseInt(letter.getAttribute('y'), 10),\n                width: parseInt(letter.getAttribute('width'), 10),\n                height: parseInt(letter.getAttribute('height'), 10),\n                xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n                yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n                xadvance: parseInt(letter.getAttribute('xadvance'), 10),\n            });\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            data.kerning.push({\n                first: parseInt(kerning[i].getAttribute('first'), 10),\n                second: parseInt(kerning[i].getAttribute('second'), 10),\n                amount: parseInt(kerning[i].getAttribute('amount'), 10),\n            });\n        }\n\n        for (let i = 0; i < distanceField.length; i++)\n        {\n            data.distanceField.push({\n                fieldType: distanceField[i].getAttribute('fieldType'),\n                distanceRange: parseInt(distanceField[i].getAttribute('distanceRange'), 10),\n            });\n        }\n\n        return data;\n    }\n}\n","import { BitmapFontData } from '../BitmapFontData';\nimport { XMLFormat } from './XMLFormat';\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @private\n */\nexport class XMLStringFormat\n{\n    /**\n     * Check if resource refers to text xml font data.\n     *\n     * @param data\n     * @return - True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        if (typeof data === 'string' && data.indexOf('<font>') > -1)\n        {\n            const xml = new globalThis.DOMParser().parseFromString(data, 'text/xml');\n\n            return XMLFormat.test(xml);\n        }\n\n        return false;\n    }\n\n    /**\n     * Convert the text XML into BitmapFontData that we can use.\n     *\n     * @param xmlTxt\n     * @return - Data to use for BitmapFont\n     */\n    static parse(xmlTxt: string): BitmapFontData\n    {\n        const xml = new globalThis.DOMParser().parseFromString(xmlTxt, 'text/xml');\n\n        return XMLFormat.parse(xml);\n    }\n}\n","import { TextFormat } from './TextFormat';\nimport { XMLFormat } from './XMLFormat';\nimport { XMLStringFormat } from './XMLStringFormat';\n\n// Registered formats, maybe make this extensible in the future?\nconst formats = [\n    TextFormat,\n    XMLFormat,\n    XMLStringFormat,\n] as const;\n\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @return {any} Format or null\n */\nexport function autoDetectFormat(data: unknown): typeof formats[number] | null\n{\n    for (let i = 0; i < formats.length; i++)\n    {\n        if (formats[i].test(data))\n        {\n            return formats[i];\n        }\n    }\n\n    return null;\n}\n","import { TextStyle, TextMetrics, TEXT_GRADIENT } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n *\n * @private\n * @param {object} style - The style.\n * @param {string[]} lines - The lines of text.\n * @return {string|number|CanvasGradient} The fill style\n */\nexport function generateFillStyle(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    style: TextStyle,\n    resolution: number,\n    lines: string[],\n    metrics: TextMetrics\n): string|CanvasGradient|CanvasPattern\n{\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    const fillStyle: string|string[]|CanvasGradient|CanvasPattern = style.fill as any;\n\n    if (!Array.isArray(fillStyle))\n    {\n        return fillStyle;\n    }\n    else if (fillStyle.length === 1)\n    {\n        return fillStyle[0];\n    }\n\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    let gradient: string[]|CanvasGradient;\n\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n    // should also take padding into account, padding can offset the gradient\n    const padding = style.padding || 0;\n\n    const width = (canvas.width / resolution) - dropShadowCorrection - (padding * 2);\n    const height = (canvas.height / resolution) - dropShadowCorrection - (padding * 2);\n\n    // make a copy of the style settings, so we can manipulate them later\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length)\n    {\n        const lengthPlus1 = fill.length + 1;\n\n        for (let i = 1; i < lengthPlus1; ++i)\n        {\n            fillGradientStops.push(i / lengthPlus1);\n        }\n    }\n\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n    {\n        // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n        gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n        // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n        // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n        // There's potential for floating point precision issues at the seams between gradient repeats.\n        // The loop below generates the stops in order, so track the last generated one to prevent\n        // floating point precision from making us go the teeniest bit backwards, resulting in\n        // the first and last colors getting swapped.\n        let lastIterationStop = 0;\n\n        // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n        const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n        // textHeight, but as a 0-1 size in global gradient stop space\n        const gradStopLineHeight = textHeight / height;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const thisLineTop = metrics.lineHeight * i;\n\n            for (let j = 0; j < fill.length; j++)\n            {\n                // 0-1 stop point for the current line, multiplied to global space afterwards\n                let lineStop = 0;\n\n                if (typeof fillGradientStops[j] === 'number')\n                {\n                    lineStop = fillGradientStops[j];\n                }\n                else\n                {\n                    lineStop = j / fill.length;\n                }\n\n                const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                // Prevent color stop generation going backwards from floating point imprecision\n                let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                gradient.addColorStop(clampedStop, fill[j]);\n                lastIterationStop = clampedStop;\n            }\n        }\n    }\n    else\n    {\n        // start the gradient at the center left of the canvas, and end at the center right of the canvas\n        gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n        // can just evenly space out the gradients in this case, as multiple lines makes no difference\n        // to an even left to right gradient\n        const totalIterations = fill.length + 1;\n        let currentIteration = 1;\n\n        for (let i = 0; i < fill.length; i++)\n        {\n            let stop: number;\n\n            if (typeof fillGradientStops[i] === 'number')\n            {\n                stop = fillGradientStops[i];\n            }\n            else\n            {\n                stop = currentIteration / totalIterations;\n            }\n            gradient.addColorStop(stop, fill[i]);\n            currentIteration++;\n        }\n    }\n\n    return gradient;\n}\n","import { generateFillStyle } from './generateFillStyle';\nimport { hex2rgb, string2hex } from '@pixi/utils';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {HTMLCanvasElement} canvas\n * @param {CanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nexport function drawGlyph(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    metrics: TextMetrics,\n    x: number,\n    y: number,\n    resolution: number,\n    style: TextStyle\n): void\n{\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n\n    context.translate(x, y);\n    context.scale(resolution, resolution);\n\n    const tx = style.strokeThickness / 2;\n    const ty = -(style.strokeThickness / 2);\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    if (style.dropShadow)\n    {\n        const dropShadowColor = style.dropShadowColor;\n        const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n        const dropShadowBlur = style.dropShadowBlur * resolution;\n        const dropShadowDistance = style.dropShadowDistance * resolution;\n\n        context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n        context.shadowBlur = dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * dropShadowDistance;\n    }\n    else\n    {\n        context.shadowColor = 'black';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n    }\n\n    if (style.stroke && style.strokeThickness)\n    {\n        context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n    if (style.fill)\n    {\n        context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n\n    context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n","/**\n * Ponyfill for IE because it doesn't support `Array.from`\n * @private\n */\nexport function splitTextToCharacters(text: string): string[]\n{\n    return Array.from ? Array.from(text) : text.split('');\n}\n","import { splitTextToCharacters } from './splitTextToCharacters';\n\n/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]}\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...splitTextToCharacters(item));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n","/**\n * Ponyfill for IE because it doesn't support `codePointAt`\n * @private\n */\nexport function extractCharCode(str: string): number\n{\n    return str.codePointAt ? str.codePointAt(0) : str.charCodeAt(0);\n}\n","import { getResolutionOfUrl } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { TextStyle, TextMetrics } from '@pixi/text';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFontData } from './BitmapFontData';\nimport { resolveCharacters, drawGlyph, extractCharCode } from './utils';\n\nimport type { Dict } from '@pixi/utils';\nimport type { ITextStyle } from '@pixi/text';\nimport { ALPHA_MODES } from '@pixi/constants';\n\nexport interface IBitmapFontCharacter\n{\n    xOffset: number;\n    yOffset: number;\n    xAdvance: number;\n    texture: Texture;\n    page: number;\n    kerning: Dict<number>;\n}\n\n/** @memberof PIXI */\nexport interface IBitmapFontOptions\n{\n    /**\n     * The character set to generate.\n     * @default PIXI.BitmapFont.ALPHANUMERIC\n     */\n    chars?: string | (string | string[])[];\n\n    /**\n     * The resolution for rendering.\n     * @default 1\n     */\n    resolution?: number;\n\n    /**\n     * The padding between glyphs in the atlas.\n     * @default 4\n     */\n    padding?: number;\n\n    /**\n     * The width of the texture atlas.\n     * @default 512\n     */\n    textureWidth?: number;\n\n    /**\n     * The height of the texture atlas.\n     * @default 512\n     */\n    textureHeight?: number;\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n *\n * @memberof PIXI\n */\nexport class BitmapFont\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     *\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n     */\n    public static readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     *\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n     */\n    public static readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     *\n     * @type {string[][]}\n     */\n    public static readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     *\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public static readonly ASCII = [[' ', '~']];\n\n    /**\n     * Collection of default options when using `BitmapFont.from`.\n     *\n     * @property {number} resolution=1\n     * @property {number} textureWidth=512\n     * @property {number} textureHeight=512\n     * @property {number} padding=4\n     * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n     */\n    public static readonly defaultOptions: IBitmapFontOptions = {\n        resolution: 1,\n        textureWidth: 512,\n        textureHeight: 512,\n        padding: 4,\n        chars: BitmapFont.ALPHANUMERIC,\n    };\n\n    /** Collection of available/installed fonts. */\n    public static readonly available: Dict<BitmapFont> = {};\n\n    /** The name of the font face. */\n    public readonly font: string;\n\n    /** The size of the font face in pixels. */\n    public readonly size: number;\n\n    /** The line-height of the font face in pixels. */\n    public readonly lineHeight: number;\n\n    /** The map of characters by character code. */\n    public readonly chars: Dict<IBitmapFontCharacter>;\n\n    /** The map of base page textures (i.e., sheets of glyphs). */\n    public readonly pageTextures: Dict<Texture>;\n\n    /** The range of the distance field in pixels. */\n    public readonly distanceFieldRange: number;\n\n    /** The kind of distance field for this font or \"none\". */\n    public readonly distanceFieldType: string;\n\n    private _ownsTextures: boolean;\n\n    /**\n     * @param data\n     * @param textures\n     * @param ownsTextures - Setting to `true` will destroy page textures\n     *        when the font is uninstalled.\n     */\n    constructor(data: BitmapFontData, textures: Texture[]|Dict<Texture>, ownsTextures?: boolean)\n    {\n        const [info] = data.info;\n        const [common] = data.common;\n        const [page] = data.page;\n        const [distanceField] = data.distanceField;\n        const res = getResolutionOfUrl(page.file);\n        const pageTextures: Dict<Texture> = {};\n\n        this._ownsTextures = ownsTextures;\n        this.font = info.face;\n        this.size = info.size;\n        this.lineHeight = common.lineHeight / res;\n        this.chars = {};\n        this.pageTextures = pageTextures;\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < data.page.length; i++)\n        {\n            const { id, file } = data.page[i];\n\n            pageTextures[id] = textures instanceof Array\n                ? textures[i] : textures[file];\n\n            // only MSDF and SDF fonts need no-premultiplied-alpha\n            if (distanceField?.fieldType && distanceField.fieldType !== 'none')\n            {\n                pageTextures[id].baseTexture.alphaMode = ALPHA_MODES.NO_PREMULTIPLIED_ALPHA;\n            }\n        }\n\n        // parse letters\n        for (let i = 0; i < data.char.length; i++)\n        {\n            const { id, page } = data.char[i];\n            let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n\n            x /= res;\n            y /= res;\n            width /= res;\n            height /= res;\n            xoffset /= res;\n            yoffset /= res;\n            xadvance /= res;\n\n            const rect = new Rectangle(\n                x + (pageTextures[page].frame.x / res),\n                y + (pageTextures[page].frame.y / res),\n                width,\n                height\n            );\n\n            this.chars[id] = {\n                xOffset: xoffset,\n                yOffset: yoffset,\n                xAdvance: xadvance,\n                kerning: {},\n                texture: new Texture(\n                    pageTextures[page].baseTexture,\n                    rect\n                ),\n                page,\n            };\n        }\n\n        // parse kernings\n        for (let i = 0; i < data.kerning.length; i++)\n        {\n            let { first, second, amount } = data.kerning[i];\n\n            first /= res;\n            second /= res;\n            amount /= res;\n\n            if (this.chars[second])\n            {\n                this.chars[second].kerning[first] = amount;\n            }\n        }\n\n        // Store distance field information\n        this.distanceFieldRange = distanceField?.distanceRange;\n        this.distanceFieldType = distanceField?.fieldType?.toLowerCase() ?? 'none';\n    }\n\n    /** Remove references to created glyph textures. */\n    public destroy(): void\n    {\n        for (const id in this.chars)\n        {\n            this.chars[id].texture.destroy();\n            this.chars[id].texture = null;\n        }\n\n        for (const id in this.pageTextures)\n        {\n            if (this._ownsTextures)\n            {\n                this.pageTextures[id].destroy(true);\n            }\n\n            this.pageTextures[id] = null;\n        }\n\n        // Set readonly null.\n        (this as any).chars = null;\n        (this as any).pageTextures = null;\n    }\n\n    /**\n     * Register a new bitmap font.\n     *\n     * @param data - The\n     *        characters map that could be provided as xml or raw string.\n     * @param textures - List of textures for each page.\n     * @param ownsTextures - Set to `true` to destroy page textures\n     *        when the font is uninstalled. By default fonts created with\n     *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n     * @return {PIXI.BitmapFont} Result font object with font, size, lineHeight\n     *         and char fields.\n     */\n    public static install(\n        data: string|XMLDocument|BitmapFontData,\n        textures: Texture|Texture[]|Dict<Texture>,\n        ownsTextures?: boolean\n    ): BitmapFont\n    {\n        let fontData;\n\n        if (data instanceof BitmapFontData)\n        {\n            fontData = data;\n        }\n        else\n        {\n            const format = autoDetectFormat(data);\n\n            if (!format)\n            {\n                throw new Error('Unrecognized data format for font.');\n            }\n\n            fontData = format.parse(data as any);\n        }\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        const font = new BitmapFont(fontData, textures, ownsTextures);\n\n        BitmapFont.available[font.font] = font;\n\n        return font;\n    }\n\n    /**\n     * Remove bitmap font by name.\n     *\n     * @param name - Name of the font to uninstall.\n     */\n    public static uninstall(name: string): void\n    {\n        const font = BitmapFont.available[name];\n\n        if (!font)\n        {\n            throw new Error(`No font found named '${name}'`);\n        }\n\n        font.destroy();\n        delete BitmapFont.available[name];\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set. This does not support\n     * kernings yet. With `style` properties, only the following non-layout properties are used:\n     *\n     * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n     * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n     * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n     * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n     * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n     * - {@link PIXI.TextStyle#fill|fill}\n     * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n     * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n     * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n     * - {@link PIXI.TextStyle#fontSize|fontSize}\n     * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n     * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n     * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n     * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n     * - {@link PIXI.TextStyle#stroke|stroke}\n     * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n     * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n     *\n     * @param name - The name of the custom font to use with BitmapText.\n     * @param style - Style options to render with BitmapFont.\n     * @param options - Setup options for font or name of the font.\n     * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n     *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     *      Don't forget to include spaces ' ' in your character set!\n     * @param {number} [options.resolution=1] - Render resolution for glyphs.\n     * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n     * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n     * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n     * @return Font generated by style options.\n     * @example\n     * PIXI.BitmapFont.from(\"TitleFont\", {\n     *     fontFamily: \"Arial\",\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: \"purple\"\n     * });\n     *\n     * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n     */\n    public static from(name: string, textStyle?: TextStyle | Partial<ITextStyle>, options?: IBitmapFontOptions): BitmapFont\n    {\n        if (!name)\n        {\n            throw new Error('[BitmapFont] Property `name` is required.');\n        }\n\n        const {\n            chars,\n            padding,\n            resolution,\n            textureWidth,\n            textureHeight } = Object.assign(\n            {}, BitmapFont.defaultOptions, options);\n\n        const charsList = resolveCharacters(chars);\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const lineWidth = textureWidth;\n        const fontData = new BitmapFontData();\n\n        fontData.info[0] = {\n            face: style.fontFamily as string,\n            size: style.fontSize as number,\n        };\n        fontData.common[0] = {\n            lineHeight: style.fontSize as number,\n        };\n\n        let positionX = 0;\n        let positionY = 0;\n\n        let canvas: HTMLCanvasElement;\n        let context: CanvasRenderingContext2D;\n        let baseTexture: BaseTexture;\n        let maxCharHeight = 0;\n        const baseTextures: BaseTexture[] = [];\n        const textures: Texture[] = [];\n\n        for (let i = 0; i < charsList.length; i++)\n        {\n            if (!canvas)\n            {\n                canvas = document.createElement('canvas');\n                canvas.width = textureWidth;\n                canvas.height = textureHeight;\n\n                context = canvas.getContext('2d');\n                baseTexture = new BaseTexture(canvas, { resolution });\n\n                baseTextures.push(baseTexture);\n                textures.push(new Texture(baseTexture));\n\n                fontData.page.push({\n                    id: textures.length - 1,\n                    file: '',\n                });\n            }\n\n            // Measure glyph dimensions\n            const metrics = TextMetrics.measureText(charsList[i], style, false, canvas);\n            const width = metrics.width;\n            const height = Math.ceil(metrics.height);\n\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            // Can't fit char anymore: next canvas please!\n            if (positionY >= textureHeight - (height * resolution))\n            {\n                if (positionY === 0)\n                {\n                    // We don't want user debugging an infinite loop (or do we? :)\n                    throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is `\n                        + `too small for ${style.fontSize}px fonts`);\n                }\n\n                --i;\n\n                // Create new atlas once current has filled up\n                canvas = null;\n                context = null;\n                baseTexture = null;\n                positionY = 0;\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n\n            // Wrap line once full row has been rendered\n            if ((textureGlyphWidth * resolution) + positionX >= lineWidth)\n            {\n                --i;\n                positionY += maxCharHeight * resolution;\n                positionY = Math.ceil(positionY);\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n\n            // Unique (numeric) ID mapping to this glyph\n            const id = extractCharCode(metrics.text);\n\n            // Create a texture holding just the glyph\n            fontData.char.push({\n                id,\n                page: textures.length - 1,\n                x: positionX / resolution,\n                y: positionY / resolution,\n                width: textureGlyphWidth,\n                height,\n                xoffset: 0,\n                yoffset: 0,\n                xadvance: Math.ceil(width\n                        - (style.dropShadow ? style.dropShadowDistance : 0)\n                        - (style.stroke ? style.strokeThickness : 0)),\n            });\n\n            positionX += (textureGlyphWidth + (2 * padding)) * resolution;\n            positionX = Math.ceil(positionX);\n        }\n\n        // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n        // but we're using measureText which is native and fast.\n        for (let i = 0, len = charsList.length; i < len; i++)\n        {\n            const first = charsList[i];\n\n            for (let j = 0; j < len; j++)\n            {\n                const second = charsList[j];\n                const c1 = context.measureText(first).width;\n                const c2 = context.measureText(second).width;\n                const total = context.measureText(first + second).width;\n                const amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    fontData.kerning.push({\n                        first: extractCharCode(first),\n                        second: extractCharCode(second),\n                        amount,\n                    });\n                }\n            }\n        }\n\n        const font = new BitmapFont(fontData, textures, true);\n\n        // Make it easier to replace a font\n        if (BitmapFont.available[name] !== undefined)\n        {\n            BitmapFont.uninstall(name);\n        }\n\n        BitmapFont.available[name] = font;\n\n        return font;\n    }\n}\n","import { ObservablePoint, Point } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { removeItems } from '@pixi/utils';\nimport { BitmapFont } from './BitmapFont';\nimport { splitTextToCharacters, extractCharCode } from './utils';\nimport msdfFrag from './shader/msdf.frag';\nimport msdfVert from './shader/msdf.vert';\nimport type { Rectangle } from '@pixi/math';\nimport { Program, Renderer, Texture } from '@pixi/core';\nimport type { IBitmapTextStyle } from './BitmapTextStyle';\nimport type { TextStyleAlign } from '@pixi/text';\nimport { Container } from '@pixi/display';\nimport type { IDestroyOptions } from '@pixi/display';\nimport { BLEND_MODES } from '@pixi/constants';\n\ninterface PageMeshData {\n    index: number;\n    indexCount: number;\n    vertexCount: number;\n    uvsCount: number;\n    total: number;\n    mesh: Mesh;\n    vertices?: Float32Array;\n    uvs?: Float32Array;\n    indices?: Uint16Array;\n}\ninterface CharRenderData {\n    texture: Texture;\n    line: number;\n    charCode: number;\n    position: Point;\n    prevSpaces: number;\n}\n\n// If we ever need more than two pools, please make a Dict or something better.\nconst pageMeshDataDefaultPageMeshData: PageMeshData[] = [];\nconst pageMeshDataMSDFPageMeshData: PageMeshData[] = [];\nconst charRenderDataPool: CharRenderData[] = [];\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * You can also use SDF, MSDF and MTSDF BitmapFonts for vector-like scaling appearance provided by:\n * https://github.com/soimy/msdf-bmfont-xml for SDF and MSDF fnt files or\n * https://github.com/Chlumsky/msdf-atlas-gen for SDF, MSDF and MTSDF json files\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {\n *   fontName: \"Desyrel\",\n *   fontSize: 35,\n *   align: \"right\"\n * });\n * ```\n *\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    public static styleDefaults: Partial<IBitmapTextStyle> = {\n        align: 'left',\n        tint: 0xFFFFFF,\n        maxWidth: 0,\n        letterSpacing: 0,\n    };\n\n    /** Set to `true` if the BitmapText needs to be redrawn. */\n    public dirty: boolean;\n\n    /**\n     * Private tracker for the width of the overall text.\n     *\n     * @private\n     */\n    protected _textWidth: number;\n\n    /**\n     * Private tracker for the height of the overall text.\n     *\n     * @private\n     */\n    protected _textHeight: number;\n\n    /**\n     * Private tracker for the current text.\n     *\n     * @private\n     */\n    protected _text: string;\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting value to 0\n     *\n     * @private\n     */\n    protected _maxWidth: number;\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * ie: when trying to vertically align. (Internally used)\n     *\n     * @private\n     */\n    protected _maxLineHeight: number;\n\n    /**\n     * Letter spacing. This is useful for setting the space between characters.\n     *\n     * @private\n     */\n    protected _letterSpacing: number;\n\n    /**\n     * Text anchor.\n     *\n     * @readonly\n     * @private\n     */\n    protected _anchor: ObservablePoint;\n\n    /**\n     * Private tracker for the current font name.\n     *\n     * @private\n     */\n    protected _fontName: string;\n\n    /**\n     * Private tracker for the current font size.\n     *\n     * @private\n     */\n    protected _fontSize: number;\n\n    /**\n     * Private tracker for the current text align.\n     *\n     * @type {string}\n     * @private\n     */\n    protected _align: TextStyleAlign;\n\n    /** Collection of page mesh data. */\n    protected _activePagesMeshData: PageMeshData[];\n\n    /**\n     * Private tracker for the current tint.\n     *\n     * @private\n     */\n    protected _tint = 0xFFFFFF;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering.\n     *\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    protected _roundPixels: boolean;\n\n    /** Cached char texture is destroyed when BitmapText is destroyed. */\n    private _textureCache: Record<number, Texture>;\n\n    /**\n     * @param text - A string that you would like the text to display.\n     * @param style - The style parameters.\n     * @param {string} style.fontName - The installed BitmapFont name.\n     * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n     *.     this will default to the BitmapFont size.\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n     *      does not affect single line text.\n     * @param {number} [style.tint=0xFFFFFF] - The tint color.\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n     * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n     */\n    constructor(text: string, style: Partial<IBitmapTextStyle> = {})\n    {\n        super();\n\n        // Apply the defaults\n        const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n            {}, BitmapText.styleDefaults, style);\n\n        if (!BitmapFont.available[fontName])\n        {\n            throw new Error(`Missing BitmapFont \"${fontName}\"`);\n        }\n\n        this._activePagesMeshData = [];\n        this._textWidth = 0;\n        this._textHeight = 0;\n        this._align = align;\n        this._tint = tint;\n        this._fontName = fontName;\n        this._fontSize = fontSize || BitmapFont.available[fontName].size;\n        this._text = text;\n        this._maxWidth = maxWidth;\n        this._maxLineHeight = 0;\n        this._letterSpacing = letterSpacing;\n        this._anchor = new ObservablePoint((): void => { this.dirty = true; }, this, 0, 0);\n        this._roundPixels = settings.ROUND_PIXELS;\n        this.dirty = true;\n        this._textureCache = {};\n    }\n\n    /**\n     * Renders text and updates it when needed. This should only be called\n     * if the BitmapFont is regenerated.\n     */\n    public updateText(): void\n    {\n        const data = BitmapFont.available[this._fontName];\n        const scale = this._fontSize / data.size;\n        const pos = new Point();\n        const chars: CharRenderData[] = [];\n        const lineWidths = [];\n        const lineSpaces = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const charsInput = splitTextToCharacters(text);\n        const maxWidth = this._maxWidth * data.size / this._fontSize;\n        const pageMeshDataPool = data.distanceFieldType === 'none'\n            ? pageMeshDataDefaultPageMeshData : pageMeshDataMSDFPageMeshData;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n        let spaceCount = 0;\n\n        for (let i = 0; i < charsInput.length; i++)\n        {\n            const char = charsInput[i];\n            const charCode = extractCharCode(char);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n                spaceCount++;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                lineSpaces.push(-1);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            const charRenderData: CharRenderData = charRenderDataPool.pop() || {\n                texture: Texture.EMPTY,\n                line: 0,\n                charCode: 0,\n                prevSpaces: 0,\n                position: new Point(),\n            };\n\n            charRenderData.texture = charData.texture;\n            charRenderData.line = line;\n            charRenderData.charCode = charCode;\n            charRenderData.position.x = pos.x + charData.xOffset + (this._letterSpacing / 2);\n            charRenderData.position.y = pos.y + charData.yOffset;\n            charRenderData.prevSpaces = spaceCount;\n\n            chars.push(charRenderData);\n\n            lastLineWidth = charRenderData.position.x + Math.max(charData.xAdvance, charData.texture.orig.width);\n            pos.x += charData.xAdvance + this._letterSpacing;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n            }\n        }\n\n        const lastChar = charsInput[charsInput.length - 1];\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n            lineSpaces.push(-1);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n            else if (this._align === 'justify')\n            {\n                alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n\n        const pagesMeshData: Record<number, PageMeshData> = {};\n\n        const newPagesMeshData: PageMeshData[] = [];\n\n        const activePagesMeshData = this._activePagesMeshData;\n\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            pageMeshDataPool.push(activePagesMeshData[i]);\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const texture = chars[i].texture;\n            const baseTextureUid = texture.baseTexture.uid;\n\n            if (!pagesMeshData[baseTextureUid])\n            {\n                let pageMeshData = pageMeshDataPool.pop();\n\n                if (!pageMeshData)\n                {\n                    const geometry = new MeshGeometry();\n                    let material: MeshMaterial;\n                    let meshBlendMode: BLEND_MODES;\n\n                    if (data.distanceFieldType === 'none')\n                    {\n                        material = new MeshMaterial(Texture.EMPTY);\n                        meshBlendMode = BLEND_MODES.NORMAL;\n                    }\n                    else\n                    {\n                        material = new MeshMaterial(Texture.EMPTY,\n                            { program: Program.from(msdfVert, msdfFrag), uniforms: { uFWidth: 0 } });\n                        meshBlendMode = BLEND_MODES.NORMAL_NPM;\n                    }\n\n                    const mesh = new Mesh(geometry, material);\n\n                    mesh.blendMode = meshBlendMode;\n\n                    pageMeshData = {\n                        index: 0,\n                        indexCount: 0,\n                        vertexCount: 0,\n                        uvsCount: 0,\n                        total: 0,\n                        mesh,\n                        vertices: null,\n                        uvs: null,\n                        indices: null,\n                    };\n                }\n\n                // reset data..\n                pageMeshData.index = 0;\n                pageMeshData.indexCount = 0;\n                pageMeshData.vertexCount = 0;\n                pageMeshData.uvsCount = 0;\n                pageMeshData.total = 0;\n\n                // TODO need to get page texture here somehow..\n                const { _textureCache } = this;\n\n                _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new Texture(texture.baseTexture);\n                pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n\n                pageMeshData.mesh.tint = this._tint;\n\n                newPagesMeshData.push(pageMeshData);\n\n                pagesMeshData[baseTextureUid] = pageMeshData;\n            }\n\n            pagesMeshData[baseTextureUid].total++;\n        }\n\n        // lets find any previously active pageMeshDatas that are no longer required for\n        // the updated text (if any), removed and return them to the pool.\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            if (newPagesMeshData.indexOf(activePagesMeshData[i]) === -1)\n            {\n                this.removeChild(activePagesMeshData[i].mesh);\n            }\n        }\n\n        // next lets add any new meshes, that have not yet been added to this BitmapText\n        // we only add if its not already a child of this BitmapObject\n        for (let i = 0; i < newPagesMeshData.length; i++)\n        {\n            if (newPagesMeshData[i].mesh.parent !== this)\n            {\n                this.addChild(newPagesMeshData[i].mesh);\n            }\n        }\n\n        // active page mesh datas are set to be the new pages added.\n        this._activePagesMeshData = newPagesMeshData;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n            const total = pageMeshData.total;\n\n            // lets only allocate new buffers if we can fit the new text in the current ones..\n            // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n            if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2)\n            {\n                pageMeshData.vertices = new Float32Array(4 * 2 * total);\n                pageMeshData.uvs = new Float32Array(4 * 2 * total);\n                pageMeshData.indices = new Uint16Array(6 * total);\n            }\n            else\n            {\n                const total = pageMeshData.total;\n                const vertices = pageMeshData.vertices;\n\n                // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n                for (let i = total * 4 * 2; i < vertices.length; i++)\n                {\n                    vertices[i] = 0;\n                }\n            }\n\n            // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n            // to match the number of letters needed\n            pageMeshData.mesh.size = 6 * total;\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const char = chars[i];\n            let offset = char.position.x + (lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1));\n\n            if (this._roundPixels)\n            {\n                offset = Math.round(offset);\n            }\n\n            const xPos = offset * scale;\n            const yPos = char.position.y * scale;\n            const texture = char.texture;\n\n            const pageMesh = pagesMeshData[texture.baseTexture.uid];\n\n            const textureFrame = texture.frame;\n            const textureUvs = texture._uvs;\n\n            const index = pageMesh.index++;\n\n            pageMesh.indices[(index * 6) + 0] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 1] = 1 + (index * 4);\n            pageMesh.indices[(index * 6) + 2] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 3] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 4] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 5] = 3 + (index * 4);\n\n            pageMesh.vertices[(index * 8) + 0] = xPos;\n            pageMesh.vertices[(index * 8) + 1] = yPos;\n\n            pageMesh.vertices[(index * 8) + 2] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 3] = yPos;\n\n            pageMesh.vertices[(index * 8) + 4] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 5] = yPos + (textureFrame.height * scale);\n\n            pageMesh.vertices[(index * 8) + 6] = xPos;\n            pageMesh.vertices[(index * 8) + 7] = yPos + (textureFrame.height * scale);\n\n            pageMesh.uvs[(index * 8) + 0] = textureUvs.x0;\n            pageMesh.uvs[(index * 8) + 1] = textureUvs.y0;\n\n            pageMesh.uvs[(index * 8) + 2] = textureUvs.x1;\n            pageMesh.uvs[(index * 8) + 3] = textureUvs.y1;\n\n            pageMesh.uvs[(index * 8) + 4] = textureUvs.x2;\n            pageMesh.uvs[(index * 8) + 5] = textureUvs.y2;\n\n            pageMesh.uvs[(index * 8) + 6] = textureUvs.x3;\n            pageMesh.uvs[(index * 8) + 7] = textureUvs.y3;\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n\n            // apply anchor\n            if (this.anchor.x !== 0 || this.anchor.y !== 0)\n            {\n                let vertexCount = 0;\n\n                const anchorOffsetX = this._textWidth * this.anchor.x;\n                const anchorOffsetY = this._textHeight * this.anchor.y;\n\n                for (let i = 0; i < pageMeshData.total; i++)\n                {\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n                }\n            }\n\n            this._maxLineHeight = maxLineHeight * scale;\n\n            const vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n            const textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n            const indexBuffer = pageMeshData.mesh.geometry.getIndex();\n\n            vertexBuffer.data = pageMeshData.vertices;\n            textureBuffer.data = pageMeshData.uvs;\n            indexBuffer.data = pageMeshData.indices;\n\n            vertexBuffer.update();\n            textureBuffer.update();\n            indexBuffer.update();\n        }\n\n        for (let i = 0; i < chars.length; i++)\n        {\n            charRenderDataPool.push(chars[i]);\n        }\n    }\n\n    updateTransform(): void\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    _render(renderer: Renderer): void\n    {\n        // Update the uniform\n        const { distanceFieldRange, distanceFieldType, size } = BitmapFont.available[this._fontName];\n\n        if (distanceFieldType !== 'none')\n        {\n            // Inject the shader code with the correct value\n            const { a, b, c, d } = this.worldTransform;\n\n            const dx = Math.sqrt((a * a) + (b * b));\n            const dy = Math.sqrt((c * c) + (d * d));\n            const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n            const fontScale = this._fontSize / size;\n\n            for (const mesh of this._activePagesMeshData)\n            {\n                mesh.mesh.shader.uniforms.uFWidth = worldScale * distanceFieldRange * fontScale * renderer.resolution;\n            }\n        }\n\n        super._render(renderer);\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     *\n     * @return - The rectangular bounding area\n     */\n    public getLocalBounds(): Rectangle\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     *\n     * @private\n     */\n    protected validate(): void\n    {\n        if (this.dirty)\n        {\n            this.updateText();\n            this.dirty = false;\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     *\n     * @default 0xffffff\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        if (this._tint === value) return;\n\n        this._tint = value;\n\n        for (let i = 0; i < this._activePagesMeshData.length; i++)\n        {\n            this._activePagesMeshData[i].mesh.tint = value;\n        }\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    public get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n\n    public set align(value: TextStyleAlign)\n    {\n        if (this._align !== value)\n        {\n            this._align = value;\n            this.dirty = true;\n        }\n    }\n\n    /** The name of the BitmapFont. */\n    public get fontName(): string\n    {\n        return this._fontName;\n    }\n\n    public set fontName(value: string)\n    {\n        if (!BitmapFont.available[value])\n        {\n            throw new Error(`Missing BitmapFont \"${value}\"`);\n        }\n\n        if (this._fontName !== value)\n        {\n            this._fontName = value;\n            this.dirty = true;\n        }\n    }\n\n    /** The size of the font to display. */\n    public get fontSize(): number\n    {\n        return this._fontSize;\n    }\n\n    public set fontSize(value: number)\n    {\n        if (this._fontSize !== value)\n        {\n            this._fontSize = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     */\n    public get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    public set anchor(value: ObservablePoint)\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /** The text of the BitmapText object. */\n    public get text(): string\n    {\n        return this._text;\n    }\n\n    public set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     */\n    public get maxWidth(): number\n    {\n        return this._maxWidth;\n    }\n\n    public set maxWidth(value: number)\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     *\n     * @readonly\n     */\n    public get maxLineHeight(): number\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @readonly\n     */\n    public get textWidth(): number\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /** Additional space between characters. */\n    public get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n\n    public set letterSpacing(value: number)\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    public get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    public set roundPixels(value: boolean)\n    {\n        if (value !== this._roundPixels)\n        {\n            this._roundPixels = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @readonly\n     */\n    public get textHeight(): number\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    destroy(options?: boolean | IDestroyOptions): void\n    {\n        const { _textureCache } = this;\n\n        for (const id in _textureCache)\n        {\n            const texture = _textureCache[id];\n\n            texture.destroy();\n            delete _textureCache[id];\n        }\n\n        this._textureCache = null;\n\n        super.destroy(options);\n    }\n}\n","import { LoaderResource } from '@pixi/loaders';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFont } from './BitmapFont';\n\nimport type { Loader } from '@pixi/loaders';\nimport type { Dict } from '@pixi/utils';\nimport type { Texture } from '@pixi/core';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n *\n * @memberof PIXI\n */\nexport class BitmapFontLoader\n{\n    /**\n     * Called when the plugin is installed.\n     *\n     * @see PIXI.Loader.registerPlugin\n     */\n    public static add(): void\n    {\n        LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.TEXT);\n    }\n\n    /**\n     * Called after a resource is loaded.\n     *\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(this: Loader, resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        const format = autoDetectFormat(resource.data);\n\n        // Resource was not recognised as any of the expected font data format\n        if (!format)\n        {\n            next();\n\n            return;\n        }\n\n        const baseUrl = BitmapFontLoader.getBaseUrl(this, resource);\n        const data = format.parse(resource.data);\n        const textures: Dict<Texture> = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page: LoaderResource): void =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === data.page.length)\n            {\n                resource.bitmapFont = BitmapFont.install(data, textures, true);\n                next();\n            }\n        };\n\n        for (let i = 0; i < data.page.length; ++i)\n        {\n            const pageFile = data.page[i].file;\n            const url = baseUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource: LoaderResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    }\n\n    /** Get folder path from a resource. */\n    private static getBaseUrl(loader: Loader, resource: LoaderResource): string\n    {\n        let resUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (resUrl === '.')\n            {\n                resUrl = '';\n            }\n\n            if (loader.baseUrl && resUrl)\n            {\n                // if baseurl has a trailing slash then add one to resUrl so the replace works below\n                if (loader.baseUrl.charAt(loader.baseUrl.length - 1) === '/')\n                {\n                    resUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from resUrl\n        resUrl = resUrl.replace(loader.baseUrl, '');\n\n        // if there is an resUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (resUrl && resUrl.charAt(resUrl.length - 1) !== '/')\n        {\n            resUrl += '/';\n        }\n\n        return resUrl;\n    }\n\n    /**\n     * Replacement for NodeJS's path.dirname\n     *\n     * @param {string} url - Path to get directory for\n     */\n    private static dirname(url: string): string\n    {\n        const dir = url\n            .replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n            .replace(/\\/$/, '') // replace trailing slash\n            .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n\n        // File request is relative, use current directory\n        if (dir === url)\n        {\n            return '.';\n        }\n        // Started with a slash\n        else if (dir === '')\n        {\n            return '/';\n        }\n\n        return dir;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}