{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { TicksClass } from \"../core/type/Ticks\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { isArray, isString } from \"../core/util/TypeCheck\";\nimport { Part } from \"./Part\";\nimport { ToneEvent } from \"./ToneEvent\";\n/**\n * A sequence is an alternate notation of a part. Instead\n * of passing in an array of [time, event] pairs, pass\n * in an array of events which will be spaced at the\n * given subdivision. Sub-arrays will subdivide that beat\n * by the number of items are in the array.\n * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n * @example\n * const synth = new Tone.Synth().toDestination();\n * const seq = new Tone.Sequence((time, note) => {\n * \tsynth.triggerAttackRelease(note, 0.1, time);\n * \t// subdivisions are given as subarrays\n * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]).start(0);\n * Tone.Transport.start();\n * @category Event\n */\n\nexport var Sequence = /*#__PURE__*/function (_ToneEvent) {\n  _inherits(Sequence, _ToneEvent);\n\n  var _super = _createSuper(Sequence);\n\n  function Sequence() {\n    var _this;\n\n    _classCallCheck(this, Sequence);\n\n    _this = _super.call(this, optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]));\n    _this.name = \"Sequence\";\n    /**\n     * The object responsible for scheduling all of the events\n     */\n\n    _this._part = new Part({\n      callback: _this._seqCallback.bind(_assertThisInitialized(_this)),\n      context: _this.context\n    });\n    /**\n     * private reference to all of the sequence proxies\n     */\n\n    _this._events = [];\n    /**\n     * The proxied array\n     */\n\n    _this._eventsArray = [];\n    var options = optionsFromArguments(Sequence.getDefaults(), arguments, [\"callback\", \"events\", \"subdivision\"]);\n    _this._subdivision = _this.toTicks(options.subdivision);\n    _this.events = options.events; // set all of the values\n\n    _this.loop = options.loop;\n    _this.loopStart = options.loopStart;\n    _this.loopEnd = options.loopEnd;\n    _this.playbackRate = options.playbackRate;\n    _this.probability = options.probability;\n    _this.humanize = options.humanize;\n    _this.mute = options.mute;\n    _this.playbackRate = options.playbackRate;\n    return _this;\n  }\n\n  _createClass(Sequence, [{\n    key: \"_seqCallback\",\n    value:\n    /**\n     * The internal callback for when an event is invoked\n     */\n    function _seqCallback(time, value) {\n      if (value !== null) {\n        this.callback(time, value);\n      }\n    }\n    /**\n     * The sequence\n     */\n\n  }, {\n    key: \"events\",\n    get: function get() {\n      return this._events;\n    },\n    set: function set(s) {\n      this.clear();\n      this._eventsArray = s;\n      this._events = this._createSequence(this._eventsArray);\n\n      this._eventsUpdated();\n    }\n    /**\n     * Start the part at the given time.\n     * @param  time    When to start the part.\n     * @param  offset  The offset index to start at\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(time, offset) {\n      this._part.start(time, offset ? this._indexTime(offset) : offset);\n\n      return this;\n    }\n    /**\n     * Stop the part at the given time.\n     * @param  time  When to stop the part.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._part.stop(time);\n\n      return this;\n    }\n    /**\n     * The subdivision of the sequence. This can only be\n     * set in the constructor. The subdivision is the\n     * interval between successive steps.\n     */\n\n  }, {\n    key: \"subdivision\",\n    get: function get() {\n      return new TicksClass(this.context, this._subdivision).toSeconds();\n    }\n    /**\n     * Create a sequence proxy which can be monitored to create subsequences\n     */\n\n  }, {\n    key: \"_createSequence\",\n    value: function _createSequence(array) {\n      var _this2 = this;\n\n      return new Proxy(array, {\n        get: function get(target, property) {\n          // property is index in this case\n          return target[property];\n        },\n        set: function set(target, property, value) {\n          if (isString(property) && isFinite(parseInt(property, 10))) {\n            if (isArray(value)) {\n              target[property] = _this2._createSequence(value);\n            } else {\n              target[property] = value;\n            }\n          } else {\n            target[property] = value;\n          }\n\n          _this2._eventsUpdated(); // return true to accept the changes\n\n\n          return true;\n        }\n      });\n    }\n    /**\n     * When the sequence has changed, all of the events need to be recreated\n     */\n\n  }, {\n    key: \"_eventsUpdated\",\n    value: function _eventsUpdated() {\n      this._part.clear();\n\n      this._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset); // update the loopEnd\n\n\n      this.loopEnd = this.loopEnd;\n    }\n    /**\n     * reschedule all of the events that need to be rescheduled\n     */\n\n  }, {\n    key: \"_rescheduleSequence\",\n    value: function _rescheduleSequence(sequence, subdivision, startOffset) {\n      var _this3 = this;\n\n      sequence.forEach(function (value, index) {\n        var eventOffset = index * subdivision + startOffset;\n\n        if (isArray(value)) {\n          _this3._rescheduleSequence(value, subdivision / value.length, eventOffset);\n        } else {\n          var startTime = new TicksClass(_this3.context, eventOffset, \"i\").toSeconds();\n\n          _this3._part.add(startTime, value);\n        }\n      });\n    }\n    /**\n     * Get the time of the index given the Sequence's subdivision\n     * @param  index\n     * @return The time of that index\n     */\n\n  }, {\n    key: \"_indexTime\",\n    value: function _indexTime(index) {\n      return new TicksClass(this.context, index * this._subdivision + this.startOffset).toSeconds();\n    }\n    /**\n     * Clear all of the events\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._part.clear();\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Sequence.prototype), \"dispose\", this).call(this);\n\n      this._part.dispose();\n\n      return this;\n    } //-------------------------------------\n    // PROXY CALLS\n    //-------------------------------------\n\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._part.loop;\n    },\n    set: function set(l) {\n      this._part.loop = l;\n    }\n    /**\n     * The index at which the sequence should start looping\n     */\n\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return this._loopStart;\n    },\n    set: function set(index) {\n      this._loopStart = index;\n      this._part.loopStart = this._indexTime(index);\n    }\n    /**\n     * The index at which the sequence should end looping\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return this._loopEnd;\n    },\n    set: function set(index) {\n      this._loopEnd = index;\n\n      if (index === 0) {\n        this._part.loopEnd = this._indexTime(this._eventsArray.length);\n      } else {\n        this._part.loopEnd = this._indexTime(index);\n      }\n    }\n  }, {\n    key: \"startOffset\",\n    get: function get() {\n      return this._part.startOffset;\n    },\n    set: function set(start) {\n      this._part.startOffset = start;\n    }\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._part.playbackRate;\n    },\n    set: function set(rate) {\n      this._part.playbackRate = rate;\n    }\n  }, {\n    key: \"probability\",\n    get: function get() {\n      return this._part.probability;\n    },\n    set: function set(prob) {\n      this._part.probability = prob;\n    }\n  }, {\n    key: \"progress\",\n    get: function get() {\n      return this._part.progress;\n    }\n  }, {\n    key: \"humanize\",\n    get: function get() {\n      return this._part.humanize;\n    },\n    set: function set(variation) {\n      this._part.humanize = variation;\n    }\n    /**\n     * The number of scheduled events\n     */\n\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._part.length;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(omitFromObject(ToneEvent.getDefaults(), [\"value\"]), {\n        events: [],\n        loop: true,\n        loopEnd: 0,\n        loopStart: 0,\n        subdivision: \"8n\"\n      });\n    }\n  }]);\n\n  return Sequence;\n}(ToneEvent);","map":{"version":3,"mappings":"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","names":["TicksClass","omitFromObject","optionsFromArguments","isArray","isString","Part","ToneEvent","Sequence","getDefaults","arguments","callback","_seqCallback","bind","context","options","_subdivision","toTicks","subdivision","events","loop","loopStart","loopEnd","playbackRate","probability","humanize","mute","time","value","_events","s","clear","_eventsArray","_createSequence","_eventsUpdated","offset","_part","start","_indexTime","stop","toSeconds","array","Proxy","get","target","property","set","isFinite","parseInt","_rescheduleSequence","startOffset","sequence","forEach","index","eventOffset","length","startTime","add","dispose","l","_loopStart","_loopEnd","rate","prob","progress","variation","Object","assign"],"sourceRoot":"","sources":["../../../Tone/event/Sequence.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}