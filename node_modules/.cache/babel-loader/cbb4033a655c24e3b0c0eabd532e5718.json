{"ast":null,"code":"export var createNativeAudioDestinationNodeFactory = function createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors) {\n  return function (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) {\n    var nativeAudioDestinationNode = nativeContext.destination; // Bug #132: Safari does not have the correct channelCount.\n\n    if (nativeAudioDestinationNode.channelCount !== channelCount) {\n      try {\n        nativeAudioDestinationNode.channelCount = channelCount;\n      } catch (_unused) {// Bug #169: Safari throws an error on each attempt to change the channelCount.\n      }\n    } // Bug #83: Safari does not have the correct channelCountMode.\n\n\n    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n      nativeAudioDestinationNode.channelCountMode = 'explicit';\n    } // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n\n\n    if (nativeAudioDestinationNode.maxChannelCount === 0) {\n      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n        value: channelCount\n      });\n    } // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n\n\n    var gainNode = createNativeGainNode(nativeContext, {\n      channelCount: channelCount,\n      channelCountMode: nativeAudioDestinationNode.channelCountMode,\n      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n      gain: 1\n    });\n    overwriteAccessors(gainNode, 'channelCount', function (get) {\n      return function () {\n        return get.call(gainNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(gainNode, value);\n\n        try {\n          nativeAudioDestinationNode.channelCount = value;\n        } catch (err) {\n          // Bug #169: Safari throws an error on each attempt to change the channelCount.\n          if (value > nativeAudioDestinationNode.maxChannelCount) {\n            throw err;\n          }\n        }\n      };\n    });\n    overwriteAccessors(gainNode, 'channelCountMode', function (get) {\n      return function () {\n        return get.call(gainNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(gainNode, value);\n        nativeAudioDestinationNode.channelCountMode = value;\n      };\n    });\n    overwriteAccessors(gainNode, 'channelInterpretation', function (get) {\n      return function () {\n        return get.call(gainNode);\n      };\n    }, function (set) {\n      return function (value) {\n        set.call(gainNode, value);\n        nativeAudioDestinationNode.channelInterpretation = value;\n      };\n    });\n    Object.defineProperty(gainNode, 'maxChannelCount', {\n      get: function get() {\n        return nativeAudioDestinationNode.maxChannelCount;\n      }\n    }); // @todo This should be disconnected when the context is closed.\n\n    gainNode.connect(nativeAudioDestinationNode);\n    return gainNode;\n  };\n};","map":{"version":3,"mappings":"AAEA,OAAO,IAAMA,uCAAuC,GAA8C,SAArFA,uCAAqF,CAC9FC,oBAD8F,EAE9FC,kBAF8F,EAG9F;AACA,SAAO,UAACC,aAAD,EAAgBC,YAAhB,EAA8BC,iCAA9B,EAAmE;AACtE,QAAMC,0BAA0B,GAAGH,aAAa,CAACI,WAAjD,CADsE,CAGtE;;AACA,QAAID,0BAA0B,CAACF,YAA3B,KAA4CA,YAAhD,EAA8D;AAC1D,UAAI;AACAE,kCAA0B,CAACF,YAA3B,GAA0CA,YAA1C;AACH,OAFD,CAEE,gBAAM,CACJ;AACH;AACJ,KAVqE,CAYtE;;;AACA,QAAIC,iCAAiC,IAAIC,0BAA0B,CAACE,gBAA3B,KAAgD,UAAzF,EAAqG;AACjGF,gCAA0B,CAACE,gBAA3B,GAA8C,UAA9C;AACH,KAfqE,CAiBtE;;;AACA,QAAIF,0BAA0B,CAACG,eAA3B,KAA+C,CAAnD,EAAsD;AAClDC,YAAM,CAACC,cAAP,CAAsBL,0BAAtB,EAAkD,iBAAlD,EAAqE;AACjEM,aAAK,EAAER;AAD0D,OAArE;AAGH,KAtBqE,CAwBtE;;;AACA,QAAMS,QAAQ,GAAGZ,oBAAoB,CAACE,aAAD,EAAgB;AACjDC,kBAAY,EAAZA,YADiD;AAEjDI,sBAAgB,EAAEF,0BAA0B,CAACE,gBAFI;AAGjDM,2BAAqB,EAAER,0BAA0B,CAACQ,qBAHD;AAIjDC,UAAI,EAAE;AAJ2C,KAAhB,CAArC;AAOAb,sBAAkB,CACdW,QADc,EAEd,cAFc,EAGd,UAACG,GAAD;AAAA,aAAS;AAAA,eAAMA,GAAG,CAACC,IAAJ,CAASJ,QAAT,CAAN;AAAA,OAAT;AAAA,KAHc,EAId,UAACK,GAAD;AAAA,aAAS,UAACN,KAAD,EAAU;AACfM,WAAG,CAACD,IAAJ,CAASJ,QAAT,EAAmBD,KAAnB;;AAEA,YAAI;AACAN,oCAA0B,CAACF,YAA3B,GAA0CQ,KAA1C;AACH,SAFD,CAEE,OAAOO,GAAP,EAAY;AACV;AACA,cAAIP,KAAK,GAAGN,0BAA0B,CAACG,eAAvC,EAAwD;AACpD,kBAAMU,GAAN;AACH;AACJ;AACJ,OAXD;AAAA,KAJc,CAAlB;AAkBAjB,sBAAkB,CACdW,QADc,EAEd,kBAFc,EAGd,UAACG,GAAD;AAAA,aAAS;AAAA,eAAMA,GAAG,CAACC,IAAJ,CAASJ,QAAT,CAAN;AAAA,OAAT;AAAA,KAHc,EAId,UAACK,GAAD;AAAA,aAAS,UAACN,KAAD,EAAU;AACfM,WAAG,CAACD,IAAJ,CAASJ,QAAT,EAAmBD,KAAnB;AACAN,kCAA0B,CAACE,gBAA3B,GAA8CI,KAA9C;AACH,OAHD;AAAA,KAJc,CAAlB;AAUAV,sBAAkB,CACdW,QADc,EAEd,uBAFc,EAGd,UAACG,GAAD;AAAA,aAAS;AAAA,eAAMA,GAAG,CAACC,IAAJ,CAASJ,QAAT,CAAN;AAAA,OAAT;AAAA,KAHc,EAId,UAACK,GAAD;AAAA,aAAS,UAACN,KAAD,EAAU;AACfM,WAAG,CAACD,IAAJ,CAASJ,QAAT,EAAmBD,KAAnB;AACAN,kCAA0B,CAACQ,qBAA3B,GAAmDF,KAAnD;AACH,OAHD;AAAA,KAJc,CAAlB;AAUAF,UAAM,CAACC,cAAP,CAAsBE,QAAtB,EAAgC,iBAAhC,EAAmD;AAC/CG,SAAG,EAAE;AAAA,eAAMV,0BAA0B,CAACG,eAAjC;AAAA;AAD0C,KAAnD,EAtEsE,CA0EtE;;AACAI,YAAQ,CAACO,OAAT,CAAiBd,0BAAjB;AAEA,WAA8FO,QAA9F;AACH,GA9ED;AA+EH,CAnFM","names":["createNativeAudioDestinationNodeFactory","createNativeGainNode","overwriteAccessors","nativeContext","channelCount","isNodeOfNativeOfflineAudioContext","nativeAudioDestinationNode","destination","channelCountMode","maxChannelCount","Object","defineProperty","value","gainNode","channelInterpretation","gain","get","call","set","err","connect"],"sourceRoot":"","sources":["../../../src/factories/native-audio-destination-node.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}