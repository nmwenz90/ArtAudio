{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nexport var createBaseAudioContextConstructor = function createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, _decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) {\n  return /*#__PURE__*/function (_minimalBaseAudioCont) {\n    _inherits(BaseAudioContext, _minimalBaseAudioCont);\n\n    var _super = _createSuper(BaseAudioContext);\n\n    function BaseAudioContext(_nativeContext, numberOfChannels) {\n      var _this;\n\n      _classCallCheck(this, BaseAudioContext);\n\n      _this = _super.call(this, _nativeContext, numberOfChannels);\n      _this._nativeContext = _nativeContext;\n      _this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {\n        addModule: function addModule(moduleURL, options) {\n          return addAudioWorkletModule(_assertThisInitialized(_this), moduleURL, options);\n        }\n      };\n      return _this;\n    }\n\n    _createClass(BaseAudioContext, [{\n      key: \"audioWorklet\",\n      get: function get() {\n        return this._audioWorklet;\n      }\n    }, {\n      key: \"createAnalyser\",\n      value: function createAnalyser() {\n        return new analyserNodeConstructor(this);\n      }\n    }, {\n      key: \"createBiquadFilter\",\n      value: function createBiquadFilter() {\n        return new biquadFilterNodeConstructor(this);\n      }\n    }, {\n      key: \"createBuffer\",\n      value: function createBuffer(numberOfChannels, length, sampleRate) {\n        return new audioBufferConstructor({\n          length: length,\n          numberOfChannels: numberOfChannels,\n          sampleRate: sampleRate\n        });\n      }\n    }, {\n      key: \"createBufferSource\",\n      value: function createBufferSource() {\n        return new audioBufferSourceNodeConstructor(this);\n      }\n    }, {\n      key: \"createChannelMerger\",\n      value: function createChannelMerger() {\n        var numberOfInputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n        return new channelMergerNodeConstructor(this, {\n          numberOfInputs: numberOfInputs\n        });\n      }\n    }, {\n      key: \"createChannelSplitter\",\n      value: function createChannelSplitter() {\n        var numberOfOutputs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n        return new channelSplitterNodeConstructor(this, {\n          numberOfOutputs: numberOfOutputs\n        });\n      }\n    }, {\n      key: \"createConstantSource\",\n      value: function createConstantSource() {\n        return new constantSourceNodeConstructor(this);\n      }\n    }, {\n      key: \"createConvolver\",\n      value: function createConvolver() {\n        return new convolverNodeConstructor(this);\n      }\n    }, {\n      key: \"createDelay\",\n      value: function createDelay() {\n        var maxDelayTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return new delayNodeConstructor(this, {\n          maxDelayTime: maxDelayTime\n        });\n      }\n    }, {\n      key: \"createDynamicsCompressor\",\n      value: function createDynamicsCompressor() {\n        return new dynamicsCompressorNodeConstructor(this);\n      }\n    }, {\n      key: \"createGain\",\n      value: function createGain() {\n        return new gainNodeConstructor(this);\n      }\n    }, {\n      key: \"createIIRFilter\",\n      value: function createIIRFilter(feedforward, feedback) {\n        return new iIRFilterNodeConstructor(this, {\n          feedback: feedback,\n          feedforward: feedforward\n        });\n      }\n    }, {\n      key: \"createOscillator\",\n      value: function createOscillator() {\n        return new oscillatorNodeConstructor(this);\n      }\n    }, {\n      key: \"createPanner\",\n      value: function createPanner() {\n        return new pannerNodeConstructor(this);\n      }\n    }, {\n      key: \"createPeriodicWave\",\n      value: function createPeriodicWave(real, imag) {\n        var constraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n          disableNormalization: false\n        };\n        return new periodicWaveConstructor(this, _objectSpread(_objectSpread({}, constraints), {}, {\n          imag: imag,\n          real: real\n        }));\n      }\n    }, {\n      key: \"createStereoPanner\",\n      value: function createStereoPanner() {\n        return new stereoPannerNodeConstructor(this);\n      }\n    }, {\n      key: \"createWaveShaper\",\n      value: function createWaveShaper() {\n        return new waveShaperNodeConstructor(this);\n      }\n    }, {\n      key: \"decodeAudioData\",\n      value: function decodeAudioData(audioData, successCallback, errorCallback) {\n        return _decodeAudioData(this._nativeContext, audioData).then(function (audioBuffer) {\n          if (typeof successCallback === 'function') {\n            successCallback(audioBuffer);\n          }\n\n          return audioBuffer;\n        }, function (err) {\n          if (typeof errorCallback === 'function') {\n            errorCallback(err);\n          }\n\n          throw err;\n        });\n      }\n    }]);\n\n    return BaseAudioContext;\n  }(minimalBaseAudioContextConstructor);\n};","map":{"version":3,"mappings":"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","names":["createBaseAudioContextConstructor","addAudioWorkletModule","analyserNodeConstructor","audioBufferConstructor","audioBufferSourceNodeConstructor","biquadFilterNodeConstructor","channelMergerNodeConstructor","channelSplitterNodeConstructor","constantSourceNodeConstructor","convolverNodeConstructor","decodeAudioData","delayNodeConstructor","dynamicsCompressorNodeConstructor","gainNodeConstructor","iIRFilterNodeConstructor","minimalBaseAudioContextConstructor","oscillatorNodeConstructor","pannerNodeConstructor","periodicWaveConstructor","stereoPannerNodeConstructor","waveShaperNodeConstructor","_nativeContext","numberOfChannels","_audioWorklet","undefined","addModule","moduleURL","options","length","sampleRate","numberOfInputs","numberOfOutputs","maxDelayTime","feedforward","feedback","real","imag","constraints","disableNormalization","audioData","successCallback","errorCallback","then","audioBuffer","err"],"sourceRoot":"","sources":["../../../src/factories/base-audio-context-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}