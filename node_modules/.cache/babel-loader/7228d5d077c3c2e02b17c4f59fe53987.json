{"ast":null,"code":"/*!\n * @pixi/particle-container - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/particle-container is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { BLEND_MODES, TYPES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { hex2rgb, createIndicesForQuads, correctBlendMode, premultiplyRgba, premultiplyTint } from '@pixi/utils';\nimport { Geometry, Buffer, ObjectRenderer, Shader, State } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use:\n * ```js\n * let container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = PIXI.Sprite.from(\"myImage.png\");\n *     container.addChild(sprite);\n * }\n * ```\n *\n * And here you have a hundred sprites that will be rendered at the speed of light.\n *\n * @memberof PIXI\n */\n\n\nvar ParticleContainer =\n/** @class */\nfunction (_super) {\n  __extends(ParticleContainer, _super);\n  /**\n   * @param maxSize - The maximum number of particles that can be rendered by the container.\n   *  Affects size of allocated buffers.\n   * @param properties - The properties of children that should be uploaded to the gpu and applied.\n   * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n   *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n   * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n   * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n   * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n   * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n   * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n   * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n   *  there are more than `maxSize` particles.\n   */\n\n\n  function ParticleContainer(maxSize, properties, batchSize, autoResize) {\n    if (maxSize === void 0) {\n      maxSize = 1500;\n    }\n\n    if (batchSize === void 0) {\n      batchSize = 16384;\n    }\n\n    if (autoResize === void 0) {\n      autoResize = false;\n    }\n\n    var _this = _super.call(this) || this; // Making sure the batch size is valid\n    // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n    // so max number of particles is 65536 / 4 = 16384\n\n\n    var maxBatchSize = 16384;\n\n    if (batchSize > maxBatchSize) {\n      batchSize = maxBatchSize;\n    }\n\n    _this._properties = [false, true, false, false, false];\n    _this._maxSize = maxSize;\n    _this._batchSize = batchSize;\n    _this._buffers = null;\n    _this._bufferUpdateIDs = [];\n    _this._updateID = 0;\n    _this.interactiveChildren = false;\n    _this.blendMode = BLEND_MODES.NORMAL;\n    _this.autoResize = autoResize;\n    _this.roundPixels = true;\n    _this.baseTexture = null;\n\n    _this.setProperties(properties);\n\n    _this._tint = 0;\n    _this.tintRgb = new Float32Array(4);\n    _this.tint = 0xFFFFFF;\n    return _this;\n  }\n  /**\n   * Sets the private properties array to dynamic / static based on the passed properties object\n   *\n   * @param properties - The properties to be uploaded\n   */\n\n\n  ParticleContainer.prototype.setProperties = function (properties) {\n    if (properties) {\n      this._properties[0] = 'vertices' in properties || 'scale' in properties ? !!properties.vertices || !!properties.scale : this._properties[0];\n      this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n      this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n      this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n      this._properties[4] = 'tint' in properties || 'alpha' in properties ? !!properties.tint || !!properties.alpha : this._properties[4];\n    }\n  };\n\n  ParticleContainer.prototype.updateTransform = function () {\n    // TODO don't need to!\n    this.displayObjectUpdateTransform();\n  };\n\n  Object.defineProperty(ParticleContainer.prototype, \"tint\", {\n    /**\n     * The tint applied to the container. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     *\n     * @default 0xFFFFFF\n     */\n    get: function get() {\n      return this._tint;\n    },\n    set: function set(value) {\n      this._tint = value;\n      hex2rgb(value, this.tintRgb);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Renders the container using the WebGL renderer.\n   *\n   * @param renderer - The WebGL renderer.\n   */\n\n  ParticleContainer.prototype.render = function (renderer) {\n    var _this = this;\n\n    if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable) {\n      return;\n    }\n\n    if (!this.baseTexture) {\n      this.baseTexture = this.children[0]._texture.baseTexture;\n\n      if (!this.baseTexture.valid) {\n        this.baseTexture.once('update', function () {\n          return _this.onChildrenChange(0);\n        });\n      }\n    }\n\n    renderer.batch.setObjectRenderer(renderer.plugins.particle);\n    renderer.plugins.particle.render(this);\n  };\n  /**\n   * Set the flag that static data should be updated to true\n   *\n   * @param smallestChildIndex - The smallest child index.\n   */\n\n\n  ParticleContainer.prototype.onChildrenChange = function (smallestChildIndex) {\n    var bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n\n    while (this._bufferUpdateIDs.length < bufferIndex) {\n      this._bufferUpdateIDs.push(0);\n    }\n\n    this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n  };\n\n  ParticleContainer.prototype.dispose = function () {\n    if (this._buffers) {\n      for (var i = 0; i < this._buffers.length; ++i) {\n        this._buffers[i].destroy();\n      }\n\n      this._buffers = null;\n    }\n  };\n  /**\n   * Destroys the container\n   *\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param {boolean} [options.children=false] - if set to true, all the children will have their\n   *  destroy method called as well. 'options' will be passed on to those calls.\n   * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the texture of the child sprite\n   * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the base texture of the child sprite\n   */\n\n\n  ParticleContainer.prototype.destroy = function (options) {\n    _super.prototype.destroy.call(this, options);\n\n    this.dispose();\n    this._properties = null;\n    this._buffers = null;\n    this._bufferUpdateIDs = null;\n  };\n\n  return ParticleContainer;\n}(Container);\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @private\n * @memberof PIXI\n */\n\n\nvar ParticleBuffer =\n/** @class */\nfunction () {\n  /**\n   * @param {object} properties - The properties to upload.\n   * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n   * @param {number} size - The size of the batch.\n   */\n  function ParticleBuffer(properties, dynamicPropertyFlags, size) {\n    this.geometry = new Geometry();\n    this.indexBuffer = null;\n    this.size = size;\n    this.dynamicProperties = [];\n    this.staticProperties = [];\n\n    for (var i = 0; i < properties.length; ++i) {\n      var property = properties[i]; // Make copy of properties object so that when we edit the offset it doesn't\n      // change all other instances of the object literal\n\n      property = {\n        attributeName: property.attributeName,\n        size: property.size,\n        uploadFunction: property.uploadFunction,\n        type: property.type || TYPES.FLOAT,\n        offset: property.offset\n      };\n\n      if (dynamicPropertyFlags[i]) {\n        this.dynamicProperties.push(property);\n      } else {\n        this.staticProperties.push(property);\n      }\n    }\n\n    this.staticStride = 0;\n    this.staticBuffer = null;\n    this.staticData = null;\n    this.staticDataUint32 = null;\n    this.dynamicStride = 0;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n    this.dynamicDataUint32 = null;\n    this._updateID = 0;\n    this.initBuffers();\n  }\n  /** Sets up the renderer context and necessary buffers. */\n\n\n  ParticleBuffer.prototype.initBuffers = function () {\n    var geometry = this.geometry;\n    var dynamicOffset = 0;\n    this.indexBuffer = new Buffer(createIndicesForQuads(this.size), true, true);\n    geometry.addIndex(this.indexBuffer);\n    this.dynamicStride = 0;\n\n    for (var i = 0; i < this.dynamicProperties.length; ++i) {\n      var property = this.dynamicProperties[i];\n      property.offset = dynamicOffset;\n      dynamicOffset += property.size;\n      this.dynamicStride += property.size;\n    }\n\n    var dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n    this.dynamicData = new Float32Array(dynBuffer);\n    this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n    this.dynamicBuffer = new Buffer(this.dynamicData, false, false); // static //\n\n    var staticOffset = 0;\n    this.staticStride = 0;\n\n    for (var i = 0; i < this.staticProperties.length; ++i) {\n      var property = this.staticProperties[i];\n      property.offset = staticOffset;\n      staticOffset += property.size;\n      this.staticStride += property.size;\n    }\n\n    var statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n    this.staticData = new Float32Array(statBuffer);\n    this.staticDataUint32 = new Uint32Array(statBuffer);\n    this.staticBuffer = new Buffer(this.staticData, true, false);\n\n    for (var i = 0; i < this.dynamicProperties.length; ++i) {\n      var property = this.dynamicProperties[i];\n      geometry.addAttribute(property.attributeName, this.dynamicBuffer, 0, property.type === TYPES.UNSIGNED_BYTE, property.type, this.dynamicStride * 4, property.offset * 4);\n    }\n\n    for (var i = 0; i < this.staticProperties.length; ++i) {\n      var property = this.staticProperties[i];\n      geometry.addAttribute(property.attributeName, this.staticBuffer, 0, property.type === TYPES.UNSIGNED_BYTE, property.type, this.staticStride * 4, property.offset * 4);\n    }\n  };\n  /**\n   * Uploads the dynamic properties.\n   *\n   * @param children - The children to upload.\n   * @param startIndex - The index to start at.\n   * @param amount - The number to upload.\n   */\n\n\n  ParticleBuffer.prototype.uploadDynamic = function (children, startIndex, amount) {\n    for (var i = 0; i < this.dynamicProperties.length; i++) {\n      var property = this.dynamicProperties[i];\n      property.uploadFunction(children, startIndex, amount, property.type === TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData, this.dynamicStride, property.offset);\n    }\n\n    this.dynamicBuffer._updateID++;\n  };\n  /**\n   * Uploads the static properties.\n   *\n   * @param children - The children to upload.\n   * @param startIndex - The index to start at.\n   * @param amount - The number to upload.\n   */\n\n\n  ParticleBuffer.prototype.uploadStatic = function (children, startIndex, amount) {\n    for (var i = 0; i < this.staticProperties.length; i++) {\n      var property = this.staticProperties[i];\n      property.uploadFunction(children, startIndex, amount, property.type === TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData, this.staticStride, property.offset);\n    }\n\n    this.staticBuffer._updateID++;\n  };\n  /** Destroys the ParticleBuffer. */\n\n\n  ParticleBuffer.prototype.destroy = function () {\n    this.indexBuffer = null;\n    this.dynamicProperties = null;\n    this.dynamicBuffer = null;\n    this.dynamicData = null;\n    this.dynamicDataUint32 = null;\n    this.staticProperties = null;\n    this.staticBuffer = null;\n    this.staticData = null;\n    this.staticDataUint32 = null; // all buffers are destroyed inside geometry\n\n    this.geometry.destroy();\n  };\n\n  return ParticleBuffer;\n}();\n\nvar fragment = \"varying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uSampler;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\\n    gl_FragColor = color;\\n}\";\nvar vertex = \"attribute vec2 aVertexPosition;\\nattribute vec2 aTextureCoord;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPositionCoord;\\nattribute float aRotation;\\n\\nuniform mat3 translationMatrix;\\nuniform vec4 uColor;\\n\\nvarying vec2 vTextureCoord;\\nvarying vec4 vColor;\\n\\nvoid main(void){\\n    float x = (aVertexPosition.x) * cos(aRotation) - (aVertexPosition.y) * sin(aRotation);\\n    float y = (aVertexPosition.x) * sin(aRotation) + (aVertexPosition.y) * cos(aRotation);\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPositionCoord;\\n\\n    gl_Position = vec4((translationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    vTextureCoord = aTextureCoord;\\n    vColor = aColor * uColor;\\n}\\n\";\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleRenderer.java\n */\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n *\n * @memberof PIXI\n */\n\nvar ParticleRenderer =\n/** @class */\nfunction (_super) {\n  __extends(ParticleRenderer, _super);\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   */\n\n\n  function ParticleRenderer(renderer) {\n    var _this = _super.call(this, renderer) || this; // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n    // so max number of particles is 65536 / 4 = 16384\n    // and max number of element in the index buffer is 16384 * 6 = 98304\n    // Creating a full index buffer, overhead is 98304 * 2 = 196Ko\n    // let numIndices = 98304;\n\n\n    _this.shader = null;\n    _this.properties = null;\n    _this.tempMatrix = new Matrix();\n    _this.properties = [// verticesData\n    {\n      attributeName: 'aVertexPosition',\n      size: 2,\n      uploadFunction: _this.uploadVertices,\n      offset: 0\n    }, // positionData\n    {\n      attributeName: 'aPositionCoord',\n      size: 2,\n      uploadFunction: _this.uploadPosition,\n      offset: 0\n    }, // rotationData\n    {\n      attributeName: 'aRotation',\n      size: 1,\n      uploadFunction: _this.uploadRotation,\n      offset: 0\n    }, // uvsData\n    {\n      attributeName: 'aTextureCoord',\n      size: 2,\n      uploadFunction: _this.uploadUvs,\n      offset: 0\n    }, // tintData\n    {\n      attributeName: 'aColor',\n      size: 1,\n      type: TYPES.UNSIGNED_BYTE,\n      uploadFunction: _this.uploadTint,\n      offset: 0\n    }];\n    _this.shader = Shader.from(vertex, fragment, {});\n    _this.state = State.for2d();\n    return _this;\n  }\n  /**\n   * Renders the particle container object.\n   *\n   * @param container - The container to render using this ParticleRenderer.\n   */\n\n\n  ParticleRenderer.prototype.render = function (container) {\n    var children = container.children;\n    var maxSize = container._maxSize;\n    var batchSize = container._batchSize;\n    var renderer = this.renderer;\n    var totalChildren = children.length;\n\n    if (totalChildren === 0) {\n      return;\n    } else if (totalChildren > maxSize && !container.autoResize) {\n      totalChildren = maxSize;\n    }\n\n    var buffers = container._buffers;\n\n    if (!buffers) {\n      buffers = container._buffers = this.generateBuffers(container);\n    }\n\n    var baseTexture = children[0]._texture.baseTexture; // if the uvs have not updated then no point rendering just yet!\n\n    this.state.blendMode = correctBlendMode(container.blendMode, baseTexture.alphaMode);\n    renderer.state.set(this.state);\n    var gl = renderer.gl;\n    var m = container.worldTransform.copyTo(this.tempMatrix);\n    m.prepend(renderer.globalUniforms.uniforms.projectionMatrix);\n    this.shader.uniforms.translationMatrix = m.toArray(true);\n    this.shader.uniforms.uColor = premultiplyRgba(container.tintRgb, container.worldAlpha, this.shader.uniforms.uColor, baseTexture.alphaMode);\n    this.shader.uniforms.uSampler = baseTexture;\n    this.renderer.shader.bind(this.shader);\n    var updateStatic = false; // now lets upload and render the buffers..\n\n    for (var i = 0, j = 0; i < totalChildren; i += batchSize, j += 1) {\n      var amount = totalChildren - i;\n\n      if (amount > batchSize) {\n        amount = batchSize;\n      }\n\n      if (j >= buffers.length) {\n        buffers.push(this._generateOneMoreBuffer(container));\n      }\n\n      var buffer = buffers[j]; // we always upload the dynamic\n\n      buffer.uploadDynamic(children, i, amount);\n      var bid = container._bufferUpdateIDs[j] || 0;\n      updateStatic = updateStatic || buffer._updateID < bid; // we only upload the static content when we have to!\n\n      if (updateStatic) {\n        buffer._updateID = container._updateID;\n        buffer.uploadStatic(children, i, amount);\n      } // bind the buffer\n\n\n      renderer.geometry.bind(buffer.geometry);\n      gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n    }\n  };\n  /**\n   * Creates one particle buffer for each child in the container we want to render and updates internal properties.\n   *\n   * @param container - The container to render using this ParticleRenderer\n   * @return - The buffers\n   */\n\n\n  ParticleRenderer.prototype.generateBuffers = function (container) {\n    var buffers = [];\n    var size = container._maxSize;\n    var batchSize = container._batchSize;\n    var dynamicPropertyFlags = container._properties;\n\n    for (var i = 0; i < size; i += batchSize) {\n      buffers.push(new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n    }\n\n    return buffers;\n  };\n  /**\n   * Creates one more particle buffer, because container has autoResize feature.\n   *\n   * @param container - The container to render using this ParticleRenderer\n   * @return - The generated buffer\n   */\n\n\n  ParticleRenderer.prototype._generateOneMoreBuffer = function (container) {\n    var batchSize = container._batchSize;\n    var dynamicPropertyFlags = container._properties;\n    return new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n  };\n  /**\n   * Uploads the vertices.\n   *\n   * @param children - the array of display objects to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their vertices uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n\n\n  ParticleRenderer.prototype.uploadVertices = function (children, startIndex, amount, array, stride, offset) {\n    var w0 = 0;\n    var w1 = 0;\n    var h0 = 0;\n    var h1 = 0;\n\n    for (var i = 0; i < amount; ++i) {\n      var sprite = children[startIndex + i];\n      var texture = sprite._texture;\n      var sx = sprite.scale.x;\n      var sy = sprite.scale.y;\n      var trim = texture.trim;\n      var orig = texture.orig;\n\n      if (trim) {\n        // if the sprite is trimmed and is not a tilingsprite then we need to add the\n        // extra space before transforming the sprite coords..\n        w1 = trim.x - sprite.anchor.x * orig.width;\n        w0 = w1 + trim.width;\n        h1 = trim.y - sprite.anchor.y * orig.height;\n        h0 = h1 + trim.height;\n      } else {\n        w0 = orig.width * (1 - sprite.anchor.x);\n        w1 = orig.width * -sprite.anchor.x;\n        h0 = orig.height * (1 - sprite.anchor.y);\n        h1 = orig.height * -sprite.anchor.y;\n      }\n\n      array[offset] = w1 * sx;\n      array[offset + 1] = h1 * sy;\n      array[offset + stride] = w0 * sx;\n      array[offset + stride + 1] = h1 * sy;\n      array[offset + stride * 2] = w0 * sx;\n      array[offset + stride * 2 + 1] = h0 * sy;\n      array[offset + stride * 3] = w1 * sx;\n      array[offset + stride * 3 + 1] = h0 * sy;\n      offset += stride * 4;\n    }\n  };\n  /**\n   * Uploads the position.\n   *\n   * @param children - the array of display objects to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their positions uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n\n\n  ParticleRenderer.prototype.uploadPosition = function (children, startIndex, amount, array, stride, offset) {\n    for (var i = 0; i < amount; i++) {\n      var spritePosition = children[startIndex + i].position;\n      array[offset] = spritePosition.x;\n      array[offset + 1] = spritePosition.y;\n      array[offset + stride] = spritePosition.x;\n      array[offset + stride + 1] = spritePosition.y;\n      array[offset + stride * 2] = spritePosition.x;\n      array[offset + stride * 2 + 1] = spritePosition.y;\n      array[offset + stride * 3] = spritePosition.x;\n      array[offset + stride * 3 + 1] = spritePosition.y;\n      offset += stride * 4;\n    }\n  };\n  /**\n   * Uploads the rotation.\n   *\n   * @param children - the array of display objects to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their rotation uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n\n\n  ParticleRenderer.prototype.uploadRotation = function (children, startIndex, amount, array, stride, offset) {\n    for (var i = 0; i < amount; i++) {\n      var spriteRotation = children[startIndex + i].rotation;\n      array[offset] = spriteRotation;\n      array[offset + stride] = spriteRotation;\n      array[offset + stride * 2] = spriteRotation;\n      array[offset + stride * 3] = spriteRotation;\n      offset += stride * 4;\n    }\n  };\n  /**\n   * Uploads the UVs.\n   *\n   * @param children - the array of display objects to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their rotation uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n\n\n  ParticleRenderer.prototype.uploadUvs = function (children, startIndex, amount, array, stride, offset) {\n    for (var i = 0; i < amount; ++i) {\n      var textureUvs = children[startIndex + i]._texture._uvs;\n\n      if (textureUvs) {\n        array[offset] = textureUvs.x0;\n        array[offset + 1] = textureUvs.y0;\n        array[offset + stride] = textureUvs.x1;\n        array[offset + stride + 1] = textureUvs.y1;\n        array[offset + stride * 2] = textureUvs.x2;\n        array[offset + stride * 2 + 1] = textureUvs.y2;\n        array[offset + stride * 3] = textureUvs.x3;\n        array[offset + stride * 3 + 1] = textureUvs.y3;\n        offset += stride * 4;\n      } else {\n        // TODO you know this can be easier!\n        array[offset] = 0;\n        array[offset + 1] = 0;\n        array[offset + stride] = 0;\n        array[offset + stride + 1] = 0;\n        array[offset + stride * 2] = 0;\n        array[offset + stride * 2 + 1] = 0;\n        array[offset + stride * 3] = 0;\n        array[offset + stride * 3 + 1] = 0;\n        offset += stride * 4;\n      }\n    }\n  };\n  /**\n   * Uploads the tint.\n   *\n   * @param children - the array of display objects to render\n   * @param startIndex - the index to start from in the children array\n   * @param amount - the amount of children that will have their rotation uploaded\n   * @param array - The vertices to upload.\n   * @param stride - Stride to use for iteration.\n   * @param offset - Offset to start at.\n   */\n\n\n  ParticleRenderer.prototype.uploadTint = function (children, startIndex, amount, array, stride, offset) {\n    for (var i = 0; i < amount; ++i) {\n      var sprite = children[startIndex + i];\n      var premultiplied = sprite._texture.baseTexture.alphaMode > 0;\n      var alpha = sprite.alpha; // we dont call extra function if alpha is 1.0, that's faster\n\n      var argb = alpha < 1.0 && premultiplied ? premultiplyTint(sprite._tintRGB, alpha) : sprite._tintRGB + (alpha * 255 << 24);\n      array[offset] = argb;\n      array[offset + stride] = argb;\n      array[offset + stride * 2] = argb;\n      array[offset + stride * 3] = argb;\n      offset += stride * 4;\n    }\n  };\n  /** Destroys the ParticleRenderer. */\n\n\n  ParticleRenderer.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    if (this.shader) {\n      this.shader.destroy();\n      this.shader = null;\n    }\n\n    this.tempMatrix = null;\n  };\n\n  return ParticleRenderer;\n}(ObjectRenderer);\n\nexport { ParticleContainer, ParticleRenderer };","map":{"version":3,"mappings":"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","names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","maxSize","properties","batchSize","autoResize","_super","maxBatchSize","_this","_properties","_maxSize","_batchSize","_buffers","_bufferUpdateIDs","_updateID","interactiveChildren","blendMode","BLEND_MODES","NORMAL","roundPixels","baseTexture","setProperties","_tint","tintRgb","Float32Array","tint","ParticleContainer","vertices","scale","position","rotation","uvs","alpha","displayObjectUpdateTransform","value","hex2rgb","renderer","visible","worldAlpha","children","length","renderable","_texture","valid","once","onChildrenChange","batch","setObjectRenderer","plugins","particle","render","smallestChildIndex","bufferIndex","Math","floor","push","i","destroy","options","call","dispose","Container","dynamicPropertyFlags","size","geometry","Geometry","indexBuffer","dynamicProperties","staticProperties","property","attributeName","uploadFunction","type","TYPES","FLOAT","offset","staticStride","staticBuffer","staticData","staticDataUint32","dynamicStride","dynamicBuffer","dynamicData","dynamicDataUint32","initBuffers","ParticleBuffer","dynamicOffset","Buffer","createIndicesForQuads","addIndex","dynBuffer","ArrayBuffer","Uint32Array","staticOffset","statBuffer","addAttribute","UNSIGNED_BYTE","startIndex","amount","shader","tempMatrix","Matrix","uploadVertices","uploadPosition","uploadRotation","uploadUvs","uploadTint","Shader","from","vertex","fragment","state","State","for2d","ParticleRenderer","container","totalChildren","buffers","generateBuffers","correctBlendMode","alphaMode","set","gl","m","worldTransform","copyTo","prepend","globalUniforms","uniforms","projectionMatrix","translationMatrix","toArray","uColor","premultiplyRgba","uSampler","bind","updateStatic","j","_generateOneMoreBuffer","buffer","uploadDynamic","bid","uploadStatic","drawElements","TRIANGLES","UNSIGNED_SHORT","array","stride","w0","w1","h0","h1","sprite","texture","sx","x","sy","y","trim","orig","anchor","width","height","spritePosition","spriteRotation","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","premultiplied","argb","premultiplyTint","_tintRGB","ObjectRenderer"],"sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/ParticleContainer.ts","../../src/ParticleBuffer.ts","../../src/ParticleRenderer.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { BLEND_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\nimport { hex2rgb } from '@pixi/utils';\n\nimport type { BaseTexture, Renderer } from '@pixi/core';\nimport type { ParticleBuffer } from './ParticleBuffer';\nimport type { IDestroyOptions } from '@pixi/display';\n\nexport interface IParticleProperties {\n    vertices?: boolean;\n    position?: boolean;\n    rotation?: boolean;\n    uvs?: boolean;\n    tint?: boolean;\n    alpha?: boolean;\n    scale?: boolean;\n}\n\n/**\n * The ParticleContainer class is a really fast version of the Container built solely for speed,\n * so use when you need a lot of sprites or particles.\n *\n * The tradeoff of the ParticleContainer is that most advanced functionality will not work.\n * ParticleContainer implements the basic object transform (position, scale, rotation)\n * and some advanced functionality like tint (as of v4.5.6).\n *\n * Other more advanced functionality like masking, children, filters, etc will not work on sprites in this batch.\n *\n * It's extremely easy to use:\n * ```js\n * let container = new ParticleContainer();\n *\n * for (let i = 0; i < 100; ++i)\n * {\n *     let sprite = PIXI.Sprite.from(\"myImage.png\");\n *     container.addChild(sprite);\n * }\n * ```\n *\n * And here you have a hundred sprites that will be rendered at the speed of light.\n *\n * @memberof PIXI\n */\nexport class ParticleContainer extends Container\n{\n    /**\n     * The blend mode to be applied to the sprite. Apply a value of `PIXI.BLEND_MODES.NORMAL`\n     * to reset the blend mode.\n     *\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    public blendMode: BLEND_MODES;\n\n    /**\n     * If true, container allocates more batches in case there are more than `maxSize` particles.\n     *\n     * @default false\n     */\n    public autoResize: boolean;\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * Default to true here as performance is usually the priority for particles.\n     *\n     * @default true\n     */\n    public roundPixels: boolean;\n\n    /**\n     * The texture used to render the children.\n     *\n     * @readonly\n     */\n    public baseTexture: BaseTexture;\n    public tintRgb: Float32Array;\n\n    /** @private */\n    _maxSize: number;\n\n    /** @private */\n    _buffers: ParticleBuffer[];\n\n    /** @private */\n    _batchSize: number;\n\n    /**\n     * Set properties to be dynamic (true) / static (false).\n     *\n     * @private\n     */\n    _properties: boolean[];\n\n    /**\n     * For every batch, stores _updateID corresponding to the last change in that batch.\n     *\n     * @private\n     */\n    _bufferUpdateIDs: number[];\n\n    /**\n     * When child inserted, removed or changes position this number goes up.\n     *\n     * @private\n     */\n    _updateID: number;\n\n    /**\n     * The tint applied to the container.\n     * This is a hex value. A value of 0xFFFFFF will remove any tint effect.\n     *\n     * @default 0xFFFFFF\n     */\n    private _tint: number;\n\n    /**\n     * @param maxSize - The maximum number of particles that can be rendered by the container.\n     *  Affects size of allocated buffers.\n     * @param properties - The properties of children that should be uploaded to the gpu and applied.\n     * @param {boolean} [properties.vertices=false] - When true, vertices be uploaded and applied.\n     *                  if sprite's ` scale/anchor/trim/frame/orig` is dynamic, please set `true`.\n     * @param {boolean} [properties.position=true] - When true, position be uploaded and applied.\n     * @param {boolean} [properties.rotation=false] - When true, rotation be uploaded and applied.\n     * @param {boolean} [properties.uvs=false] - When true, uvs be uploaded and applied.\n     * @param {boolean} [properties.tint=false] - When true, alpha and tint be uploaded and applied.\n     * @param {number} [batchSize=16384] - Number of particles per batch. If less than maxSize, it uses maxSize instead.\n     * @param {boolean} [autoResize=false] - If true, container allocates more batches in case\n     *  there are more than `maxSize` particles.\n     */\n    constructor(maxSize = 1500, properties?: IParticleProperties, batchSize = 16384, autoResize = false)\n    {\n        super();\n\n        // Making sure the batch size is valid\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        const maxBatchSize = 16384;\n\n        if (batchSize > maxBatchSize)\n        {\n            batchSize = maxBatchSize;\n        }\n\n        this._properties = [false, true, false, false, false];\n        this._maxSize = maxSize;\n        this._batchSize = batchSize;\n        this._buffers = null;\n        this._bufferUpdateIDs = [];\n        this._updateID = 0;\n\n        this.interactiveChildren = false;\n        this.blendMode = BLEND_MODES.NORMAL;\n        this.autoResize = autoResize;\n        this.roundPixels = true;\n        this.baseTexture = null;\n\n        this.setProperties(properties);\n\n        this._tint = 0;\n        this.tintRgb = new Float32Array(4);\n        this.tint = 0xFFFFFF;\n    }\n\n    /**\n     * Sets the private properties array to dynamic / static based on the passed properties object\n     *\n     * @param properties - The properties to be uploaded\n     */\n    public setProperties(properties: IParticleProperties): void\n    {\n        if (properties)\n        {\n            this._properties[0] = 'vertices' in properties || 'scale' in properties\n                ? !!properties.vertices || !!properties.scale : this._properties[0];\n            this._properties[1] = 'position' in properties ? !!properties.position : this._properties[1];\n            this._properties[2] = 'rotation' in properties ? !!properties.rotation : this._properties[2];\n            this._properties[3] = 'uvs' in properties ? !!properties.uvs : this._properties[3];\n            this._properties[4] = 'tint' in properties || 'alpha' in properties\n                ? !!properties.tint || !!properties.alpha : this._properties[4];\n        }\n    }\n\n    updateTransform(): void\n    {\n        // TODO don't need to!\n        this.displayObjectUpdateTransform();\n    }\n\n    /**\n     * The tint applied to the container. This is a hex value.\n     * A value of 0xFFFFFF will remove any tint effect.\n     * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     *\n     * @default 0xFFFFFF\n     */\n    get tint(): number\n    {\n        return this._tint;\n    }\n\n    set tint(value: number)\n    {\n        this._tint = value;\n        hex2rgb(value, this.tintRgb);\n    }\n\n    /**\n     * Renders the container using the WebGL renderer.\n     *\n     * @param renderer - The WebGL renderer.\n     */\n    public render(renderer: Renderer): void\n    {\n        if (!this.visible || this.worldAlpha <= 0 || !this.children.length || !this.renderable)\n        {\n            return;\n        }\n\n        if (!this.baseTexture)\n        {\n            this.baseTexture = (this.children[0] as any)._texture.baseTexture;\n            if (!this.baseTexture.valid)\n            {\n                this.baseTexture.once('update', () => this.onChildrenChange(0));\n            }\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins.particle);\n        renderer.plugins.particle.render(this);\n    }\n\n    /**\n     * Set the flag that static data should be updated to true\n     *\n     * @param smallestChildIndex - The smallest child index.\n     */\n    protected onChildrenChange(smallestChildIndex: number): void\n    {\n        const bufferIndex = Math.floor(smallestChildIndex / this._batchSize);\n\n        while (this._bufferUpdateIDs.length < bufferIndex)\n        {\n            this._bufferUpdateIDs.push(0);\n        }\n        this._bufferUpdateIDs[bufferIndex] = ++this._updateID;\n    }\n\n    public dispose(): void\n    {\n        if (this._buffers)\n        {\n            for (let i = 0; i < this._buffers.length; ++i)\n            {\n                this._buffers[i].destroy();\n            }\n\n            this._buffers = null;\n        }\n    }\n\n    /**\n     * Destroys the container\n     *\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their\n     *  destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    public destroy(options?: IDestroyOptions|boolean): void\n    {\n        super.destroy(options);\n\n        this.dispose();\n\n        this._properties = null;\n        this._buffers = null;\n        this._bufferUpdateIDs = null;\n    }\n}\n","import { createIndicesForQuads } from '@pixi/utils';\nimport { Geometry, Buffer } from '@pixi/core';\nimport { TYPES } from '@pixi/constants';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type { IParticleRendererProperty } from './ParticleRenderer';\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that\n * they now share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleBuffer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleBuffer.java\n */\n\n/**\n * The particle buffer manages the static and dynamic buffers for a particle container.\n *\n * @private\n * @memberof PIXI\n */\nexport class ParticleBuffer\n{\n    public geometry: Geometry;\n    public staticStride: number;\n    public staticBuffer: Buffer;\n    public staticData: Float32Array;\n    public staticDataUint32: Uint32Array;\n    public dynamicStride: number;\n    public dynamicBuffer: Buffer;\n    public dynamicData: Float32Array;\n    public dynamicDataUint32: Uint32Array;\n    public _updateID: number;\n\n    /** Holds the indices of the geometry (quads) to draw. */\n    indexBuffer: Buffer;\n\n    /** The number of particles the buffer can hold. */\n    private size: number;\n\n    /** A list of the properties that are dynamic. */\n    private dynamicProperties: IParticleRendererProperty[];\n\n    /** A list of the properties that are static. */\n    private staticProperties: IParticleRendererProperty[];\n\n    /**\n     * @param {object} properties - The properties to upload.\n     * @param {boolean[]} dynamicPropertyFlags - Flags for which properties are dynamic.\n     * @param {number} size - The size of the batch.\n     */\n    constructor(properties: IParticleRendererProperty[], dynamicPropertyFlags: boolean[], size: number)\n    {\n        this.geometry = new Geometry();\n\n        this.indexBuffer = null;\n\n        this.size = size;\n        this.dynamicProperties = [];\n        this.staticProperties = [];\n\n        for (let i = 0; i < properties.length; ++i)\n        {\n            let property = properties[i];\n\n            // Make copy of properties object so that when we edit the offset it doesn't\n            // change all other instances of the object literal\n            property = {\n                attributeName: property.attributeName,\n                size: property.size,\n                uploadFunction: property.uploadFunction,\n                type: property.type || TYPES.FLOAT,\n                offset: property.offset,\n            };\n\n            if (dynamicPropertyFlags[i])\n            {\n                this.dynamicProperties.push(property);\n            }\n            else\n            {\n                this.staticProperties.push(property);\n            }\n        }\n\n        this.staticStride = 0;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n\n        this.dynamicStride = 0;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this._updateID = 0;\n\n        this.initBuffers();\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    private initBuffers(): void\n    {\n        const geometry = this.geometry;\n\n        let dynamicOffset = 0;\n\n        this.indexBuffer = new Buffer(createIndicesForQuads(this.size), true, true);\n        geometry.addIndex(this.indexBuffer);\n\n        this.dynamicStride = 0;\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.offset = dynamicOffset;\n            dynamicOffset += property.size;\n            this.dynamicStride += property.size;\n        }\n\n        const dynBuffer = new ArrayBuffer(this.size * this.dynamicStride * 4 * 4);\n\n        this.dynamicData = new Float32Array(dynBuffer);\n        this.dynamicDataUint32 = new Uint32Array(dynBuffer);\n        this.dynamicBuffer = new Buffer(this.dynamicData, false, false);\n\n        // static //\n        let staticOffset = 0;\n\n        this.staticStride = 0;\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            property.offset = staticOffset;\n            staticOffset += property.size;\n            this.staticStride += property.size;\n        }\n\n        const statBuffer = new ArrayBuffer(this.size * this.staticStride * 4 * 4);\n\n        this.staticData = new Float32Array(statBuffer);\n        this.staticDataUint32 = new Uint32Array(statBuffer);\n        this.staticBuffer = new Buffer(this.staticData, true, false);\n\n        for (let i = 0; i < this.dynamicProperties.length; ++i)\n        {\n            const property = this.dynamicProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.dynamicBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.dynamicStride * 4,\n                property.offset * 4\n            );\n        }\n\n        for (let i = 0; i < this.staticProperties.length; ++i)\n        {\n            const property = this.staticProperties[i];\n\n            geometry.addAttribute(\n                property.attributeName,\n                this.staticBuffer,\n                0,\n                property.type === TYPES.UNSIGNED_BYTE,\n                property.type,\n                this.staticStride * 4,\n                property.offset * 4\n            );\n        }\n    }\n\n    /**\n     * Uploads the dynamic properties.\n     *\n     * @param children - The children to upload.\n     * @param startIndex - The index to start at.\n     * @param amount - The number to upload.\n     */\n    uploadDynamic(children: DisplayObject[], startIndex: number, amount: number): void\n    {\n        for (let i = 0; i < this.dynamicProperties.length; i++)\n        {\n            const property = this.dynamicProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.dynamicDataUint32 : this.dynamicData,\n                this.dynamicStride, property.offset);\n        }\n\n        this.dynamicBuffer._updateID++;\n    }\n\n    /**\n     * Uploads the static properties.\n     *\n     * @param children - The children to upload.\n     * @param startIndex - The index to start at.\n     * @param amount - The number to upload.\n     */\n    uploadStatic(children: DisplayObject[], startIndex: number, amount: number): void\n    {\n        for (let i = 0; i < this.staticProperties.length; i++)\n        {\n            const property = this.staticProperties[i];\n\n            property.uploadFunction(children, startIndex, amount,\n                property.type === TYPES.UNSIGNED_BYTE ? this.staticDataUint32 : this.staticData,\n                this.staticStride, property.offset);\n        }\n\n        this.staticBuffer._updateID++;\n    }\n\n    /** Destroys the ParticleBuffer. */\n    destroy(): void\n    {\n        this.indexBuffer = null;\n\n        this.dynamicProperties = null;\n        this.dynamicBuffer = null;\n        this.dynamicData = null;\n        this.dynamicDataUint32 = null;\n\n        this.staticProperties = null;\n        this.staticBuffer = null;\n        this.staticData = null;\n        this.staticDataUint32 = null;\n        // all buffers are destroyed inside geometry\n        this.geometry.destroy();\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport { ObjectRenderer, Shader, State } from '@pixi/core';\nimport { Matrix } from '@pixi/math';\nimport { correctBlendMode, premultiplyRgba, premultiplyTint } from '@pixi/utils';\nimport { ParticleBuffer } from './ParticleBuffer';\nimport fragment from './particles.frag';\nimport vertex from './particles.vert';\n\nimport type { DisplayObject } from '@pixi/display';\nimport type { ParticleContainer } from './ParticleContainer';\nimport type { Renderer } from '@pixi/core';\n\nexport interface IParticleRendererProperty {\n    attributeName: string;\n    size: number;\n    type?: TYPES;\n    uploadFunction: (...params: any[]) => any;\n    offset: number;\n}\n\n/*\n * @author Mat Groves\n *\n * Big thanks to the very clever Matt DesLauriers <mattdesl> https://github.com/mattdesl/\n * for creating the original PixiJS version!\n * Also a thanks to https://github.com/bchevalier for tweaking the tint and alpha so that they now\n * share 4 bytes on the vertex buffer\n *\n * Heavily inspired by LibGDX's ParticleRenderer:\n * https://github.com/libgdx/libgdx/blob/master/gdx/src/com/badlogic/gdx/graphics/g2d/ParticleRenderer.java\n */\n\n/**\n * Renderer for Particles that is designer for speed over feature set.\n *\n * @memberof PIXI\n */\nexport class ParticleRenderer extends ObjectRenderer\n{\n    /** The WebGL state in which this renderer will work. */\n    public readonly state: State;\n\n    /** The default shader that is used if a sprite doesn't have a more specific one. */\n    public shader: Shader;\n    public tempMatrix: Matrix;\n    public properties: IParticleRendererProperty[];\n\n    /**\n     * @param renderer - The renderer this sprite batch works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        // 65535 is max vertex index in the index buffer (see ParticleRenderer)\n        // so max number of particles is 65536 / 4 = 16384\n        // and max number of element in the index buffer is 16384 * 6 = 98304\n        // Creating a full index buffer, overhead is 98304 * 2 = 196Ko\n        // let numIndices = 98304;\n\n        this.shader = null;\n\n        this.properties = null;\n\n        this.tempMatrix = new Matrix();\n\n        this.properties = [\n            // verticesData\n            {\n                attributeName: 'aVertexPosition',\n                size: 2,\n                uploadFunction: this.uploadVertices,\n                offset: 0,\n            },\n            // positionData\n            {\n                attributeName: 'aPositionCoord',\n                size: 2,\n                uploadFunction: this.uploadPosition,\n                offset: 0,\n            },\n            // rotationData\n            {\n                attributeName: 'aRotation',\n                size: 1,\n                uploadFunction: this.uploadRotation,\n                offset: 0,\n            },\n            // uvsData\n            {\n                attributeName: 'aTextureCoord',\n                size: 2,\n                uploadFunction: this.uploadUvs,\n                offset: 0,\n            },\n            // tintData\n            {\n                attributeName: 'aColor',\n                size: 1,\n                type: TYPES.UNSIGNED_BYTE,\n                uploadFunction: this.uploadTint,\n                offset: 0,\n            },\n        ];\n\n        this.shader = Shader.from(vertex, fragment, {});\n        this.state = State.for2d();\n    }\n\n    /**\n     * Renders the particle container object.\n     *\n     * @param container - The container to render using this ParticleRenderer.\n     */\n    public render(container: ParticleContainer): void\n    {\n        const children = container.children;\n        const maxSize = container._maxSize;\n        const batchSize = container._batchSize;\n        const renderer = this.renderer;\n        let totalChildren = children.length;\n\n        if (totalChildren === 0)\n        {\n            return;\n        }\n        else if (totalChildren > maxSize && !container.autoResize)\n        {\n            totalChildren = maxSize;\n        }\n\n        let buffers = container._buffers;\n\n        if (!buffers)\n        {\n            buffers = container._buffers = this.generateBuffers(container);\n        }\n\n        const baseTexture = (children[0] as any)._texture.baseTexture;\n\n        // if the uvs have not updated then no point rendering just yet!\n        this.state.blendMode = correctBlendMode(container.blendMode, baseTexture.alphaMode);\n        renderer.state.set(this.state);\n\n        const gl = renderer.gl;\n\n        const m = container.worldTransform.copyTo(this.tempMatrix);\n\n        m.prepend(renderer.globalUniforms.uniforms.projectionMatrix);\n\n        this.shader.uniforms.translationMatrix = m.toArray(true);\n\n        this.shader.uniforms.uColor = premultiplyRgba(container.tintRgb,\n            container.worldAlpha, this.shader.uniforms.uColor, baseTexture.alphaMode);\n\n        this.shader.uniforms.uSampler = baseTexture;\n\n        this.renderer.shader.bind(this.shader);\n\n        let updateStatic = false;\n\n        // now lets upload and render the buffers..\n        for (let i = 0, j = 0; i < totalChildren; i += batchSize, j += 1)\n        {\n            let amount = (totalChildren - i);\n\n            if (amount > batchSize)\n            {\n                amount = batchSize;\n            }\n\n            if (j >= buffers.length)\n            {\n                buffers.push(this._generateOneMoreBuffer(container));\n            }\n\n            const buffer = buffers[j];\n\n            // we always upload the dynamic\n            buffer.uploadDynamic(children, i, amount);\n\n            const bid = container._bufferUpdateIDs[j] || 0;\n\n            updateStatic = updateStatic || (buffer._updateID < bid);\n            // we only upload the static content when we have to!\n            if (updateStatic)\n            {\n                buffer._updateID = container._updateID;\n                buffer.uploadStatic(children, i, amount);\n            }\n\n            // bind the buffer\n            renderer.geometry.bind(buffer.geometry);\n            gl.drawElements(gl.TRIANGLES, amount * 6, gl.UNSIGNED_SHORT, 0);\n        }\n    }\n\n    /**\n     * Creates one particle buffer for each child in the container we want to render and updates internal properties.\n     *\n     * @param container - The container to render using this ParticleRenderer\n     * @return - The buffers\n     */\n    private generateBuffers(container: ParticleContainer): ParticleBuffer[]\n    {\n        const buffers = [];\n        const size = container._maxSize;\n        const batchSize = container._batchSize;\n        const dynamicPropertyFlags = container._properties;\n\n        for (let i = 0; i < size; i += batchSize)\n        {\n            buffers.push(new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize));\n        }\n\n        return buffers;\n    }\n\n    /**\n     * Creates one more particle buffer, because container has autoResize feature.\n     *\n     * @param container - The container to render using this ParticleRenderer\n     * @return - The generated buffer\n     */\n    private _generateOneMoreBuffer(container: ParticleContainer): ParticleBuffer\n    {\n        const batchSize = container._batchSize;\n        const dynamicPropertyFlags = container._properties;\n\n        return new ParticleBuffer(this.properties, dynamicPropertyFlags, batchSize);\n    }\n\n    /**\n     * Uploads the vertices.\n     *\n     * @param children - the array of display objects to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their vertices uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadVertices(\n        children: DisplayObject[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        let w0 = 0;\n        let w1 = 0;\n        let h0 = 0;\n        let h1 = 0;\n\n        for (let i = 0; i < amount; ++i)\n        {\n            const sprite: any = children[startIndex + i];\n            const texture = sprite._texture;\n            const sx = sprite.scale.x;\n            const sy = sprite.scale.y;\n            const trim = texture.trim;\n            const orig = texture.orig;\n\n            if (trim)\n            {\n                // if the sprite is trimmed and is not a tilingsprite then we need to add the\n                // extra space before transforming the sprite coords..\n                w1 = trim.x - (sprite.anchor.x * orig.width);\n                w0 = w1 + trim.width;\n\n                h1 = trim.y - (sprite.anchor.y * orig.height);\n                h0 = h1 + trim.height;\n            }\n            else\n            {\n                w0 = (orig.width) * (1 - sprite.anchor.x);\n                w1 = (orig.width) * -sprite.anchor.x;\n\n                h0 = orig.height * (1 - sprite.anchor.y);\n                h1 = orig.height * -sprite.anchor.y;\n            }\n\n            array[offset] = w1 * sx;\n            array[offset + 1] = h1 * sy;\n\n            array[offset + stride] = w0 * sx;\n            array[offset + stride + 1] = h1 * sy;\n\n            array[offset + (stride * 2)] = w0 * sx;\n            array[offset + (stride * 2) + 1] = h0 * sy;\n\n            array[offset + (stride * 3)] = w1 * sx;\n            array[offset + (stride * 3) + 1] = h0 * sy;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the position.\n     *\n     * @param children - the array of display objects to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their positions uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadPosition(\n        children: DisplayObject[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; i++)\n        {\n            const spritePosition = children[startIndex + i].position;\n\n            array[offset] = spritePosition.x;\n            array[offset + 1] = spritePosition.y;\n\n            array[offset + stride] = spritePosition.x;\n            array[offset + stride + 1] = spritePosition.y;\n\n            array[offset + (stride * 2)] = spritePosition.x;\n            array[offset + (stride * 2) + 1] = spritePosition.y;\n\n            array[offset + (stride * 3)] = spritePosition.x;\n            array[offset + (stride * 3) + 1] = spritePosition.y;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the rotation.\n     *\n     * @param children - the array of display objects to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their rotation uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadRotation(\n        children: DisplayObject[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; i++)\n        {\n            const spriteRotation = children[startIndex + i].rotation;\n\n            array[offset] = spriteRotation;\n            array[offset + stride] = spriteRotation;\n            array[offset + (stride * 2)] = spriteRotation;\n            array[offset + (stride * 3)] = spriteRotation;\n\n            offset += stride * 4;\n        }\n    }\n\n    /**\n     * Uploads the UVs.\n     *\n     * @param children - the array of display objects to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their rotation uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadUvs(\n        children: DisplayObject[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; ++i)\n        {\n            const textureUvs = (children[startIndex + i] as any)._texture._uvs;\n\n            if (textureUvs)\n            {\n                array[offset] = textureUvs.x0;\n                array[offset + 1] = textureUvs.y0;\n\n                array[offset + stride] = textureUvs.x1;\n                array[offset + stride + 1] = textureUvs.y1;\n\n                array[offset + (stride * 2)] = textureUvs.x2;\n                array[offset + (stride * 2) + 1] = textureUvs.y2;\n\n                array[offset + (stride * 3)] = textureUvs.x3;\n                array[offset + (stride * 3) + 1] = textureUvs.y3;\n\n                offset += stride * 4;\n            }\n            else\n            {\n                // TODO you know this can be easier!\n                array[offset] = 0;\n                array[offset + 1] = 0;\n\n                array[offset + stride] = 0;\n                array[offset + stride + 1] = 0;\n\n                array[offset + (stride * 2)] = 0;\n                array[offset + (stride * 2) + 1] = 0;\n\n                array[offset + (stride * 3)] = 0;\n                array[offset + (stride * 3) + 1] = 0;\n\n                offset += stride * 4;\n            }\n        }\n    }\n\n    /**\n     * Uploads the tint.\n     *\n     * @param children - the array of display objects to render\n     * @param startIndex - the index to start from in the children array\n     * @param amount - the amount of children that will have their rotation uploaded\n     * @param array - The vertices to upload.\n     * @param stride - Stride to use for iteration.\n     * @param offset - Offset to start at.\n     */\n    public uploadTint(\n        children: DisplayObject[], startIndex: number, amount: number,\n        array: number[], stride: number, offset: number\n    ): void\n    {\n        for (let i = 0; i < amount; ++i)\n        {\n            const sprite: any = children[startIndex + i];\n            const premultiplied = sprite._texture.baseTexture.alphaMode > 0;\n            const alpha = sprite.alpha;\n\n            // we dont call extra function if alpha is 1.0, that's faster\n            const argb = alpha < 1.0 && premultiplied\n                ? premultiplyTint(sprite._tintRGB, alpha) : sprite._tintRGB + (alpha * 255 << 24);\n\n            array[offset] = argb;\n            array[offset + stride] = argb;\n            array[offset + (stride * 2)] = argb;\n            array[offset + (stride * 3)] = argb;\n\n            offset += stride * 4;\n        }\n    }\n\n    /** Destroys the ParticleRenderer. */\n    public destroy(): void\n    {\n        super.destroy();\n\n        if (this.shader)\n        {\n            this.shader.destroy();\n            this.shader = null;\n        }\n\n        this.tempMatrix = null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}