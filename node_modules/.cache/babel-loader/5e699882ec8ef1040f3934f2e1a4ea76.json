{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  fftSize: 2048,\n  maxDecibels: -30,\n  minDecibels: -100,\n  smoothingTimeConstant: 0.8\n};\nexport var createAnalyserNodeConstructor = function createAnalyserNodeConstructor(audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) {\n  return /*#__PURE__*/function (_audionNodeConstructo) {\n    _inherits(AnalyserNode, _audionNodeConstructo);\n\n    var _super = _createSuper(AnalyserNode);\n\n    function AnalyserNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, AnalyserNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n      var analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeAnalyserNode, analyserNodeRenderer);\n      _this._nativeAnalyserNode = nativeAnalyserNode;\n      return _this;\n    }\n\n    _createClass(AnalyserNode, [{\n      key: \"fftSize\",\n      get: function get() {\n        return this._nativeAnalyserNode.fftSize;\n      },\n      set: function set(value) {\n        this._nativeAnalyserNode.fftSize = value;\n      }\n    }, {\n      key: \"frequencyBinCount\",\n      get: function get() {\n        return this._nativeAnalyserNode.frequencyBinCount;\n      }\n    }, {\n      key: \"maxDecibels\",\n      get: function get() {\n        return this._nativeAnalyserNode.maxDecibels;\n      },\n      set: function set(value) {\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        var maxDecibels = this._nativeAnalyserNode.maxDecibels;\n        this._nativeAnalyserNode.maxDecibels = value;\n\n        if (!(value > this._nativeAnalyserNode.minDecibels)) {\n          this._nativeAnalyserNode.maxDecibels = maxDecibels;\n          throw createIndexSizeError();\n        }\n      }\n    }, {\n      key: \"minDecibels\",\n      get: function get() {\n        return this._nativeAnalyserNode.minDecibels;\n      },\n      set: function set(value) {\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        var minDecibels = this._nativeAnalyserNode.minDecibels;\n        this._nativeAnalyserNode.minDecibels = value;\n\n        if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n          this._nativeAnalyserNode.minDecibels = minDecibels;\n          throw createIndexSizeError();\n        }\n      }\n    }, {\n      key: \"smoothingTimeConstant\",\n      get: function get() {\n        return this._nativeAnalyserNode.smoothingTimeConstant;\n      },\n      set: function set(value) {\n        this._nativeAnalyserNode.smoothingTimeConstant = value;\n      }\n    }, {\n      key: \"getByteFrequencyData\",\n      value: function getByteFrequencyData(array) {\n        this._nativeAnalyserNode.getByteFrequencyData(array);\n      }\n    }, {\n      key: \"getByteTimeDomainData\",\n      value: function getByteTimeDomainData(array) {\n        this._nativeAnalyserNode.getByteTimeDomainData(array);\n      }\n    }, {\n      key: \"getFloatFrequencyData\",\n      value: function getFloatFrequencyData(array) {\n        this._nativeAnalyserNode.getFloatFrequencyData(array);\n      }\n    }, {\n      key: \"getFloatTimeDomainData\",\n      value: function getFloatTimeDomainData(array) {\n        this._nativeAnalyserNode.getFloatTimeDomainData(array);\n      }\n    }]);\n\n    return AnalyserNode;\n  }(audionNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","createAnalyserNodeConstructor","audionNodeConstructor","createAnalyserNodeRenderer","createIndexSizeError","createNativeAnalyserNode","getNativeContext","isNativeOfflineAudioContext","context","options","nativeContext","mergedOptions","nativeAnalyserNode","analyserNodeRenderer","_nativeAnalyserNode","value","frequencyBinCount","array","getByteFrequencyData","getByteTimeDomainData","getFloatFrequencyData","getFloatTimeDomainData"],"sourceRoot":"","sources":["../../../src/factories/analyser-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}