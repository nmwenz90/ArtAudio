{"ast":null,"code":"import _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createChannelMergerNodeRendererFactory = function createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAudioNodes = new WeakMap();\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeAudioNode, nativeAudioNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n\n                if (!nativeAudioNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                  };\n                  nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n                _context.next = 6;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n\n              case 6:\n                return _context.abrupt(\"return\", nativeAudioNode);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,sCAAsC,GAA6C,SAAnFA,sCAAmF,CAC5FC,6BAD4F,EAE5FC,kBAF4F,EAG5FC,uBAH4F,EAI5F;AACA,SAAO,YAAmE;AACtE,QAAMC,wBAAwB,GAAG,IAAIC,OAAJ,EAAjC;;AAEA,QAAMC,eAAe;AAAA,0EAAG,iBAAOC,KAAP,EAA6BC,yBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,+BADgB,GACEP,kBAAkB,CAAsBK,KAAtB,CADpB,EAGpB;;AACMG,+CAJc,GAIoBX,gBAAgB,CAACU,eAAD,EAAkBD,yBAAlB,CAJpC;;AAMpB,oBAAI,CAACE,+BAAL,EAAsC;AAC5BC,yBAD4B,GAClB;AACZC,gCAAY,EAAEH,eAAe,CAACG,YADlB;AAEZC,oCAAgB,EAAEJ,eAAe,CAACI,gBAFtB;AAGZC,yCAAqB,EAAEL,eAAe,CAACK,qBAH3B;AAIZC,kCAAc,EAAEN,eAAe,CAACM;AAJpB,mBADkB;AAQlCN,iCAAe,GAAGR,6BAA6B,CAACO,yBAAD,EAA4BG,OAA5B,CAA/C;AACH;;AAEDP,wCAAwB,CAACY,GAAzB,CAA6BR,yBAA7B,EAAwDC,eAAxD;AAjBoB;AAAA,uBAmBdN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,eAAnC,CAnBT;;AAAA;AAAA,iDAqBbA,eArBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAfH,eAAe;AAAA;AAAA;AAAA,OAArB;;AAwBA,WAAO;AACHW,YADG,kBACIV,KADJ,EAC0BC,yBAD1B,EAC+E;AAC9E,YAAMU,uBAAuB,GAAGd,wBAAwB,CAACe,GAAzB,CAA6BX,yBAA7B,CAAhC;;AAEA,YAAIU,uBAAuB,KAAKE,SAAhC,EAA2C;AACvC,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,uBAAhB,CAAP;AACH;;AAED,eAAOZ,eAAe,CAACC,KAAD,EAAQC,yBAAR,CAAtB;AACH;AATE,KAAP;AAWH,GAtCD;AAuCH,CA5CM","names":["isOwnedByContext","createChannelMergerNodeRendererFactory","createNativeChannelMergerNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAudioNodes","WeakMap","createAudioNode","proxy","nativeOfflineAudioContext","nativeAudioNode","nativeAudioNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","numberOfInputs","set","render","renderedNativeAudioNode","get","undefined","Promise","resolve"],"sourceRoot":"","sources":["../../../src/factories/channel-merger-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}