{"ast":null,"code":"import { testPromiseSupport } from '../helpers/test-promise-support';\nexport var createRenderNativeOfflineAudioContext = function createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) {\n  return function (nativeOfflineAudioContext) {\n    // Bug #21: Safari does not support promises yet.\n    if (cacheTestResult(testPromiseSupport, function () {\n      return testPromiseSupport(nativeOfflineAudioContext);\n    })) {\n      // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.\n      return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then(function (isOfflineAudioContextCurrentTimeSupported) {\n        if (!isOfflineAudioContextCurrentTimeSupported) {\n          var scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n\n          nativeOfflineAudioContext.oncomplete = function () {\n            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n\n            scriptProcessorNode.disconnect();\n          };\n\n          scriptProcessorNode.onaudioprocess = function () {\n            return nativeOfflineAudioContext.currentTime;\n          }; // tslint:disable-line:deprecation\n\n\n          scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n        }\n\n        return nativeOfflineAudioContext.startRendering();\n      });\n    }\n\n    return new Promise(function (resolve) {\n      // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n      var gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n        channelCount: 1,\n        channelCountMode: 'explicit',\n        channelInterpretation: 'discrete',\n        gain: 0\n      });\n\n      nativeOfflineAudioContext.oncomplete = function (event) {\n        gainNode.disconnect();\n        resolve(event.renderedBuffer);\n      };\n\n      gainNode.connect(nativeOfflineAudioContext.destination);\n      nativeOfflineAudioContext.startRendering();\n    });\n  };\n};","map":{"version":3,"mappings":"AAAA,SAASA,kBAAT,QAAmC,iCAAnC;AAIA,OAAO,IAAMC,qCAAqC,GAA4C,SAAjFA,qCAAiF,CAC1FC,eAD0F,EAE1FC,oBAF0F,EAG1FC,+BAH0F,EAI1FC,yCAJ0F,EAK1F;AACA,SAAO,UAACC,yBAAD,EAA8B;AACjC;AACA,QAAIJ,eAAe,CAACF,kBAAD,EAAqB;AAAA,aAAMA,kBAAkB,CAACM,yBAAD,CAAxB;AAAA,KAArB,CAAnB,EAA8F;AAC1F;AACA,aAAOC,OAAO,CAACC,OAAR,CACHN,eAAe,CAACG,yCAAD,EAA4CA,yCAA5C,CADZ,EAELI,IAFK,CAEA,UAACC,yCAAD,EAA8C;AACjD,YAAI,CAACA,yCAAL,EAAgD;AAC5C,cAAMC,mBAAmB,GAAGP,+BAA+B,CAACE,yBAAD,EAA4B,GAA5B,EAAiC,CAAjC,EAAoC,CAApC,CAA3D;;AAEAA,mCAAyB,CAACM,UAA1B,GAAuC,YAAK;AACxCD,+BAAmB,CAACE,cAApB,GAAqC,IAArC,CADwC,CACG;;AAC3CF,+BAAmB,CAACG,UAApB;AACH,WAHD;;AAIAH,6BAAmB,CAACE,cAApB,GAAqC;AAAA,mBAAMP,yBAAyB,CAACS,WAAhC;AAAA,WAArC,CAP4C,CAOsC;;;AAElFJ,6BAAmB,CAACK,OAApB,CAA4BV,yBAAyB,CAACW,WAAtD;AACH;;AAED,eAAOX,yBAAyB,CAACY,cAA1B,EAAP;AACH,OAhBM,CAAP;AAiBH;;AAED,WAAO,IAAIX,OAAJ,CAAgC,UAACC,OAAD,EAAY;AAC/C;AACA,UAAMW,QAAQ,GAAGhB,oBAAoB,CAACG,yBAAD,EAA4B;AAC7Dc,oBAAY,EAAE,CAD+C;AAE7DC,wBAAgB,EAAE,UAF2C;AAG7DC,6BAAqB,EAAE,UAHsC;AAI7DC,YAAI,EAAE;AAJuD,OAA5B,CAArC;;AAOAjB,+BAAyB,CAACM,UAA1B,GAAuC,UAACY,KAAD,EAAwC;AAC3EL,gBAAQ,CAACL,UAAT;AAEAN,eAAO,CAACgB,KAAK,CAACC,cAAP,CAAP;AACH,OAJD;;AAMAN,cAAQ,CAACH,OAAT,CAAiBV,yBAAyB,CAACW,WAA3C;AAEAX,+BAAyB,CAACY,cAA1B;AACH,KAlBM,CAAP;AAmBH,GA1CD;AA2CH,CAjDM","names":["testPromiseSupport","createRenderNativeOfflineAudioContext","cacheTestResult","createNativeGainNode","createNativeScriptProcessorNode","testOfflineAudioContextCurrentTimeSupport","nativeOfflineAudioContext","Promise","resolve","then","isOfflineAudioContextCurrentTimeSupported","scriptProcessorNode","oncomplete","onaudioprocess","disconnect","currentTime","connect","destination","startRendering","gainNode","channelCount","channelCountMode","channelInterpretation","gain","event","renderedBuffer"],"sourceRoot":"","sources":["../../../src/factories/render-native-offline-audio-context.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}