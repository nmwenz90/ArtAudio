{"ast":null,"code":"import _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createStereoPannerNodeRendererFactory = function createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeStereoPannerNodes = new WeakMap();\n\n    var createStereoPannerNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeStereoPannerNode, nativeStereoPannerNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeStereoPannerNode = getNativeAudioNode(proxy);\n                /*\n                 * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n                 * again.\n                 */\n\n                nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n\n                if (!nativeStereoPannerNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                  };\n                  nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n\n                if (nativeStereoPannerNodeIsOwnedByContext) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n\n              case 11:\n                if (!isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 14;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n\n              case 14:\n                _context.next = 18;\n                break;\n\n              case 16:\n                _context.next = 18;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n\n              case 18:\n                return _context.abrupt(\"return\", nativeStereoPannerNode);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createStereoPannerNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeStereoPannerNode !== undefined) {\n          return Promise.resolve(renderedNativeStereoPannerNode);\n        }\n\n        return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,qCAAqC,GAA4C,SAAjFA,qCAAiF,CAC1FC,iBAD0F,EAE1FC,4BAF0F,EAG1FC,kBAH0F,EAI1FC,gBAJ0F,EAK1FC,uBAL0F,EAM1F;AACA,SAAO,YAAmE;AACtE,QAAMC,+BAA+B,GAAG,IAAIC,OAAJ,EAAxC;;AAEA,QAAMC,sBAAsB;AAAA,0EAAG,iBAAOC,KAAP,EAAoCC,yBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,sCADuB,GACER,kBAAkB,CAA6BM,KAA7B,CADpB;AAG3B;;;;;AAIMG,sDAPqB,GAOoBb,gBAAgB,CAACY,sBAAD,EAAyBD,yBAAzB,CAPpC;;AAS3B,oBAAI,CAACE,sCAAL,EAA6C;AACnCC,yBADmC,GACzB;AACZC,gCAAY,EAAEH,sBAAsB,CAACG,YADzB;AAEZC,oCAAgB,EAAEJ,sBAAsB,CAACI,gBAF7B;AAGZC,yCAAqB,EAAEL,sBAAsB,CAACK,qBAHlC;AAIZC,uBAAG,EAAEN,sBAAsB,CAACM,GAAvB,CAA2BC;AAJpB,mBADyB;AAQzCP,wCAAsB,GAAGT,4BAA4B,CAACQ,yBAAD,EAA4BG,OAA5B,CAArD;AACH;;AAEDP,+CAA+B,CAACa,GAAhC,CAAoCT,yBAApC,EAA+DC,sBAA/D;;AApB2B,oBAsBtBC,sCAtBsB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAuBjBR,gBAAgB,CAACM,yBAAD,EAA4BD,KAAK,CAACQ,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,CAvBC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAyBjBhB,iBAAiB,CAACS,yBAAD,EAA4BD,KAAK,CAACQ,GAAlC,EAAuCN,sBAAsB,CAACM,GAA9D,CAzBA;;AAAA;AAAA,qBA4BvBnB,sBAAsB,CAACa,sBAAD,CA5BC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBA6BjBN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,sBAAsB,CAACS,MAAvB,CAA8B,CAA9B,CAAnC,CA7BN;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBA+BjBf,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,sBAAnC,CA/BN;;AAAA;AAAA,iDAkCpBA,sBAlCoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAtBH,sBAAsB;AAAA;AAAA;AAAA,OAA5B;;AAqCA,WAAO;AACHa,YADG,kBACIZ,KADJ,EACiCC,yBADjC,EACsF;AACrF,YAAMY,8BAA8B,GAAGhB,+BAA+B,CAACiB,GAAhC,CAAoCb,yBAApC,CAAvC;;AAEA,YAAIY,8BAA8B,KAAKE,SAAvC,EAAkD;AAC9C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,8BAAhB,CAAP;AACH;;AAED,eAAOd,sBAAsB,CAACC,KAAD,EAAQC,yBAAR,CAA7B;AACH;AATE,KAAP;AAWH,GAnDD;AAoDH,CA3DM","names":["isNativeAudioNodeFaker","isOwnedByContext","createStereoPannerNodeRendererFactory","connectAudioParam","createNativeStereoPannerNode","getNativeAudioNode","renderAutomation","renderInputsOfAudioNode","renderedNativeStereoPannerNodes","WeakMap","createStereoPannerNode","proxy","nativeOfflineAudioContext","nativeStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","pan","value","set","inputs","render","renderedNativeStereoPannerNode","get","undefined","Promise","resolve"],"sourceRoot":"","sources":["../../../src/factories/stereo-panner-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}