{"ast":null,"code":"import _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createWaveShaperNodeRendererFactory = function createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeWaveShaperNodes = new WeakMap();\n\n    var createWaveShaperNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeWaveShaperNode, nativeWaveShaperNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n\n                if (!nativeWaveShaperNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                  };\n                  nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n\n                if (!isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 7;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n\n              case 7:\n                _context.next = 11;\n                break;\n\n              case 9:\n                _context.next = 11;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n\n              case 11:\n                return _context.abrupt(\"return\", nativeWaveShaperNode);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createWaveShaperNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeWaveShaperNode !== undefined) {\n          return Promise.resolve(renderedNativeWaveShaperNode);\n        }\n\n        return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,sBAAT,QAAuC,mCAAvC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,mCAAmC,GAA0C,SAA7EA,mCAA6E,CACtFC,0BADsF,EAEtFC,kBAFsF,EAGtFC,uBAHsF,EAItF;AACA,SAAO,YAAmE;AACtE,QAAMC,6BAA6B,GAAG,IAAIC,OAAJ,EAAtC;;AAEA,QAAMC,oBAAoB;AAAA,0EAAG,iBAAOC,KAAP,EAAkCC,yBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,oCADqB,GACEP,kBAAkB,CAA2BK,KAA3B,CADpB,EAGzB;;AACMG,oDAJmB,GAIoBX,gBAAgB,CAACU,oBAAD,EAAuBD,yBAAvB,CAJpC;;AAMzB,oBAAI,CAACE,oCAAL,EAA2C;AACjCC,yBADiC,GACvB;AACZC,gCAAY,EAAEH,oBAAoB,CAACG,YADvB;AAEZC,oCAAgB,EAAEJ,oBAAoB,CAACI,gBAF3B;AAGZC,yCAAqB,EAAEL,oBAAoB,CAACK,qBAHhC;AAIZC,yBAAK,EAAEN,oBAAoB,CAACM,KAJhB;AAKZC,8BAAU,EAAEP,oBAAoB,CAACO;AALrB,mBADuB;AASvCP,sCAAoB,GAAGR,0BAA0B,CAACO,yBAAD,EAA4BG,OAA5B,CAAjD;AACH;;AAEDP,6CAA6B,CAACa,GAA9B,CAAkCT,yBAAlC,EAA6DC,oBAA7D;;AAlByB,qBAoBrBX,sBAAsB,CAACW,oBAAD,CApBD;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAqBfN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,oBAAoB,CAACS,MAArB,CAA4B,CAA5B,CAAnC,CArBR;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,uBAuBff,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,oBAAnC,CAvBR;;AAAA;AAAA,iDA0BlBA,oBA1BkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAApBH,oBAAoB;AAAA;AAAA;AAAA,OAA1B;;AA6BA,WAAO;AACHa,YADG,kBACIZ,KADJ,EAC+BC,yBAD/B,EACoF;AACnF,YAAMY,4BAA4B,GAAGhB,6BAA6B,CAACiB,GAA9B,CAAkCb,yBAAlC,CAArC;;AAEA,YAAIY,4BAA4B,KAAKE,SAArC,EAAgD;AAC5C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,4BAAhB,CAAP;AACH;;AAED,eAAOd,oBAAoB,CAACC,KAAD,EAAQC,yBAAR,CAA3B;AACH;AATE,KAAP;AAWH,GA3CD;AA4CH,CAjDM","names":["isNativeAudioNodeFaker","isOwnedByContext","createWaveShaperNodeRendererFactory","createNativeWaveShaperNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeWaveShaperNodes","WeakMap","createWaveShaperNode","proxy","nativeOfflineAudioContext","nativeWaveShaperNode","nativeWaveShaperNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","curve","oversample","set","inputs","render","renderedNativeWaveShaperNode","get","undefined","Promise","resolve"],"sourceRoot":"","sources":["../../../src/factories/wave-shaper-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}