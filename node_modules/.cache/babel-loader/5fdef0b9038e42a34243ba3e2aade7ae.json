{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar DEFAULT_OPTIONS = {\n  attack: 0.003,\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  knee: 30,\n  ratio: 12,\n  release: 0.25,\n  threshold: -24\n};\nexport var createDynamicsCompressorNodeConstructor = function createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(DynamicsCompressorNode, _audioNodeConstructor);\n\n    var _super = _createSuper(DynamicsCompressorNode);\n\n    function DynamicsCompressorNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, DynamicsCompressorNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n      _this._attack = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.attack);\n      _this._knee = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.knee);\n      _this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n      _this._ratio = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.ratio);\n      _this._release = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.release);\n      _this._threshold = createAudioParam(_assertThisInitialized(_this), isOffline, nativeDynamicsCompressorNode.threshold);\n      setAudioNodeTailTime(_assertThisInitialized(_this), 0.006);\n      return _this;\n    }\n\n    _createClass(DynamicsCompressorNode, [{\n      key: \"attack\",\n      get: function get() {\n        return this._attack;\n      } // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n\n    }, {\n      key: \"channelCount\",\n      get: function get() {\n        return this._nativeDynamicsCompressorNode.channelCount;\n      },\n      set: function set(value) {\n        var previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n        this._nativeDynamicsCompressorNode.channelCount = value;\n\n        if (value > 2) {\n          this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n          throw createNotSupportedError();\n        }\n      }\n      /*\n       * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n       * overwritten here.\n       */\n\n    }, {\n      key: \"channelCountMode\",\n      get: function get() {\n        return this._nativeDynamicsCompressorNode.channelCountMode;\n      },\n      set: function set(value) {\n        var previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n        this._nativeDynamicsCompressorNode.channelCountMode = value;\n\n        if (value === 'max') {\n          this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n          throw createNotSupportedError();\n        }\n      }\n    }, {\n      key: \"knee\",\n      get: function get() {\n        return this._knee;\n      }\n    }, {\n      key: \"ratio\",\n      get: function get() {\n        return this._ratio;\n      }\n    }, {\n      key: \"reduction\",\n      get: function get() {\n        // Bug #111: Safari returns an AudioParam instead of a number.\n        if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n          return this._nativeDynamicsCompressorNode.reduction.value;\n        }\n\n        return this._nativeDynamicsCompressorNode.reduction;\n      }\n    }, {\n      key: \"release\",\n      get: function get() {\n        return this._release;\n      }\n    }, {\n      key: \"threshold\",\n      get: function get() {\n        return this._threshold;\n      }\n    }]);\n\n    return DynamicsCompressorNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["DEFAULT_OPTIONS","attack","channelCount","channelCountMode","channelInterpretation","knee","ratio","release","threshold","createDynamicsCompressorNodeConstructor","audioNodeConstructor","createAudioParam","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","createNotSupportedError","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativeDynamicsCompressorNode","isOffline","dynamicsCompressorNodeRenderer","_attack","_knee","_nativeDynamicsCompressorNode","_ratio","_release","_threshold","value","previousChannelCount","reduction"],"sourceRoot":"","sources":["../../../src/factories/dynamics-compressor-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}