{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Signal } from \"../../signal/Signal\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\n\nexport var TickSignal = /*#__PURE__*/function (_Signal) {\n  _inherits(TickSignal, _Signal);\n\n  var _super = _createSuper(TickSignal);\n\n  function TickSignal() {\n    var _this;\n\n    _classCallCheck(this, TickSignal);\n\n    _this = _super.call(this, optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n    _this.name = \"TickSignal\";\n    var options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n    _this.input = _this._param = new TickParam({\n      context: _this.context,\n      convert: options.convert,\n      multiplier: options.multiplier,\n      param: _this._constantSource.offset,\n      units: options.units,\n      value: options.value\n    });\n    return _this;\n  }\n\n  _createClass(TickSignal, [{\n    key: \"ticksToTime\",\n    value: function ticksToTime(ticks, when) {\n      return this._param.ticksToTime(ticks, when);\n    }\n  }, {\n    key: \"timeToTicks\",\n    value: function timeToTicks(duration, when) {\n      return this._param.timeToTicks(duration, when);\n    }\n  }, {\n    key: \"getTimeOfTick\",\n    value: function getTimeOfTick(tick) {\n      return this._param.getTimeOfTick(tick);\n    }\n  }, {\n    key: \"getDurationOfTicks\",\n    value: function getDurationOfTicks(ticks, time) {\n      return this._param.getDurationOfTicks(ticks, time);\n    }\n  }, {\n    key: \"getTicksAtTime\",\n    value: function getTicksAtTime(time) {\n      return this._param.getTicksAtTime(time);\n    }\n    /**\n     * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n     */\n\n  }, {\n    key: \"multiplier\",\n    get: function get() {\n      return this._param.multiplier;\n    },\n    set: function set(m) {\n      this._param.multiplier = m;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(TickSignal.prototype), \"dispose\", this).call(this);\n\n      this._param.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Signal.getDefaults(), {\n        multiplier: 1,\n        units: \"hertz\",\n        value: 1\n      });\n    }\n  }]);\n\n  return TickSignal;\n}(Signal);","map":{"version":3,"mappings":";;;;;;AAAA,SAASA,MAAT,QAAsC,qBAAtC;AAGA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAOA;;;;;;;;;;AASA,WAAaC,UAAb;AAAA;;AAAA;;AAeC;AAAA;;AAAA;;AAEC,8BAAMF,oBAAoB,CAACE,UAAU,CAACC,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,OAAD,CAAtC,CAA1B;AAfQ,iBAAe,YAAf;AAgBR,QAAMC,OAAO,GAAGL,oBAAoB,CAACE,UAAU,CAACC,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,OAAD,CAAtC,CAApC;AAEA,UAAKE,KAAL,GAAa,MAAKC,MAAL,GAAc,IAAIN,SAAJ,CAAc;AACxCO,aAAO,EAAE,MAAKA,OAD0B;AAExCC,aAAO,EAAEJ,OAAO,CAACI,OAFuB;AAGxCC,gBAAU,EAAEL,OAAO,CAACK,UAHoB;AAIxCC,WAAK,EAAE,MAAKC,eAAL,CAAqBC,MAJY;AAKxCC,WAAK,EAAET,OAAO,CAACS,KALyB;AAMxCC,WAAK,EAAEV,OAAO,CAACU;AANyB,KAAd,CAA3B;AALD;AAaC;;AA5BF;AAAA;AAAA,WAsCC,qBAAYC,KAAZ,EAA0BC,IAA1B,EAAoC;AACnC,aAAO,KAAKV,MAAL,CAAYW,WAAZ,CAAwBF,KAAxB,EAA+BC,IAA/B,CAAP;AACA;AAxCF;AAAA;AAAA,WA0CC,qBAAYE,QAAZ,EAA4BF,IAA5B,EAAsC;AACrC,aAAO,KAAKV,MAAL,CAAYa,WAAZ,CAAwBD,QAAxB,EAAkCF,IAAlC,CAAP;AACA;AA5CF;AAAA;AAAA,WA8CC,uBAAcI,IAAd,EAAyB;AACxB,aAAO,KAAKd,MAAL,CAAYe,aAAZ,CAA0BD,IAA1B,CAAP;AACA;AAhDF;AAAA;AAAA,WAkDC,4BAAmBL,KAAnB,EAAiCO,IAAjC,EAA2C;AAC1C,aAAO,KAAKhB,MAAL,CAAYiB,kBAAZ,CAA+BR,KAA/B,EAAsCO,IAAtC,CAAP;AACA;AApDF;AAAA;AAAA,WAsDC,wBAAeA,IAAf,EAAyB;AACxB,aAAO,KAAKhB,MAAL,CAAYkB,cAAZ,CAA2BF,IAA3B,CAAP;AACA;AAED;;;;AA1DD;AAAA;AAAA,SA6DC,eAAc;AACb,aAAO,KAAKhB,MAAL,CAAYG,UAAnB;AACA,KA/DF;AAAA,SAgEC,aAAegB,CAAf,EAAwB;AACvB,WAAKnB,MAAL,CAAYG,UAAZ,GAAyBgB,CAAzB;AACA;AAlEF;AAAA;AAAA,WAoEC,mBAAO;AACN;;AACA,WAAKnB,MAAL,CAAYoB,OAAZ;;AACA,aAAO,IAAP;AACA;AAxEF;AAAA;AAAA,WA8BC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAAc9B,MAAM,CAACI,WAAP,EAAd,EAAoC;AAC1CO,kBAAU,EAAE,CAD8B;AAE1CI,aAAK,EAAE,OAFmC;AAG1CC,aAAK,EAAE;AAHmC,OAApC,CAAP;AAKA;AApCF;;AAAA;AAAA,EAAkEhB,MAAlE","names":["Signal","optionsFromArguments","TickParam","TickSignal","getDefaults","arguments","options","input","_param","context","convert","multiplier","param","_constantSource","offset","units","value","ticks","when","ticksToTime","duration","timeToTicks","tick","getTimeOfTick","time","getDurationOfTicks","getTicksAtTime","m","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/core/clock/TickSignal.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}