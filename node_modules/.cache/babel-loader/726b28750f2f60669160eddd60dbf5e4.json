{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioWorklet } from \"../core/worklet/ToneAudioWorklet\";\nimport { Effect } from \"./Effect\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Param } from \"../core/context/Param\";\nimport { workletName } from \"./BitCrusher.worklet\";\n/**\n * BitCrusher down-samples the incoming signal to a different bit depth.\n * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing\n * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n * @example\n * // initialize crusher and route a synth through it\n * const crusher = new Tone.BitCrusher(4).toDestination();\n * const synth = new Tone.Synth().connect(crusher);\n * synth.triggerAttackRelease(\"C2\", 2);\n *\n * @category Effect\n */\n\nexport var BitCrusher = /*#__PURE__*/function (_Effect) {\n  _inherits(BitCrusher, _Effect);\n\n  var _super = _createSuper(BitCrusher);\n\n  function BitCrusher() {\n    var _this;\n\n    _classCallCheck(this, BitCrusher);\n\n    _this = _super.call(this, optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]));\n    _this.name = \"BitCrusher\";\n    var options = optionsFromArguments(BitCrusher.getDefaults(), arguments, [\"bits\"]);\n    _this._bitCrusherWorklet = new BitCrusherWorklet({\n      context: _this.context,\n      bits: options.bits\n    }); // connect it up\n\n    _this.connectEffect(_this._bitCrusherWorklet);\n\n    _this.bits = _this._bitCrusherWorklet.bits;\n    return _this;\n  }\n\n  _createClass(BitCrusher, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(BitCrusher.prototype), \"dispose\", this).call(this);\n\n      this._bitCrusherWorklet.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        bits: 4\n      });\n    }\n  }]);\n\n  return BitCrusher;\n}(Effect);\n/**\n * Internal class which creates an AudioWorklet to do the bit crushing\n */\n\nvar BitCrusherWorklet = /*#__PURE__*/function (_ToneAudioWorklet) {\n  _inherits(BitCrusherWorklet, _ToneAudioWorklet);\n\n  var _super2 = _createSuper(BitCrusherWorklet);\n\n  function BitCrusherWorklet() {\n    var _this2;\n\n    _classCallCheck(this, BitCrusherWorklet);\n\n    _this2 = _super2.call(this, optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments));\n    _this2.name = \"BitCrusherWorklet\";\n    var options = optionsFromArguments(BitCrusherWorklet.getDefaults(), arguments);\n    _this2.input = new Gain({\n      context: _this2.context\n    });\n    _this2.output = new Gain({\n      context: _this2.context\n    });\n    _this2.bits = new Param({\n      context: _this2.context,\n      value: options.bits,\n      units: \"positive\",\n      minValue: 1,\n      maxValue: 16,\n      param: _this2._dummyParam,\n      swappable: true\n    });\n    return _this2;\n  }\n\n  _createClass(BitCrusherWorklet, [{\n    key: \"_audioWorkletName\",\n    value: function _audioWorkletName() {\n      return workletName;\n    }\n  }, {\n    key: \"onReady\",\n    value: function onReady(node) {\n      connectSeries(this.input, node, this.output);\n      var bits = node.parameters.get(\"bits\");\n      this.bits.setParam(bits);\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(BitCrusherWorklet.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n      this.output.dispose();\n      this.bits.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioWorklet.getDefaults(), {\n        bits: 12\n      });\n    }\n  }]);\n\n  return BitCrusherWorklet;\n}(ToneAudioWorklet);","map":{"version":3,"mappings":"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","names":["ToneAudioWorklet","Effect","Gain","optionsFromArguments","connectSeries","Param","workletName","BitCrusher","getDefaults","arguments","options","_bitCrusherWorklet","BitCrusherWorklet","context","bits","connectEffect","dispose","Object","assign","input","output","value","units","minValue","maxValue","param","_dummyParam","swappable","node","parameters","get","setParam"],"sourceRoot":"","sources":["../../../Tone/effect/BitCrusher.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}