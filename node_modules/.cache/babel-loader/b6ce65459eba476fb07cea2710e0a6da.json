{"ast":null,"code":"/*!\n * @pixi/accessibility - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/accessibility is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\n\nvar accessibleTarget = {\n  /**\n   *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n   *   shadow div with attributes set\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessible: false,\n\n  /**\n   * Sets the title attribute of the shadow div\n   * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n   *\n   * @member {?string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleTitle: null,\n\n  /**\n   * Sets the aria-label attribute of the shadow div\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  accessibleHint: null,\n\n  /**\n   * @member {number}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   * @todo Needs docs.\n   */\n  tabIndex: 0,\n\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleActive: false,\n\n  /**\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @todo Needs docs.\n   */\n  _accessibleDiv: null,\n\n  /**\n   * Specify the type of div the accessible layer is. Screen readers treat the element differently\n   * depending on this type. Defaults to button.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'button'\n   */\n  accessibleType: 'button',\n\n  /**\n   * Specify the pointer-events the accessible div will use\n   * Defaults to auto.\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   * @default 'auto'\n   */\n  accessiblePointerEvents: 'auto',\n\n  /**\n   * Setting to false will prevent any children inside this container to\n   * be accessible. Defaults to true.\n   *\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   * @default true\n   */\n  accessibleChildren: true,\n  renderId: -1\n}; // add some extra variables to the container..\n\nDisplayObject.mixin(accessibleTarget);\nvar KEY_CODE_TAB = 9;\nvar DIV_TOUCH_SIZE = 100;\nvar DIV_TOUCH_POS_X = 0;\nvar DIV_TOUCH_POS_Y = 0;\nvar DIV_TOUCH_ZINDEX = 2;\nvar DIV_HOOK_SIZE = 1;\nvar DIV_HOOK_POS_X = -1000;\nvar DIV_HOOK_POS_Y = -1000;\nvar DIV_HOOK_ZINDEX = 2;\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\n\nvar AccessibilityManager =\n/** @class */\nfunction () {\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n   */\n  function AccessibilityManager(renderer) {\n    /** Setting this to true will visually show the divs. */\n    this.debug = false;\n    /** Internal variable, see isActive getter. */\n\n    this._isActive = false;\n    /** Internal variable, see isMobileAccessibility getter. */\n\n    this._isMobileAccessibility = false;\n    /** A simple pool for storing divs. */\n\n    this.pool = [];\n    /** This is a tick used to check if an object is no longer being rendered. */\n\n    this.renderId = 0;\n    /** The array of currently active accessible items. */\n\n    this.children = [];\n    /** Count to throttle div updates on android devices. */\n\n    this.androidUpdateCount = 0;\n    /**  The frequency to update the div elements. */\n\n    this.androidUpdateFrequency = 500; // 2fps\n\n    this._hookDiv = null;\n\n    if (isMobile.tablet || isMobile.phone) {\n      this.createTouchHook();\n    } // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n\n\n    var div = document.createElement('div');\n    div.style.width = DIV_TOUCH_SIZE + \"px\";\n    div.style.height = DIV_TOUCH_SIZE + \"px\";\n    div.style.position = 'absolute';\n    div.style.top = DIV_TOUCH_POS_X + \"px\";\n    div.style.left = DIV_TOUCH_POS_Y + \"px\";\n    div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n    this.div = div;\n    this.renderer = renderer;\n    /**\n     * pre-bind the functions\n     *\n     * @type {Function}\n     * @private\n     */\n\n    this._onKeyDown = this._onKeyDown.bind(this);\n    /**\n     * pre-bind the functions\n     *\n     * @type {Function}\n     * @private\n     */\n\n    this._onMouseMove = this._onMouseMove.bind(this); // let listen for tab.. once pressed we can fire up and show the accessibility layer\n\n    globalThis.addEventListener('keydown', this._onKeyDown, false);\n  }\n\n  Object.defineProperty(AccessibilityManager.prototype, \"isActive\", {\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get: function get() {\n      return this._isActive;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(AccessibilityManager.prototype, \"isMobileAccessibility\", {\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get: function get() {\n      return this._isMobileAccessibility;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Creates the touch hooks.\n   *\n   * @private\n   */\n\n  AccessibilityManager.prototype.createTouchHook = function () {\n    var _this = this;\n\n    var hookDiv = document.createElement('button');\n    hookDiv.style.width = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.height = DIV_HOOK_SIZE + \"px\";\n    hookDiv.style.position = 'absolute';\n    hookDiv.style.top = DIV_HOOK_POS_X + \"px\";\n    hookDiv.style.left = DIV_HOOK_POS_Y + \"px\";\n    hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n    hookDiv.style.backgroundColor = '#FF0000';\n    hookDiv.title = 'select to enable accessibility for this content';\n    hookDiv.addEventListener('focus', function () {\n      _this._isMobileAccessibility = true;\n\n      _this.activate();\n\n      _this.destroyTouchHook();\n    });\n    document.body.appendChild(hookDiv);\n    this._hookDiv = hookDiv;\n  };\n  /**\n   * Destroys the touch hooks.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.destroyTouchHook = function () {\n    if (!this._hookDiv) {\n      return;\n    }\n\n    document.body.removeChild(this._hookDiv);\n    this._hookDiv = null;\n  };\n  /**\n   * Activating will cause the Accessibility layer to be shown.\n   * This is called when a user presses the tab key.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.activate = function () {\n    var _a;\n\n    if (this._isActive) {\n      return;\n    }\n\n    this._isActive = true;\n    globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n    globalThis.removeEventListener('keydown', this._onKeyDown, false);\n    this.renderer.on('postrender', this.update, this);\n    (_a = this.renderer.view.parentNode) === null || _a === void 0 ? void 0 : _a.appendChild(this.div);\n  };\n  /**\n   * Deactivating will cause the Accessibility layer to be hidden.\n   * This is called when a user moves the mouse.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.deactivate = function () {\n    var _a;\n\n    if (!this._isActive || this._isMobileAccessibility) {\n      return;\n    }\n\n    this._isActive = false;\n    globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n    globalThis.addEventListener('keydown', this._onKeyDown, false);\n    this.renderer.off('postrender', this.update);\n    (_a = this.div.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(this.div);\n  };\n  /**\n   * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n   *\n   * @private\n   * @param {PIXI.Container} displayObject - The DisplayObject to check.\n   */\n\n\n  AccessibilityManager.prototype.updateAccessibleObjects = function (displayObject) {\n    if (!displayObject.visible || !displayObject.accessibleChildren) {\n      return;\n    }\n\n    if (displayObject.accessible && displayObject.interactive) {\n      if (!displayObject._accessibleActive) {\n        this.addChild(displayObject);\n      }\n\n      displayObject.renderId = this.renderId;\n    }\n\n    var children = displayObject.children;\n\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        this.updateAccessibleObjects(children[i]);\n      }\n    }\n  };\n  /**\n   * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n   *\n   * @private\n   */\n\n\n  AccessibilityManager.prototype.update = function () {\n    /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n    *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n    *  so I am just running update every half a second, seems to fix it.\n    */\n    var now = performance.now();\n\n    if (isMobile.android.device && now < this.androidUpdateCount) {\n      return;\n    }\n\n    this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n    if (!this.renderer.renderingToScreen) {\n      return;\n    } // update children...\n\n\n    if (this.renderer._lastObjectRendered) {\n      this.updateAccessibleObjects(this.renderer._lastObjectRendered);\n    }\n\n    var _a = this.renderer.view.getBoundingClientRect(),\n        left = _a.left,\n        top = _a.top,\n        width = _a.width,\n        height = _a.height;\n\n    var _b = this.renderer,\n        viewWidth = _b.width,\n        viewHeight = _b.height,\n        resolution = _b.resolution;\n    var sx = width / viewWidth * resolution;\n    var sy = height / viewHeight * resolution;\n    var div = this.div;\n    div.style.left = left + \"px\";\n    div.style.top = top + \"px\";\n    div.style.width = viewWidth + \"px\";\n    div.style.height = viewHeight + \"px\";\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n\n      if (child.renderId !== this.renderId) {\n        child._accessibleActive = false;\n        removeItems(this.children, i, 1);\n        this.div.removeChild(child._accessibleDiv);\n        this.pool.push(child._accessibleDiv);\n        child._accessibleDiv = null;\n        i--;\n      } else {\n        // map div to display..\n        div = child._accessibleDiv;\n        var hitArea = child.hitArea;\n        var wt = child.worldTransform;\n\n        if (child.hitArea) {\n          div.style.left = (wt.tx + hitArea.x * wt.a) * sx + \"px\";\n          div.style.top = (wt.ty + hitArea.y * wt.d) * sy + \"px\";\n          div.style.width = hitArea.width * wt.a * sx + \"px\";\n          div.style.height = hitArea.height * wt.d * sy + \"px\";\n        } else {\n          hitArea = child.getBounds();\n          this.capHitArea(hitArea);\n          div.style.left = hitArea.x * sx + \"px\";\n          div.style.top = hitArea.y * sy + \"px\";\n          div.style.width = hitArea.width * sx + \"px\";\n          div.style.height = hitArea.height * sy + \"px\"; // update button titles and hints if they exist and they've changed\n\n          if (div.title !== child.accessibleTitle && child.accessibleTitle !== null) {\n            div.title = child.accessibleTitle;\n          }\n\n          if (div.getAttribute('aria-label') !== child.accessibleHint && child.accessibleHint !== null) {\n            div.setAttribute('aria-label', child.accessibleHint);\n          }\n        } // the title or index may have changed, if so lets update it!\n\n\n        if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex) {\n          div.title = child.accessibleTitle;\n          div.tabIndex = child.tabIndex;\n\n          if (this.debug) {\n            this.updateDebugHTML(div);\n          }\n        }\n      }\n    } // increment the render id..\n\n\n    this.renderId++;\n  };\n  /**\n   * private function that will visually add the information to the\n   * accessability div\n   *\n   * @param {HTMLElement} div\n   */\n\n\n  AccessibilityManager.prototype.updateDebugHTML = function (div) {\n    div.innerHTML = \"type: \" + div.type + \"</br> title : \" + div.title + \"</br> tabIndex: \" + div.tabIndex;\n  };\n  /**\n   * Adjust the hit area based on the bounds of a display object\n   *\n   * @param {PIXI.Rectangle} hitArea - Bounds of the child\n   */\n\n\n  AccessibilityManager.prototype.capHitArea = function (hitArea) {\n    if (hitArea.x < 0) {\n      hitArea.width += hitArea.x;\n      hitArea.x = 0;\n    }\n\n    if (hitArea.y < 0) {\n      hitArea.height += hitArea.y;\n      hitArea.y = 0;\n    }\n\n    var _a = this.renderer,\n        viewWidth = _a.width,\n        viewHeight = _a.height;\n\n    if (hitArea.x + hitArea.width > viewWidth) {\n      hitArea.width = viewWidth - hitArea.x;\n    }\n\n    if (hitArea.y + hitArea.height > viewHeight) {\n      hitArea.height = viewHeight - hitArea.y;\n    }\n  };\n  /**\n   * Adds a DisplayObject to the accessibility manager\n   *\n   * @private\n   * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n   */\n\n\n  AccessibilityManager.prototype.addChild = function (displayObject) {\n    //    this.activate();\n    var div = this.pool.pop();\n\n    if (!div) {\n      div = document.createElement('button');\n      div.style.width = DIV_TOUCH_SIZE + \"px\";\n      div.style.height = DIV_TOUCH_SIZE + \"px\";\n      div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n      div.style.position = 'absolute';\n      div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n      div.style.borderStyle = 'none'; // ARIA attributes ensure that button title and hint updates are announced properly\n\n      if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n        // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n        div.setAttribute('aria-live', 'off');\n      } else {\n        div.setAttribute('aria-live', 'polite');\n      }\n\n      if (navigator.userAgent.match(/rv:.*Gecko\\//)) {\n        // FireFox needs this to announce only the new button name\n        div.setAttribute('aria-relevant', 'additions');\n      } else {\n        // required by IE, other browsers don't much care\n        div.setAttribute('aria-relevant', 'text');\n      }\n\n      div.addEventListener('click', this._onClick.bind(this));\n      div.addEventListener('focus', this._onFocus.bind(this));\n      div.addEventListener('focusout', this._onFocusOut.bind(this));\n    } // set pointer events\n\n\n    div.style.pointerEvents = displayObject.accessiblePointerEvents; // set the type, this defaults to button!\n\n    div.type = displayObject.accessibleType;\n\n    if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null) {\n      div.title = displayObject.accessibleTitle;\n    } else if (!displayObject.accessibleHint || displayObject.accessibleHint === null) {\n      div.title = \"displayObject \" + displayObject.tabIndex;\n    }\n\n    if (displayObject.accessibleHint && displayObject.accessibleHint !== null) {\n      div.setAttribute('aria-label', displayObject.accessibleHint);\n    }\n\n    if (this.debug) {\n      this.updateDebugHTML(div);\n    }\n\n    displayObject._accessibleActive = true;\n    displayObject._accessibleDiv = div;\n    div.displayObject = displayObject;\n    this.children.push(displayObject);\n    this.div.appendChild(displayObject._accessibleDiv);\n    displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n  };\n  /**\n   * Maps the div button press to pixi's InteractionManager (click)\n   *\n   * @private\n   * @param {MouseEvent} e - The click event.\n   */\n\n\n  AccessibilityManager.prototype._onClick = function (e) {\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'click', eventData);\n    interactionManager.dispatchEvent(displayObject, 'pointertap', eventData);\n    interactionManager.dispatchEvent(displayObject, 'tap', eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseover)\n   *\n   * @private\n   * @param {FocusEvent} e - The focus event.\n   */\n\n\n  AccessibilityManager.prototype._onFocus = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'assertive');\n    }\n\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'mouseover', eventData);\n  };\n  /**\n   * Maps the div focus events to pixi's InteractionManager (mouseout)\n   *\n   * @private\n   * @param {FocusEvent} e - The focusout event.\n   */\n\n\n  AccessibilityManager.prototype._onFocusOut = function (e) {\n    if (!e.target.getAttribute('aria-live')) {\n      e.target.setAttribute('aria-live', 'polite');\n    }\n\n    var interactionManager = this.renderer.plugins.interaction;\n    var displayObject = e.target.displayObject;\n    var eventData = interactionManager.eventData;\n    interactionManager.dispatchEvent(displayObject, 'mouseout', eventData);\n  };\n  /**\n   * Is called when a key is pressed\n   *\n   * @private\n   * @param {KeyboardEvent} e - The keydown event.\n   */\n\n\n  AccessibilityManager.prototype._onKeyDown = function (e) {\n    if (e.keyCode !== KEY_CODE_TAB) {\n      return;\n    }\n\n    this.activate();\n  };\n  /**\n   * Is called when the mouse moves across the renderer element\n   *\n   * @private\n   * @param {MouseEvent} e - The mouse event.\n   */\n\n\n  AccessibilityManager.prototype._onMouseMove = function (e) {\n    if (e.movementX === 0 && e.movementY === 0) {\n      return;\n    }\n\n    this.deactivate();\n  };\n  /**\n   * Destroys the accessibility manager\n   *\n   */\n\n\n  AccessibilityManager.prototype.destroy = function () {\n    this.destroyTouchHook();\n    this.div = null;\n    globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n    globalThis.removeEventListener('keydown', this._onKeyDown);\n    this.pool = null;\n    this.children = null;\n    this.renderer = null;\n  };\n\n  return AccessibilityManager;\n}();\n\nexport { AccessibilityManager, accessibleTarget };","map":{"version":3,"mappings":"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","names":["accessibleTarget","accessible","accessibleTitle","accessibleHint","tabIndex","_accessibleActive","_accessibleDiv","accessibleType","accessiblePointerEvents","accessibleChildren","renderId","DisplayObject","mixin","KEY_CODE_TAB","DIV_TOUCH_SIZE","DIV_TOUCH_POS_X","DIV_TOUCH_POS_Y","DIV_TOUCH_ZINDEX","DIV_HOOK_SIZE","DIV_HOOK_POS_X","DIV_HOOK_POS_Y","DIV_HOOK_ZINDEX","renderer","_hookDiv","isMobile","tablet","phone","createTouchHook","div","document","createElement","style","width","height","position","top","left","zIndex","toString","_onKeyDown","bind","_onMouseMove","globalThis","addEventListener","Object","AccessibilityManager","_isActive","_isMobileAccessibility","hookDiv","backgroundColor","title","_this","activate","destroyTouchHook","body","appendChild","removeChild","removeEventListener","on","update","view","parentNode","_a","off","displayObject","visible","interactive","addChild","children","i","length","updateAccessibleObjects","now","performance","android","device","androidUpdateCount","androidUpdateFrequency","renderingToScreen","_lastObjectRendered","getBoundingClientRect","viewWidth","viewHeight","resolution","sx","sy","child","removeItems","pool","push","hitArea","wt","worldTransform","tx","x","a","ty","y","d","getBounds","capHitArea","getAttribute","setAttribute","debug","updateDebugHTML","innerHTML","type","pop","borderStyle","navigator","userAgent","toLowerCase","indexOf","match","_onClick","_onFocus","_onFocusOut","pointerEvents","e","interactionManager","plugins","interaction","target","dispatchEvent","eventData","keyCode","movementX","movementY","deactivate"],"sources":["../../src/accessibleTarget.ts","../../src/AccessibilityManager.ts"],"sourcesContent":["import type { DisplayObject } from '@pixi/display';\n\nexport type PointerEvents = 'auto'\n| 'none'\n| 'visiblePainted'\n| 'visibleFill'\n| 'visibleStroke'\n| 'visible'\n| 'painted'\n| 'fill'\n| 'stroke'\n| 'all'\n| 'inherit';\n\nexport interface IAccessibleTarget {\n    accessible: boolean;\n    accessibleTitle: string;\n    accessibleHint: string;\n    tabIndex: number;\n    _accessibleActive: boolean;\n    _accessibleDiv: IAccessibleHTMLElement;\n    accessibleType: string;\n    accessiblePointerEvents: PointerEvents;\n    accessibleChildren: boolean;\n    renderId: number;\n}\n\nexport interface IAccessibleHTMLElement extends HTMLElement {\n    type?: string;\n    displayObject?: DisplayObject;\n}\n\n/**\n * Default property values of accessible objects\n * used by {@link PIXI.AccessibilityManager}.\n *\n * @private\n * @function accessibleTarget\n * @memberof PIXI\n * @type {Object}\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          MyObject.prototype,\n *          PIXI.accessibleTarget\n *      );\n */\nexport const accessibleTarget: IAccessibleTarget = {\n    /**\n     *  Flag for if the object is accessible. If true AccessibilityManager will overlay a\n     *   shadow div with attributes set\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessible: false,\n\n    /**\n     * Sets the title attribute of the shadow div\n     * If accessibleTitle AND accessibleHint has not been this will default to 'displayObject [tabIndex]'\n     *\n     * @member {?string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleTitle: null,\n\n    /**\n     * Sets the aria-label attribute of the shadow div\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    accessibleHint: null,\n\n    /**\n     * @member {number}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     * @todo Needs docs.\n     */\n    tabIndex: 0,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleActive: false,\n\n    /**\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @todo Needs docs.\n     */\n    _accessibleDiv: null,\n\n    /**\n     * Specify the type of div the accessible layer is. Screen readers treat the element differently\n     * depending on this type. Defaults to button.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'button'\n     */\n    accessibleType: 'button',\n\n    /**\n     * Specify the pointer-events the accessible div will use\n     * Defaults to auto.\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     * @default 'auto'\n     */\n    accessiblePointerEvents: 'auto',\n\n    /**\n     * Setting to false will prevent any children inside this container to\n     * be accessible. Defaults to true.\n     *\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     * @default true\n     */\n    accessibleChildren: true,\n\n    renderId: -1,\n};\n","import { DisplayObject } from '@pixi/display';\nimport { isMobile, removeItems } from '@pixi/utils';\nimport { accessibleTarget } from './accessibleTarget';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Container } from '@pixi/display';\nimport type { Renderer, AbstractRenderer } from '@pixi/core';\nimport type { IAccessibleHTMLElement } from './accessibleTarget';\n\n// add some extra variables to the container..\nDisplayObject.mixin(accessibleTarget);\n\nconst KEY_CODE_TAB = 9;\n\nconst DIV_TOUCH_SIZE = 100;\nconst DIV_TOUCH_POS_X = 0;\nconst DIV_TOUCH_POS_Y = 0;\nconst DIV_TOUCH_ZINDEX = 2;\n\nconst DIV_HOOK_SIZE = 1;\nconst DIV_HOOK_POS_X = -1000;\nconst DIV_HOOK_POS_Y = -1000;\nconst DIV_HOOK_ZINDEX = 2;\n\n/**\n * The Accessibility manager recreates the ability to tab and have content read by screen readers.\n * This is very important as it can possibly help people with disabilities access PixiJS content.\n *\n * A DisplayObject can be made accessible just like it can be made interactive. This manager will map the\n * events as if the mouse was being used, minimizing the effort required to implement.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.accessibility`\n *\n * @class\n * @memberof PIXI\n */\nexport class AccessibilityManager\n{\n    /** Setting this to true will visually show the divs. */\n    public debug = false;\n\n    /**\n     * The renderer this accessibility manager works for.\n     *\n     * @type {PIXI.CanvasRenderer|PIXI.Renderer}\n     */\n    public renderer: AbstractRenderer|Renderer;\n\n    /** Internal variable, see isActive getter. */\n    private _isActive = false;\n\n    /** Internal variable, see isMobileAccessibility getter. */\n    private _isMobileAccessibility = false;\n\n    /** Button element for handling touch hooks. */\n    private _hookDiv: HTMLElement;\n\n    /** This is the dom element that will sit over the PixiJS element. This is where the div overlays will go. */\n    private div: HTMLElement;\n\n    /** A simple pool for storing divs. */\n    private pool: IAccessibleHTMLElement[] = [];\n\n    /** This is a tick used to check if an object is no longer being rendered. */\n    private renderId = 0;\n\n    /** The array of currently active accessible items. */\n    private children: DisplayObject[] = [];\n\n    /** Count to throttle div updates on android devices. */\n    private androidUpdateCount = 0;\n\n    /**  The frequency to update the div elements. */\n    private androidUpdateFrequency = 500; // 2fps\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     */\n    constructor(renderer: AbstractRenderer|Renderer)\n    {\n        this._hookDiv = null;\n\n        if (isMobile.tablet || isMobile.phone)\n        {\n            this.createTouchHook();\n        }\n\n        // first we create a div that will sit over the PixiJS element. This is where the div overlays will go.\n        const div = document.createElement('div');\n\n        div.style.width = `${DIV_TOUCH_SIZE}px`;\n        div.style.height = `${DIV_TOUCH_SIZE}px`;\n        div.style.position = 'absolute';\n        div.style.top = `${DIV_TOUCH_POS_X}px`;\n        div.style.left = `${DIV_TOUCH_POS_Y}px`;\n        div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n\n        this.div = div;\n        this.renderer = renderer;\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onKeyDown = this._onKeyDown.bind(this);\n\n        /**\n         * pre-bind the functions\n         *\n         * @type {Function}\n         * @private\n         */\n        this._onMouseMove = this._onMouseMove.bind(this);\n\n        // let listen for tab.. once pressed we can fire up and show the accessibility layer\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n    }\n\n    /**\n     * Value of `true` if accessibility is currently active and accessibility layers are showing.\n     * @member {boolean}\n     * @readonly\n     */\n    get isActive(): boolean\n    {\n        return this._isActive;\n    }\n\n    /**\n     * Value of `true` if accessibility is enabled for touch devices.\n     * @member {boolean}\n     * @readonly\n     */\n    get isMobileAccessibility(): boolean\n    {\n        return this._isMobileAccessibility;\n    }\n\n    /**\n     * Creates the touch hooks.\n     *\n     * @private\n     */\n    private createTouchHook(): void\n    {\n        const hookDiv = document.createElement('button');\n\n        hookDiv.style.width = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.height = `${DIV_HOOK_SIZE}px`;\n        hookDiv.style.position = 'absolute';\n        hookDiv.style.top = `${DIV_HOOK_POS_X}px`;\n        hookDiv.style.left = `${DIV_HOOK_POS_Y}px`;\n        hookDiv.style.zIndex = DIV_HOOK_ZINDEX.toString();\n        hookDiv.style.backgroundColor = '#FF0000';\n        hookDiv.title = 'select to enable accessibility for this content';\n\n        hookDiv.addEventListener('focus', () =>\n        {\n            this._isMobileAccessibility = true;\n            this.activate();\n            this.destroyTouchHook();\n        });\n\n        document.body.appendChild(hookDiv);\n        this._hookDiv = hookDiv;\n    }\n\n    /**\n     * Destroys the touch hooks.\n     *\n     * @private\n     */\n    private destroyTouchHook(): void\n    {\n        if (!this._hookDiv)\n        {\n            return;\n        }\n        document.body.removeChild(this._hookDiv);\n        this._hookDiv = null;\n    }\n\n    /**\n     * Activating will cause the Accessibility layer to be shown.\n     * This is called when a user presses the tab key.\n     *\n     * @private\n     */\n    private activate(): void\n    {\n        if (this._isActive)\n        {\n            return;\n        }\n\n        this._isActive = true;\n\n        globalThis.document.addEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.on('postrender', this.update, this);\n        this.renderer.view.parentNode?.appendChild(this.div);\n    }\n\n    /**\n     * Deactivating will cause the Accessibility layer to be hidden.\n     * This is called when a user moves the mouse.\n     *\n     * @private\n     */\n    private deactivate(): void\n    {\n        if (!this._isActive || this._isMobileAccessibility)\n        {\n            return;\n        }\n\n        this._isActive = false;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.addEventListener('keydown', this._onKeyDown, false);\n\n        this.renderer.off('postrender', this.update);\n        this.div.parentNode?.removeChild(this.div);\n    }\n\n    /**\n     * This recursive function will run through the scene graph and add any new accessible objects to the DOM layer.\n     *\n     * @private\n     * @param {PIXI.Container} displayObject - The DisplayObject to check.\n     */\n    private updateAccessibleObjects(displayObject: Container): void\n    {\n        if (!displayObject.visible || !displayObject.accessibleChildren)\n        {\n            return;\n        }\n\n        if (displayObject.accessible && displayObject.interactive)\n        {\n            if (!displayObject._accessibleActive)\n            {\n                this.addChild(displayObject);\n            }\n\n            displayObject.renderId = this.renderId;\n        }\n\n        const children = displayObject.children;\n\n        if (children)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                this.updateAccessibleObjects(children[i] as Container);\n            }\n        }\n    }\n\n    /**\n     * Before each render this function will ensure that all divs are mapped correctly to their DisplayObjects.\n     *\n     * @private\n     */\n    private update(): void\n    {\n        /* On Android default web browser, tab order seems to be calculated by position rather than tabIndex,\n        *  moving buttons can cause focus to flicker between two buttons making it hard/impossible to navigate,\n        *  so I am just running update every half a second, seems to fix it.\n        */\n        const now = performance.now();\n\n        if (isMobile.android.device && now < this.androidUpdateCount)\n        {\n            return;\n        }\n\n        this.androidUpdateCount = now + this.androidUpdateFrequency;\n\n        if (!(this.renderer as Renderer).renderingToScreen)\n        {\n            return;\n        }\n\n        // update children...\n        if (this.renderer._lastObjectRendered)\n        {\n            this.updateAccessibleObjects(this.renderer._lastObjectRendered as Container);\n        }\n\n        const { left, top, width, height } = this.renderer.view.getBoundingClientRect();\n        const { width: viewWidth, height: viewHeight, resolution } = this.renderer;\n\n        const sx = (width / viewWidth) * resolution;\n        const sy = (height / viewHeight) * resolution;\n\n        let div = this.div;\n\n        div.style.left = `${left}px`;\n        div.style.top = `${top}px`;\n        div.style.width = `${viewWidth}px`;\n        div.style.height = `${viewHeight}px`;\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (child.renderId !== this.renderId)\n            {\n                child._accessibleActive = false;\n\n                removeItems(this.children, i, 1);\n                this.div.removeChild(child._accessibleDiv);\n                this.pool.push(child._accessibleDiv);\n                child._accessibleDiv = null;\n\n                i--;\n            }\n            else\n            {\n                // map div to display..\n                div = child._accessibleDiv;\n                let hitArea = child.hitArea as Rectangle;\n                const wt = child.worldTransform;\n\n                if (child.hitArea)\n                {\n                    div.style.left = `${(wt.tx + (hitArea.x * wt.a)) * sx}px`;\n                    div.style.top = `${(wt.ty + (hitArea.y * wt.d)) * sy}px`;\n\n                    div.style.width = `${hitArea.width * wt.a * sx}px`;\n                    div.style.height = `${hitArea.height * wt.d * sy}px`;\n                }\n                else\n                {\n                    hitArea = child.getBounds();\n\n                    this.capHitArea(hitArea);\n\n                    div.style.left = `${hitArea.x * sx}px`;\n                    div.style.top = `${hitArea.y * sy}px`;\n\n                    div.style.width = `${hitArea.width * sx}px`;\n                    div.style.height = `${hitArea.height * sy}px`;\n\n                    // update button titles and hints if they exist and they've changed\n                    if (div.title !== child.accessibleTitle && child.accessibleTitle !== null)\n                    {\n                        div.title = child.accessibleTitle;\n                    }\n                    if (div.getAttribute('aria-label') !== child.accessibleHint\n                        && child.accessibleHint !== null)\n                    {\n                        div.setAttribute('aria-label', child.accessibleHint);\n                    }\n                }\n\n                // the title or index may have changed, if so lets update it!\n                if (child.accessibleTitle !== div.title || child.tabIndex !== div.tabIndex)\n                {\n                    div.title = child.accessibleTitle;\n                    div.tabIndex = child.tabIndex;\n                    if (this.debug) this.updateDebugHTML(div);\n                }\n            }\n        }\n\n        // increment the render id..\n        this.renderId++;\n    }\n\n    /**\n     * private function that will visually add the information to the\n     * accessability div\n     *\n     * @param {HTMLElement} div\n     */\n    public updateDebugHTML(div: IAccessibleHTMLElement): void\n    {\n        div.innerHTML = `type: ${div.type}</br> title : ${div.title}</br> tabIndex: ${div.tabIndex}`;\n    }\n\n    /**\n     * Adjust the hit area based on the bounds of a display object\n     *\n     * @param {PIXI.Rectangle} hitArea - Bounds of the child\n     */\n    public capHitArea(hitArea: Rectangle): void\n    {\n        if (hitArea.x < 0)\n        {\n            hitArea.width += hitArea.x;\n            hitArea.x = 0;\n        }\n\n        if (hitArea.y < 0)\n        {\n            hitArea.height += hitArea.y;\n            hitArea.y = 0;\n        }\n\n        const { width: viewWidth, height: viewHeight } = this.renderer;\n\n        if (hitArea.x + hitArea.width > viewWidth)\n        {\n            hitArea.width = viewWidth - hitArea.x;\n        }\n\n        if (hitArea.y + hitArea.height > viewHeight)\n        {\n            hitArea.height = viewHeight - hitArea.y;\n        }\n    }\n\n    /**\n     * Adds a DisplayObject to the accessibility manager\n     *\n     * @private\n     * @param {PIXI.DisplayObject} displayObject - The child to make accessible.\n     */\n    private addChild<T extends DisplayObject>(displayObject: T): void\n    {\n        //    this.activate();\n\n        let div = this.pool.pop();\n\n        if (!div)\n        {\n            div = document.createElement('button');\n\n            div.style.width = `${DIV_TOUCH_SIZE}px`;\n            div.style.height = `${DIV_TOUCH_SIZE}px`;\n            div.style.backgroundColor = this.debug ? 'rgba(255,255,255,0.5)' : 'transparent';\n            div.style.position = 'absolute';\n            div.style.zIndex = DIV_TOUCH_ZINDEX.toString();\n            div.style.borderStyle = 'none';\n\n            // ARIA attributes ensure that button title and hint updates are announced properly\n            if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)\n            {\n                // Chrome doesn't need aria-live to work as intended; in fact it just gets more confused.\n                div.setAttribute('aria-live', 'off');\n            }\n            else\n            {\n                div.setAttribute('aria-live', 'polite');\n            }\n\n            if (navigator.userAgent.match(/rv:.*Gecko\\//))\n            {\n                // FireFox needs this to announce only the new button name\n                div.setAttribute('aria-relevant', 'additions');\n            }\n            else\n            {\n                // required by IE, other browsers don't much care\n                div.setAttribute('aria-relevant', 'text');\n            }\n\n            div.addEventListener('click', this._onClick.bind(this));\n            div.addEventListener('focus', this._onFocus.bind(this));\n            div.addEventListener('focusout', this._onFocusOut.bind(this));\n        }\n\n        // set pointer events\n        div.style.pointerEvents = displayObject.accessiblePointerEvents;\n        // set the type, this defaults to button!\n        div.type = displayObject.accessibleType;\n\n        if (displayObject.accessibleTitle && displayObject.accessibleTitle !== null)\n        {\n            div.title = displayObject.accessibleTitle;\n        }\n        else if (!displayObject.accessibleHint\n                 || displayObject.accessibleHint === null)\n        {\n            div.title = `displayObject ${displayObject.tabIndex}`;\n        }\n\n        if (displayObject.accessibleHint\n            && displayObject.accessibleHint !== null)\n        {\n            div.setAttribute('aria-label', displayObject.accessibleHint);\n        }\n\n        if (this.debug) this.updateDebugHTML(div);\n\n        displayObject._accessibleActive = true;\n        displayObject._accessibleDiv = div;\n        div.displayObject = displayObject;\n\n        this.children.push(displayObject);\n        this.div.appendChild(displayObject._accessibleDiv);\n        displayObject._accessibleDiv.tabIndex = displayObject.tabIndex;\n    }\n\n    /**\n     * Maps the div button press to pixi's InteractionManager (click)\n     *\n     * @private\n     * @param {MouseEvent} e - The click event.\n     */\n    private _onClick(e: MouseEvent): void\n    {\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'click', eventData);\n        interactionManager.dispatchEvent(displayObject, 'pointertap', eventData);\n        interactionManager.dispatchEvent(displayObject, 'tap', eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseover)\n     *\n     * @private\n     * @param {FocusEvent} e - The focus event.\n     */\n    private _onFocus(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'assertive');\n        }\n\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'mouseover', eventData);\n    }\n\n    /**\n     * Maps the div focus events to pixi's InteractionManager (mouseout)\n     *\n     * @private\n     * @param {FocusEvent} e - The focusout event.\n     */\n    private _onFocusOut(e: FocusEvent): void\n    {\n        if (!(e.target as Element).getAttribute('aria-live'))\n        {\n            (e.target as Element).setAttribute('aria-live', 'polite');\n        }\n\n        const interactionManager = this.renderer.plugins.interaction;\n        const { displayObject } = e.target as IAccessibleHTMLElement;\n        const { eventData } = interactionManager;\n\n        interactionManager.dispatchEvent(displayObject, 'mouseout', eventData);\n    }\n\n    /**\n     * Is called when a key is pressed\n     *\n     * @private\n     * @param {KeyboardEvent} e - The keydown event.\n     */\n    private _onKeyDown(e: KeyboardEvent): void\n    {\n        if (e.keyCode !== KEY_CODE_TAB)\n        {\n            return;\n        }\n\n        this.activate();\n    }\n\n    /**\n     * Is called when the mouse moves across the renderer element\n     *\n     * @private\n     * @param {MouseEvent} e - The mouse event.\n     */\n    private _onMouseMove(e: MouseEvent): void\n    {\n        if (e.movementX === 0 && e.movementY === 0)\n        {\n            return;\n        }\n\n        this.deactivate();\n    }\n\n    /**\n     * Destroys the accessibility manager\n     *\n     */\n    public destroy(): void\n    {\n        this.destroyTouchHook();\n        this.div = null;\n\n        globalThis.document.removeEventListener('mousemove', this._onMouseMove, true);\n        globalThis.removeEventListener('keydown', this._onKeyDown);\n\n        this.pool = null;\n        this.children = null;\n        this.renderer = null;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}