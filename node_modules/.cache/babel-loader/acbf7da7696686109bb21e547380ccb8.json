{"ast":null,"code":"import { interceptConnections } from './intercept-connections';\nexport var wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = function wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioScheduledSourceNode, nativeContext) {\n  var nativeGainNode = nativeContext.createGain();\n  nativeAudioScheduledSourceNode.connect(nativeGainNode);\n\n  var disconnectGainNode = function (disconnect) {\n    return function () {\n      // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n      disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n      nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n    };\n  }(nativeAudioScheduledSourceNode.disconnect);\n\n  nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n  interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n\n  nativeAudioScheduledSourceNode.stop = function (stop) {\n    var isStopped = false;\n    return function () {\n      var when = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (isStopped) {\n        try {\n          stop.call(nativeAudioScheduledSourceNode, when);\n        } catch (_unused) {\n          nativeGainNode.gain.setValueAtTime(0, when);\n        }\n      } else {\n        stop.call(nativeAudioScheduledSourceNode, when);\n        isStopped = true;\n      }\n    };\n  }(nativeAudioScheduledSourceNode.stop);\n};","map":{"version":3,"mappings":"AACA,SAASA,oBAAT,QAAqC,yBAArC;AAEA,OAAO,IAAMC,sDAAsD,GAAoE,SAA1HA,sDAA0H,CACnIC,8BADmI,EAEnIC,aAFmI,EAGnI;AACA,MAAMC,cAAc,GAAGD,aAAa,CAACE,UAAd,EAAvB;AAEAH,gCAA8B,CAACI,OAA/B,CAAuCF,cAAvC;;AAEA,MAAMG,kBAAkB,GAAI,UAACC,UAAD,EAAe;AACvC,WAAO,YAAK;AACR;AACyCA,gBAAW,CAACC,IAAZ,CAAiBP,8BAAjB,EAAiDE,cAAjD;AACzCF,oCAA8B,CAACQ,mBAA/B,CAAmD,OAAnD,EAA4DH,kBAA5D;AACH,KAJD;AAKH,GAN0B,CAMxBL,8BAA8B,CAACM,UANP,CAA3B;;AAQAN,gCAA8B,CAACS,gBAA/B,CAAgD,OAAhD,EAAyDJ,kBAAzD;AAEAP,sBAAoB,CAACE,8BAAD,EAAiCE,cAAjC,CAApB;;AAEAF,gCAA8B,CAACU,IAA/B,GAAuC,UAACA,IAAD,EAAS;AAC5C,QAAIC,SAAS,GAAG,KAAhB;AAEA,WAAO,YAAa;AAAA,UAAZC,IAAY,uEAAL,CAAK;;AAChB,UAAID,SAAJ,EAAe;AACX,YAAI;AACAD,cAAI,CAACH,IAAL,CAAUP,8BAAV,EAA0CY,IAA1C;AACH,SAFD,CAEE,gBAAM;AACJV,wBAAc,CAACW,IAAf,CAAoBC,cAApB,CAAmC,CAAnC,EAAsCF,IAAtC;AACH;AACJ,OAND,MAMO;AACHF,YAAI,CAACH,IAAL,CAAUP,8BAAV,EAA0CY,IAA1C;AAEAD,iBAAS,GAAG,IAAZ;AACH;AACJ,KAZD;AAaH,GAhBqC,CAgBnCX,8BAA8B,CAACU,IAhBI,CAAtC;AAiBH,CArCM","names":["interceptConnections","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","nativeAudioScheduledSourceNode","nativeContext","nativeGainNode","createGain","connect","disconnectGainNode","disconnect","call","removeEventListener","addEventListener","stop","isStopped","when","gain","setValueAtTime"],"sourceRoot":"","sources":["../../../src/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}