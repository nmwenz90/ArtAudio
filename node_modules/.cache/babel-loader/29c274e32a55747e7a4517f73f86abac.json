{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Tone } from \"../Tone\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\n\nexport var TimeBaseClass = /*#__PURE__*/function (_Tone) {\n  _inherits(TimeBaseClass, _Tone);\n\n  var _super = _createSuper(TimeBaseClass);\n\n  /**\n   * @param context The context associated with the time value. Used to compute\n   * Transport and context-relative timing.\n   * @param  value  The time value as a number, string or object\n   * @param  units  Unit values\n   */\n  function TimeBaseClass(context, value, units) {\n    var _this;\n\n    _classCallCheck(this, TimeBaseClass);\n\n    _this = _super.call(this);\n    /**\n     * The default units\n     */\n\n    _this.defaultUnits = \"s\";\n    _this._val = value;\n    _this._units = units;\n    _this.context = context;\n    _this._expressions = _this._getExpressions();\n    return _this;\n  }\n  /**\n   * All of the time encoding expressions\n   */\n\n\n  _createClass(TimeBaseClass, [{\n    key: \"_getExpressions\",\n    value: function _getExpressions() {\n      var _this2 = this;\n\n      return {\n        hz: {\n          method: function method(value) {\n            return _this2._frequencyToUnits(parseFloat(value));\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?)hz$/i\n        },\n        i: {\n          method: function method(value) {\n            return _this2._ticksToUnits(parseInt(value, 10));\n          },\n          regexp: /^(\\d+)i$/i\n        },\n        m: {\n          method: function method(value) {\n            return _this2._beatsToUnits(parseInt(value, 10) * _this2._getTimeSignature());\n          },\n          regexp: /^(\\d+)m$/i\n        },\n        n: {\n          method: function method(value, dot) {\n            var numericValue = parseInt(value, 10);\n            var scalar = dot === \".\" ? 1.5 : 1;\n\n            if (numericValue === 1) {\n              return _this2._beatsToUnits(_this2._getTimeSignature()) * scalar;\n            } else {\n              return _this2._beatsToUnits(4 / numericValue) * scalar;\n            }\n          },\n          regexp: /^(\\d+)n(\\.?)$/i\n        },\n        number: {\n          method: function method(value) {\n            return _this2._expressions[_this2.defaultUnits].method.call(_this2, value);\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?)$/\n        },\n        s: {\n          method: function method(value) {\n            return _this2._secondsToUnits(parseFloat(value));\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?)s$/\n        },\n        samples: {\n          method: function method(value) {\n            return parseInt(value, 10) / _this2.context.sampleRate;\n          },\n          regexp: /^(\\d+)samples$/\n        },\n        t: {\n          method: function method(value) {\n            var numericValue = parseInt(value, 10);\n            return _this2._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n          },\n          regexp: /^(\\d+)t$/i\n        },\n        tr: {\n          method: function method(m, q, s) {\n            var total = 0;\n\n            if (m && m !== \"0\") {\n              total += _this2._beatsToUnits(_this2._getTimeSignature() * parseFloat(m));\n            }\n\n            if (q && q !== \"0\") {\n              total += _this2._beatsToUnits(parseFloat(q));\n            }\n\n            if (s && s !== \"0\") {\n              total += _this2._beatsToUnits(parseFloat(s) / 4);\n            }\n\n            return total;\n          },\n          regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/\n        }\n      };\n    } //-------------------------------------\n    // \tVALUE OF\n    //-------------------------------------\n\n    /**\n     * Evaluate the time value. Returns the time in seconds.\n     */\n\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      if (this._val instanceof TimeBaseClass) {\n        this.fromType(this._val);\n      }\n\n      if (isUndef(this._val)) {\n        return this._noArg();\n      } else if (isString(this._val) && isUndef(this._units)) {\n        for (var units in this._expressions) {\n          if (this._expressions[units].regexp.test(this._val.trim())) {\n            this._units = units;\n            break;\n          }\n        }\n      } else if (isObject(this._val)) {\n        var total = 0;\n\n        for (var typeName in this._val) {\n          if (isDefined(this._val[typeName])) {\n            var quantity = this._val[typeName]; // @ts-ignore\n\n            var time = new this.constructor(this.context, typeName).valueOf() * quantity;\n            total += time;\n          }\n        }\n\n        return total;\n      }\n\n      if (isDefined(this._units)) {\n        var expr = this._expressions[this._units];\n\n        var matching = this._val.toString().trim().match(expr.regexp);\n\n        if (matching) {\n          return expr.method.apply(this, matching.slice(1));\n        } else {\n          return expr.method.call(this, this._val);\n        }\n      } else if (isString(this._val)) {\n        return parseFloat(this._val);\n      } else {\n        return this._val;\n      }\n    } //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n\n    /**\n     * Returns the value of a frequency in the current units\n     */\n\n  }, {\n    key: \"_frequencyToUnits\",\n    value: function _frequencyToUnits(freq) {\n      return 1 / freq;\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n\n  }, {\n    key: \"_beatsToUnits\",\n    value: function _beatsToUnits(beats) {\n      return 60 / this._getBpm() * beats;\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n\n  }, {\n    key: \"_secondsToUnits\",\n    value: function _secondsToUnits(seconds) {\n      return seconds;\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n\n  }, {\n    key: \"_ticksToUnits\",\n    value: function _ticksToUnits(ticks) {\n      return ticks * this._beatsToUnits(1) / this._getPPQ();\n    }\n    /**\n     * With no arguments, return 'now'\n     */\n\n  }, {\n    key: \"_noArg\",\n    value: function _noArg() {\n      return this._now();\n    } //-------------------------------------\n    // \tTEMPO CONVERSIONS\n    //-------------------------------------\n\n    /**\n     * Return the bpm\n     */\n\n  }, {\n    key: \"_getBpm\",\n    value: function _getBpm() {\n      return this.context.transport.bpm.value;\n    }\n    /**\n     * Return the timeSignature\n     */\n\n  }, {\n    key: \"_getTimeSignature\",\n    value: function _getTimeSignature() {\n      return this.context.transport.timeSignature;\n    }\n    /**\n     * Return the PPQ or 192 if Transport is not available\n     */\n\n  }, {\n    key: \"_getPPQ\",\n    value: function _getPPQ() {\n      return this.context.transport.PPQ;\n    } //-------------------------------------\n    // \tCONVERSION INTERFACE\n    //-------------------------------------\n\n    /**\n     * Coerce a time type into this units type.\n     * @param type Any time type units\n     */\n\n  }, {\n    key: \"fromType\",\n    value: function fromType(type) {\n      this._units = undefined;\n\n      switch (this.defaultUnits) {\n        case \"s\":\n          this._val = type.toSeconds();\n          break;\n\n        case \"i\":\n          this._val = type.toTicks();\n          break;\n\n        case \"hz\":\n          this._val = type.toFrequency();\n          break;\n\n        case \"midi\":\n          this._val = type.toMidi();\n          break;\n      }\n\n      return this;\n    }\n    /**\n     * Return the value in hertz\n     */\n\n  }, {\n    key: \"toFrequency\",\n    value: function toFrequency() {\n      return 1 / this.toSeconds();\n    }\n    /**\n     * Return the time in samples\n     */\n\n  }, {\n    key: \"toSamples\",\n    value: function toSamples() {\n      return this.toSeconds() * this.context.sampleRate;\n    }\n    /**\n     * Return the time in milliseconds.\n     */\n\n  }, {\n    key: \"toMilliseconds\",\n    value: function toMilliseconds() {\n      return this.toSeconds() * 1000;\n    }\n  }]);\n\n  return TimeBaseClass;\n}(Tone);","map":{"version":3,"mappings":"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","names":["Tone","isDefined","isObject","isString","isUndef","TimeBaseClass","context","value","units","_val","_units","_expressions","_getExpressions","hz","method","_frequencyToUnits","parseFloat","regexp","i","_ticksToUnits","parseInt","m","_beatsToUnits","_getTimeSignature","n","dot","numericValue","scalar","number","defaultUnits","call","s","_secondsToUnits","samples","sampleRate","t","Math","floor","tr","q","total","fromType","_noArg","test","trim","typeName","quantity","time","constructor","valueOf","expr","matching","toString","match","apply","slice","freq","beats","_getBpm","seconds","ticks","_getPPQ","_now","transport","bpm","timeSignature","PPQ","type","undefined","toSeconds","toTicks","toFrequency","toMidi"],"sourceRoot":"","sources":["../../../../Tone/core/type/TimeBase.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}