{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].\n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\n\nexport var NoiseSynth = /*#__PURE__*/function (_Instrument) {\n  _inherits(NoiseSynth, _Instrument);\n\n  var _super = _createSuper(NoiseSynth);\n\n  function NoiseSynth() {\n    var _this;\n\n    _classCallCheck(this, NoiseSynth);\n\n    _this = _super.call(this, optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n    _this.name = \"NoiseSynth\";\n    var options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n    _this.noise = new Noise(Object.assign({\n      context: _this.context\n    }, options.noise));\n    _this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: _this.context\n    }, options.envelope)); // connect the noise to the output\n\n    _this.noise.chain(_this.envelope, _this.output);\n\n    return _this;\n  }\n\n  _createClass(NoiseSynth, [{\n    key: \"triggerAttack\",\n    value:\n    /**\n     * Start the attack portion of the envelopes. Unlike other\n     * instruments, Tone.NoiseSynth doesn't have a note.\n     * @example\n     * const noiseSynth = new Tone.NoiseSynth().toDestination();\n     * noiseSynth.triggerAttack();\n     */\n    function triggerAttack(time) {\n      var velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      time = this.toSeconds(time); // the envelopes\n\n      this.envelope.triggerAttack(time, velocity); // start the noise\n\n      this.noise.start(time);\n\n      if (this.envelope.sustain === 0) {\n        this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n      }\n\n      return this;\n    }\n    /**\n     * Start the release portion of the envelopes.\n     */\n\n  }, {\n    key: \"triggerRelease\",\n    value: function triggerRelease(time) {\n      time = this.toSeconds(time);\n      this.envelope.triggerRelease(time);\n      this.noise.stop(time + this.toSeconds(this.envelope.release));\n      return this;\n    }\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      if (this._syncState()) {\n        this._syncMethod(\"triggerAttack\", 0);\n\n        this._syncMethod(\"triggerRelease\", 0);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"triggerAttackRelease\",\n    value: function triggerAttackRelease(duration, time) {\n      var velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      time = this.toSeconds(time);\n      duration = this.toSeconds(duration);\n      this.triggerAttack(time, velocity);\n      this.triggerRelease(time + duration);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(NoiseSynth.prototype), \"dispose\", this).call(this);\n\n      this.noise.dispose();\n      this.envelope.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Instrument.getDefaults(), {\n        envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n          decay: 0.1,\n          sustain: 0.0\n        }),\n        noise: Object.assign(omitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())), {\n          type: \"white\"\n        })\n      });\n    }\n  }]);\n\n  return NoiseSynth;\n}(Instrument);","map":{"version":3,"mappings":"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","names":["AmplitudeEnvelope","omitFromObject","optionsFromArguments","Noise","Instrument","ToneAudioNode","Envelope","Source","NoiseSynth","getDefaults","arguments","options","noise","Object","assign","context","envelope","chain","output","time","velocity","toSeconds","triggerAttack","start","sustain","stop","attack","decay","triggerRelease","release","_syncState","_syncMethod","duration","dispose","keys","type"],"sourceRoot":"","sources":["../../../Tone/instrument/NoiseSynth.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}