{"ast":null,"code":"import _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\n\nvar filterFullBuffer = function filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) {\n  var convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n  var convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n  var feedbackLength = convertedFeedback.length;\n  var feedforwardLength = convertedFeedforward.length;\n  var minLength = Math.min(feedbackLength, feedforwardLength);\n\n  if (convertedFeedback[0] !== 1) {\n    for (var i = 0; i < feedbackLength; i += 1) {\n      convertedFeedforward[i] /= convertedFeedback[0];\n    }\n\n    for (var _i = 1; _i < feedforwardLength; _i += 1) {\n      convertedFeedback[_i] /= convertedFeedback[0];\n    }\n  }\n\n  var bufferLength = 32;\n  var xBuffer = new Float32Array(bufferLength);\n  var yBuffer = new Float32Array(bufferLength);\n  var filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n  var numberOfChannels = renderedBuffer.numberOfChannels;\n\n  for (var _i2 = 0; _i2 < numberOfChannels; _i2 += 1) {\n    var input = renderedBuffer.getChannelData(_i2);\n    var output = filteredBuffer.getChannelData(_i2);\n    xBuffer.fill(0);\n    yBuffer.fill(0);\n    filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n  }\n\n  return filteredBuffer;\n};\n\nexport var createIIRFilterNodeRendererFactory = function createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) {\n  return function (feedback, feedforward) {\n    var renderedNativeAudioNodes = new WeakMap();\n    var filteredBufferPromise = null;\n\n    var createAudioNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(proxy, nativeOfflineAudioContext) {\n        var nativeAudioBufferSourceNode, nativeIIRFilterNode, nativeIIRFilterNodeIsOwnedByContext, partialOfflineAudioContext, filteredBuffer;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                nativeAudioBufferSourceNode = null;\n                nativeIIRFilterNode = getNativeAudioNode(proxy); // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.\n\n                if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                  nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                  });\n                } else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                  // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n                  nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);\n                }\n\n                renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n\n                if (!(nativeAudioBufferSourceNode !== null)) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                if (!(filteredBufferPromise === null)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                if (!(nativeOfflineAudioContextConstructor === null)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n\n              case 9:\n                partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.\n                proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                filteredBufferPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var renderedBuffer;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n\n                        case 2:\n                          _context.next = 4;\n                          return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n\n                        case 4:\n                          renderedBuffer = _context.sent;\n                          return _context.abrupt(\"return\", filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward));\n\n                        case 6:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))();\n\n              case 11:\n                _context2.next = 13;\n                return filteredBufferPromise;\n\n              case 13:\n                filteredBuffer = _context2.sent;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return _context2.abrupt(\"return\", nativeAudioBufferSourceNode);\n\n              case 17:\n                _context2.next = 19;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n\n              case 19:\n                return _context2.abrupt(\"return\", nativeIIRFilterNode);\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function createAudioNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAudioNode !== undefined) {\n          return Promise.resolve(renderedNativeAudioNode);\n        }\n\n        return createAudioNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":"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","names":["filterBuffer","isOwnedByContext","filterFullBuffer","renderedBuffer","nativeOfflineAudioContext","feedback","feedforward","convertedFeedback","Float64Array","convertedFeedforward","feedbackLength","length","feedforwardLength","minLength","Math","min","i","bufferLength","xBuffer","Float32Array","yBuffer","filteredBuffer","createBuffer","numberOfChannels","sampleRate","input","getChannelData","output","fill","createIIRFilterNodeRendererFactory","createNativeAudioBufferSourceNode","getNativeAudioNode","nativeOfflineAudioContextConstructor","renderInputsOfAudioNode","renderNativeOfflineAudioContext","renderedNativeAudioNodes","WeakMap","filteredBufferPromise","createAudioNode","proxy","nativeAudioBufferSourceNode","nativeIIRFilterNode","nativeIIRFilterNodeIsOwnedByContext","createIIRFilter","undefined","buffer","channelCount","channelCountMode","channelInterpretation","loop","loopEnd","loopStart","playbackRate","set","Error","partialOfflineAudioContext","context","destination","start","render","renderedNativeAudioNode","get","Promise","resolve"],"sourceRoot":"","sources":["../../../src/factories/iir-filter-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}