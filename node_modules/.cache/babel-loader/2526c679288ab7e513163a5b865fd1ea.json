{"ast":null,"code":"/*!\n * @pixi/extract - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/extract is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { RenderTexture } from '@pixi/core';\nvar TEMP_RECT = new Rectangle();\nvar BYTES_PER_PIXEL = 4;\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n *\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n *\n * @memberof PIXI\n */\n\nvar Extract =\n/** @class */\nfunction () {\n  /**\n   * @param renderer - A reference to the current renderer\n   */\n  function Extract(renderer) {\n    this.renderer = renderer;\n  }\n  /**\n   * Will return a HTML Image of the target\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @return - HTML Image of the target\n   */\n\n\n  Extract.prototype.image = function (target, format, quality) {\n    var image = new Image();\n    image.src = this.base64(target, format, quality);\n    return image;\n  };\n  /**\n   * Will return a base64 encoded string of this target. It works by calling\n   *  `Extract.getCanvas` and then running toDataURL on that.\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n   * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n   * @return - A base64 encoded string of the texture.\n   */\n\n\n  Extract.prototype.base64 = function (target, format, quality) {\n    return this.canvas(target).toDataURL(format, quality);\n  };\n  /**\n   * Creates a Canvas element, renders this target to it and then returns it.\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @return - A Canvas element with the texture rendered on.\n   */\n\n\n  Extract.prototype.canvas = function (target) {\n    var renderer = this.renderer;\n    var resolution;\n    var frame;\n    var flipY = false;\n    var renderTexture;\n    var generated = false;\n\n    if (target) {\n      if (target instanceof RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = this.renderer.generateTexture(target);\n        generated = true;\n      }\n    }\n\n    if (renderTexture) {\n      resolution = renderTexture.baseTexture.resolution;\n      frame = renderTexture.frame;\n      flipY = false;\n      renderer.renderTexture.bind(renderTexture);\n    } else {\n      resolution = this.renderer.resolution;\n      flipY = true;\n      frame = TEMP_RECT;\n      frame.width = this.renderer.width;\n      frame.height = this.renderer.height;\n      renderer.renderTexture.bind(null);\n    }\n\n    var width = Math.floor(frame.width * resolution + 1e-4);\n    var height = Math.floor(frame.height * resolution + 1e-4);\n    var canvasBuffer = new CanvasRenderTarget(width, height, 1);\n    var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height); // read pixels to the array\n\n    var gl = renderer.gl;\n    gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels); // add the pixels to the canvas\n\n    var canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n    Extract.arrayPostDivide(webglPixels, canvasData.data);\n    canvasBuffer.context.putImageData(canvasData, 0, 0); // pulling pixels\n\n    if (flipY) {\n      var target_1 = new CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n      target_1.context.scale(1, -1); // we can't render to itself because we should be empty before render.\n\n      target_1.context.drawImage(canvasBuffer.canvas, 0, -height);\n      canvasBuffer.destroy();\n      canvasBuffer = target_1;\n    }\n\n    if (generated) {\n      renderTexture.destroy(true);\n    } // send the canvas back..\n\n\n    return canvasBuffer.canvas;\n  };\n  /**\n   * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n   * order, with integer values between 0 and 255 (included).\n   *\n   * @param target - A displayObject or renderTexture\n   *  to convert. If left empty will use the main renderer\n   * @return - One-dimensional array containing the pixel data of the entire texture\n   */\n\n\n  Extract.prototype.pixels = function (target) {\n    var renderer = this.renderer;\n    var resolution;\n    var frame;\n    var renderTexture;\n    var generated = false;\n\n    if (target) {\n      if (target instanceof RenderTexture) {\n        renderTexture = target;\n      } else {\n        renderTexture = this.renderer.generateTexture(target);\n        generated = true;\n      }\n    }\n\n    if (renderTexture) {\n      resolution = renderTexture.baseTexture.resolution;\n      frame = renderTexture.frame; // bind the buffer\n\n      renderer.renderTexture.bind(renderTexture);\n    } else {\n      resolution = renderer.resolution;\n      frame = TEMP_RECT;\n      frame.width = renderer.width;\n      frame.height = renderer.height;\n      renderer.renderTexture.bind(null);\n    }\n\n    var width = frame.width * resolution;\n    var height = frame.height * resolution;\n    var webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height); // read pixels to the array\n\n    var gl = renderer.gl;\n    gl.readPixels(frame.x * resolution, frame.y * resolution, width, height, gl.RGBA, gl.UNSIGNED_BYTE, webglPixels);\n\n    if (generated) {\n      renderTexture.destroy(true);\n    }\n\n    Extract.arrayPostDivide(webglPixels, webglPixels);\n    return webglPixels;\n  };\n  /** Destroys the extract. */\n\n\n  Extract.prototype.destroy = function () {\n    this.renderer = null;\n  };\n  /**\n   * Takes premultiplied pixel data and produces regular pixel data\n   *\n   * @private\n   * @param pixels - array of pixel data\n   * @param out - output array\n   */\n\n\n  Extract.arrayPostDivide = function (pixels, out) {\n    for (var i = 0; i < pixels.length; i += 4) {\n      var alpha = out[i + 3] = pixels[i + 3];\n\n      if (alpha !== 0) {\n        out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n        out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n        out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n      } else {\n        out[i] = pixels[i];\n        out[i + 1] = pixels[i + 1];\n        out[i + 2] = pixels[i + 2];\n      }\n    }\n  };\n\n  return Extract;\n}();\n\nexport { Extract };","map":{"version":3,"mappings":"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","names":["TEMP_RECT","Rectangle","BYTES_PER_PIXEL","renderer","Extract","target","format","quality","image","Image","src","base64","canvas","toDataURL","resolution","frame","flipY","renderTexture","generated","RenderTexture","generateTexture","baseTexture","bind","width","height","Math","floor","canvasBuffer","CanvasRenderTarget","webglPixels","Uint8Array","gl","readPixels","x","y","RGBA","UNSIGNED_BYTE","canvasData","context","getImageData","arrayPostDivide","data","putImageData","target_1","scale","drawImage","destroy","pixels","out","i","length","alpha","round","min"],"sources":["../../src/Extract.ts"],"sourcesContent":["import { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { RenderTexture } from '@pixi/core';\n\nimport type { Renderer, IRendererPlugin } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n *\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n *\n * @memberof PIXI\n */\nexport class Extract implements IRendererPlugin\n{\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return - HTML Image of the target\n     */\n    public image(target: DisplayObject|RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return - A base64 encoded string of the texture.\n     */\n    public base64(target: DisplayObject|RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return - A Canvas element with the texture rendered on.\n     */\n    public canvas(target: DisplayObject|RenderTexture): HTMLCanvasElement\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = this.renderer.resolution;\n\n            flipY = true;\n\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        let canvasBuffer = new CanvasRenderTarget(width, height, 1);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        // add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        Extract.arrayPostDivide(webglPixels, canvasData.data);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // pulling pixels\n        if (flipY)\n        {\n            const target = new CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n\n            target.context.scale(1, -1);\n\n            // we can't render to itself because we should be empty before render.\n            target.context.drawImage(canvasBuffer.canvas, 0, -height);\n\n            canvasBuffer.destroy();\n            canvasBuffer = target;\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject|RenderTexture): Uint8Array\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n\n            // bind the buffer\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        Extract.arrayPostDivide(webglPixels, webglPixels);\n\n        return webglPixels;\n    }\n\n    /** Destroys the extract. */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     *\n     * @private\n     * @param pixels - array of pixel data\n     * @param out - output array\n     */\n    static arrayPostDivide(\n        pixels: number[] | Uint8Array | Uint8ClampedArray, out: number[] | Uint8Array | Uint8ClampedArray\n    ): void\n    {\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            const alpha = out[i + 3] = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else\n            {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}