{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\n\nexport var Player = /*#__PURE__*/function (_Source) {\n  _inherits(Player, _Source);\n\n  var _super = _createSuper(Player);\n\n  function Player() {\n    var _this;\n\n    _classCallCheck(this, Player);\n\n    _this = _super.call(this, optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"Player\";\n    /**\n     * All of the active buffer source nodes\n     */\n\n    _this._activeSources = new Set();\n    var options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this._buffer = new ToneAudioBuffer({\n      onload: _this._onload.bind(_assertThisInitialized(_this), options.onload),\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    _this.autostart = options.autostart;\n    _this._loop = options.loop;\n    _this._loopStart = options.loopStart;\n    _this._loopEnd = options.loopEnd;\n    _this._playbackRate = options.playbackRate;\n    _this.fadeIn = options.fadeIn;\n    _this.fadeOut = options.fadeOut;\n    return _this;\n  }\n\n  _createClass(Player, [{\n    key: \"load\",\n    value:\n    /**\n     * Load the audio file as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * Note: this does not need to be called if a url\n     * was passed in to the constructor. Only use this\n     * if you want to manually load a new url.\n     * @param url The url of the buffer to load. Filetype support depends on the browser.\n     */\n    function load(url) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._buffer.load(url);\n\n              case 2:\n                this._onload();\n\n                return _context.abrupt(\"return\", this);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Internal callback when the buffer is loaded.\n     */\n\n  }, {\n    key: \"_onload\",\n    value: function _onload() {\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noOp;\n      callback();\n\n      if (this.autostart) {\n        this.start();\n      }\n    }\n    /**\n     * Internal callback when the buffer is done playing.\n     */\n\n  }, {\n    key: \"_onSourceEnd\",\n    value: function _onSourceEnd(source) {\n      // invoke the onstop function\n      this.onstop(this); // delete the source from the active sources\n\n      this._activeSources.delete(source);\n\n      if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === \"started\") {\n        // remove the 'implicitEnd' event and replace with an explicit end\n        this._state.cancel(this.now());\n\n        this._state.setStateAtTime(\"stopped\", this.now());\n      }\n    }\n    /**\n     * Play the buffer at the given startTime. Optionally add an offset\n     * and/or duration which will play the buffer from a position\n     * within the buffer for the given duration.\n     *\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(time, offset, duration) {\n      _get(_getPrototypeOf(Player.prototype), \"start\", this).call(this, time, offset, duration);\n\n      return this;\n    }\n    /**\n     * Internal start method\n     */\n\n  }, {\n    key: \"_start\",\n    value: function _start(startTime, offset, duration) {\n      // if it's a loop the default offset is the loopStart point\n      if (this._loop) {\n        offset = defaultArg(offset, this._loopStart);\n      } else {\n        // otherwise the default offset is 0\n        offset = defaultArg(offset, 0);\n      } // compute the values in seconds\n\n\n      var computedOffset = this.toSeconds(offset); // compute the duration which is either the passed in duration of the buffer.duration - offset\n\n      var origDuration = duration;\n      duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n      var computedDuration = this.toSeconds(duration); // scale it by the playback rate\n\n      computedDuration = computedDuration / this._playbackRate; // get the start time\n\n      startTime = this.toSeconds(startTime); // make the source\n\n      var source = new ToneBufferSource({\n        url: this._buffer,\n        context: this.context,\n        fadeIn: this.fadeIn,\n        fadeOut: this.fadeOut,\n        loop: this._loop,\n        loopEnd: this._loopEnd,\n        loopStart: this._loopStart,\n        onended: this._onSourceEnd.bind(this),\n        playbackRate: this._playbackRate\n      }).connect(this.output); // set the looping properties\n\n      if (!this._loop && !this._synced) {\n        // cancel the previous stop\n        this._state.cancel(startTime + computedDuration); // if it's not looping, set the state change at the end of the sample\n\n\n        this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n          implicitEnd: true\n        });\n      } // add it to the array of active sources\n\n\n      this._activeSources.add(source); // start it\n\n\n      if (this._loop && isUndef(origDuration)) {\n        source.start(startTime, computedOffset);\n      } else {\n        // subtract the fade out time\n        source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n      }\n    }\n    /**\n     * Stop playback.\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      var computedTime = this.toSeconds(time);\n\n      this._activeSources.forEach(function (source) {\n        return source.stop(computedTime);\n      });\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n\n  }, {\n    key: \"restart\",\n    value: function restart(time, offset, duration) {\n      _get(_getPrototypeOf(Player.prototype), \"restart\", this).call(this, time, offset, duration);\n\n      return this;\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time, offset, duration) {\n      this._stop(time);\n\n      this._start(time, offset, duration);\n    }\n    /**\n     * Seek to a specific time in the player's buffer. If the\n     * source is no longer playing at that time, it will stop.\n     * @param offset The time to seek to.\n     * @param when The time for the seek event to occur.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n     * \tplayer.start();\n     * \t// seek to the offset in 1 second from now\n     * \tplayer.seek(0.4, \"+1\");\n     * }).toDestination();\n     */\n\n  }, {\n    key: \"seek\",\n    value: function seek(offset, when) {\n      var computedTime = this.toSeconds(when);\n\n      if (this._state.getValueAtTime(computedTime) === \"started\") {\n        var computedOffset = this.toSeconds(offset); // if it's currently playing, stop it\n\n        this._stop(computedTime); // restart it at the given time\n\n\n        this._start(computedTime, computedOffset);\n      }\n\n      return this;\n    }\n    /**\n     * Set the loop start and end. Will only loop if loop is set to true.\n     * @param loopStart The loop start time\n     * @param loopEnd The loop end time\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n     * // loop between the given points\n     * player.setLoopPoints(0.2, 0.3);\n     * player.loop = true;\n     * player.autostart = true;\n     */\n\n  }, {\n    key: \"setLoopPoints\",\n    value: function setLoopPoints(loopStart, loopEnd) {\n      this.loopStart = loopStart;\n      this.loopEnd = loopEnd;\n      return this;\n    }\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return this._loopStart;\n    },\n    set: function set(loopStart) {\n      this._loopStart = loopStart;\n\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n      } // get the current source\n\n\n      this._activeSources.forEach(function (source) {\n        source.loopStart = loopStart;\n      });\n    }\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return this._loopEnd;\n    },\n    set: function set(loopEnd) {\n      this._loopEnd = loopEnd;\n\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n      } // get the current source\n\n\n      this._activeSources.forEach(function (source) {\n        source.loopEnd = loopEnd;\n      });\n    }\n    /**\n     * The audio buffer belonging to the player.\n     */\n\n  }, {\n    key: \"buffer\",\n    get: function get() {\n      return this._buffer;\n    },\n    set: function set(buffer) {\n      this._buffer.set(buffer);\n    }\n    /**\n     * If the buffer should loop once it's over.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n     * player.loop = true;\n     * player.autostart = true;\n     */\n\n  }, {\n    key: \"loop\",\n    get: function get() {\n      return this._loop;\n    },\n    set: function set(loop) {\n      // if no change, do nothing\n      if (this._loop === loop) {\n        return;\n      }\n\n      this._loop = loop; // set the loop of all of the sources\n\n      this._activeSources.forEach(function (source) {\n        source.loop = loop;\n      });\n\n      if (loop) {\n        // remove the next stopEvent\n        var stopEvent = this._state.getNextState(\"stopped\", this.now());\n\n        if (stopEvent) {\n          this._state.cancel(stopEvent.time);\n        }\n      }\n    }\n    /**\n     * Normal speed is 1. The pitch will change with the playback rate.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n     * // play at 1/4 speed\n     * player.playbackRate = 0.25;\n     * // play as soon as the buffer is loaded\n     * player.autostart = true;\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      this._playbackRate = rate;\n      var now = this.now(); // cancel the stop event since it's at a different time now\n\n      var stopEvent = this._state.getNextState(\"stopped\", now);\n\n      if (stopEvent && stopEvent.implicitEnd) {\n        this._state.cancel(stopEvent.time);\n\n        this._activeSources.forEach(function (source) {\n          return source.cancelStop();\n        });\n      } // set all the sources\n\n\n      this._activeSources.forEach(function (source) {\n        source.playbackRate.setValueAtTime(rate, now);\n      });\n    }\n    /**\n     * If the buffer should be reversed\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n     * player.autostart = true;\n     * player.reverse = true;\n     */\n\n  }, {\n    key: \"reverse\",\n    get: function get() {\n      return this._buffer.reverse;\n    },\n    set: function set(rev) {\n      this._buffer.reverse = rev;\n    }\n    /**\n     * If the buffer is loaded\n     */\n\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this._buffer.loaded;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Player.prototype), \"dispose\", this).call(this); // disconnect all of the players\n\n\n      this._activeSources.forEach(function (source) {\n        return source.dispose();\n      });\n\n      this._activeSources.clear();\n\n      this._buffer.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        autostart: false,\n        fadeIn: 0,\n        fadeOut: 0,\n        loop: false,\n        loopEnd: 0,\n        loopStart: 0,\n        onload: noOp,\n        onerror: noOp,\n        playbackRate: 1,\n        reverse: false\n      });\n    }\n  }]);\n\n  return Player;\n}(Source);\n\n__decorate([timeRange(0)], Player.prototype, \"fadeIn\", void 0);\n\n__decorate([timeRange(0)], Player.prototype, \"fadeOut\", void 0);","map":{"version":3,"mappings":"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","names":["ToneAudioBuffer","defaultArg","optionsFromArguments","noOp","isUndef","Source","ToneBufferSource","assertRange","timeRange","Player","getDefaults","arguments","Set","options","_buffer","onload","_onload","bind","onerror","reverse","url","autostart","_loop","loop","_loopStart","loopStart","_loopEnd","loopEnd","_playbackRate","playbackRate","fadeIn","fadeOut","load","callback","start","source","onstop","_activeSources","delete","size","_synced","_state","getValueAtTime","now","cancel","setStateAtTime","time","offset","duration","startTime","computedOffset","toSeconds","origDuration","Math","max","computedDuration","context","onended","_onSourceEnd","connect","output","implicitEnd","add","computedTime","forEach","stop","_stop","_start","when","buffer","loaded","set","stopEvent","getNextState","rate","cancelStop","setValueAtTime","rev","dispose","clear","Object","assign","__decorate"],"sourceRoot":"","sources":["../../../../Tone/source/buffer/Player.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}