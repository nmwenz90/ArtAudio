{"ast":null,"code":"/*!\n * @pixi/spritesheet - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/spritesheet is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { getResolutionOfUrl, url } from '@pixi/utils';\nimport { LoaderResource } from '@pixi/loaders';\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n *\n * @memberof PIXI\n */\n\nvar Spritesheet =\n/** @class */\nfunction () {\n  /**\n   * @param baseTexture - Reference to the source BaseTexture object.\n   * @param {Object} data - Spritesheet image data.\n   * @param resolutionFilename - The filename to consider when determining\n   *        the resolution of the spritesheet. If not provided, the imageUrl will\n   *        be used on the BaseTexture.\n   */\n  function Spritesheet(texture, data, resolutionFilename) {\n    if (resolutionFilename === void 0) {\n      resolutionFilename = null;\n    }\n\n    this._texture = texture instanceof Texture ? texture : null;\n    this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n    this.textures = {};\n    this.animations = {};\n    this.data = data;\n    var resource = this.baseTexture.resource;\n    this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n    this._frames = this.data.frames;\n    this._frameKeys = Object.keys(this._frames);\n    this._batchIndex = 0;\n    this._callback = null;\n  }\n  /**\n   * Generate the resolution from the filename or fallback\n   * to the meta.scale field of the JSON data.\n   *\n   * @param resolutionFilename - The filename to use for resolving\n   *        the default resolution.\n   * @return Resolution to use for spritesheet.\n   */\n\n\n  Spritesheet.prototype._updateResolution = function (resolutionFilename) {\n    if (resolutionFilename === void 0) {\n      resolutionFilename = null;\n    }\n\n    var scale = this.data.meta.scale; // Use a defaultValue of `null` to check if a url-based resolution is set\n\n    var resolution = getResolutionOfUrl(resolutionFilename, null); // No resolution found via URL\n\n    if (resolution === null) {\n      // Use the scale value or default to 1\n      resolution = scale !== undefined ? parseFloat(scale) : 1;\n    } // For non-1 resolutions, update baseTexture\n\n\n    if (resolution !== 1) {\n      this.baseTexture.setResolution(resolution);\n    }\n\n    return resolution;\n  };\n  /**\n   * Parser spritesheet from loaded data. This is done asynchronously\n   * to prevent creating too many Texture within a single process.\n   *\n   * @param {Function} callback - Callback when complete returns\n   *        a map of the Textures for this spritesheet.\n   */\n\n\n  Spritesheet.prototype.parse = function (callback) {\n    this._batchIndex = 0;\n    this._callback = callback;\n\n    if (this._frameKeys.length <= Spritesheet.BATCH_SIZE) {\n      this._processFrames(0);\n\n      this._processAnimations();\n\n      this._parseComplete();\n    } else {\n      this._nextBatch();\n    }\n  };\n  /**\n   * Process a batch of frames\n   *\n   * @param initialFrameIndex - The index of frame to start.\n   */\n\n\n  Spritesheet.prototype._processFrames = function (initialFrameIndex) {\n    var frameIndex = initialFrameIndex;\n    var maxFrames = Spritesheet.BATCH_SIZE;\n\n    while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length) {\n      var i = this._frameKeys[frameIndex];\n      var data = this._frames[i];\n      var rect = data.frame;\n\n      if (rect) {\n        var frame = null;\n        var trim = null;\n        var sourceSize = data.trimmed !== false && data.sourceSize ? data.sourceSize : data.frame;\n        var orig = new Rectangle(0, 0, Math.floor(sourceSize.w) / this.resolution, Math.floor(sourceSize.h) / this.resolution);\n\n        if (data.rotated) {\n          frame = new Rectangle(Math.floor(rect.x) / this.resolution, Math.floor(rect.y) / this.resolution, Math.floor(rect.h) / this.resolution, Math.floor(rect.w) / this.resolution);\n        } else {\n          frame = new Rectangle(Math.floor(rect.x) / this.resolution, Math.floor(rect.y) / this.resolution, Math.floor(rect.w) / this.resolution, Math.floor(rect.h) / this.resolution);\n        } //  Check to see if the sprite is trimmed\n\n\n        if (data.trimmed !== false && data.spriteSourceSize) {\n          trim = new Rectangle(Math.floor(data.spriteSourceSize.x) / this.resolution, Math.floor(data.spriteSourceSize.y) / this.resolution, Math.floor(rect.w) / this.resolution, Math.floor(rect.h) / this.resolution);\n        }\n\n        this.textures[i] = new Texture(this.baseTexture, frame, orig, trim, data.rotated ? 2 : 0, data.anchor); // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n\n        Texture.addToCache(this.textures[i], i);\n      }\n\n      frameIndex++;\n    }\n  };\n  /** Parse animations config. */\n\n\n  Spritesheet.prototype._processAnimations = function () {\n    var animations = this.data.animations || {};\n\n    for (var animName in animations) {\n      this.animations[animName] = [];\n\n      for (var i = 0; i < animations[animName].length; i++) {\n        var frameName = animations[animName][i];\n        this.animations[animName].push(this.textures[frameName]);\n      }\n    }\n  };\n  /** The parse has completed. */\n\n\n  Spritesheet.prototype._parseComplete = function () {\n    var callback = this._callback;\n    this._callback = null;\n    this._batchIndex = 0;\n    callback.call(this, this.textures);\n  };\n  /** Begin the next batch of textures. */\n\n\n  Spritesheet.prototype._nextBatch = function () {\n    var _this = this;\n\n    this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n\n    this._batchIndex++;\n    setTimeout(function () {\n      if (_this._batchIndex * Spritesheet.BATCH_SIZE < _this._frameKeys.length) {\n        _this._nextBatch();\n      } else {\n        _this._processAnimations();\n\n        _this._parseComplete();\n      }\n    }, 0);\n  };\n  /**\n   * Destroy Spritesheet and don't use after this.\n   *\n   * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n   */\n\n\n  Spritesheet.prototype.destroy = function (destroyBase) {\n    var _a;\n\n    if (destroyBase === void 0) {\n      destroyBase = false;\n    }\n\n    for (var i in this.textures) {\n      this.textures[i].destroy();\n    }\n\n    this._frames = null;\n    this._frameKeys = null;\n    this.data = null;\n    this.textures = null;\n\n    if (destroyBase) {\n      (_a = this._texture) === null || _a === void 0 ? void 0 : _a.destroy();\n      this.baseTexture.destroy();\n    }\n\n    this._texture = null;\n    this.baseTexture = null;\n  };\n  /** The maximum number of Textures to build per process. */\n\n\n  Spritesheet.BATCH_SIZE = 1000;\n  return Spritesheet;\n}();\n/**\n * Reference to Spritesheet object created.\n * @member {PIXI.Spritesheet} spritesheet\n * @memberof PIXI.LoaderResource\n * @instance\n */\n\n/**\n * Dictionary of textures from Spritesheet.\n * @member {object<string, PIXI.Texture>} textures\n * @memberof PIXI.LoaderResource\n * @instance\n */\n\n/**\n * {@link PIXI.Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * If you're using Webpack or other bundlers and plan on bundling the atlas' JSON,\n * use the {@link PIXI.Spritesheet} class to directly parse the JSON.\n *\n * The Loader's image Resource name is automatically appended with `\"_image\"`.\n * If a Resource with this name is already loaded, the Loader will skip parsing the\n * Spritesheet. The code below will generate an internal Loader Resource called `\"myatlas_image\"`.\n *\n * @example\n * loader.add('myatlas', 'path/to/myatlas.json');\n * loader.load(() => {\n *   loader.resources.myatlas; // atlas JSON resource\n *   loader.resources.myatlas_image; // atlas Image resource\n * });\n *\n * @memberof PIXI\n */\n\n\nvar SpritesheetLoader =\n/** @class */\nfunction () {\n  function SpritesheetLoader() {}\n  /**\n   * Called after a resource is loaded.\n   *\n   * @see PIXI.Loader.loaderMiddleware\n   * @param resource\n   * @param next\n   */\n\n\n  SpritesheetLoader.use = function (resource, next) {\n    var _a, _b; // because this is middleware, it execute in loader context. `this` = loader\n\n\n    var loader = this;\n    var imageResourceName = resource.name + \"_image\"; // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n\n    if (!resource.data || resource.type !== LoaderResource.TYPE.JSON || !resource.data.frames || loader.resources[imageResourceName]) {\n      next();\n      return;\n    } // Check and add the multi atlas\n    // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n    // eslint-disable-next-line camelcase\n\n\n    var multiPacks = (_b = (_a = resource.data) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.related_multi_packs;\n\n    if (Array.isArray(multiPacks)) {\n      var _loop_1 = function _loop_1(item) {\n        if (typeof item !== 'string') {\n          return \"continue\";\n        }\n\n        var itemName = item.replace('.json', '');\n        var itemUrl = url.resolve(resource.url.replace(loader.baseUrl, ''), item); // Check if the file wasn't already added as multipacks are redundant\n\n        if (loader.resources[itemName] || Object.values(loader.resources).some(function (r) {\n          return url.format(url.parse(r.url)) === itemUrl;\n        })) {\n          return \"continue\";\n        }\n\n        var options = {\n          crossOrigin: resource.crossOrigin,\n          loadType: LoaderResource.LOAD_TYPE.XHR,\n          xhrType: LoaderResource.XHR_RESPONSE_TYPE.JSON,\n          parentResource: resource,\n          metadata: resource.metadata\n        };\n        loader.add(itemName, itemUrl, options);\n      };\n\n      for (var _i = 0, multiPacks_1 = multiPacks; _i < multiPacks_1.length; _i++) {\n        var item = multiPacks_1[_i];\n\n        _loop_1(item);\n      }\n    }\n\n    var loadOptions = {\n      crossOrigin: resource.crossOrigin,\n      metadata: resource.metadata.imageMetadata,\n      parentResource: resource\n    };\n    var resourcePath = SpritesheetLoader.getResourcePath(resource, loader.baseUrl); // load the image for this sheet\n\n    loader.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res) {\n      if (res.error) {\n        next(res.error);\n        return;\n      }\n\n      var spritesheet = new Spritesheet(res.texture, resource.data, resource.url);\n      spritesheet.parse(function () {\n        resource.spritesheet = spritesheet;\n        resource.textures = spritesheet.textures;\n        next();\n      });\n    });\n  };\n  /**\n   * Get the spritesheets root path\n   *\n   * @param resource - Resource to check path\n   * @param baseUrl - Base root url\n   */\n\n\n  SpritesheetLoader.getResourcePath = function (resource, baseUrl) {\n    // Prepend url path unless the resource image is a data url\n    if (resource.isDataUrl) {\n      return resource.data.meta.image;\n    }\n\n    return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n  };\n\n  return SpritesheetLoader;\n}();\n\nexport { Spritesheet, SpritesheetLoader };","map":{"version":3,"mappings":"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","names":["texture","data","resolutionFilename","_texture","Texture","baseTexture","BaseTexture","textures","animations","resource","resolution","_updateResolution","url","_frames","frames","_frameKeys","Object","keys","_batchIndex","_callback","Spritesheet","meta","scale","getResolutionOfUrl","undefined","parseFloat","setResolution","callback","length","BATCH_SIZE","_processFrames","_processAnimations","_parseComplete","_nextBatch","initialFrameIndex","frameIndex","maxFrames","i","rect","frame","trim","sourceSize","trimmed","orig","Rectangle","Math","floor","w","h","rotated","x","y","spriteSourceSize","anchor","addToCache","animName","frameName","push","call","setTimeout","_this","destroyBase","destroy","_a","SpritesheetLoader","next","loader","imageResourceName","name","type","LoaderResource","TYPE","JSON","resources","multiPacks","_b","related_multi_packs","Array","isArray","item","itemName","replace","itemUrl","resolve","baseUrl","values","some","r","format","parse","options","crossOrigin","loadType","LOAD_TYPE","XHR","xhrType","XHR_RESPONSE_TYPE","parentResource","metadata","add","_i","loadOptions","imageMetadata","resourcePath","getResourcePath","onImageLoad","res","error","spritesheet","isDataUrl","image"],"sources":["../../src/Spritesheet.ts","../../src/SpritesheetLoader.ts"],"sourcesContent":["import { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { getResolutionOfUrl } from '@pixi/utils';\nimport type { Dict } from '@pixi/utils';\nimport type { ImageResource } from '@pixi/core';\nimport type { IPointData } from '@pixi/math';\n\n/**\n * Represents the JSON data for a spritesheet atlas.\n */\nexport interface ISpritesheetFrameData {\n    frame: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    trimmed?: boolean;\n    rotated?: boolean;\n    sourceSize?: {\n        w: number;\n        h: number;\n    };\n    spriteSourceSize?: {\n        x: number;\n        y: number;\n    };\n    anchor?: IPointData;\n}\n\n/**\n * Atlas format.\n */\nexport interface ISpritesheetData {\n    frames: Dict<ISpritesheetFrameData>;\n    animations?: Dict<string[]>;\n    meta: {\n        scale: string;\n    };\n}\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n *\n * @memberof PIXI\n */\nexport class Spritesheet\n{\n    /** The maximum number of Textures to build per process. */\n    static readonly BATCH_SIZE = 1000;\n\n    /** Reference to ths source texture. */\n    public baseTexture: BaseTexture;\n\n    /**\n     * A map containing all textures of the sprite sheet.\n     * Can be used to create a {@link PIXI.Sprite|Sprite}:\n     * ```js\n     * new PIXI.Sprite(sheet.textures[\"image.png\"]);\n     * ```\n     */\n    public textures: Dict<Texture>;\n\n    /**\n     * A map containing the textures for each animation.\n     * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n     * ```js\n     * new PIXI.AnimatedSprite(sheet.animations[\"anim_name\"])\n     * ```\n     */\n    public animations: Dict<Texture[]>;\n\n    /**\n     * Reference to the original JSON data.\n     * @type {Object}\n     */\n    public data: ISpritesheetData;\n\n    /** The resolution of the spritesheet. */\n    public resolution: number;\n\n    /**\n     * Reference to original source image from the Loader. This reference is retained so we\n     * can destroy the Texture later on. It is never used internally.\n     */\n    private _texture: Texture;\n\n    /**\n     * Map of spritesheet frames.\n     * @type {Object}\n     */\n    private _frames: Dict<ISpritesheetFrameData>;\n\n    /** Collection of frame names. */\n    private _frameKeys: string[];\n\n    /** Current batch index being processed. */\n    private _batchIndex: number;\n\n    /**\n     * Callback when parse is completed.\n     * @type {Function}\n     */\n    private _callback: (textures: Dict<Texture>) => void;\n\n    /**\n     * @param baseTexture - Reference to the source BaseTexture object.\n     * @param {Object} data - Spritesheet image data.\n     * @param resolutionFilename - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(texture: BaseTexture | Texture, data: ISpritesheetData, resolutionFilename: string = null)\n    {\n        this._texture = texture instanceof Texture ? texture : null;\n        this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n        this.textures = {};\n        this.animations = {};\n        this.data = data;\n\n        const resource = this.baseTexture.resource as ImageResource;\n\n        this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n        this._frames = this.data.frames;\n        this._frameKeys = Object.keys(this._frames);\n        this._batchIndex = 0;\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     *\n     * @param resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @return Resolution to use for spritesheet.\n     */\n    private _updateResolution(resolutionFilename: string = null): number\n    {\n        const { scale } = this.data.meta;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = scale !== undefined ? parseFloat(scale) : 1;\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.setResolution(resolution);\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     *\n     * @param {Function} callback - Callback when complete returns\n     *        a map of the Textures for this spritesheet.\n     */\n    public parse(callback: (textures?: Dict<Texture>) => void): void\n    {\n        this._batchIndex = 0;\n        this._callback = callback;\n\n        if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n        {\n            this._processFrames(0);\n            this._processAnimations();\n            this._parseComplete();\n        }\n        else\n        {\n            this._nextBatch();\n        }\n    }\n\n    /**\n     * Process a batch of frames\n     *\n     * @param initialFrameIndex - The index of frame to start.\n     */\n    private _processFrames(initialFrameIndex: number): void\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    data.rotated ? 2 : 0,\n                    data.anchor\n                );\n\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                Texture.addToCache(this.textures[i], i);\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /** Parse animations config. */\n    private _processAnimations(): void\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /** The parse has completed. */\n    private _parseComplete(): void\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /** Begin the next batch of textures. */\n    private _nextBatch(): void\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     *\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    public destroy(destroyBase = false): void\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this._texture?.destroy();\n            this.baseTexture.destroy();\n        }\n        this._texture = null;\n        this.baseTexture = null;\n    }\n}\n\n/**\n * Reference to Spritesheet object created.\n * @member {PIXI.Spritesheet} spritesheet\n * @memberof PIXI.LoaderResource\n * @instance\n */\n\n/**\n * Dictionary of textures from Spritesheet.\n * @member {object<string, PIXI.Texture>} textures\n * @memberof PIXI.LoaderResource\n * @instance\n */\n","import { url } from '@pixi/utils';\nimport { Spritesheet } from './Spritesheet';\nimport { LoaderResource } from '@pixi/loaders';\nimport type { Loader } from '@pixi/loaders';\n\n/**\n * {@link PIXI.Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * If you're using Webpack or other bundlers and plan on bundling the atlas' JSON,\n * use the {@link PIXI.Spritesheet} class to directly parse the JSON.\n *\n * The Loader's image Resource name is automatically appended with `\"_image\"`.\n * If a Resource with this name is already loaded, the Loader will skip parsing the\n * Spritesheet. The code below will generate an internal Loader Resource called `\"myatlas_image\"`.\n *\n * @example\n * loader.add('myatlas', 'path/to/myatlas.json');\n * loader.load(() => {\n *   loader.resources.myatlas; // atlas JSON resource\n *   loader.resources.myatlas_image; // atlas Image resource\n * });\n *\n * @memberof PIXI\n */\nexport class SpritesheetLoader\n{\n    /**\n     * Called after a resource is loaded.\n     *\n     * @see PIXI.Loader.loaderMiddleware\n     * @param resource\n     * @param next\n     */\n    static use(resource: LoaderResource, next: (...args: unknown[]) => void): void\n    {\n        // because this is middleware, it execute in loader context. `this` = loader\n        const loader = (this as any) as Loader;\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== LoaderResource.TYPE.JSON\n            || !resource.data.frames\n            || loader.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        // Check and add the multi atlas\n        // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n        // eslint-disable-next-line camelcase\n        const multiPacks = resource.data?.meta?.related_multi_packs;\n\n        if (Array.isArray(multiPacks))\n        {\n            for (const item of multiPacks)\n            {\n                if (typeof item !== 'string')\n                {\n                    continue;\n                }\n\n                const itemName = item.replace('.json', '');\n                const itemUrl = url.resolve(resource.url.replace(loader.baseUrl, ''), item);\n\n                // Check if the file wasn't already added as multipacks are redundant\n                if (loader.resources[itemName]\n                    || Object.values(loader.resources).some((r) => url.format(url.parse(r.url)) === itemUrl))\n                {\n                    continue;\n                }\n\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.XHR,\n                    xhrType: LoaderResource.XHR_RESPONSE_TYPE.JSON,\n                    parentResource: resource,\n                    metadata: resource.metadata\n                };\n\n                loader.add(itemName, itemUrl, options);\n            }\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        const resourcePath = SpritesheetLoader.getResourcePath(resource, loader.baseUrl);\n\n        // load the image for this sheet\n        loader.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res: LoaderResource)\n        {\n            if (res.error)\n            {\n                next(res.error);\n\n                return;\n            }\n\n            const spritesheet = new Spritesheet(\n                res.texture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    }\n\n    /**\n     * Get the spritesheets root path\n     *\n     * @param resource - Resource to check path\n     * @param baseUrl - Base root url\n     */\n    static getResourcePath(resource: LoaderResource, baseUrl: string): string\n    {\n        // Prepend url path unless the resource image is a data url\n        if (resource.isDataUrl)\n        {\n            return resource.data.meta.image;\n        }\n\n        return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}