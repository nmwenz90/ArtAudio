{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nvar DEFAULT_OPTIONS = {\n  numberOfChannels: 1\n};\nexport var createAudioBufferConstructor = function createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) {\n  var nativeOfflineAudioContext = null;\n  return /*#__PURE__*/function (_Symbol$hasInstance) {\n    function AudioBuffer(options) {\n      _classCallCheck(this, AudioBuffer);\n\n      if (nativeOfflineAudioContextConstructor === null) {\n        throw new Error('Missing the native OfflineAudioContext constructor.');\n      }\n\n      var _DEFAULT_OPTIONS$opti = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options),\n          length = _DEFAULT_OPTIONS$opti.length,\n          numberOfChannels = _DEFAULT_OPTIONS$opti.numberOfChannels,\n          sampleRate = _DEFAULT_OPTIONS$opti.sampleRate;\n\n      if (nativeOfflineAudioContext === null) {\n        nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n      }\n      /*\n       * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n       * factory function. But since Firefox also supports the constructor everything should be fine.\n       */\n\n\n      var audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({\n        length: length,\n        numberOfChannels: numberOfChannels,\n        sampleRate: sampleRate\n      }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate); // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n\n      if (audioBuffer.numberOfChannels === 0) {\n        throw createNotSupportedError();\n      } // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n\n\n      if (typeof audioBuffer.copyFromChannel !== 'function') {\n        wrapAudioBufferCopyChannelMethods(audioBuffer);\n        wrapAudioBufferGetChannelDataMethod(audioBuffer); // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n      } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, function () {\n        return testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer);\n      })) {\n        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n      }\n\n      audioBufferStore.add(audioBuffer);\n      /*\n       * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n       * (Offline)AudioContexts.\n       */\n\n      return audioBuffer;\n    }\n\n    _createClass(AudioBuffer, null, [{\n      key: _Symbol$hasInstance,\n      value: function value(instance) {\n        return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);\n      }\n    }]);\n\n    return AudioBuffer;\n  }(Symbol.hasInstance);\n};","map":{"version":3,"mappings":";;;AAAA,SAASA,mDAAT,QAAoE,yEAApE;AACA,SAASC,mCAAT,QAAoD,sDAApD;AAIA,IAAMC,eAAe,GAAG;AACpBC,kBAAgB,EAAE;AADE,CAAxB;AAIA,OAAO,IAAMC,4BAA4B,GAAmC,SAA/DA,4BAA+D,CACxEC,gBADwE,EAExEC,eAFwE,EAGxEC,uBAHwE,EAIxEC,4BAJwE,EAKxEC,oCALwE,EAMxEC,uCANwE,EAOxEC,iCAPwE,EAQxEC,4CARwE,EASxE;AACA,MAAIC,yBAAyB,GAAsC,IAAnE;AAEA;AAsBI,yBAAYC,OAAZ,EAAwC;AAAA;;AACpC,UAAIL,oCAAoC,KAAK,IAA7C,EAAmD;AAC/C,cAAM,IAAIM,KAAJ,CAAU,qDAAV,CAAN;AACH;;AAED,kEAAsDb,eAAtD,GAA0EY,OAA1E;AAAA,UAAQE,MAAR,yBAAQA,MAAR;AAAA,UAAgBb,gBAAhB,yBAAgBA,gBAAhB;AAAA,UAAkCc,UAAlC,yBAAkCA,UAAlC;;AAEA,UAAIJ,yBAAyB,KAAK,IAAlC,EAAwC;AACpCA,iCAAyB,GAAG,IAAIJ,oCAAJ,CAAyC,CAAzC,EAA4C,CAA5C,EAA+C,KAA/C,CAA5B;AACH;AAED;;;;;;AAIA,UAAMS,WAAW,GACbV,4BAA4B,KAAK,IAAjC,IACAF,eAAe,CAACI,uCAAD,EAA0CA,uCAA1C,CADf,GAEM,IAAIF,4BAAJ,CAAiC;AAAEQ,cAAM,EAANA,MAAF;AAAUb,wBAAgB,EAAhBA,gBAAV;AAA4Bc,kBAAU,EAAVA;AAA5B,OAAjC,CAFN,GAGMJ,yBAAyB,CAACM,YAA1B,CAAuChB,gBAAvC,EAAyDa,MAAzD,EAAiEC,UAAjE,CAJV,CAfoC,CAqBpC;;AACA,UAAIC,WAAW,CAACf,gBAAZ,KAAiC,CAArC,EAAwC;AACpC,cAAMI,uBAAuB,EAA7B;AACH,OAxBmC,CA0BpC;AACA;;;AACA,UAAI,OAAOW,WAAW,CAACE,eAAnB,KAAuC,UAA3C,EAAuD;AACnDT,yCAAiC,CAACO,WAAD,CAAjC;AACAjB,2CAAmC,CAACiB,WAAD,CAAnC,CAFmD,CAGnD;AACH,OAJD,MAIO,IACH,CAACZ,eAAe,CAACN,mDAAD,EAAsD;AAAA,eAClEA,mDAAmD,CAACkB,WAAD,CADe;AAAA,OAAtD,CADb,EAIL;AACEN,oDAA4C,CAACM,WAAD,CAA5C;AACH;;AAEDb,sBAAgB,CAACgB,GAAjB,CAAqBH,WAArB;AAEA;;;;;AAIA,aAAOA,WAAP;AACH;;AArEL;AAAA;AAAA,aAuEW,eAA4BI,QAA5B,EAA6C;AAChD,eACKA,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAP,KAAoB,QAAzC,IAAqDC,MAAM,CAACC,cAAP,CAAsBF,QAAtB,MAAoCG,WAAW,CAACC,SAAtG,IACArB,gBAAgB,CAACsB,GAAjB,CAA0BL,QAA1B,CAFJ;AAIH;AA5EL;;AAAA;AAAA,IAuEmBM,MAAM,CAACC,WAvE1B;AA8EH,CA1FM","names":["testAudioBufferCopyChannelMethodsOutOfBoundsSupport","wrapAudioBufferGetChannelDataMethod","DEFAULT_OPTIONS","numberOfChannels","createAudioBufferConstructor","audioBufferStore","cacheTestResult","createNotSupportedError","nativeAudioBufferConstructor","nativeOfflineAudioContextConstructor","testNativeAudioBufferConstructorSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","nativeOfflineAudioContext","options","Error","length","sampleRate","audioBuffer","createBuffer","copyFromChannel","add","instance","Object","getPrototypeOf","AudioBuffer","prototype","has","Symbol","hasInstance"],"sourceRoot":"","sources":["../../../src/factories/audio-buffer-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}