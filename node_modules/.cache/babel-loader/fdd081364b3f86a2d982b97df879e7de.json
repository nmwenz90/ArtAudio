{"ast":null,"code":"/*!\n * @pixi/interaction - v6.3.0\n * Compiled Wed, 23 Mar 2022 18:58:56 UTC\n *\n * @pixi/interaction is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */\nimport { Point } from '@pixi/math';\nimport { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { DisplayObject, TemporaryDisplayObject } from '@pixi/display';\nimport { EventEmitter } from '@pixi/utils';\n/**\n * Holds all information related to an Interaction event\n *\n * @memberof PIXI\n */\n\nvar InteractionData =\n/** @class */\nfunction () {\n  function InteractionData() {\n    /**\n     * Pressure applied by the pointing device during the event. A Touch's force property\n     * will be represented by this value.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     */\n    this.pressure = 0;\n    /**\n     * From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle\n     */\n\n    this.rotationAngle = 0;\n    /**\n     * Twist of a stylus pointer.\n     *\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n\n    this.twist = 0;\n    /**\n     * Barrel pressure on a stylus pointer.\n     *\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n\n    this.tangentialPressure = 0;\n    this.global = new Point();\n    this.target = null;\n    this.originalEvent = null;\n    this.identifier = null;\n    this.isPrimary = false;\n    this.button = 0;\n    this.buttons = 0;\n    this.width = 0;\n    this.height = 0;\n    this.tiltX = 0;\n    this.tiltY = 0;\n    this.pointerType = null;\n    this.pressure = 0;\n    this.rotationAngle = 0;\n    this.twist = 0;\n    this.tangentialPressure = 0;\n  }\n\n  Object.defineProperty(InteractionData.prototype, \"pointerId\", {\n    /**\n     * The unique identifier of the pointer. It will be the same as `identifier`.\n     *\n     * @readonly\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId\n     */\n    get: function get() {\n      return this.identifier;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * This will return the local coordinates of the specified displayObject for this InteractionData\n   *\n   * @param displayObject - The DisplayObject that you would like the local\n   *  coords off\n   * @param point - A Point object in which to store the value, optional (otherwise\n   *  will create a new point)\n   * @param globalPos - A Point object containing your custom global coords, optional\n   *  (otherwise will use the current global coords)\n   * @return - A point containing the coordinates of the InteractionData position relative\n   *  to the DisplayObject\n   */\n\n  InteractionData.prototype.getLocalPosition = function (displayObject, point, globalPos) {\n    return displayObject.worldTransform.applyInverse(globalPos || this.global, point);\n  };\n  /**\n   * Copies properties from normalized event data.\n   *\n   * @param {Touch|MouseEvent|PointerEvent} event - The normalized event data\n   */\n\n\n  InteractionData.prototype.copyEvent = function (event) {\n    // isPrimary should only change on touchstart/pointerdown, so we don't want to overwrite\n    // it with \"false\" on later events when our shim for it on touch events might not be\n    // accurate\n    if ('isPrimary' in event && event.isPrimary) {\n      this.isPrimary = true;\n    }\n\n    this.button = 'button' in event && event.button; // event.buttons is not available in all browsers (ie. Safari), but it does have a non-standard\n    // event.which property instead, which conveys the same information.\n\n    var buttons = 'buttons' in event && event.buttons;\n    this.buttons = Number.isInteger(buttons) ? buttons : 'which' in event && event.which;\n    this.width = 'width' in event && event.width;\n    this.height = 'height' in event && event.height;\n    this.tiltX = 'tiltX' in event && event.tiltX;\n    this.tiltY = 'tiltY' in event && event.tiltY;\n    this.pointerType = 'pointerType' in event && event.pointerType;\n    this.pressure = 'pressure' in event && event.pressure;\n    this.rotationAngle = 'rotationAngle' in event && event.rotationAngle;\n    this.twist = 'twist' in event && event.twist || 0;\n    this.tangentialPressure = 'tangentialPressure' in event && event.tangentialPressure || 0;\n  };\n  /** Resets the data for pooling. */\n\n\n  InteractionData.prototype.reset = function () {\n    // isPrimary is the only property that we really need to reset - everything else is\n    // guaranteed to be overwritten\n    this.isPrimary = false;\n  };\n\n  return InteractionData;\n}();\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\n\nvar _extendStatics = function extendStatics(d, b) {\n  _extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) {\n        d[p] = b[p];\n      }\n    }\n  };\n\n  return _extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  _extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n/**\n * Event class that mimics native DOM events.\n *\n * @memberof PIXI\n */\n\n\nvar InteractionEvent =\n/** @class */\nfunction () {\n  function InteractionEvent() {\n    this.stopped = false;\n    this.stopsPropagatingAt = null;\n    this.stopPropagationHint = false;\n    this.target = null;\n    this.currentTarget = null;\n    this.type = null;\n    this.data = null;\n  }\n  /** Prevents event from reaching any objects other than the current object. */\n\n\n  InteractionEvent.prototype.stopPropagation = function () {\n    this.stopped = true;\n    this.stopPropagationHint = true;\n    this.stopsPropagatingAt = this.currentTarget;\n  };\n  /** Resets the event. */\n\n\n  InteractionEvent.prototype.reset = function () {\n    this.stopped = false;\n    this.stopsPropagatingAt = null;\n    this.stopPropagationHint = false;\n    this.currentTarget = null;\n    this.target = null;\n  };\n\n  return InteractionEvent;\n}();\n/**\n * DisplayObjects with the {@link PIXI.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI\n */\n\n\nvar InteractionTrackingData =\n/** @class */\nfunction () {\n  /**\n   * @param {number} pointerId - Unique pointer id of the event\n   * @private\n   */\n  function InteractionTrackingData(pointerId) {\n    this._pointerId = pointerId;\n    this._flags = InteractionTrackingData.FLAGS.NONE;\n  }\n  /**\n   *\n   * @private\n   * @param {number} flag - The interaction flag to set\n   * @param {boolean} yn - Should the flag be set or unset\n   */\n\n\n  InteractionTrackingData.prototype._doSet = function (flag, yn) {\n    if (yn) {\n      this._flags = this._flags | flag;\n    } else {\n      this._flags = this._flags & ~flag;\n    }\n  };\n\n  Object.defineProperty(InteractionTrackingData.prototype, \"pointerId\", {\n    /**\n     * Unique pointer id of the event\n     *\n     * @readonly\n     * @private\n     * @member {number}\n     */\n    get: function get() {\n      return this._pointerId;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"flags\", {\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @private\n     * @member {number}\n     */\n    get: function get() {\n      return this._flags;\n    },\n    set: function set(flags) {\n      this._flags = flags;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"none\", {\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @private\n     * @member {number}\n     */\n    get: function get() {\n      return this._flags === InteractionTrackingData.FLAGS.NONE;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"over\", {\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get: function get() {\n      return (this._flags & InteractionTrackingData.FLAGS.OVER) !== 0;\n    },\n    set: function set(yn) {\n      this._doSet(InteractionTrackingData.FLAGS.OVER, yn);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"rightDown\", {\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get: function get() {\n      return (this._flags & InteractionTrackingData.FLAGS.RIGHT_DOWN) !== 0;\n    },\n    set: function set(yn) {\n      this._doSet(InteractionTrackingData.FLAGS.RIGHT_DOWN, yn);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionTrackingData.prototype, \"leftDown\", {\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get: function get() {\n      return (this._flags & InteractionTrackingData.FLAGS.LEFT_DOWN) !== 0;\n    },\n    set: function set(yn) {\n      this._doSet(InteractionTrackingData.FLAGS.LEFT_DOWN, yn);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  InteractionTrackingData.FLAGS = Object.freeze({\n    NONE: 0,\n    OVER: 1 << 0,\n    LEFT_DOWN: 1 << 1,\n    RIGHT_DOWN: 1 << 2\n  });\n  return InteractionTrackingData;\n}();\n/**\n * Strategy how to search through stage tree for interactive objects\n *\n * @memberof PIXI\n */\n\n\nvar TreeSearch =\n/** @class */\nfunction () {\n  function TreeSearch() {\n    this._tempPoint = new Point();\n  }\n  /**\n   * Recursive implementation for findHit\n   *\n   * @private\n   * @param interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param func - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param hitTest - this indicates if the objects inside should be hit test against the point\n   * @param interactive - Whether the displayObject is interactive\n   * @return - Returns true if the displayObject hit the point\n   */\n\n\n  TreeSearch.prototype.recursiveFindHit = function (interactionEvent, displayObject, func, hitTest, interactive) {\n    if (!displayObject || !displayObject.visible) {\n      return false;\n    }\n\n    var point = interactionEvent.data.global; // Took a little while to rework this function correctly! But now it is done and nice and optimized! ^_^\n    //\n    // This function will now loop through all objects and then only hit test the objects it HAS\n    // to, not all of them. MUCH faster..\n    // An object will be hit test if the following is true:\n    //\n    // 1: It is interactive.\n    // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n    //\n    // As another little optimization once an interactive object has been hit we can carry on\n    // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n    // A final optimization is that an object is not hit test directly if a child has already been hit.\n\n    interactive = displayObject.interactive || interactive;\n    var hit = false;\n    var interactiveParent = interactive; // Flag here can set to false if the event is outside the parents hitArea or mask\n\n    var hitTestChildren = true; // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n    // There is also no longer a need to hitTest children.\n\n    if (displayObject.hitArea) {\n      if (hitTest) {\n        displayObject.worldTransform.applyInverse(point, this._tempPoint);\n\n        if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y)) {\n          hitTest = false;\n          hitTestChildren = false;\n        } else {\n          hit = true;\n        }\n      }\n\n      interactiveParent = false;\n    } // If there is a mask, no need to hitTest against anything else if the pointer is not within the mask.\n    // We still want to hitTestChildren, however, to ensure a mouseout can still be generated.\n    // https://github.com/pixijs/pixi.js/issues/5135\n    else if (displayObject._mask) {\n      if (hitTest) {\n        if (!(displayObject._mask.containsPoint && displayObject._mask.containsPoint(point))) {\n          hitTest = false;\n        }\n      }\n    } // ** FREE TIP **! If an object is not interactive or has no buttons in it\n    // (such as a game scene!) set interactiveChildren to false for that displayObject.\n    // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n\n\n    if (hitTestChildren && displayObject.interactiveChildren && displayObject.children) {\n      var children = displayObject.children;\n\n      for (var i = children.length - 1; i >= 0; i--) {\n        var child = children[i]; // time to get recursive.. if this function will return if something is hit..\n\n        var childHit = this.recursiveFindHit(interactionEvent, child, func, hitTest, interactiveParent);\n\n        if (childHit) {\n          // its a good idea to check if a child has lost its parent.\n          // this means it has been removed whilst looping so its best\n          if (!child.parent) {\n            continue;\n          } // we no longer need to hit test any more objects in this container as we we\n          // now know the parent has been hit\n\n\n          interactiveParent = false; // If the child is interactive , that means that the object hit was actually\n          // interactive and not just the child of an interactive object.\n          // This means we no longer need to hit test anything else. We still need to run\n          // through all objects, but we don't need to perform any hit tests.\n\n          if (childHit) {\n            if (interactionEvent.target) {\n              hitTest = false;\n            }\n\n            hit = true;\n          }\n        }\n      }\n    } // no point running this if the item is not interactive or does not have an interactive parent.\n\n\n    if (interactive) {\n      // if we are hit testing (as in we have no hit any objects yet)\n      // We also don't need to worry about hit testing if once of the displayObjects children\n      // has already been hit - but only if it was interactive, otherwise we need to keep\n      // looking for an interactive child, just in case we hit one\n      if (hitTest && !interactionEvent.target) {\n        // already tested against hitArea if it is defined\n        if (!displayObject.hitArea && displayObject.containsPoint) {\n          if (displayObject.containsPoint(point)) {\n            hit = true;\n          }\n        }\n      }\n\n      if (displayObject.interactive) {\n        if (hit && !interactionEvent.target) {\n          interactionEvent.target = displayObject;\n        }\n\n        if (func) {\n          func(interactionEvent, displayObject, !!hit);\n        }\n      }\n    }\n\n    return hit;\n  };\n  /**\n   * This function is provides a neat way of crawling through the scene graph and running a\n   * specified function on all interactive objects it finds. It will also take care of hit\n   * testing the interactive objects and passes the hit across in the function.\n   *\n   * @private\n   * @param interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param func - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param hitTest - this indicates if the objects inside should be hit test against the point\n   * @return - Returns true if the displayObject hit the point\n   */\n\n\n  TreeSearch.prototype.findHit = function (interactionEvent, displayObject, func, hitTest) {\n    this.recursiveFindHit(interactionEvent, displayObject, func, hitTest, false);\n  };\n\n  return TreeSearch;\n}();\n/**\n * Interface for classes that represent a hit area.\n *\n * It is implemented by the following classes:\n * - {@link PIXI.Circle}\n * - {@link PIXI.Ellipse}\n * - {@link PIXI.Polygon}\n * - {@link PIXI.RoundedRectangle}\n *\n * @interface IHitArea\n * @memberof PIXI\n */\n\n/**\n * Checks whether the x and y coordinates given are contained within this area\n *\n * @method\n * @name contains\n * @memberof PIXI.IHitArea#\n * @param {number} x - The X coordinate of the point to test\n * @param {number} y - The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this area\n */\n\n/**\n * Default property values of interactive objects\n * Used by {@link PIXI.InteractionManager} to automatically give all DisplayObjects these properties\n *\n * @private\n * @name interactiveTarget\n * @type {Object}\n * @memberof PIXI\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          DisplayObject.prototype,\n *          PIXI.interactiveTarget\n *      );\n */\n\n\nvar interactiveTarget = {\n  interactive: false,\n  interactiveChildren: true,\n  hitArea: null,\n\n  /**\n   * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n   * Setting this changes the 'cursor' property to `'pointer'`.\n   *\n   * @example\n   * const sprite = new PIXI.Sprite(texture);\n   * sprite.interactive = true;\n   * sprite.buttonMode = true;\n   * @member {boolean}\n   * @memberof PIXI.DisplayObject#\n   */\n  get buttonMode() {\n    return this.cursor === 'pointer';\n  },\n\n  set buttonMode(value) {\n    if (value) {\n      this.cursor = 'pointer';\n    } else if (this.cursor === 'pointer') {\n      this.cursor = null;\n    }\n  },\n\n  /**\n   * This defines what cursor mode is used when the mouse cursor\n   * is hovered over the displayObject.\n   *\n   * @example\n   * const sprite = new PIXI.Sprite(texture);\n   * sprite.interactive = true;\n   * sprite.cursor = 'wait';\n   * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n   *\n   * @member {string}\n   * @memberof PIXI.DisplayObject#\n   */\n  cursor: null,\n\n  /**\n   * Internal set of all active pointers, by identifier\n   *\n   * @member {Map<number, InteractionTrackingData>}\n   * @memberof PIXI.DisplayObject#\n   * @private\n   */\n  get trackedPointers() {\n    if (this._trackedPointers === undefined) {\n      this._trackedPointers = {};\n    }\n\n    return this._trackedPointers;\n  },\n\n  /**\n   * Map of all tracked pointers, by identifier. Use trackedPointers to access.\n   *\n   * @private\n   * @type {Map<number, InteractionTrackingData>}\n   */\n  _trackedPointers: undefined\n}; // Mix interactiveTarget into DisplayObject.prototype\n\nDisplayObject.mixin(interactiveTarget);\nvar MOUSE_POINTER_ID = 1; // helpers for hitTest() - only used inside hitTest()\n\nvar hitTestEvent = {\n  target: null,\n  data: {\n    global: null\n  }\n};\n/**\n * The interaction manager deals with mouse, touch and pointer events.\n *\n * Any DisplayObject can be interactive if its `interactive` property is set to true.\n *\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.interaction`\n *\n * @memberof PIXI\n */\n\nvar InteractionManager =\n/** @class */\nfunction (_super) {\n  __extends(InteractionManager, _super);\n  /**\n   * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n   * @param options - The options for the manager.\n   * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n   * @param {number} [options.interactionFrequency=10] - Maximum frequency (ms) at pointer over/out states will be checked.\n   * @param {number} [options.useSystemTicker=true] - Whether to add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n   */\n\n\n  function InteractionManager(renderer, options) {\n    var _this = _super.call(this) || this;\n\n    options = options || {};\n    _this.renderer = renderer;\n    _this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n    _this.interactionFrequency = options.interactionFrequency || 10;\n    _this.mouse = new InteractionData();\n    _this.mouse.identifier = MOUSE_POINTER_ID; // setting the mouse to start off far off screen will mean that mouse over does\n    //  not get called before we even move the mouse.\n\n    _this.mouse.global.set(-999999);\n\n    _this.activeInteractionData = {};\n    _this.activeInteractionData[MOUSE_POINTER_ID] = _this.mouse;\n    _this.interactionDataPool = [];\n    _this.eventData = new InteractionEvent();\n    _this.interactionDOMElement = null;\n    _this.moveWhenInside = false;\n    _this.eventsAdded = false;\n    _this.tickerAdded = false;\n    _this.mouseOverRenderer = !('PointerEvent' in globalThis);\n    _this.supportsTouchEvents = 'ontouchstart' in globalThis;\n    _this.supportsPointerEvents = !!globalThis.PointerEvent; // this will make it so that you don't have to call bind all the time\n\n    _this.onPointerUp = _this.onPointerUp.bind(_this);\n    _this.processPointerUp = _this.processPointerUp.bind(_this);\n    _this.onPointerCancel = _this.onPointerCancel.bind(_this);\n    _this.processPointerCancel = _this.processPointerCancel.bind(_this);\n    _this.onPointerDown = _this.onPointerDown.bind(_this);\n    _this.processPointerDown = _this.processPointerDown.bind(_this);\n    _this.onPointerMove = _this.onPointerMove.bind(_this);\n    _this.processPointerMove = _this.processPointerMove.bind(_this);\n    _this.onPointerOut = _this.onPointerOut.bind(_this);\n    _this.processPointerOverOut = _this.processPointerOverOut.bind(_this);\n    _this.onPointerOver = _this.onPointerOver.bind(_this);\n    _this.cursorStyles = {\n      default: 'inherit',\n      pointer: 'pointer'\n    };\n    _this.currentCursorMode = null;\n    _this.cursor = null;\n    _this.resolution = 1;\n    _this.delayedEvents = [];\n    _this.search = new TreeSearch();\n    _this._tempDisplayObject = new TemporaryDisplayObject();\n    _this._eventListenerOptions = {\n      capture: true,\n      passive: false\n    };\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n     * object.\n     *\n     * @event PIXI.InteractionManager#mousedown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * on the display object.\n     *\n     * @event PIXI.InteractionManager#rightdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released over the display\n     * object.\n     *\n     * @event PIXI.InteractionManager#mouseup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * over the display object.\n     *\n     * @event PIXI.InteractionManager#rightup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n     * the display object.\n     *\n     * @event PIXI.InteractionManager#click\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * and released on the display object.\n     *\n     * @event PIXI.InteractionManager#rightclick\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released outside the\n     * display object that initially registered a\n     * [mousedown]{@link PIXI.InteractionManager#event:mousedown}.\n     *\n     * @event PIXI.InteractionManager#mouseupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * outside the display object that initially registered a\n     * [rightdown]{@link PIXI.InteractionManager#event:rightdown}.\n     *\n     * @event PIXI.InteractionManager#rightupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved while over the display object\n     *\n     * @event PIXI.InteractionManager#mousemove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved onto the display object\n     *\n     * @event PIXI.InteractionManager#mouseover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved off the display object\n     *\n     * @event PIXI.InteractionManager#mouseout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed on the display object.\n     *\n     * @event PIXI.InteractionManager#pointerdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released over the display object.\n     * Not always fired when some buttons are held down while others are released. In those cases,\n     * use [mousedown]{@link PIXI.InteractionManager#event:mousedown} and\n     * [mouseup]{@link PIXI.InteractionManager#event:mouseup} instead.\n     *\n     * @event PIXI.InteractionManager#pointerup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a pointer event\n     *\n     * @event PIXI.InteractionManager#pointercancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed and released on the display object.\n     *\n     * @event PIXI.InteractionManager#pointertap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released outside the display object that initially\n     * registered a [pointerdown]{@link PIXI.InteractionManager#event:pointerdown}.\n     *\n     * @event PIXI.InteractionManager#pointerupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved while over the display object\n     *\n     * @event PIXI.InteractionManager#pointermove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved onto the display object\n     *\n     * @event PIXI.InteractionManager#pointerover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved off the display object\n     *\n     * @event PIXI.InteractionManager#pointerout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed on the display object.\n     *\n     * @event PIXI.InteractionManager#touchstart\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed from the display object.\n     *\n     * @event PIXI.InteractionManager#touchend\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a touch\n     *\n     * @event PIXI.InteractionManager#touchcancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed and removed from the display object.\n     *\n     * @event PIXI.InteractionManager#tap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed outside of the display object that initially\n     * registered a [touchstart]{@link PIXI.InteractionManager#event:touchstart}.\n     *\n     * @event PIXI.InteractionManager#touchendoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is moved along the display object.\n     *\n     * @event PIXI.InteractionManager#touchmove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n     * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mousedown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#rightdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released over the display\n     * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mouseup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#rightup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n     * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#click\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n     * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#rightclick\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button (usually a mouse left-button) is released outside the\n     * display object that initially registered a\n     * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mouseupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device secondary button (usually a mouse right-button) is released\n     * outside the display object that initially registered a\n     * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#rightupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved while over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mousemove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved onto the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mouseover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device (usually a mouse) is moved off the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#mouseout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointerdown\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointerup\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a pointer event.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointercancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is pressed and released on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointertap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device button is released outside the display object that initially\n     * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointerupoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved while over the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointermove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved onto the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointerover\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a pointer device is moved off the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#pointerout\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed on the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#touchstart\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed from the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#touchend\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when the operating system cancels a touch.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#touchcancel\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is placed and removed from the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#tap\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is removed outside of the display object that initially\n     * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#touchendoutside\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    /**\n     * Fired when a touch point is moved along the display object.\n     * DisplayObject's `interactive` property must be set to `true` to fire event.\n     *\n     * This comes from the @pixi/interaction package.\n     *\n     * @event PIXI.DisplayObject#touchmove\n     * @param {PIXI.InteractionEvent} event - Interaction event\n     */\n\n    _this._useSystemTicker = options.useSystemTicker !== undefined ? options.useSystemTicker : true;\n\n    _this.setTargetElement(_this.renderer.view, _this.renderer.resolution);\n\n    return _this;\n  }\n\n  Object.defineProperty(InteractionManager.prototype, \"useSystemTicker\", {\n    /**\n     * Should the InteractionManager automatically add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n     *\n     * @default true\n     */\n    get: function get() {\n      return this._useSystemTicker;\n    },\n    set: function set(useSystemTicker) {\n      this._useSystemTicker = useSystemTicker;\n\n      if (useSystemTicker) {\n        this.addTickerListener();\n      } else {\n        this.removeTickerListener();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(InteractionManager.prototype, \"lastObjectRendered\", {\n    /**\n     * Last rendered object or temp object.\n     *\n     * @readonly\n     * @protected\n     */\n    get: function get() {\n      return this.renderer._lastObjectRendered || this._tempDisplayObject;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Hit tests a point against the display tree, returning the first interactive object that is hit.\n   *\n   * @param globalPoint - A point to hit test with, in global space.\n   * @param root - The root display object to start from. If omitted, defaults\n   * to the last rendered root of the associated renderer.\n   * @return - The hit display object, if any.\n   */\n\n  InteractionManager.prototype.hitTest = function (globalPoint, root) {\n    // clear the target for our hit test\n    hitTestEvent.target = null; // assign the global point\n\n    hitTestEvent.data.global = globalPoint; // ensure safety of the root\n\n    if (!root) {\n      root = this.lastObjectRendered;\n    } // run the hit test\n\n\n    this.processInteractive(hitTestEvent, root, null, true); // return our found object - it'll be null if we didn't hit anything\n\n    return hitTestEvent.target;\n  };\n  /**\n   * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n   * other DOM elements on top of the renderers Canvas element. With this you'll be bale to delegate\n   * another DOM element to receive those events.\n   *\n   * @param element - the DOM element which will receive mouse and touch events.\n   * @param resolution - The resolution / device pixel ratio of the new element (relative to the canvas).\n   */\n\n\n  InteractionManager.prototype.setTargetElement = function (element, resolution) {\n    if (resolution === void 0) {\n      resolution = 1;\n    }\n\n    this.removeTickerListener();\n    this.removeEvents();\n    this.interactionDOMElement = element;\n    this.resolution = resolution;\n    this.addEvents();\n    this.addTickerListener();\n  };\n  /** Adds the ticker listener. */\n\n\n  InteractionManager.prototype.addTickerListener = function () {\n    if (this.tickerAdded || !this.interactionDOMElement || !this._useSystemTicker) {\n      return;\n    }\n\n    Ticker.system.add(this.tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n    this.tickerAdded = true;\n  };\n  /** Removes the ticker listener. */\n\n\n  InteractionManager.prototype.removeTickerListener = function () {\n    if (!this.tickerAdded) {\n      return;\n    }\n\n    Ticker.system.remove(this.tickerUpdate, this);\n    this.tickerAdded = false;\n  };\n  /** Registers all the DOM events. */\n\n\n  InteractionManager.prototype.addEvents = function () {\n    if (this.eventsAdded || !this.interactionDOMElement) {\n      return;\n    }\n\n    var style = this.interactionDOMElement.style;\n\n    if (globalThis.navigator.msPointerEnabled) {\n      style.msContentZooming = 'none';\n      style.msTouchAction = 'none';\n    } else if (this.supportsPointerEvents) {\n      style.touchAction = 'none';\n    }\n    /*\n     * These events are added first, so that if pointer events are normalized, they are fired\n     * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n     */\n\n\n    if (this.supportsPointerEvents) {\n      globalThis.document.addEventListener('pointermove', this.onPointerMove, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, this._eventListenerOptions); // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n      // we already handle those, so for the purposes of what we do in onPointerOut, we only\n      // care about the pointerleave event\n\n      this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, this._eventListenerOptions);\n      globalThis.addEventListener('pointercancel', this.onPointerCancel, this._eventListenerOptions);\n      globalThis.addEventListener('pointerup', this.onPointerUp, this._eventListenerOptions);\n    } else {\n      globalThis.document.addEventListener('mousemove', this.onPointerMove, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, this._eventListenerOptions);\n      globalThis.addEventListener('mouseup', this.onPointerUp, this._eventListenerOptions);\n    } // always look directly for touch events so that we can provide original data\n    // In a future version we should change this to being just a fallback and rely solely on\n    // PointerEvents whenever available\n\n\n    if (this.supportsTouchEvents) {\n      this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, this._eventListenerOptions);\n      this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, this._eventListenerOptions);\n    }\n\n    this.eventsAdded = true;\n  };\n  /** Removes all the DOM events that were previously registered. */\n\n\n  InteractionManager.prototype.removeEvents = function () {\n    if (!this.eventsAdded || !this.interactionDOMElement) {\n      return;\n    }\n\n    var style = this.interactionDOMElement.style;\n\n    if (globalThis.navigator.msPointerEnabled) {\n      style.msContentZooming = '';\n      style.msTouchAction = '';\n    } else if (this.supportsPointerEvents) {\n      style.touchAction = '';\n    }\n\n    if (this.supportsPointerEvents) {\n      globalThis.document.removeEventListener('pointermove', this.onPointerMove, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, this._eventListenerOptions);\n      globalThis.removeEventListener('pointercancel', this.onPointerCancel, this._eventListenerOptions);\n      globalThis.removeEventListener('pointerup', this.onPointerUp, this._eventListenerOptions);\n    } else {\n      globalThis.document.removeEventListener('mousemove', this.onPointerMove, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, this._eventListenerOptions);\n      globalThis.removeEventListener('mouseup', this.onPointerUp, this._eventListenerOptions);\n    }\n\n    if (this.supportsTouchEvents) {\n      this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, this._eventListenerOptions);\n      this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, this._eventListenerOptions);\n    }\n\n    this.interactionDOMElement = null;\n    this.eventsAdded = false;\n  };\n  /**\n   * Updates the state of interactive objects if at least {@link interactionFrequency}\n   * milliseconds have passed since the last invocation.\n   *\n   * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n   *\n   * @param deltaTime - time delta since the last call\n   */\n\n\n  InteractionManager.prototype.tickerUpdate = function (deltaTime) {\n    this._deltaTime += deltaTime;\n\n    if (this._deltaTime < this.interactionFrequency) {\n      return;\n    }\n\n    this._deltaTime = 0;\n    this.update();\n  };\n  /** Updates the state of interactive objects. */\n\n\n  InteractionManager.prototype.update = function () {\n    if (!this.interactionDOMElement) {\n      return;\n    } // if the user move the mouse this check has already been done using the mouse move!\n\n\n    if (this._didMove) {\n      this._didMove = false;\n      return;\n    }\n\n    this.cursor = null; // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n    // but there was a scenario of a display object moving under a static mouse cursor.\n    // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n\n    for (var k in this.activeInteractionData) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.activeInteractionData.hasOwnProperty(k)) {\n        var interactionData = this.activeInteractionData[k];\n\n        if (interactionData.originalEvent && interactionData.pointerType !== 'touch') {\n          var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, interactionData.originalEvent, interactionData);\n          this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerOverOut, true);\n        }\n      }\n    }\n\n    this.setCursorMode(this.cursor);\n  };\n  /**\n   * Sets the current cursor mode, handling any callbacks or CSS style changes.\n   *\n   * @param mode - cursor mode, a key from the cursorStyles dictionary\n   */\n\n\n  InteractionManager.prototype.setCursorMode = function (mode) {\n    mode = mode || 'default';\n    var applyStyles = true; // offscreen canvas does not support setting styles, but cursor modes can be functions,\n    // in order to handle pixi rendered cursors, so we can't bail\n\n    if (globalThis.OffscreenCanvas && this.interactionDOMElement instanceof OffscreenCanvas) {\n      applyStyles = false;\n    } // if the mode didn't actually change, bail early\n\n\n    if (this.currentCursorMode === mode) {\n      return;\n    }\n\n    this.currentCursorMode = mode;\n    var style = this.cursorStyles[mode]; // only do things if there is a cursor style for it\n\n    if (style) {\n      switch (typeof style) {\n        case 'string':\n          // string styles are handled as cursor CSS\n          if (applyStyles) {\n            this.interactionDOMElement.style.cursor = style;\n          }\n\n          break;\n\n        case 'function':\n          // functions are just called, and passed the cursor mode\n          style(mode);\n          break;\n\n        case 'object':\n          // if it is an object, assume that it is a dictionary of CSS styles,\n          // apply it to the interactionDOMElement\n          if (applyStyles) {\n            Object.assign(this.interactionDOMElement.style, style);\n          }\n\n          break;\n      }\n    } else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode)) {\n      // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n      // for the mode, then assume that the dev wants it to be CSS for the cursor.\n      this.interactionDOMElement.style.cursor = mode;\n    }\n  };\n  /**\n   * Dispatches an event on the display object that was interacted with.\n   *\n   * @param displayObject - the display object in question\n   * @param eventString - the name of the event (e.g, mousedown)\n   * @param eventData - the event data object\n   */\n\n\n  InteractionManager.prototype.dispatchEvent = function (displayObject, eventString, eventData) {\n    // Even if the event was stopped, at least dispatch any remaining events\n    // for the same display object.\n    if (!eventData.stopPropagationHint || displayObject === eventData.stopsPropagatingAt) {\n      eventData.currentTarget = displayObject;\n      eventData.type = eventString;\n      displayObject.emit(eventString, eventData);\n\n      if (displayObject[eventString]) {\n        displayObject[eventString](eventData);\n      }\n    }\n  };\n  /**\n   * Puts a event on a queue to be dispatched later. This is used to guarantee correct\n   * ordering of over/out events.\n   *\n   * @param displayObject - the display object in question\n   * @param eventString - the name of the event (e.g, mousedown)\n   * @param eventData - the event data object\n   */\n\n\n  InteractionManager.prototype.delayDispatchEvent = function (displayObject, eventString, eventData) {\n    this.delayedEvents.push({\n      displayObject: displayObject,\n      eventString: eventString,\n      eventData: eventData\n    });\n  };\n  /**\n   * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n   * resulting value is stored in the point. This takes into account the fact that the DOM\n   * element could be scaled and positioned anywhere on the screen.\n   *\n   * @param point - the point that the result will be stored in\n   * @param x - the x coord of the position to map\n   * @param y - the y coord of the position to map\n   */\n\n\n  InteractionManager.prototype.mapPositionToPoint = function (point, x, y) {\n    var rect; // IE 11 fix\n\n    if (!this.interactionDOMElement.parentElement) {\n      rect = {\n        x: 0,\n        y: 0,\n        width: this.interactionDOMElement.width,\n        height: this.interactionDOMElement.height,\n        left: 0,\n        top: 0\n      };\n    } else {\n      rect = this.interactionDOMElement.getBoundingClientRect();\n    }\n\n    var resolutionMultiplier = 1.0 / this.resolution;\n    point.x = (x - rect.left) * (this.interactionDOMElement.width / rect.width) * resolutionMultiplier;\n    point.y = (y - rect.top) * (this.interactionDOMElement.height / rect.height) * resolutionMultiplier;\n  };\n  /**\n   * This function is provides a neat way of crawling through the scene graph and running a\n   * specified function on all interactive objects it finds. It will also take care of hit\n   * testing the interactive objects and passes the hit across in the function.\n   *\n   * @protected\n   * @param interactionEvent - event containing the point that\n   *  is tested for collision\n   * @param displayObject - the displayObject\n   *  that will be hit test (recursively crawls its children)\n   * @param func - the function that will be called on each interactive object. The\n   *  interactionEvent, displayObject and hit will be passed to the function\n   * @param hitTest - indicates whether we want to calculate hits\n   *  or just iterate through all interactive objects\n   */\n\n\n  InteractionManager.prototype.processInteractive = function (interactionEvent, displayObject, func, hitTest) {\n    var hit = this.search.findHit(interactionEvent, displayObject, func, hitTest);\n    var delayedEvents = this.delayedEvents;\n\n    if (!delayedEvents.length) {\n      return hit;\n    } // Reset the propagation hint, because we start deeper in the tree again.\n\n\n    interactionEvent.stopPropagationHint = false;\n    var delayedLen = delayedEvents.length;\n    this.delayedEvents = [];\n\n    for (var i = 0; i < delayedLen; i++) {\n      var _a = delayedEvents[i],\n          displayObject_1 = _a.displayObject,\n          eventString = _a.eventString,\n          eventData = _a.eventData; // When we reach the object we wanted to stop propagating at,\n      // set the propagation hint.\n\n      if (eventData.stopsPropagatingAt === displayObject_1) {\n        eventData.stopPropagationHint = true;\n      }\n\n      this.dispatchEvent(displayObject_1, eventString, eventData);\n    }\n\n    return hit;\n  };\n  /**\n   * Is called when the pointer button is pressed down on the renderer element\n   *\n   * @param originalEvent - The DOM event of a pointer button being pressed down\n   */\n\n\n  InteractionManager.prototype.onPointerDown = function (originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') {\n      return;\n    }\n\n    var events = this.normalizeToPointerData(originalEvent);\n    /*\n     * No need to prevent default on natural pointer events, as there are no side effects\n     * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n     * so still need to be prevented.\n     */\n    // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n    if (this.autoPreventDefault && events[0].isNormalized) {\n      var cancelable = originalEvent.cancelable || !('cancelable' in originalEvent);\n\n      if (cancelable) {\n        originalEvent.preventDefault();\n      }\n    }\n\n    var eventLen = events.length;\n\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerDown, true);\n      this.emit('pointerdown', interactionEvent);\n\n      if (event.pointerType === 'touch') {\n        this.emit('touchstart', interactionEvent);\n      } // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n      else if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        var isRightButton = event.button === 2;\n        this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n      }\n    }\n  };\n  /**\n   * Processes the result of the pointer down check and dispatches the event if need be\n   *\n   * @param interactionEvent - The interaction event wrapping the DOM event\n   * @param displayObject - The display object that was tested\n   * @param hit - the result of the hit test on the display object\n   */\n\n\n  InteractionManager.prototype.processPointerDown = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n\n    if (hit) {\n      if (!displayObject.trackedPointers[id]) {\n        displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n      }\n\n      this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n\n      if (data.pointerType === 'touch') {\n        this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n      } else if (data.pointerType === 'mouse' || data.pointerType === 'pen') {\n        var isRightButton = data.button === 2;\n\n        if (isRightButton) {\n          displayObject.trackedPointers[id].rightDown = true;\n        } else {\n          displayObject.trackedPointers[id].leftDown = true;\n        }\n\n        this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is released on the renderer element\n   *\n   * @param originalEvent - The DOM event of a pointer button being released\n   * @param cancelled - true if the pointer is cancelled\n   * @param func - Function passed to {@link processInteractive}\n   */\n\n\n  InteractionManager.prototype.onPointerComplete = function (originalEvent, cancelled, func) {\n    var events = this.normalizeToPointerData(originalEvent);\n    var eventLen = events.length; // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n    // in all cases (unless it was a pointercancel)\n\n    var eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent; // perform hit testing for events targeting our canvas or cancel events\n\n      this.processInteractive(interactionEvent, this.lastObjectRendered, func, cancelled || !eventAppend);\n      this.emit(cancelled ? 'pointercancel' : \"pointerup\" + eventAppend, interactionEvent);\n\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        var isRightButton = event.button === 2;\n        this.emit(isRightButton ? \"rightup\" + eventAppend : \"mouseup\" + eventAppend, interactionEvent);\n      } else if (event.pointerType === 'touch') {\n        this.emit(cancelled ? 'touchcancel' : \"touchend\" + eventAppend, interactionEvent);\n        this.releaseInteractionDataForPointerId(event.pointerId);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is cancelled\n   *\n   * @param event - The DOM event of a pointer button being released\n   */\n\n\n  InteractionManager.prototype.onPointerCancel = function (event) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && event.pointerType === 'touch') {\n      return;\n    }\n\n    this.onPointerComplete(event, true, this.processPointerCancel);\n  };\n  /**\n   * Processes the result of the pointer cancel check and dispatches the event if need be\n   *\n   * @param interactionEvent - The interaction event wrapping the DOM event\n   * @param displayObject - The display object that was tested\n   */\n\n\n  InteractionManager.prototype.processPointerCancel = function (interactionEvent, displayObject) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n\n    if (displayObject.trackedPointers[id] !== undefined) {\n      delete displayObject.trackedPointers[id];\n      this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n\n      if (data.pointerType === 'touch') {\n        this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer button is released on the renderer element\n   *\n   * @param event - The DOM event of a pointer button being released\n   */\n\n\n  InteractionManager.prototype.onPointerUp = function (event) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && event.pointerType === 'touch') {\n      return;\n    }\n\n    this.onPointerComplete(event, false, this.processPointerUp);\n  };\n  /**\n   * Processes the result of the pointer up check and dispatches the event if need be\n   *\n   * @param interactionEvent - The interaction event wrapping the DOM event\n   * @param displayObject - The display object that was tested\n   * @param hit - the result of the hit test on the display object\n   */\n\n\n  InteractionManager.prototype.processPointerUp = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    var trackingData = displayObject.trackedPointers[id];\n    var isTouch = data.pointerType === 'touch';\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen'; // need to track mouse down status in the mouse block so that we can emit\n    // event in a later block\n\n    var isMouseTap = false; // Mouse only\n\n    if (isMouse) {\n      var isRightButton = data.button === 2;\n      var flags = InteractionTrackingData.FLAGS;\n      var test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n      var isDown = trackingData !== undefined && trackingData.flags & test;\n\n      if (hit) {\n        this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n\n        if (isDown) {\n          this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent); // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n\n          isMouseTap = true;\n        }\n      } else if (isDown) {\n        this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n      } // update the down state of the tracking data\n\n\n      if (trackingData) {\n        if (isRightButton) {\n          trackingData.rightDown = false;\n        } else {\n          trackingData.leftDown = false;\n        }\n      }\n    } // Pointers and Touches, and Mouse\n\n\n    if (hit) {\n      this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n\n      if (isTouch) {\n        this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n      }\n\n      if (trackingData) {\n        // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n        if (!isMouse || isMouseTap) {\n          this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n        }\n\n        if (isTouch) {\n          this.dispatchEvent(displayObject, 'tap', interactionEvent); // touches are no longer over (if they ever were) when we get the touchend\n          // so we should ensure that we don't keep pretending that they are\n\n          trackingData.over = false;\n        }\n      }\n    } else if (trackingData) {\n      this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n\n      if (isTouch) {\n        this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n      }\n    } // Only remove the tracking data if there is no over/down state still associated with it\n\n\n    if (trackingData && trackingData.none) {\n      delete displayObject.trackedPointers[id];\n    }\n  };\n  /**\n   * Is called when the pointer moves across the renderer element\n   *\n   * @param originalEvent - The DOM event of a pointer moving\n   */\n\n\n  InteractionManager.prototype.onPointerMove = function (originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') {\n      return;\n    }\n\n    var events = this.normalizeToPointerData(originalEvent);\n\n    if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen') {\n      this._didMove = true;\n      this.cursor = null;\n    }\n\n    var eventLen = events.length;\n\n    for (var i = 0; i < eventLen; i++) {\n      var event = events[i];\n      var interactionData = this.getInteractionDataForPointerId(event);\n      var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n      interactionEvent.data.originalEvent = originalEvent;\n      this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerMove, true);\n      this.emit('pointermove', interactionEvent);\n\n      if (event.pointerType === 'touch') {\n        this.emit('touchmove', interactionEvent);\n      }\n\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        this.emit('mousemove', interactionEvent);\n      }\n    }\n\n    if (events[0].pointerType === 'mouse') {\n      this.setCursorMode(this.cursor); // TODO BUG for parents interactive object (border order issue)\n    }\n  };\n  /**\n   * Processes the result of the pointer move check and dispatches the event if need be\n   *\n   * @param interactionEvent - The interaction event wrapping the DOM event\n   * @param displayObject - The display object that was tested\n   * @param hit - the result of the hit test on the display object\n   */\n\n\n  InteractionManager.prototype.processPointerMove = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var isTouch = data.pointerType === 'touch';\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n\n    if (isMouse) {\n      this.processPointerOverOut(interactionEvent, displayObject, hit);\n    }\n\n    if (!this.moveWhenInside || hit) {\n      this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n\n      if (isTouch) {\n        this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n      }\n\n      if (isMouse) {\n        this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n      }\n    }\n  };\n  /**\n   * Is called when the pointer is moved out of the renderer element\n   *\n   * @private\n   * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n   */\n\n\n  InteractionManager.prototype.onPointerOut = function (originalEvent) {\n    // if we support touch events, then only use those for touch events, not pointer events\n    if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') {\n      return;\n    }\n\n    var events = this.normalizeToPointerData(originalEvent); // Only mouse and pointer can call onPointerOut, so events will always be length 1\n\n    var event = events[0];\n\n    if (event.pointerType === 'mouse') {\n      this.mouseOverRenderer = false;\n      this.setCursorMode(null);\n    }\n\n    var interactionData = this.getInteractionDataForPointerId(event);\n    var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n    interactionEvent.data.originalEvent = event;\n    this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerOverOut, false);\n    this.emit('pointerout', interactionEvent);\n\n    if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n      this.emit('mouseout', interactionEvent);\n    } else {\n      // we can get touchleave events after touchend, so we want to make sure we don't\n      // introduce memory leaks\n      this.releaseInteractionDataForPointerId(interactionData.identifier);\n    }\n  };\n  /**\n   * Processes the result of the pointer over/out check and dispatches the event if need be.\n   *\n   * @param interactionEvent - The interaction event wrapping the DOM event\n   * @param displayObject - The display object that was tested\n   * @param hit - the result of the hit test on the display object\n   */\n\n\n  InteractionManager.prototype.processPointerOverOut = function (interactionEvent, displayObject, hit) {\n    var data = interactionEvent.data;\n    var id = interactionEvent.data.identifier;\n    var isMouse = data.pointerType === 'mouse' || data.pointerType === 'pen';\n    var trackingData = displayObject.trackedPointers[id]; // if we just moused over the display object, then we need to track that state\n\n    if (hit && !trackingData) {\n      trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n    }\n\n    if (trackingData === undefined) {\n      return;\n    }\n\n    if (hit && this.mouseOverRenderer) {\n      if (!trackingData.over) {\n        trackingData.over = true;\n        this.delayDispatchEvent(displayObject, 'pointerover', interactionEvent);\n\n        if (isMouse) {\n          this.delayDispatchEvent(displayObject, 'mouseover', interactionEvent);\n        }\n      } // only change the cursor if it has not already been changed (by something deeper in the\n      // display tree)\n\n\n      if (isMouse && this.cursor === null) {\n        this.cursor = displayObject.cursor;\n      }\n    } else if (trackingData.over) {\n      trackingData.over = false;\n      this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n\n      if (isMouse) {\n        this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n      } // if there is no mouse down information for the pointer, then it is safe to delete\n\n\n      if (trackingData.none) {\n        delete displayObject.trackedPointers[id];\n      }\n    }\n  };\n  /**\n   * Is called when the pointer is moved into the renderer element.\n   *\n   * @param originalEvent - The DOM event of a pointer button being moved into the renderer view.\n   */\n\n\n  InteractionManager.prototype.onPointerOver = function (originalEvent) {\n    var events = this.normalizeToPointerData(originalEvent); // Only mouse and pointer can call onPointerOver, so events will always be length 1\n\n    var event = events[0];\n    var interactionData = this.getInteractionDataForPointerId(event);\n    var interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n    interactionEvent.data.originalEvent = event;\n\n    if (event.pointerType === 'mouse') {\n      this.mouseOverRenderer = true;\n    }\n\n    this.emit('pointerover', interactionEvent);\n\n    if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n      this.emit('mouseover', interactionEvent);\n    }\n  };\n  /**\n   * Get InteractionData for a given pointerId. Store that data as well.\n   *\n   * @param event - Normalized pointer event, output from normalizeToPointerData.\n   * @return - Interaction data for the given pointer identifier.\n   */\n\n\n  InteractionManager.prototype.getInteractionDataForPointerId = function (event) {\n    var pointerId = event.pointerId;\n    var interactionData;\n\n    if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse') {\n      interactionData = this.mouse;\n    } else if (this.activeInteractionData[pointerId]) {\n      interactionData = this.activeInteractionData[pointerId];\n    } else {\n      interactionData = this.interactionDataPool.pop() || new InteractionData();\n      interactionData.identifier = pointerId;\n      this.activeInteractionData[pointerId] = interactionData;\n    } // copy properties from the event, so that we can make sure that touch/pointer specific\n    // data is available\n\n\n    interactionData.copyEvent(event);\n    return interactionData;\n  };\n  /**\n   * Return unused InteractionData to the pool, for a given pointerId\n   *\n   * @param pointerId - Identifier from a pointer event\n   */\n\n\n  InteractionManager.prototype.releaseInteractionDataForPointerId = function (pointerId) {\n    var interactionData = this.activeInteractionData[pointerId];\n\n    if (interactionData) {\n      delete this.activeInteractionData[pointerId];\n      interactionData.reset();\n      this.interactionDataPool.push(interactionData);\n    }\n  };\n  /**\n   * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n   *\n   * @param interactionEvent - The event to be configured\n   * @param pointerEvent - The DOM event that will be paired with the InteractionEvent\n   * @param interactionData - The InteractionData that will be paired\n   *        with the InteractionEvent\n   * @return - the interaction event that was passed in\n   */\n\n\n  InteractionManager.prototype.configureInteractionEventForDOMEvent = function (interactionEvent, pointerEvent, interactionData) {\n    interactionEvent.data = interactionData;\n    this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY); // Not really sure why this is happening, but it's how a previous version handled things\n\n    if (pointerEvent.pointerType === 'touch') {\n      pointerEvent.globalX = interactionData.global.x;\n      pointerEvent.globalY = interactionData.global.y;\n    }\n\n    interactionData.originalEvent = pointerEvent;\n    interactionEvent.reset();\n    return interactionEvent;\n  };\n  /**\n   * Ensures that the original event object contains all data that a regular pointer event would have\n   *\n   * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n   * @return - An array containing a single normalized pointer event, in the case of a pointer\n   *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n   */\n\n\n  InteractionManager.prototype.normalizeToPointerData = function (event) {\n    var normalizedEvents = [];\n\n    if (this.supportsTouchEvents && event instanceof TouchEvent) {\n      for (var i = 0, li = event.changedTouches.length; i < li; i++) {\n        var touch = event.changedTouches[i];\n\n        if (typeof touch.button === 'undefined') {\n          touch.button = event.touches.length ? 1 : 0;\n        }\n\n        if (typeof touch.buttons === 'undefined') {\n          touch.buttons = event.touches.length ? 1 : 0;\n        }\n\n        if (typeof touch.isPrimary === 'undefined') {\n          touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n        }\n\n        if (typeof touch.width === 'undefined') {\n          touch.width = touch.radiusX || 1;\n        }\n\n        if (typeof touch.height === 'undefined') {\n          touch.height = touch.radiusY || 1;\n        }\n\n        if (typeof touch.tiltX === 'undefined') {\n          touch.tiltX = 0;\n        }\n\n        if (typeof touch.tiltY === 'undefined') {\n          touch.tiltY = 0;\n        }\n\n        if (typeof touch.pointerType === 'undefined') {\n          touch.pointerType = 'touch';\n        }\n\n        if (typeof touch.pointerId === 'undefined') {\n          touch.pointerId = touch.identifier || 0;\n        }\n\n        if (typeof touch.pressure === 'undefined') {\n          touch.pressure = touch.force || 0.5;\n        }\n\n        if (typeof touch.twist === 'undefined') {\n          touch.twist = 0;\n        }\n\n        if (typeof touch.tangentialPressure === 'undefined') {\n          touch.tangentialPressure = 0;\n        } // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n        // support, and the fill ins are not quite the same\n        // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n        // left is not 0,0 on the page\n\n\n        if (typeof touch.layerX === 'undefined') {\n          touch.layerX = touch.offsetX = touch.clientX;\n        }\n\n        if (typeof touch.layerY === 'undefined') {\n          touch.layerY = touch.offsetY = touch.clientY;\n        } // mark the touch as normalized, just so that we know we did it\n\n\n        touch.isNormalized = true;\n        normalizedEvents.push(touch);\n      }\n    } // apparently PointerEvent subclasses MouseEvent, so yay\n    else if (!globalThis.MouseEvent || event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))) {\n      var tempEvent = event;\n\n      if (typeof tempEvent.isPrimary === 'undefined') {\n        tempEvent.isPrimary = true;\n      }\n\n      if (typeof tempEvent.width === 'undefined') {\n        tempEvent.width = 1;\n      }\n\n      if (typeof tempEvent.height === 'undefined') {\n        tempEvent.height = 1;\n      }\n\n      if (typeof tempEvent.tiltX === 'undefined') {\n        tempEvent.tiltX = 0;\n      }\n\n      if (typeof tempEvent.tiltY === 'undefined') {\n        tempEvent.tiltY = 0;\n      }\n\n      if (typeof tempEvent.pointerType === 'undefined') {\n        tempEvent.pointerType = 'mouse';\n      }\n\n      if (typeof tempEvent.pointerId === 'undefined') {\n        tempEvent.pointerId = MOUSE_POINTER_ID;\n      }\n\n      if (typeof tempEvent.pressure === 'undefined') {\n        tempEvent.pressure = 0.5;\n      }\n\n      if (typeof tempEvent.twist === 'undefined') {\n        tempEvent.twist = 0;\n      }\n\n      if (typeof tempEvent.tangentialPressure === 'undefined') {\n        tempEvent.tangentialPressure = 0;\n      } // mark the mouse event as normalized, just so that we know we did it\n\n\n      tempEvent.isNormalized = true;\n      normalizedEvents.push(tempEvent);\n    } else {\n      normalizedEvents.push(event);\n    }\n\n    return normalizedEvents;\n  };\n  /** Destroys the interaction manager. */\n\n\n  InteractionManager.prototype.destroy = function () {\n    this.removeEvents();\n    this.removeTickerListener();\n    this.removeAllListeners();\n    this.renderer = null;\n    this.mouse = null;\n    this.eventData = null;\n    this.interactionDOMElement = null;\n    this.onPointerDown = null;\n    this.processPointerDown = null;\n    this.onPointerUp = null;\n    this.processPointerUp = null;\n    this.onPointerCancel = null;\n    this.processPointerCancel = null;\n    this.onPointerMove = null;\n    this.processPointerMove = null;\n    this.onPointerOut = null;\n    this.processPointerOverOut = null;\n    this.onPointerOver = null;\n    this.search = null;\n  };\n\n  return InteractionManager;\n}(EventEmitter);\n\nexport { InteractionData, InteractionEvent, InteractionManager, InteractionTrackingData, interactiveTarget };","map":{"version":3,"mappings":"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","names":["global","Point","target","originalEvent","identifier","isPrimary","button","buttons","width","height","tiltX","tiltY","pointerType","pressure","rotationAngle","twist","tangentialPressure","Object","InteractionData","displayObject","point","globalPos","worldTransform","applyInverse","event","Number","isInteger","which","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","stopped","stopsPropagatingAt","stopPropagationHint","currentTarget","type","data","InteractionEvent","pointerId","_pointerId","_flags","InteractionTrackingData","FLAGS","NONE","flag","yn","flags","OVER","_doSet","RIGHT_DOWN","LEFT_DOWN","freeze","_tempPoint","TreeSearch","interactionEvent","func","hitTest","interactive","visible","hit","interactiveParent","hitTestChildren","hitArea","contains","x","y","_mask","containsPoint","interactiveChildren","children","i","length","child","childHit","recursiveFindHit","parent","interactiveTarget","buttonMode","cursor","value","trackedPointers","_trackedPointers","undefined","DisplayObject","mixin","MOUSE_POINTER_ID","hitTestEvent","renderer","options","_super","_this","autoPreventDefault","interactionFrequency","mouse","set","activeInteractionData","interactionDataPool","eventData","interactionDOMElement","moveWhenInside","eventsAdded","tickerAdded","mouseOverRenderer","globalThis","supportsTouchEvents","supportsPointerEvents","PointerEvent","onPointerUp","bind","processPointerUp","onPointerCancel","processPointerCancel","onPointerDown","processPointerDown","onPointerMove","processPointerMove","onPointerOut","processPointerOverOut","onPointerOver","cursorStyles","default","pointer","currentCursorMode","resolution","delayedEvents","search","_tempDisplayObject","TemporaryDisplayObject","_eventListenerOptions","capture","passive","_useSystemTicker","useSystemTicker","setTargetElement","view","InteractionManager","addTickerListener","removeTickerListener","_lastObjectRendered","globalPoint","root","lastObjectRendered","processInteractive","element","removeEvents","addEvents","Ticker","system","add","tickerUpdate","UPDATE_PRIORITY","INTERACTION","remove","style","navigator","msPointerEnabled","msContentZooming","msTouchAction","touchAction","document","addEventListener","removeEventListener","deltaTime","_deltaTime","update","_didMove","k","interactionData","configureInteractionEventForDOMEvent","setCursorMode","mode","applyStyles","OffscreenCanvas","assign","call","eventString","emit","push","rect","parentElement","left","top","getBoundingClientRect","resolutionMultiplier","findHit","delayedLen","displayObject_1","dispatchEvent","events","normalizeToPointerData","isNormalized","cancelable","preventDefault","eventLen","getInteractionDataForPointerId","isRightButton","id","rightDown","leftDown","cancelled","eventAppend","releaseInteractionDataForPointerId","onPointerComplete","trackingData","isTouch","isMouse","isMouseTap","test","isDown","over","none","delayDispatchEvent","pop","copyEvent","reset","pointerEvent","mapPositionToPoint","clientX","clientY","globalX","globalY","normalizedEvents","TouchEvent","li","changedTouches","touch","touches","radiusX","radiusY","force","layerX","offsetX","layerY","offsetY","MouseEvent","tempEvent","removeAllListeners","EventEmitter"],"sources":["../../src/InteractionData.ts","../../../../node_modules/tslib/tslib.es6.js","../../src/InteractionEvent.ts","../../src/InteractionTrackingData.ts","../../src/TreeSearch.ts","../../src/interactiveTarget.ts","../../src/InteractionManager.ts"],"sourcesContent":["import { Point, IPointData } from '@pixi/math';\n\nimport type { DisplayObject } from '@pixi/display';\n\nexport type InteractivePointerEvent = PointerEvent | TouchEvent | MouseEvent;\n\n/**\n * Holds all information related to an Interaction event\n *\n * @memberof PIXI\n */\nexport class InteractionData\n{\n    /** This point stores the global coords of where the touch/mouse event happened. */\n    public global: Point;\n\n    /** The target Sprite that was interacted with. */\n    public target: DisplayObject;\n\n    /**\n     * When passed to an event handler, this will be the original DOM Event that was captured\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent\n     * @member {MouseEvent|TouchEvent|PointerEvent}\n     */\n    public originalEvent: InteractivePointerEvent;\n\n    /** Unique identifier for this interaction. */\n    public identifier: number;\n\n    /**\n     * Indicates whether or not the pointer device that created the event is the primary pointer.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n     */\n    public isPrimary: boolean;\n\n    /**\n     * Indicates which button was pressed on the mouse or pointer device to trigger the event.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n     */\n    public button: number;\n\n    /**\n     * Indicates which buttons are pressed on the mouse or pointer device when the event is triggered.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n     */\n    public buttons: number;\n\n    /**\n     * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n     * radiusX of TouchEvents will be represented by this value.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n     */\n    public width: number;\n\n    /**\n     * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n     * radiusY of TouchEvents will be represented by this value.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n     */\n    public height: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n     */\n    public tiltX: number;\n\n    /**\n     * The angle, in degrees, between the pointer device and the screen.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n     */\n    public tiltY: number;\n\n    /**\n     * The type of pointer that triggered the event.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n     */\n    public pointerType: string;\n\n    /**\n     * Pressure applied by the pointing device during the event. A Touch's force property\n     * will be represented by this value.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n     */\n    public pressure = 0;\n\n    /**\n     * From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle\n     */\n    public rotationAngle = 0;\n\n    /**\n     * Twist of a stylus pointer.\n     *\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public twist = 0;\n\n    /**\n     * Barrel pressure on a stylus pointer.\n     *\n     * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n     */\n    public tangentialPressure = 0;\n\n    constructor()\n    {\n        this.global = new Point();\n        this.target = null;\n        this.originalEvent = null;\n        this.identifier = null;\n        this.isPrimary = false;\n        this.button = 0;\n        this.buttons = 0;\n        this.width = 0;\n        this.height = 0;\n        this.tiltX = 0;\n        this.tiltY = 0;\n        this.pointerType = null;\n        this.pressure = 0;\n        this.rotationAngle = 0;\n        this.twist = 0;\n        this.tangentialPressure = 0;\n    }\n\n    /**\n     * The unique identifier of the pointer. It will be the same as `identifier`.\n     *\n     * @readonly\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId\n     */\n    get pointerId(): number\n    {\n        return this.identifier;\n    }\n\n    /**\n     * This will return the local coordinates of the specified displayObject for this InteractionData\n     *\n     * @param displayObject - The DisplayObject that you would like the local\n     *  coords off\n     * @param point - A Point object in which to store the value, optional (otherwise\n     *  will create a new point)\n     * @param globalPos - A Point object containing your custom global coords, optional\n     *  (otherwise will use the current global coords)\n     * @return - A point containing the coordinates of the InteractionData position relative\n     *  to the DisplayObject\n     */\n    public getLocalPosition<P extends IPointData = Point>(displayObject: DisplayObject, point?: P, globalPos?: IPointData): P\n    {\n        return displayObject.worldTransform.applyInverse<P>(globalPos || this.global, point);\n    }\n\n    /**\n     * Copies properties from normalized event data.\n     *\n     * @param {Touch|MouseEvent|PointerEvent} event - The normalized event data\n     */\n    public copyEvent(event: Touch | InteractivePointerEvent): void\n    {\n        // isPrimary should only change on touchstart/pointerdown, so we don't want to overwrite\n        // it with \"false\" on later events when our shim for it on touch events might not be\n        // accurate\n        if ('isPrimary' in event && event.isPrimary)\n        {\n            this.isPrimary = true;\n        }\n        this.button = 'button' in event && event.button;\n        // event.buttons is not available in all browsers (ie. Safari), but it does have a non-standard\n        // event.which property instead, which conveys the same information.\n        const buttons = 'buttons' in event && event.buttons;\n\n        this.buttons = Number.isInteger(buttons) ? buttons : 'which' in event && event.which;\n        this.width = 'width' in event && event.width;\n        this.height = 'height' in event && event.height;\n        this.tiltX = 'tiltX' in event && event.tiltX;\n        this.tiltY = 'tiltY' in event && event.tiltY;\n        this.pointerType = 'pointerType' in event && event.pointerType;\n        this.pressure = 'pressure' in event && event.pressure;\n        this.rotationAngle = 'rotationAngle' in event && event.rotationAngle;\n        this.twist = ('twist' in event && event.twist) || 0;\n        this.tangentialPressure = ('tangentialPressure' in event && event.tangentialPressure) || 0;\n    }\n\n    /** Resets the data for pooling. */\n    public reset(): void\n    {\n        // isPrimary is the only property that we really need to reset - everything else is\n        // guaranteed to be overwritten\n        this.isPrimary = false;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import type { DisplayObject } from '@pixi/display';\nimport type { InteractionData } from './InteractionData';\n\nexport type InteractionCallback = (interactionEvent: InteractionEvent, displayObject: DisplayObject, hit?: boolean) => void;\n\n/**\n * Event class that mimics native DOM events.\n *\n * @memberof PIXI\n */\nexport class InteractionEvent\n{\n    /**\n     * Whether this event will continue propagating in the tree.\n     *\n     * Remaining events for the {@link stopsPropagatingAt} object\n     * will still be dispatched.\n     */\n    public stopped: boolean;\n\n    /**\n     * At which object this event stops propagating.\n     *\n     * @private\n     */\n    public stopsPropagatingAt: DisplayObject;\n\n    /**\n     * Whether we already reached the element we want to\n     * stop propagating at. This is important for delayed events,\n     * where we start over deeper in the tree again.\n     *\n     * @private\n     */\n    public stopPropagationHint: boolean;\n\n    /**\n     * The object which caused this event to be dispatched.\n     * For listener callback see {@link PIXI.InteractionEvent.currentTarget}.\n     */\n    public target: DisplayObject;\n\n    /** The object whose event listener’s callback is currently being invoked. */\n    public currentTarget: DisplayObject;\n\n    /** Type of the event. */\n    public type: string;\n\n    /** {@link InteractionData} related to this event */\n    public data: InteractionData;\n\n    constructor()\n    {\n        this.stopped = false;\n        this.stopsPropagatingAt = null;\n        this.stopPropagationHint = false;\n        this.target = null;\n        this.currentTarget = null;\n        this.type = null;\n        this.data = null;\n    }\n\n    /** Prevents event from reaching any objects other than the current object. */\n    public stopPropagation(): void\n    {\n        this.stopped = true;\n        this.stopPropagationHint = true;\n        this.stopsPropagatingAt = this.currentTarget;\n    }\n\n    /** Resets the event. */\n    public reset(): void\n    {\n        this.stopped = false;\n        this.stopsPropagatingAt = null;\n        this.stopPropagationHint = false;\n        this.currentTarget = null;\n        this.target = null;\n    }\n}\n","export interface InteractionTrackingFlags\n{\n    OVER: number;\n    LEFT_DOWN: number;\n    RIGHT_DOWN: number;\n    NONE: number;\n}\n\n/**\n * DisplayObjects with the {@link PIXI.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI\n */\nexport class InteractionTrackingData\n{\n    public static FLAGS: Readonly<InteractionTrackingFlags> = Object.freeze({\n        NONE: 0,\n        OVER: 1 << 0,\n        LEFT_DOWN: 1 << 1,\n        RIGHT_DOWN: 1 << 2,\n    });\n\n    private readonly _pointerId: number;\n    private _flags: number;\n\n    /**\n     * @param {number} pointerId - Unique pointer id of the event\n     * @private\n     */\n    constructor(pointerId: number)\n    {\n        this._pointerId = pointerId;\n        this._flags = InteractionTrackingData.FLAGS.NONE;\n    }\n\n    /**\n     *\n     * @private\n     * @param {number} flag - The interaction flag to set\n     * @param {boolean} yn - Should the flag be set or unset\n     */\n    private _doSet(flag: number, yn: boolean): void\n    {\n        if (yn)\n        {\n            this._flags = this._flags | flag;\n        }\n        else\n        {\n            this._flags = this._flags & (~flag);\n        }\n    }\n\n    /**\n     * Unique pointer id of the event\n     *\n     * @readonly\n     * @private\n     * @member {number}\n     */\n    get pointerId(): number\n    {\n        return this._pointerId;\n    }\n\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @private\n     * @member {number}\n     */\n    get flags(): number\n    {\n        return this._flags;\n    }\n\n    set flags(flags: number)\n    {\n        this._flags = flags;\n    }\n\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @private\n     * @member {number}\n     */\n    get none(): boolean\n    {\n        return this._flags === InteractionTrackingData.FLAGS.NONE;\n    }\n\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get over(): boolean\n    {\n        return (this._flags & InteractionTrackingData.FLAGS.OVER) !== 0;\n    }\n\n    set over(yn: boolean)\n    {\n        this._doSet(InteractionTrackingData.FLAGS.OVER, yn);\n    }\n\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get rightDown(): boolean\n    {\n        return (this._flags & InteractionTrackingData.FLAGS.RIGHT_DOWN) !== 0;\n    }\n\n    set rightDown(yn: boolean)\n    {\n        this._doSet(InteractionTrackingData.FLAGS.RIGHT_DOWN, yn);\n    }\n\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get leftDown(): boolean\n    {\n        return (this._flags & InteractionTrackingData.FLAGS.LEFT_DOWN) !== 0;\n    }\n\n    set leftDown(yn: boolean)\n    {\n        this._doSet(InteractionTrackingData.FLAGS.LEFT_DOWN, yn);\n    }\n}\n","import { Point } from '@pixi/math';\n\nimport type { InteractionEvent, InteractionCallback } from './InteractionEvent';\nimport type { Container, DisplayObject } from '@pixi/display';\n\n/**\n * Strategy how to search through stage tree for interactive objects\n *\n * @memberof PIXI\n */\nexport class TreeSearch\n{\n    private readonly _tempPoint: Point;\n\n    constructor()\n    {\n        this._tempPoint = new Point();\n    }\n\n    /**\n     * Recursive implementation for findHit\n     *\n     * @private\n     * @param interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param func - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param hitTest - this indicates if the objects inside should be hit test against the point\n     * @param interactive - Whether the displayObject is interactive\n     * @return - Returns true if the displayObject hit the point\n     */\n    public recursiveFindHit(interactionEvent: InteractionEvent, displayObject: DisplayObject,\n        func?: InteractionCallback, hitTest?: boolean, interactive?: boolean\n    ): boolean\n    {\n        if (!displayObject || !displayObject.visible)\n        {\n            return false;\n        }\n\n        const point = interactionEvent.data.global;\n\n        // Took a little while to rework this function correctly! But now it is done and nice and optimized! ^_^\n        //\n        // This function will now loop through all objects and then only hit test the objects it HAS\n        // to, not all of them. MUCH faster..\n        // An object will be hit test if the following is true:\n        //\n        // 1: It is interactive.\n        // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n        //\n        // As another little optimization once an interactive object has been hit we can carry on\n        // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n        // A final optimization is that an object is not hit test directly if a child has already been hit.\n\n        interactive = displayObject.interactive || interactive;\n\n        let hit = false;\n        let interactiveParent = interactive;\n\n        // Flag here can set to false if the event is outside the parents hitArea or mask\n        let hitTestChildren = true;\n\n        // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n        // There is also no longer a need to hitTest children.\n        if (displayObject.hitArea)\n        {\n            if (hitTest)\n            {\n                displayObject.worldTransform.applyInverse(point, this._tempPoint);\n                if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y))\n                {\n                    hitTest = false;\n                    hitTestChildren = false;\n                }\n                else\n                {\n                    hit = true;\n                }\n            }\n            interactiveParent = false;\n        }\n        // If there is a mask, no need to hitTest against anything else if the pointer is not within the mask.\n        // We still want to hitTestChildren, however, to ensure a mouseout can still be generated.\n        // https://github.com/pixijs/pixi.js/issues/5135\n        else if (displayObject._mask)\n        {\n            if (hitTest)\n            {\n                if (!((displayObject._mask as any).containsPoint && (displayObject._mask as any).containsPoint(point)))\n                {\n                    hitTest = false;\n                }\n            }\n        }\n\n        // ** FREE TIP **! If an object is not interactive or has no buttons in it\n        // (such as a game scene!) set interactiveChildren to false for that displayObject.\n        // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n        if (hitTestChildren && displayObject.interactiveChildren && (displayObject as Container).children)\n        {\n            const children = (displayObject as Container).children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i];\n\n                // time to get recursive.. if this function will return if something is hit..\n                const childHit = this.recursiveFindHit(interactionEvent, child, func, hitTest, interactiveParent);\n\n                if (childHit)\n                {\n                    // its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (!child.parent)\n                    {\n                        continue;\n                    }\n\n                    // we no longer need to hit test any more objects in this container as we we\n                    // now know the parent has been hit\n                    interactiveParent = false;\n\n                    // If the child is interactive , that means that the object hit was actually\n                    // interactive and not just the child of an interactive object.\n                    // This means we no longer need to hit test anything else. We still need to run\n                    // through all objects, but we don't need to perform any hit tests.\n\n                    if (childHit)\n                    {\n                        if (interactionEvent.target)\n                        {\n                            hitTest = false;\n                        }\n                        hit = true;\n                    }\n                }\n            }\n        }\n\n        // no point running this if the item is not interactive or does not have an interactive parent.\n        if (interactive)\n        {\n            // if we are hit testing (as in we have no hit any objects yet)\n            // We also don't need to worry about hit testing if once of the displayObjects children\n            // has already been hit - but only if it was interactive, otherwise we need to keep\n            // looking for an interactive child, just in case we hit one\n            if (hitTest && !interactionEvent.target)\n            {\n                // already tested against hitArea if it is defined\n                if (!displayObject.hitArea && (displayObject as any).containsPoint)\n                {\n                    if ((displayObject as any).containsPoint(point))\n                    {\n                        hit = true;\n                    }\n                }\n            }\n\n            if (displayObject.interactive)\n            {\n                if (hit && !interactionEvent.target)\n                {\n                    interactionEvent.target = displayObject;\n                }\n\n                if (func)\n                {\n                    func(interactionEvent, displayObject, !!hit);\n                }\n            }\n        }\n\n        return hit;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @private\n     * @param interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param func - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param hitTest - this indicates if the objects inside should be hit test against the point\n     * @return - Returns true if the displayObject hit the point\n     */\n    public findHit(interactionEvent: InteractionEvent, displayObject: DisplayObject,\n        func?: InteractionCallback, hitTest?: boolean\n    ): void\n    {\n        this.recursiveFindHit(interactionEvent, displayObject, func, hitTest, false);\n    }\n}\n","import type { InteractionTrackingData } from './InteractionTrackingData';\n\ntype Cursor = 'auto'\n    | 'default'\n    | 'none'\n    | 'context-menu'\n    | 'help'\n    | 'pointer'\n    | 'progress'\n    | 'wait'\n    | 'cell'\n    | 'crosshair'\n    | 'text'\n    | 'vertical-text'\n    | 'alias'\n    | 'copy'\n    | 'move'\n    | 'no-drop'\n    | 'not-allowed'\n    | 'e-resize'\n    | 'n-resize'\n    | 'ne-resize'\n    | 'nw-resize'\n    | 's-resize'\n    | 'se-resize'\n    | 'sw-resize'\n    | 'w-resize'\n    | 'ns-resize'\n    | 'ew-resize'\n    | 'nesw-resize'\n    | 'col-resize'\n    | 'nwse-resize'\n    | 'row-resize'\n    | 'all-scroll'\n    | 'zoom-in'\n    | 'zoom-out'\n    | 'grab'\n    | 'grabbing';\n\nexport interface IHitArea {\n    contains(x: number, y: number): boolean;\n}\n\nexport interface InteractiveTarget {\n    interactive: boolean;\n    interactiveChildren: boolean;\n    hitArea: IHitArea | null;\n    cursor: Cursor | string;\n    buttonMode: boolean;\n    trackedPointers: {[x: number]: InteractionTrackingData};\n    _trackedPointers: {[x: number]: InteractionTrackingData};\n}\n\n/**\n * Interface for classes that represent a hit area.\n *\n * It is implemented by the following classes:\n * - {@link PIXI.Circle}\n * - {@link PIXI.Ellipse}\n * - {@link PIXI.Polygon}\n * - {@link PIXI.RoundedRectangle}\n *\n * @interface IHitArea\n * @memberof PIXI\n */\n\n/**\n * Checks whether the x and y coordinates given are contained within this area\n *\n * @method\n * @name contains\n * @memberof PIXI.IHitArea#\n * @param {number} x - The X coordinate of the point to test\n * @param {number} y - The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this area\n */\n\n/**\n * Default property values of interactive objects\n * Used by {@link PIXI.InteractionManager} to automatically give all DisplayObjects these properties\n *\n * @private\n * @name interactiveTarget\n * @type {Object}\n * @memberof PIXI\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          DisplayObject.prototype,\n *          PIXI.interactiveTarget\n *      );\n */\nexport const interactiveTarget: InteractiveTarget = {\n    interactive: false,\n    interactiveChildren: true,\n    hitArea: null,\n\n    /**\n     * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n     * Setting this changes the 'cursor' property to `'pointer'`.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.buttonMode = true;\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    get buttonMode(): boolean\n    {\n        return this.cursor === 'pointer';\n    },\n    set buttonMode(value: boolean)\n    {\n        if (value)\n        {\n            this.cursor = 'pointer';\n        }\n        else if (this.cursor === 'pointer')\n        {\n            this.cursor = null;\n        }\n    },\n\n    /**\n     * This defines what cursor mode is used when the mouse cursor\n     * is hovered over the displayObject.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.cursor = 'wait';\n     * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    cursor: null,\n\n    /**\n     * Internal set of all active pointers, by identifier\n     *\n     * @member {Map<number, InteractionTrackingData>}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     */\n    get trackedPointers()\n    {\n        if (this._trackedPointers === undefined) this._trackedPointers = {};\n\n        return this._trackedPointers;\n    },\n\n    /**\n     * Map of all tracked pointers, by identifier. Use trackedPointers to access.\n     *\n     * @private\n     * @type {Map<number, InteractionTrackingData>}\n     */\n    _trackedPointers: undefined,\n};\n","import { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { DisplayObject, TemporaryDisplayObject } from '@pixi/display';\nimport { InteractionData, InteractivePointerEvent } from './InteractionData';\nimport { InteractionEvent, InteractionCallback } from './InteractionEvent';\nimport { InteractionTrackingData } from './InteractionTrackingData';\nimport { TreeSearch } from './TreeSearch';\nimport { EventEmitter } from '@pixi/utils';\nimport { interactiveTarget } from './interactiveTarget';\n\nimport type { AbstractRenderer } from '@pixi/core';\nimport type { Point, IPointData } from '@pixi/math';\nimport type { Dict } from '@pixi/utils';\n\n// Mix interactiveTarget into DisplayObject.prototype\nDisplayObject.mixin(interactiveTarget);\n\nconst MOUSE_POINTER_ID = 1;\n\n// Mock interface for hitTestEvent - only used inside hitTest()\ninterface TestInteractionEvent\n{\n    target: DisplayObject;\n    data: {global: Point};\n}\n\n// helpers for hitTest() - only used inside hitTest()\nconst hitTestEvent: TestInteractionEvent = {\n    target: null,\n    data: {\n        global: null,\n    },\n};\n\nexport interface InteractionManagerOptions {\n    autoPreventDefault?: boolean;\n    interactionFrequency?: number;\n    useSystemTicker?: boolean;\n}\n\nexport interface DelayedEvent {\n    displayObject: DisplayObject;\n    eventString: string;\n    eventData: InteractionEvent;\n}\n\ninterface CrossCSSStyleDeclaration extends CSSStyleDeclaration\n{\n    msContentZooming: string;\n    msTouchAction: string;\n}\n\n/**\n * The interaction manager deals with mouse, touch and pointer events.\n *\n * Any DisplayObject can be interactive if its `interactive` property is set to true.\n *\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.interaction`\n *\n * @memberof PIXI\n */\nexport class InteractionManager extends EventEmitter\n{\n    /**\n     * Actively tracked InteractionData\n     *\n     * @private\n     * @member {Object.<number,PIXI.InteractionData>}\n     */\n    public readonly activeInteractionData: { [key: number]: InteractionData };\n\n    /**\n     * Does the device support touch events\n     * https://www.w3.org/TR/touch-events/\n     */\n    public readonly supportsTouchEvents: boolean;\n\n    /**\n     * Does the device support pointer events\n     * https://www.w3.org/Submission/pointer-events/\n     */\n    public readonly supportsPointerEvents: boolean;\n\n    /**\n     * Pool of unused InteractionData\n     *\n     * @private\n     */\n    public interactionDataPool: InteractionData[];\n\n    /**\n     * Internal cached let.\n     *\n     * @private\n     */\n    public cursor: string;\n\n    /**\n     * Delayed pointer events. Used to guarantee correct ordering of over/out events.\n     *\n     * @private\n     */\n    public delayedEvents: DelayedEvent[];\n\n    /**\n     * TreeSearch component that is used to hitTest stage tree.\n     *\n     * @private\n     */\n    public search: TreeSearch;\n\n    /** The renderer this interaction manager works for. */\n    public renderer: AbstractRenderer;\n\n    /**\n     * Should default browser actions automatically be prevented.\n     * Does not apply to pointer events for backwards compatibility\n     * preventDefault on pointer events stops mouse events from firing\n     * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n     *\n     * @default true\n     */\n    public autoPreventDefault: boolean;\n\n    /**\n     * Maximum frequency in milliseconds at which pointer over/out states will be checked by {@link tickerUpdate}.\n     *\n     * @default 10\n     */\n    public interactionFrequency: number;\n\n    /** The mouse data. */\n    public mouse: InteractionData;\n\n    /** An event data object to handle all the event tracking/dispatching. */\n    public eventData: InteractionEvent;\n\n    /**\n     * This property determines if mousemove and touchmove events are fired only when the cursor\n     * is over the object.\n     * Setting to true will make things work more in line with how the DOM version works.\n     * Setting to false can make things easier for things like dragging\n     * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n     * future versions of pixi.\n     *\n     * @default false\n     */\n    public moveWhenInside: boolean;\n\n    /**\n     * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n     * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n     * and functions are called instead of changing the CSS.\n     * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n     *\n     * @member {Object.<string, Object>}\n     */\n    public cursorStyles: Dict<string | ((mode: string) => void) | CSSStyleDeclaration>;\n\n    /**\n     * The mode of the cursor that is being used.\n     * The value of this is a key from the cursorStyles dictionary.\n     */\n    public currentCursorMode: string;\n\n    /**\n     * The current resolution / device pixel ratio.\n     *\n     * @default 1\n     */\n    public resolution: number;\n\n    /** The DOM element to bind to. */\n    protected interactionDOMElement: HTMLElement;\n\n    /** Have events been attached to the dom element? */\n    protected eventsAdded: boolean;\n\n    /** Has the system ticker been added? */\n    protected tickerAdded: boolean;\n\n    /** Is the mouse hovering over the renderer? If working in worker mouse considered to be over renderer by default. */\n    protected mouseOverRenderer: boolean;\n\n    private _useSystemTicker: boolean;\n    private _deltaTime: number;\n    private _didMove: boolean;\n\n    /** Used as a last rendered object in case renderer doesnt have _lastObjectRendered. */\n    private _tempDisplayObject: DisplayObject;\n\n    /**\n     * An options object specifies characteristics about the event listener.\n     *\n     * @member {Object.<string, boolean>}\n     */\n    private readonly _eventListenerOptions: { capture: true, passive: false };\n\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     * @param options - The options for the manager.\n     * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n     * @param {number} [options.interactionFrequency=10] - Maximum frequency (ms) at pointer over/out states will be checked.\n     * @param {number} [options.useSystemTicker=true] - Whether to add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n     */\n    constructor(renderer: AbstractRenderer, options?: InteractionManagerOptions)\n    {\n        super();\n\n        options = options || {};\n\n        this.renderer = renderer;\n        this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n        this.interactionFrequency = options.interactionFrequency || 10;\n        this.mouse = new InteractionData();\n        this.mouse.identifier = MOUSE_POINTER_ID;\n\n        // setting the mouse to start off far off screen will mean that mouse over does\n        //  not get called before we even move the mouse.\n        this.mouse.global.set(-999999);\n\n        this.activeInteractionData = {};\n        this.activeInteractionData[MOUSE_POINTER_ID] = this.mouse;\n        this.interactionDataPool = [];\n        this.eventData = new InteractionEvent();\n        this.interactionDOMElement = null;\n\n        this.moveWhenInside = false;\n        this.eventsAdded = false;\n        this.tickerAdded = false;\n        this.mouseOverRenderer = !('PointerEvent' in globalThis);\n        this.supportsTouchEvents = 'ontouchstart' in globalThis;\n        this.supportsPointerEvents = !!globalThis.PointerEvent;\n\n        // this will make it so that you don't have to call bind all the time\n\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.processPointerUp = this.processPointerUp.bind(this);\n\n        this.onPointerCancel = this.onPointerCancel.bind(this);\n        this.processPointerCancel = this.processPointerCancel.bind(this);\n\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.processPointerDown = this.processPointerDown.bind(this);\n\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.processPointerMove = this.processPointerMove.bind(this);\n\n        this.onPointerOut = this.onPointerOut.bind(this);\n        this.processPointerOverOut = this.processPointerOverOut.bind(this);\n\n        this.onPointerOver = this.onPointerOver.bind(this);\n\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n        this.currentCursorMode = null;\n        this.cursor = null;\n\n        this.resolution = 1;\n        this.delayedEvents = [];\n        this.search = new TreeSearch();\n\n        this._tempDisplayObject = new TemporaryDisplayObject();\n        this._eventListenerOptions = { capture: true, passive: false };\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n         * object.\n         *\n         * @event PIXI.InteractionManager#mousedown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object.\n         *\n         * @event PIXI.InteractionManager#rightdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object.\n         *\n         * @event PIXI.InteractionManager#mouseup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object.\n         *\n         * @event PIXI.InteractionManager#rightup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object.\n         *\n         * @event PIXI.InteractionManager#click\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object.\n         *\n         * @event PIXI.InteractionManager#rightclick\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.InteractionManager#event:mousedown}.\n         *\n         * @event PIXI.InteractionManager#mouseupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.InteractionManager#event:rightdown}.\n         *\n         * @event PIXI.InteractionManager#rightupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object\n         *\n         * @event PIXI.InteractionManager#mousemove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object\n         *\n         * @event PIXI.InteractionManager#mouseover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object\n         *\n         * @event PIXI.InteractionManager#mouseout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         *\n         * @event PIXI.InteractionManager#pointerdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * Not always fired when some buttons are held down while others are released. In those cases,\n         * use [mousedown]{@link PIXI.InteractionManager#event:mousedown} and\n         * [mouseup]{@link PIXI.InteractionManager#event:mouseup} instead.\n         *\n         * @event PIXI.InteractionManager#pointerup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event\n         *\n         * @event PIXI.InteractionManager#pointercancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         *\n         * @event PIXI.InteractionManager#pointertap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.InteractionManager#event:pointerdown}.\n         *\n         * @event PIXI.InteractionManager#pointerupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object\n         *\n         * @event PIXI.InteractionManager#pointermove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object\n         *\n         * @event PIXI.InteractionManager#pointerover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object\n         *\n         * @event PIXI.InteractionManager#pointerout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         *\n         * @event PIXI.InteractionManager#touchstart\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         *\n         * @event PIXI.InteractionManager#touchend\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch\n         *\n         * @event PIXI.InteractionManager#touchcancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         *\n         * @event PIXI.InteractionManager#tap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.InteractionManager#event:touchstart}.\n         *\n         * @event PIXI.InteractionManager#touchendoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         *\n         * @event PIXI.InteractionManager#touchmove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mousedown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#rightdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mouseup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#rightup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#click\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#rightclick\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mouseupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#rightupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mousemove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mouseover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#mouseout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointerdown\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointerup\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointercancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointertap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointerupoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointermove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointerover\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#pointerout\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#touchstart\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#touchend\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#touchcancel\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#tap\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#touchendoutside\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * This comes from the @pixi/interaction package.\n         *\n         * @event PIXI.DisplayObject#touchmove\n         * @param {PIXI.InteractionEvent} event - Interaction event\n         */\n\n        this._useSystemTicker = options.useSystemTicker !== undefined ? options.useSystemTicker : true;\n\n        this.setTargetElement(this.renderer.view, this.renderer.resolution);\n    }\n\n    /**\n     * Should the InteractionManager automatically add {@link tickerUpdate} to {@link PIXI.Ticker.system}.\n     *\n     * @default true\n     */\n    get useSystemTicker(): boolean\n    {\n        return this._useSystemTicker;\n    }\n    set useSystemTicker(useSystemTicker: boolean)\n    {\n        this._useSystemTicker = useSystemTicker;\n\n        if (useSystemTicker)\n        {\n            this.addTickerListener();\n        }\n        else\n        {\n            this.removeTickerListener();\n        }\n    }\n\n    /**\n     * Last rendered object or temp object.\n     *\n     * @readonly\n     * @protected\n     */\n    get lastObjectRendered(): DisplayObject\n    {\n        return (this.renderer._lastObjectRendered as DisplayObject) || this._tempDisplayObject;\n    }\n\n    /**\n     * Hit tests a point against the display tree, returning the first interactive object that is hit.\n     *\n     * @param globalPoint - A point to hit test with, in global space.\n     * @param root - The root display object to start from. If omitted, defaults\n     * to the last rendered root of the associated renderer.\n     * @return - The hit display object, if any.\n     */\n    public hitTest(globalPoint: Point, root?: DisplayObject): DisplayObject\n    {\n        // clear the target for our hit test\n        hitTestEvent.target = null;\n        // assign the global point\n        hitTestEvent.data.global = globalPoint;\n        // ensure safety of the root\n        if (!root)\n        {\n            root = this.lastObjectRendered;\n        }\n        // run the hit test\n        this.processInteractive(hitTestEvent as InteractionEvent, root, null, true);\n        // return our found object - it'll be null if we didn't hit anything\n\n        return hitTestEvent.target;\n    }\n\n    /**\n     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to delegate\n     * another DOM element to receive those events.\n     *\n     * @param element - the DOM element which will receive mouse and touch events.\n     * @param resolution - The resolution / device pixel ratio of the new element (relative to the canvas).\n     */\n    public setTargetElement(element: HTMLElement, resolution = 1): void\n    {\n        this.removeTickerListener();\n\n        this.removeEvents();\n\n        this.interactionDOMElement = element;\n\n        this.resolution = resolution;\n\n        this.addEvents();\n\n        this.addTickerListener();\n    }\n\n    /** Adds the ticker listener. */\n    private addTickerListener(): void\n    {\n        if (this.tickerAdded || !this.interactionDOMElement || !this._useSystemTicker)\n        {\n            return;\n        }\n\n        Ticker.system.add(this.tickerUpdate, this, UPDATE_PRIORITY.INTERACTION);\n\n        this.tickerAdded = true;\n    }\n\n    /** Removes the ticker listener. */\n    private removeTickerListener(): void\n    {\n        if (!this.tickerAdded)\n        {\n            return;\n        }\n\n        Ticker.system.remove(this.tickerUpdate, this);\n\n        this.tickerAdded = false;\n    }\n\n    /** Registers all the DOM events. */\n    private addEvents(): void\n    {\n        if (this.eventsAdded || !this.interactionDOMElement)\n        {\n            return;\n        }\n\n        const style = this.interactionDOMElement.style as CrossCSSStyleDeclaration;\n\n        if (globalThis.navigator.msPointerEnabled)\n        {\n            style.msContentZooming = 'none';\n            style.msTouchAction = 'none';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = 'none';\n        }\n\n        /*\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.addEventListener('pointermove', this.onPointerMove, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, this._eventListenerOptions);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, this._eventListenerOptions);\n            globalThis.addEventListener('pointercancel', this.onPointerCancel, this._eventListenerOptions);\n            globalThis.addEventListener('pointerup', this.onPointerUp, this._eventListenerOptions);\n        }\n        else\n        {\n            globalThis.document.addEventListener('mousemove', this.onPointerMove, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, this._eventListenerOptions);\n            globalThis.addEventListener('mouseup', this.onPointerUp, this._eventListenerOptions);\n        }\n\n        // always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, this._eventListenerOptions);\n            this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, this._eventListenerOptions);\n        }\n\n        this.eventsAdded = true;\n    }\n\n    /** Removes all the DOM events that were previously registered. */\n    private removeEvents(): void\n    {\n        if (!this.eventsAdded || !this.interactionDOMElement)\n        {\n            return;\n        }\n\n        const style = this.interactionDOMElement.style as CrossCSSStyleDeclaration;\n\n        if (globalThis.navigator.msPointerEnabled)\n        {\n            style.msContentZooming = '';\n            style.msTouchAction = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            style.touchAction = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            globalThis.document.removeEventListener('pointermove', this.onPointerMove, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, this._eventListenerOptions);\n            globalThis.removeEventListener('pointercancel', this.onPointerCancel, this._eventListenerOptions);\n            globalThis.removeEventListener('pointerup', this.onPointerUp, this._eventListenerOptions);\n        }\n        else\n        {\n            globalThis.document.removeEventListener('mousemove', this.onPointerMove, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, this._eventListenerOptions);\n            globalThis.removeEventListener('mouseup', this.onPointerUp, this._eventListenerOptions);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, this._eventListenerOptions);\n            this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, this._eventListenerOptions);\n        }\n\n        this.interactionDOMElement = null;\n\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Updates the state of interactive objects if at least {@link interactionFrequency}\n     * milliseconds have passed since the last invocation.\n     *\n     * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n     *\n     * @param deltaTime - time delta since the last call\n     */\n    public tickerUpdate(deltaTime: number): void\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        this.update();\n    }\n\n    /** Updates the state of interactive objects. */\n    public update(): void\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this._didMove)\n        {\n            this._didMove = false;\n\n            return;\n        }\n\n        this.cursor = null;\n\n        // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n        // but there was a scenario of a display object moving under a static mouse cursor.\n        // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n        for (const k in this.activeInteractionData)\n        {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.activeInteractionData.hasOwnProperty(k))\n            {\n                const interactionData = this.activeInteractionData[k];\n\n                if (interactionData.originalEvent && interactionData.pointerType !== 'touch')\n                {\n                    const interactionEvent = this.configureInteractionEventForDOMEvent(\n                        this.eventData,\n                        interactionData.originalEvent as PointerEvent,\n                        interactionData\n                    );\n\n                    this.processInteractive(\n                        interactionEvent,\n                        this.lastObjectRendered,\n                        this.processPointerOverOut,\n                        true\n                    );\n                }\n            }\n        }\n\n        this.setCursorMode(this.cursor);\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     *\n     * @param mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    public setCursorMode(mode: string): void\n    {\n        mode = mode || 'default';\n        let applyStyles = true;\n\n        // offscreen canvas does not support setting styles, but cursor modes can be functions,\n        // in order to handle pixi rendered cursors, so we can't bail\n        if (globalThis.OffscreenCanvas && this.interactionDOMElement instanceof OffscreenCanvas)\n        {\n            applyStyles = false;\n        }\n        // if the mode didn't actually change, bail early\n        if (this.currentCursorMode === mode)\n        {\n            return;\n        }\n        this.currentCursorMode = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    if (applyStyles)\n                    {\n                        this.interactionDOMElement.style.cursor = style;\n                    }\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    if (applyStyles)\n                    {\n                        Object.assign(this.interactionDOMElement.style, style);\n                    }\n                    break;\n            }\n        }\n        else if (applyStyles && typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.interactionDOMElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * Dispatches an event on the display object that was interacted with.\n     *\n     * @param displayObject - the display object in question\n     * @param eventString - the name of the event (e.g, mousedown)\n     * @param eventData - the event data object\n     */\n    private dispatchEvent(displayObject: DisplayObject, eventString: string, eventData: InteractionEvent): void\n    {\n        // Even if the event was stopped, at least dispatch any remaining events\n        // for the same display object.\n        if (!eventData.stopPropagationHint || displayObject === eventData.stopsPropagatingAt)\n        {\n            eventData.currentTarget = displayObject;\n            eventData.type = eventString;\n\n            displayObject.emit(eventString, eventData);\n\n            if ((displayObject as any)[eventString])\n            {\n                (displayObject as any)[eventString](eventData);\n            }\n        }\n    }\n\n    /**\n     * Puts a event on a queue to be dispatched later. This is used to guarantee correct\n     * ordering of over/out events.\n     *\n     * @param displayObject - the display object in question\n     * @param eventString - the name of the event (e.g, mousedown)\n     * @param eventData - the event data object\n     */\n    private delayDispatchEvent(displayObject: DisplayObject, eventString: string, eventData: InteractionEvent): void\n    {\n        this.delayedEvents.push({ displayObject, eventString, eventData });\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     *\n     * @param point - the point that the result will be stored in\n     * @param x - the x coord of the position to map\n     * @param y - the y coord of the position to map\n     */\n    public mapPositionToPoint(point: IPointData, x: number, y: number): void\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.interactionDOMElement.parentElement)\n        {\n            rect = {\n                x: 0,\n                y: 0,\n                width: (this.interactionDOMElement as any).width,\n                height: (this.interactionDOMElement as any).height,\n                left: 0,\n                top: 0\n            };\n        }\n        else\n        {\n            rect = this.interactionDOMElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * ((this.interactionDOMElement as any).width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * ((this.interactionDOMElement as any).height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @protected\n     * @param interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param func - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param hitTest - indicates whether we want to calculate hits\n     *  or just iterate through all interactive objects\n     */\n    public processInteractive(interactionEvent: InteractionEvent, displayObject: DisplayObject,\n        func?: InteractionCallback, hitTest?: boolean\n    ): void\n    {\n        const hit = this.search.findHit(interactionEvent, displayObject, func, hitTest);\n\n        const delayedEvents = this.delayedEvents;\n\n        if (!delayedEvents.length)\n        {\n            return hit;\n        }\n        // Reset the propagation hint, because we start deeper in the tree again.\n        interactionEvent.stopPropagationHint = false;\n\n        const delayedLen = delayedEvents.length;\n\n        this.delayedEvents = [];\n\n        for (let i = 0; i < delayedLen; i++)\n        {\n            const { displayObject, eventString, eventData } = delayedEvents[i];\n\n            // When we reach the object we wanted to stop propagating at,\n            // set the propagation hint.\n            if (eventData.stopsPropagatingAt === displayObject)\n            {\n                eventData.stopPropagationHint = true;\n            }\n\n            this.dispatchEvent(displayObject, eventString, eventData);\n        }\n\n        return hit;\n    }\n\n    /**\n     * Is called when the pointer button is pressed down on the renderer element\n     *\n     * @param originalEvent - The DOM event of a pointer button being pressed down\n     */\n    private onPointerDown(originalEvent: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (originalEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        /*\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && (events[0] as any).isNormalized)\n        {\n            const cancelable = originalEvent.cancelable || !('cancelable' in originalEvent);\n\n            if (cancelable)\n            {\n                originalEvent.preventDefault();\n            }\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerDown, true);\n\n            this.emit('pointerdown', interactionEvent);\n            if (event.pointerType === 'touch')\n            {\n                this.emit('touchstart', interactionEvent);\n            }\n            // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n            else if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n            }\n        }\n    }\n\n    /**\n     * Processes the result of the pointer down check and dispatches the event if need be\n     *\n     * @param interactionEvent - The interaction event wrapping the DOM event\n     * @param displayObject - The display object that was tested\n     * @param hit - the result of the hit test on the display object\n     */\n    private processPointerDown(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n        const id = interactionEvent.data.identifier;\n\n        if (hit)\n        {\n            if (!displayObject.trackedPointers[id])\n            {\n                displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n            }\n            this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n            }\n            else if (data.pointerType === 'mouse' || data.pointerType === 'pen')\n            {\n                const isRightButton = data.button === 2;\n\n                if (isRightButton)\n                {\n                    displayObject.trackedPointers[id].rightDown = true;\n                }\n                else\n                {\n                    displayObject.trackedPointers[id].leftDown = true;\n                }\n\n                this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @param originalEvent - The DOM event of a pointer button being released\n     * @param cancelled - true if the pointer is cancelled\n     * @param func - Function passed to {@link processInteractive}\n     */\n    private onPointerComplete(originalEvent: InteractivePointerEvent, cancelled: boolean, func: InteractionCallback): void\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        const eventLen = events.length;\n\n        // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n        // in all cases (unless it was a pointercancel)\n        const eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            // perform hit testing for events targeting our canvas or cancel events\n            this.processInteractive(interactionEvent, this.lastObjectRendered, func, cancelled || !eventAppend);\n\n            this.emit(cancelled ? 'pointercancel' : `pointerup${eventAppend}`, interactionEvent);\n\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? `rightup${eventAppend}` : `mouseup${eventAppend}`, interactionEvent);\n            }\n            else if (event.pointerType === 'touch')\n            {\n                this.emit(cancelled ? 'touchcancel' : `touchend${eventAppend}`, interactionEvent);\n                this.releaseInteractionDataForPointerId(event.pointerId);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is cancelled\n     *\n     * @param event - The DOM event of a pointer button being released\n     */\n    private onPointerCancel(event: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (event as PointerEvent).pointerType === 'touch') return;\n\n        this.onPointerComplete(event, true, this.processPointerCancel);\n    }\n\n    /**\n     * Processes the result of the pointer cancel check and dispatches the event if need be\n     *\n     * @param interactionEvent - The interaction event wrapping the DOM event\n     * @param displayObject - The display object that was tested\n     */\n    private processPointerCancel(interactionEvent: InteractionEvent, displayObject: DisplayObject): void\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        if (displayObject.trackedPointers[id] !== undefined)\n        {\n            delete displayObject.trackedPointers[id];\n            this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @param event - The DOM event of a pointer button being released\n     */\n    private onPointerUp(event: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (event as PointerEvent).pointerType === 'touch') return;\n\n        this.onPointerComplete(event, false, this.processPointerUp);\n    }\n\n    /**\n     * Processes the result of the pointer up check and dispatches the event if need be\n     *\n     * @param interactionEvent - The interaction event wrapping the DOM event\n     * @param displayObject - The display object that was tested\n     * @param hit - the result of the hit test on the display object\n     */\n    private processPointerUp(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const trackingData = displayObject.trackedPointers[id];\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n        // need to track mouse down status in the mouse block so that we can emit\n        // event in a later block\n        let isMouseTap = false;\n\n        // Mouse only\n        if (isMouse)\n        {\n            const isRightButton = data.button === 2;\n\n            const flags = InteractionTrackingData.FLAGS;\n\n            const test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n\n            const isDown = trackingData !== undefined && (trackingData.flags & test);\n\n            if (hit)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n\n                if (isDown)\n                {\n                    this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n                    // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n                    isMouseTap = true;\n                }\n            }\n            else if (isDown)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n            }\n            // update the down state of the tracking data\n            if (trackingData)\n            {\n                if (isRightButton)\n                {\n                    trackingData.rightDown = false;\n                }\n                else\n                {\n                    trackingData.leftDown = false;\n                }\n            }\n        }\n\n        // Pointers and Touches, and Mouse\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n\n            if (trackingData)\n            {\n                // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n                if (!isMouse || isMouseTap)\n                {\n                    this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n                }\n                if (isTouch)\n                {\n                    this.dispatchEvent(displayObject, 'tap', interactionEvent);\n                    // touches are no longer over (if they ever were) when we get the touchend\n                    // so we should ensure that we don't keep pretending that they are\n                    trackingData.over = false;\n                }\n            }\n        }\n        else if (trackingData)\n        {\n            this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n        }\n        // Only remove the tracking data if there is no over/down state still associated with it\n        if (trackingData && trackingData.none)\n        {\n            delete displayObject.trackedPointers[id];\n        }\n    }\n\n    /**\n     * Is called when the pointer moves across the renderer element\n     *\n     * @param originalEvent - The DOM event of a pointer moving\n     */\n    private onPointerMove(originalEvent: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (originalEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen')\n        {\n            this._didMove = true;\n\n            this.cursor = null;\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerMove, true);\n\n            this.emit('pointermove', interactionEvent);\n            if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);\n        }\n\n        if (events[0].pointerType === 'mouse')\n        {\n            this.setCursorMode(this.cursor);\n\n            // TODO BUG for parents interactive object (border order issue)\n        }\n    }\n\n    /**\n     * Processes the result of the pointer move check and dispatches the event if need be\n     *\n     * @param interactionEvent - The interaction event wrapping the DOM event\n     * @param displayObject - The display object that was tested\n     * @param hit - the result of the hit test on the display object\n     */\n    private processPointerMove(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        if (isMouse)\n        {\n            this.processPointerOverOut(interactionEvent, displayObject, hit);\n        }\n\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n            if (isMouse) this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved out of the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n     */\n    private onPointerOut(originalEvent: InteractivePointerEvent): void\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && (originalEvent as PointerEvent).pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOut, so events will always be length 1\n        const event = events[0];\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = false;\n            this.setCursorMode(null);\n        }\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        this.processInteractive(interactionEvent, this.lastObjectRendered, this.processPointerOverOut, false);\n\n        this.emit('pointerout', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseout', interactionEvent);\n        }\n        else\n        {\n            // we can get touchleave events after touchend, so we want to make sure we don't\n            // introduce memory leaks\n            this.releaseInteractionDataForPointerId(interactionData.identifier);\n        }\n    }\n\n    /**\n     * Processes the result of the pointer over/out check and dispatches the event if need be.\n     *\n     * @param interactionEvent - The interaction event wrapping the DOM event\n     * @param displayObject - The display object that was tested\n     * @param hit - the result of the hit test on the display object\n     */\n    private processPointerOverOut(interactionEvent: InteractionEvent, displayObject: DisplayObject, hit: boolean): void\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        let trackingData = displayObject.trackedPointers[id];\n\n        // if we just moused over the display object, then we need to track that state\n        if (hit && !trackingData)\n        {\n            trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n        }\n\n        if (trackingData === undefined) return;\n\n        if (hit && this.mouseOverRenderer)\n        {\n            if (!trackingData.over)\n            {\n                trackingData.over = true;\n                this.delayDispatchEvent(displayObject, 'pointerover', interactionEvent);\n                if (isMouse)\n                {\n                    this.delayDispatchEvent(displayObject, 'mouseover', interactionEvent);\n                }\n            }\n\n            // only change the cursor if it has not already been changed (by something deeper in the\n            // display tree)\n            if (isMouse && this.cursor === null)\n            {\n                this.cursor = displayObject.cursor;\n            }\n        }\n        else if (trackingData.over)\n        {\n            trackingData.over = false;\n            this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n            if (isMouse)\n            {\n                this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n            }\n            // if there is no mouse down information for the pointer, then it is safe to delete\n            if (trackingData.none)\n            {\n                delete displayObject.trackedPointers[id];\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved into the renderer element.\n     *\n     * @param originalEvent - The DOM event of a pointer button being moved into the renderer view.\n     */\n    private onPointerOver(originalEvent: InteractivePointerEvent): void\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOver, so events will always be length 1\n        const event = events[0];\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = true;\n        }\n\n        this.emit('pointerover', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseover', interactionEvent);\n        }\n    }\n\n    /**\n     * Get InteractionData for a given pointerId. Store that data as well.\n     *\n     * @param event - Normalized pointer event, output from normalizeToPointerData.\n     * @return - Interaction data for the given pointer identifier.\n     */\n    private getInteractionDataForPointerId(event: PointerEvent): InteractionData\n    {\n        const pointerId = event.pointerId;\n\n        let interactionData;\n\n        if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse')\n        {\n            interactionData = this.mouse;\n        }\n        else if (this.activeInteractionData[pointerId])\n        {\n            interactionData = this.activeInteractionData[pointerId];\n        }\n        else\n        {\n            interactionData = this.interactionDataPool.pop() || new InteractionData();\n            interactionData.identifier = pointerId;\n            this.activeInteractionData[pointerId] = interactionData;\n        }\n        // copy properties from the event, so that we can make sure that touch/pointer specific\n        // data is available\n        interactionData.copyEvent(event);\n\n        return interactionData;\n    }\n\n    /**\n     * Return unused InteractionData to the pool, for a given pointerId\n     *\n     * @param pointerId - Identifier from a pointer event\n     */\n    private releaseInteractionDataForPointerId(pointerId: number): void\n    {\n        const interactionData = this.activeInteractionData[pointerId];\n\n        if (interactionData)\n        {\n            delete this.activeInteractionData[pointerId];\n            interactionData.reset();\n            this.interactionDataPool.push(interactionData);\n        }\n    }\n\n    /**\n     * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n     *\n     * @param interactionEvent - The event to be configured\n     * @param pointerEvent - The DOM event that will be paired with the InteractionEvent\n     * @param interactionData - The InteractionData that will be paired\n     *        with the InteractionEvent\n     * @return - the interaction event that was passed in\n     */\n    private configureInteractionEventForDOMEvent(interactionEvent: InteractionEvent, pointerEvent: PointerEvent,\n        interactionData: InteractionData\n    ): InteractionEvent\n    {\n        interactionEvent.data = interactionData;\n\n        this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n\n        // Not really sure why this is happening, but it's how a previous version handled things\n        if (pointerEvent.pointerType === 'touch')\n        {\n            (pointerEvent as any).globalX = interactionData.global.x;\n            (pointerEvent as any).globalY = interactionData.global.y;\n        }\n\n        interactionData.originalEvent = pointerEvent;\n        interactionEvent.reset();\n\n        return interactionEvent;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     *\n     * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n     * @return - An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    private normalizeToPointerData(event: InteractivePointerEvent): PointerEvent[]\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i] as PixiTouch;\n\n                if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (!globalThis.MouseEvent\n            || (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof globalThis.PointerEvent))))\n        {\n            const tempEvent = event as PixiPointerEvent;\n\n            if (typeof tempEvent.isPrimary === 'undefined') tempEvent.isPrimary = true;\n            if (typeof tempEvent.width === 'undefined') tempEvent.width = 1;\n            if (typeof tempEvent.height === 'undefined') tempEvent.height = 1;\n            if (typeof tempEvent.tiltX === 'undefined') tempEvent.tiltX = 0;\n            if (typeof tempEvent.tiltY === 'undefined') tempEvent.tiltY = 0;\n            if (typeof tempEvent.pointerType === 'undefined') tempEvent.pointerType = 'mouse';\n            if (typeof tempEvent.pointerId === 'undefined') tempEvent.pointerId = MOUSE_POINTER_ID;\n            if (typeof tempEvent.pressure === 'undefined') tempEvent.pressure = 0.5;\n            if (typeof tempEvent.twist === 'undefined') tempEvent.twist = 0;\n            if (typeof tempEvent.tangentialPressure === 'undefined') tempEvent.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            tempEvent.isNormalized = true;\n\n            normalizedEvents.push(tempEvent);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents as PointerEvent[];\n    }\n\n    /** Destroys the interaction manager. */\n    public destroy(): void\n    {\n        this.removeEvents();\n\n        this.removeTickerListener();\n\n        this.removeAllListeners();\n\n        this.renderer = null;\n\n        this.mouse = null;\n\n        this.eventData = null;\n\n        this.interactionDOMElement = null;\n\n        this.onPointerDown = null;\n        this.processPointerDown = null;\n\n        this.onPointerUp = null;\n        this.processPointerUp = null;\n\n        this.onPointerCancel = null;\n        this.processPointerCancel = null;\n\n        this.onPointerMove = null;\n        this.processPointerMove = null;\n\n        this.onPointerOut = null;\n        this.processPointerOverOut = null;\n\n        this.onPointerOver = null;\n\n        this.search = null;\n    }\n}\n\ninterface PixiPointerEvent extends PointerEvent\n{\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    isNormalized: boolean;\n}\n\ninterface PixiTouch extends Touch\n{\n    button: number;\n    buttons: number;\n    isPrimary: boolean;\n    width: number;\n    height: number;\n    tiltX: number;\n    tiltY: number;\n    pointerType: string;\n    pointerId: number;\n    pressure: number;\n    twist: number;\n    tangentialPressure: number;\n    layerX: number;\n    layerY: number;\n    offsetX: number;\n    offsetY: number;\n    isNormalized: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}