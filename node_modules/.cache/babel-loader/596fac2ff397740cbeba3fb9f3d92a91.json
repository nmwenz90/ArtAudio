{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  channelCount: 2,\n  channelCountMode: 'clamped-max',\n  channelInterpretation: 'speakers',\n  coneInnerAngle: 360,\n  coneOuterAngle: 360,\n  coneOuterGain: 0,\n  distanceModel: 'inverse',\n  maxDistance: 10000,\n  orientationX: 1,\n  orientationY: 0,\n  orientationZ: 0,\n  panningModel: 'equalpower',\n  positionX: 0,\n  positionY: 0,\n  positionZ: 0,\n  refDistance: 1,\n  rolloffFactor: 1\n};\nexport var createPannerNodeConstructor = function createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(PannerNode, _audioNodeConstructor);\n\n    var _super = _createSuper(PannerNode);\n\n    function PannerNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, PannerNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativePannerNode, pannerNodeRenderer);\n      _this._nativePannerNode = nativePannerNode; // Bug #74: Safari does not export the correct values for maxValue and minValue.\n\n      _this._orientationX = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._orientationY = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._orientationZ = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionX = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionY = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._positionZ = createAudioParam(_assertThisInitialized(_this), isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(_assertThisInitialized(_this), 1);\n      return _this;\n    }\n\n    _createClass(PannerNode, [{\n      key: \"coneInnerAngle\",\n      get: function get() {\n        return this._nativePannerNode.coneInnerAngle;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneInnerAngle = value;\n      }\n    }, {\n      key: \"coneOuterAngle\",\n      get: function get() {\n        return this._nativePannerNode.coneOuterAngle;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneOuterAngle = value;\n      }\n    }, {\n      key: \"coneOuterGain\",\n      get: function get() {\n        return this._nativePannerNode.coneOuterGain;\n      },\n      set: function set(value) {\n        this._nativePannerNode.coneOuterGain = value;\n      }\n    }, {\n      key: \"distanceModel\",\n      get: function get() {\n        return this._nativePannerNode.distanceModel;\n      },\n      set: function set(value) {\n        this._nativePannerNode.distanceModel = value;\n      }\n    }, {\n      key: \"maxDistance\",\n      get: function get() {\n        return this._nativePannerNode.maxDistance;\n      },\n      set: function set(value) {\n        this._nativePannerNode.maxDistance = value;\n      }\n    }, {\n      key: \"orientationX\",\n      get: function get() {\n        return this._orientationX;\n      }\n    }, {\n      key: \"orientationY\",\n      get: function get() {\n        return this._orientationY;\n      }\n    }, {\n      key: \"orientationZ\",\n      get: function get() {\n        return this._orientationZ;\n      }\n    }, {\n      key: \"panningModel\",\n      get: function get() {\n        return this._nativePannerNode.panningModel;\n      },\n      set: function set(value) {\n        this._nativePannerNode.panningModel = value;\n      }\n    }, {\n      key: \"positionX\",\n      get: function get() {\n        return this._positionX;\n      }\n    }, {\n      key: \"positionY\",\n      get: function get() {\n        return this._positionY;\n      }\n    }, {\n      key: \"positionZ\",\n      get: function get() {\n        return this._positionZ;\n      }\n    }, {\n      key: \"refDistance\",\n      get: function get() {\n        return this._nativePannerNode.refDistance;\n      },\n      set: function set(value) {\n        this._nativePannerNode.refDistance = value;\n      }\n    }, {\n      key: \"rolloffFactor\",\n      get: function get() {\n        return this._nativePannerNode.rolloffFactor;\n      },\n      set: function set(value) {\n        this._nativePannerNode.rolloffFactor = value;\n      }\n    }]);\n\n    return PannerNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","channelCount","channelCountMode","channelInterpretation","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","positionX","positionY","positionZ","refDistance","rolloffFactor","createPannerNodeConstructor","audioNodeConstructor","createAudioParam","createNativePannerNode","createPannerNodeRenderer","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativePannerNode","isOffline","pannerNodeRenderer","_nativePannerNode","_orientationX","_orientationY","_orientationZ","_positionX","_positionY","_positionZ","value"],"sourceRoot":"","sources":["../../../src/factories/panner-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}