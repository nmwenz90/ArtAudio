{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\n\nexport var Effect = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Effect, _ToneAudioNode);\n\n  var _super = _createSuper(Effect);\n\n  function Effect(options) {\n    var _this;\n\n    _classCallCheck(this, Effect);\n\n    _this = _super.call(this, options);\n    _this.name = \"Effect\";\n    /**\n     * the drywet knob to control the amount of effect\n     */\n\n    _this._dryWet = new CrossFade({\n      context: _this.context\n    });\n    /**\n     * The wet control is how much of the effected\n     * will pass through to the output. 1 = 100% effected\n     * signal, 0 = 100% dry signal.\n     */\n\n    _this.wet = _this._dryWet.fade;\n    /**\n     * connect the effectSend to the input of hte effect\n     */\n\n    _this.effectSend = new Gain({\n      context: _this.context\n    });\n    /**\n     * connect the output of the effect to the effectReturn\n     */\n\n    _this.effectReturn = new Gain({\n      context: _this.context\n    });\n    /**\n     * The effect input node\n     */\n\n    _this.input = new Gain({\n      context: _this.context\n    });\n    /**\n     * The effect output\n     */\n\n    _this.output = _this._dryWet; // connections\n\n    _this.input.fan(_this._dryWet.a, _this.effectSend);\n\n    _this.effectReturn.connect(_this._dryWet.b);\n\n    _this.wet.setValueAtTime(options.wet, 0);\n\n    _this._internalChannels = [_this.effectReturn, _this.effectSend];\n    readOnly(_assertThisInitialized(_this), \"wet\");\n    return _this;\n  }\n\n  _createClass(Effect, [{\n    key: \"connectEffect\",\n    value:\n    /**\n     * chains the effect in between the effectSend and effectReturn\n     */\n    function connectEffect(effect) {\n      // add it to the internal channels\n      this._internalChannels.push(effect);\n\n      this.effectSend.chain(effect, this.effectReturn);\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Effect.prototype), \"dispose\", this).call(this);\n\n      this._dryWet.dispose();\n\n      this.effectSend.dispose();\n      this.effectReturn.dispose();\n      this.wet.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        wet: 1\n      });\n    }\n  }]);\n\n  return Effect;\n}(ToneAudioNode);","map":{"version":3,"mappings":";;;;;;;AAAA,SAASA,SAAT,QAA0B,gCAA1B;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,aAAT,QAAoD,+BAApD;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AAMA;;;;;;AAKA,WAAsBC,MAAtB;AAAA;;AAAA;;AAqCC,kBAAYC,OAAZ,EAAkC;AAAA;;AAAA;;AACjC,8BAAMA,OAAN;AAnCQ,iBAAe,QAAf;AAET;;;;AAGQ,oBAAqB,IAAIL,SAAJ,CAAc;AAAEM,aAAO,EAAE,MAAKA;AAAhB,KAAd,CAArB;AAER;;;;;;AAKA,gBAA6B,MAAKC,OAAL,CAAaC,IAA1C;AAEA;;;;AAGU,uBAAmB,IAAIP,IAAJ,CAAS;AAAEK,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAnB;AAEV;;;;AAGU,yBAAqB,IAAIL,IAAJ,CAAS;AAAEK,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAArB;AAEV;;;;AAGA,kBAAc,IAAIL,IAAJ,CAAS;AAAEK,aAAO,EAAE,MAAKA;AAAhB,KAAT,CAAd;AAEA;;;;AAGA,mBAAS,MAAKC,OAAd,CAEkC,CAGjC;;AACA,UAAKE,KAAL,CAAWC,GAAX,CAAe,MAAKH,OAAL,CAAaI,CAA5B,EAA+B,MAAKC,UAApC;;AACA,UAAKC,YAAL,CAAkBC,OAAlB,CAA0B,MAAKP,OAAL,CAAaQ,CAAvC;;AACA,UAAKC,GAAL,CAASC,cAAT,CAAwBZ,OAAO,CAACW,GAAhC,EAAqC,CAArC;;AACA,UAAKE,iBAAL,GAAyB,CAAC,MAAKL,YAAN,EAAoB,MAAKD,UAAzB,CAAzB;AACAT,YAAQ,gCAAO,KAAP,CAAR;AARiC;AASjC;;AA9CF;AAAA;AAAA;AAsDC;;;AAGU,2BAAcgB,MAAd,EAA+C;AACxD;AACA,WAAKD,iBAAL,CAAuBE,IAAvB,CAA4BD,MAA5B;;AACA,WAAKP,UAAL,CAAgBS,KAAhB,CAAsBF,MAAtB,EAA8B,KAAKN,YAAnC;AACA,aAAO,IAAP;AACA;AA9DF;AAAA;AAAA,WAgEC,mBAAO;AACN;;AACA,WAAKN,OAAL,CAAae,OAAb;;AACA,WAAKV,UAAL,CAAgBU,OAAhB;AACA,WAAKT,YAAL,CAAkBS,OAAlB;AACA,WAAKN,GAAL,CAASM,OAAT;AACA,aAAO,IAAP;AACA;AAvEF;AAAA;AAAA,WAgDC,uBAAkB;AACjB,aAAOC,MAAM,CAACC,MAAP,CAActB,aAAa,CAACuB,WAAd,EAAd,EAA2C;AACjDT,WAAG,EAAE;AAD4C,OAA3C,CAAP;AAGA;AApDF;;AAAA;AAAA,EACSd,aADT","names":["CrossFade","Gain","ToneAudioNode","readOnly","Effect","options","context","_dryWet","fade","input","fan","a","effectSend","effectReturn","connect","b","wet","setValueAtTime","_internalChannels","effect","push","chain","dispose","Object","assign","getDefaults"],"sourceRoot":"","sources":["../../../Tone/effect/Effect.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}