{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\n\nexport var CrossFade = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(CrossFade, _ToneAudioNode);\n\n  var _super = _createSuper(CrossFade);\n\n  function CrossFade() {\n    var _this;\n\n    _classCallCheck(this, CrossFade);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n    _this.name = \"CrossFade\";\n    /**\n     * The crossfading is done by a StereoPannerNode\n     */\n\n    _this._panner = _this.context.createStereoPanner();\n    /**\n     * Split the output of the panner node into two values used to control the gains.\n     */\n\n    _this._split = _this.context.createChannelSplitter(2);\n    /**\n     * Convert the fade value into an audio range value so it can be connected\n     * to the panner.pan AudioParam\n     */\n\n    _this._g2a = new GainToAudio({\n      context: _this.context\n    });\n    /**\n     * The input which is at full level when fade = 0\n     */\n\n    _this.a = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The input which is at full level when fade = 1\n     */\n\n    _this.b = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The output is a mix between `a` and `b` at the ratio of `fade`\n     */\n\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._internalChannels = [_this.a, _this.b];\n    var options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n    _this.fade = new Signal({\n      context: _this.context,\n      units: \"normalRange\",\n      value: options.fade\n    });\n    readOnly(_assertThisInitialized(_this), \"fade\");\n\n    _this.context.getConstant(1).connect(_this._panner);\n\n    _this._panner.connect(_this._split); // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\n\n    _this._panner.channelCount = 1;\n    _this._panner.channelCountMode = \"explicit\";\n    connect(_this._split, _this.a.gain, 0);\n    connect(_this._split, _this.b.gain, 1);\n\n    _this.fade.chain(_this._g2a, _this._panner.pan);\n\n    _this.a.connect(_this.output);\n\n    _this.b.connect(_this.output);\n\n    return _this;\n  }\n\n  _createClass(CrossFade, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(CrossFade.prototype), \"dispose\", this).call(this);\n\n      this.a.dispose();\n      this.b.dispose();\n      this.output.dispose();\n      this.fade.dispose();\n\n      this._g2a.dispose();\n\n      this._panner.disconnect();\n\n      this._split.disconnect();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        fade: 0.5\n      });\n    }\n  }]);\n\n  return CrossFade;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","connect","ToneAudioNode","optionsFromArguments","readOnly","GainToAudio","Signal","CrossFade","Object","assign","getDefaults","arguments","context","createStereoPanner","createChannelSplitter","gain","a","b","options","fade","units","value","getConstant","_panner","_split","channelCount","channelCountMode","chain","_g2a","pan","output","dispose","disconnect"],"sourceRoot":"","sources":["../../../../Tone/component/channel/CrossFade.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}