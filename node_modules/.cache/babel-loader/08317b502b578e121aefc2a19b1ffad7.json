{"ast":null,"code":"import _asyncToGenerator from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport var createAnalyserNodeRendererFactory = function createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) {\n  return function () {\n    var renderedNativeAnalyserNodes = new WeakMap();\n\n    var createAnalyserNode = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(proxy, nativeOfflineAudioContext) {\n        var nativeAnalyserNode, nativeAnalyserNodeIsOwnedByContext, options;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n\n                nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n\n                if (!nativeAnalyserNodeIsOwnedByContext) {\n                  options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                  };\n                  nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n                }\n\n                renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n                _context.next = 6;\n                return renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n\n              case 6:\n                return _context.abrupt(\"return\", nativeAnalyserNode);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function createAnalyserNode(_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return {\n      render: function render(proxy, nativeOfflineAudioContext) {\n        var renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n\n        if (renderedNativeAnalyserNode !== undefined) {\n          return Promise.resolve(renderedNativeAnalyserNode);\n        }\n\n        return createAnalyserNode(proxy, nativeOfflineAudioContext);\n      }\n    };\n  };\n};","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAT,QAAiC,gCAAjC;AAIA,OAAO,IAAMC,iCAAiC,GAAwC,SAAzEA,iCAAyE,CAClFC,wBADkF,EAElFC,kBAFkF,EAGlFC,uBAHkF,EAIlF;AACA,SAAO,YAAmE;AACtE,QAAMC,2BAA2B,GAAG,IAAIC,OAAJ,EAApC;;AAEA,QAAMC,kBAAkB;AAAA,0EAAG,iBAAOC,KAAP,EAAgCC,yBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,kCADmB,GACEP,kBAAkB,CAAyBK,KAAzB,CADpB,EAGvB;;AACMG,kDAJiB,GAIoBX,gBAAgB,CAACU,kBAAD,EAAqBD,yBAArB,CAJpC;;AAMvB,oBAAI,CAACE,kCAAL,EAAyC;AAC/BC,yBAD+B,GACrB;AACZC,gCAAY,EAAEH,kBAAkB,CAACG,YADrB;AAEZC,oCAAgB,EAAEJ,kBAAkB,CAACI,gBAFzB;AAGZC,yCAAqB,EAAEL,kBAAkB,CAACK,qBAH9B;AAIZC,2BAAO,EAAEN,kBAAkB,CAACM,OAJhB;AAKZC,+BAAW,EAAEP,kBAAkB,CAACO,WALpB;AAMZC,+BAAW,EAAER,kBAAkB,CAACQ,WANpB;AAOZC,yCAAqB,EAAET,kBAAkB,CAACS;AAP9B,mBADqB;AAWrCT,oCAAkB,GAAGR,wBAAwB,CAACO,yBAAD,EAA4BG,OAA5B,CAA7C;AACH;;AAEDP,2CAA2B,CAACe,GAA5B,CAAgCX,yBAAhC,EAA2DC,kBAA3D;AApBuB;AAAA,uBAsBjBN,uBAAuB,CAACI,KAAD,EAAQC,yBAAR,EAAmCC,kBAAnC,CAtBN;;AAAA;AAAA,iDAwBhBA,kBAxBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAlBH,kBAAkB;AAAA;AAAA;AAAA,OAAxB;;AA2BA,WAAO;AACHc,YADG,kBACIb,KADJ,EAC6BC,yBAD7B,EACkF;AACjF,YAAMa,0BAA0B,GAAGjB,2BAA2B,CAACkB,GAA5B,CAAgCd,yBAAhC,CAAnC;;AAEA,YAAIa,0BAA0B,KAAKE,SAAnC,EAA8C;AAC1C,iBAAOC,OAAO,CAACC,OAAR,CAAgBJ,0BAAhB,CAAP;AACH;;AAED,eAAOf,kBAAkB,CAACC,KAAD,EAAQC,yBAAR,CAAzB;AACH;AATE,KAAP;AAWH,GAzCD;AA0CH,CA/CM","names":["isOwnedByContext","createAnalyserNodeRendererFactory","createNativeAnalyserNode","getNativeAudioNode","renderInputsOfAudioNode","renderedNativeAnalyserNodes","WeakMap","createAnalyserNode","proxy","nativeOfflineAudioContext","nativeAnalyserNode","nativeAnalyserNodeIsOwnedByContext","options","channelCount","channelCountMode","channelInterpretation","fftSize","maxDecibels","minDecibels","smoothingTimeConstant","set","render","renderedNativeAnalyserNode","get","undefined","Promise","resolve"],"sourceRoot":"","sources":["../../../src/factories/analyser-node-renderer-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}