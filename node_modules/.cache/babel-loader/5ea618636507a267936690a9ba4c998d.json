{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\n/**\n * Get the current waveform data of the connected audio source.\n * @category Component\n */\n\nexport var Waveform = /*#__PURE__*/function (_MeterBase) {\n  _inherits(Waveform, _MeterBase);\n\n  var _super = _createSuper(Waveform);\n\n  function Waveform() {\n    var _this;\n\n    _classCallCheck(this, Waveform);\n\n    _this = _super.call(this, optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]));\n    _this.name = \"Waveform\";\n    var options = optionsFromArguments(Waveform.getDefaults(), arguments, [\"size\"]);\n    _this._analyser.type = \"waveform\";\n    _this.size = options.size;\n    return _this;\n  }\n\n  _createClass(Waveform, [{\n    key: \"getValue\",\n    value:\n    /**\n     * Return the waveform for the current time as a Float32Array where each value in the array\n     * represents a sample in the waveform.\n     */\n    function getValue() {\n      return this._analyser.getValue();\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     * Determines the size of the array returned by [[getValue]].\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._analyser.size;\n    },\n    set: function set(size) {\n      this._analyser.size = size;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(MeterBase.getDefaults(), {\n        size: 1024\n      });\n    }\n  }]);\n\n  return Waveform;\n}(MeterBase);","map":{"version":3,"mappings":";;;;AACA,SAASA,oBAAT,QAAqC,0BAArC;AACA,SAASC,SAAT,QAA4C,aAA5C;AASA;;;;;AAIA,WAAaC,QAAb;AAAA;;AAAA;;AASC;AAAA;;AAAA;;AACC,8BAAMF,oBAAoB,CAACE,QAAQ,CAACC,WAAT,EAAD,EAAyBC,SAAzB,EAAoC,CAAC,MAAD,CAApC,CAA1B;AARQ,iBAAe,UAAf;AASR,QAAMC,OAAO,GAAGL,oBAAoB,CAACE,QAAQ,CAACC,WAAT,EAAD,EAAyBC,SAAzB,EAAoC,CAAC,MAAD,CAApC,CAApC;AAEA,UAAKE,SAAL,CAAeC,IAAf,GAAsB,UAAtB;AACA,UAAKC,IAAL,GAAYH,OAAO,CAACG,IAApB;AALD;AAMC;;AAfF;AAAA;AAAA;AAuBC;;;;AAIA,wBAAQ;AACP,aAAO,KAAKF,SAAL,CAAeG,QAAf,EAAP;AACA;AAED;;;;;AA/BD;AAAA;AAAA,SAmCC,eAAQ;AACP,aAAO,KAAKH,SAAL,CAAeE,IAAtB;AACA,KArCF;AAAA,SAsCC,aAASA,IAAT,EAAa;AACZ,WAAKF,SAAL,CAAeE,IAAf,GAAsBA,IAAtB;AACA;AAxCF;AAAA;AAAA,WAiBC,uBAAkB;AACjB,aAAOE,MAAM,CAACC,MAAP,CAAcV,SAAS,CAACE,WAAV,EAAd,EAAuC;AAC7CK,YAAI,EAAE;AADuC,OAAvC,CAAP;AAGA;AArBF;;AAAA;AAAA,EAA8BP,SAA9B","names":["optionsFromArguments","MeterBase","Waveform","getDefaults","arguments","options","_analyser","type","size","getValue","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/analysis/Waveform.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}