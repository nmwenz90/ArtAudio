{"ast":null,"code":"import _objectWithoutProperties from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"channelCount\", \"channelCountMode\", \"pan\"];\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport var createNativeStereoPannerNodeFakerFactory = function createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) {\n  // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n  var CURVE_SIZE = 16385;\n  var DC_CURVE = new Float32Array([1, 1]);\n  var HALF_PI = Math.PI / 2;\n  var SINGLE_CHANNEL_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete'\n  };\n\n  var SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n    oversample: 'none'\n  });\n\n  var buildInternalGraphForMono = function buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode) {\n    var leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n\n    for (var i = 0; i < CURVE_SIZE; i += 1) {\n      var x = i / (CURVE_SIZE - 1) * HALF_PI;\n      leftWaveShaperCurve[i] = Math.cos(x);\n      rightWaveShaperCurve[i] = Math.sin(x);\n    }\n\n    var leftGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: leftWaveShaperCurve\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var panWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: DC_CURVE\n    }));\n    var rightGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: rightWaveShaperCurve\n    }));\n    return {\n      connectGraph: function connectGraph() {\n        inputGainNode.connect(leftGainNode);\n        inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        inputGainNode.connect(rightGainNode);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.connect(leftGainNode.gain);\n        rightWaveShaperNode.connect(rightGainNode.gain);\n        leftGainNode.connect(channelMergerNode, 0, 0);\n        rightGainNode.connect(channelMergerNode, 0, 1);\n      },\n      disconnectGraph: function disconnectGraph() {\n        inputGainNode.disconnect(leftGainNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        inputGainNode.disconnect(rightGainNode);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n        leftWaveShaperNode.disconnect(leftGainNode.gain);\n        rightWaveShaperNode.disconnect(rightGainNode.gain);\n        leftGainNode.disconnect(channelMergerNode, 0, 0);\n        rightGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n    };\n  };\n\n  var buildInternalGraphForStereo = function buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode) {\n    var leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n    var centerIndex = Math.floor(CURVE_SIZE / 2);\n\n    for (var i = 0; i < CURVE_SIZE; i += 1) {\n      if (i > centerIndex) {\n        var x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n        leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n        leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n        rightInputForLeftOutputWaveShaperCurve[i] = 0;\n        rightInputForRightOutputWaveShaperCurve[i] = 1;\n      } else {\n        var _x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;\n\n        leftInputForLeftOutputWaveShaperCurve[i] = 1;\n        leftInputForRightOutputWaveShaperCurve[i] = 0;\n        rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(_x);\n        rightInputForRightOutputWaveShaperCurve[i] = Math.sin(_x);\n      }\n    }\n\n    var channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n      channelCount: 2,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      numberOfOutputs: 2\n    });\n    var leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: leftInputForLeftOutputWaveShaperCurve\n    }));\n    var leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: leftInputForRightOutputWaveShaperCurve\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var panWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: DC_CURVE\n    }));\n    var rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: rightInputForLeftOutputWaveShaperCurve\n    }));\n    var rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_OPTIONS), {}, {\n      gain: 0\n    })); // Bug #119: Safari does not fully support the WaveShaperNode.\n\n    var rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, _objectSpread(_objectSpread({}, SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS), {}, {\n      curve: rightInputForRightOutputWaveShaperCurve\n    }));\n    return {\n      connectGraph: function connectGraph() {\n        inputGainNode.connect(channelSplitterNode);\n        inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);\n        channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);\n        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.connect(panGainNode);\n        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n      },\n      disconnectGraph: function disconnectGraph() {\n        inputGainNode.disconnect(channelSplitterNode);\n        inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n        channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);\n        channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);\n        channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n        channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n        panWaveShaperNode.disconnect(panGainNode);\n        panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n        panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);\n        leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n        leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n        rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n        rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n        leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n        leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n        rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n      }\n    };\n  };\n\n  var buildInternalGraph = function buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) {\n    if (channelCount === 1) {\n      return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n\n    if (channelCount === 2) {\n      return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n    }\n\n    throw createNotSupportedError();\n  };\n\n  return function (nativeContext, _ref) {\n    var channelCount = _ref.channelCount,\n        channelCountMode = _ref.channelCountMode,\n        pan = _ref.pan,\n        audioNodeOptions = _objectWithoutProperties(_ref, _excluded);\n\n    if (channelCountMode === 'max') {\n      throw createNotSupportedError();\n    }\n\n    var channelMergerNode = createNativeChannelMergerNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      channelCount: 1,\n      channelCountMode: channelCountMode,\n      numberOfInputs: 2\n    }));\n    var inputGainNode = createNativeGainNode(nativeContext, _objectSpread(_objectSpread({}, audioNodeOptions), {}, {\n      channelCount: channelCount,\n      channelCountMode: channelCountMode,\n      gain: 1\n    }));\n    var panGainNode = createNativeGainNode(nativeContext, {\n      channelCount: 1,\n      channelCountMode: 'explicit',\n      channelInterpretation: 'discrete',\n      gain: pan\n    });\n\n    var _buildInternalGraph = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode),\n        connectGraph = _buildInternalGraph.connectGraph,\n        disconnectGraph = _buildInternalGraph.disconnectGraph;\n\n    Object.defineProperty(panGainNode.gain, 'defaultValue', {\n      get: function get() {\n        return 0;\n      }\n    });\n    Object.defineProperty(panGainNode.gain, 'maxValue', {\n      get: function get() {\n        return 1;\n      }\n    });\n    Object.defineProperty(panGainNode.gain, 'minValue', {\n      get: function get() {\n        return -1;\n      }\n    });\n    var nativeStereoPannerNodeFakerFactory = {\n      get bufferSize() {\n        return undefined;\n      },\n\n      get channelCount() {\n        return inputGainNode.channelCount;\n      },\n\n      set channelCount(value) {\n        if (inputGainNode.channelCount !== value) {\n          if (isConnected) {\n            disconnectGraph();\n          }\n\n          var _buildInternalGraph2 = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode);\n\n          connectGraph = _buildInternalGraph2.connectGraph;\n          disconnectGraph = _buildInternalGraph2.disconnectGraph;\n\n          if (isConnected) {\n            connectGraph();\n          }\n        }\n\n        inputGainNode.channelCount = value;\n      },\n\n      get channelCountMode() {\n        return inputGainNode.channelCountMode;\n      },\n\n      set channelCountMode(value) {\n        if (value === 'clamped-max' || value === 'max') {\n          throw createNotSupportedError();\n        }\n\n        inputGainNode.channelCountMode = value;\n      },\n\n      get channelInterpretation() {\n        return inputGainNode.channelInterpretation;\n      },\n\n      set channelInterpretation(value) {\n        inputGainNode.channelInterpretation = value;\n      },\n\n      get context() {\n        return inputGainNode.context;\n      },\n\n      get inputs() {\n        return [inputGainNode];\n      },\n\n      get numberOfInputs() {\n        return inputGainNode.numberOfInputs;\n      },\n\n      get numberOfOutputs() {\n        return inputGainNode.numberOfOutputs;\n      },\n\n      get pan() {\n        return panGainNode.gain;\n      },\n\n      addEventListener: function addEventListener() {\n        return inputGainNode.addEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      },\n      dispatchEvent: function dispatchEvent() {\n        return inputGainNode.dispatchEvent(arguments.length <= 0 ? undefined : arguments[0]);\n      },\n      removeEventListener: function removeEventListener() {\n        return inputGainNode.removeEventListener(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], arguments.length <= 2 ? undefined : arguments[2]);\n      }\n    };\n    var isConnected = false;\n\n    var whenConnected = function whenConnected() {\n      connectGraph();\n      isConnected = true;\n    };\n\n    var whenDisconnected = function whenDisconnected() {\n      disconnectGraph();\n      isConnected = false;\n    };\n\n    return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n  };\n};","map":{"version":3,"mappings":"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","names":["interceptConnections","createNativeStereoPannerNodeFakerFactory","createNativeChannelMergerNode","createNativeChannelSplitterNode","createNativeGainNode","createNativeWaveShaperNode","createNotSupportedError","monitorConnections","CURVE_SIZE","DC_CURVE","Float32Array","HALF_PI","Math","PI","SINGLE_CHANNEL_OPTIONS","channelCount","channelCountMode","channelInterpretation","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","oversample","buildInternalGraphForMono","nativeContext","inputGainNode","panGainNode","channelMergerNode","leftWaveShaperCurve","rightWaveShaperCurve","i","x","cos","sin","leftGainNode","gain","leftWaveShaperNode","curve","panWaveShaperNode","rightGainNode","rightWaveShaperNode","connectGraph","connect","inputs","undefined","disconnectGraph","disconnect","buildInternalGraphForStereo","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","centerIndex","floor","channelSplitterNode","numberOfOutputs","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraph","pan","audioNodeOptions","numberOfInputs","Object","defineProperty","get","nativeStereoPannerNodeFakerFactory","bufferSize","value","isConnected","context","addEventListener","dispatchEvent","removeEventListener","whenConnected","whenDisconnected"],"sourceRoot":"","sources":["../../../src/factories/native-stereo-panner-node-faker-factory.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}