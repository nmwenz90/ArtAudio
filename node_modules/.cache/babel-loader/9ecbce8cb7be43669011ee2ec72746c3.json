{"ast":null,"code":"/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nvar IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\n\nexport var splitImportStatements = function splitImportStatements(source, url) {\n  var importStatements = [];\n  var sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n  var result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n\n  while (result !== null) {\n    var unresolvedUrl = result[1].slice(1, -1);\n    var importStatementWithResolvedUrl = result[0].replace(/([\\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n    importStatements.push(importStatementWithResolvedUrl);\n    sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n    result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n  }\n\n  return [importStatements.join(';'), sourceWithoutImportStatements];\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;AAYA,IAAMA,sBAAsB,GAAG,sPAA/B,C,CAAuR;;AAEvR,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,MAAD,EAAiBC,GAAjB,EAAkD;AACnF,MAAMC,gBAAgB,GAAG,EAAzB;AAEA,MAAIC,6BAA6B,GAAGH,MAAM,CAACI,OAAP,CAAe,QAAf,EAAyB,EAAzB,CAApC;AACA,MAAIC,MAAM,GAAGF,6BAA6B,CAACG,KAA9B,CAAoCR,sBAApC,CAAb;;AAEA,SAAOO,MAAM,KAAK,IAAlB,EAAwB;AACpB,QAAME,aAAa,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUG,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAAtB;AAEA,QAAMC,8BAA8B,GAAGJ,MAAM,CAAC,CAAD,CAAN,CAClCD,OADkC,CAC1B,aAD0B,EACX,EADW,EAElCA,OAFkC,CAE1BG,aAF0B,EAEX,IAAIG,GAAJ,CAAQH,aAAR,EAAuBN,GAAvB,EAA4BU,QAA5B,EAFW,CAAvC;AAGAT,oBAAgB,CAACU,IAAjB,CAAsBH,8BAAtB;AAEAN,iCAA6B,GAAGA,6BAA6B,CAACK,KAA9B,CAAoCH,MAAM,CAAC,CAAD,CAAN,CAAUQ,MAA9C,EAAsDT,OAAtD,CAA8D,QAA9D,EAAwE,EAAxE,CAAhC;AACAC,UAAM,GAAGF,6BAA6B,CAACG,KAA9B,CAAoCR,sBAApC,CAAT;AACH;;AAED,SAAO,CAACI,gBAAgB,CAACY,IAAjB,CAAsB,GAAtB,CAAD,EAA6BX,6BAA7B,CAAP;AACH,CAnBM","names":["IMPORT_STATEMENT_REGEX","splitImportStatements","source","url","importStatements","sourceWithoutImportStatements","replace","result","match","unresolvedUrl","slice","importStatementWithResolvedUrl","URL","toString","push","length","join"],"sourceRoot":"","sources":["../../../src/helpers/split-import-statements.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}