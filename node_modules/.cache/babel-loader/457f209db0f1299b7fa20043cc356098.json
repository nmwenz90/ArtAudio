{"ast":null,"code":"import _objectSpread from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nvar DEFAULT_OPTIONS = {\n  Q: 1,\n  channelCount: 2,\n  channelCountMode: 'max',\n  channelInterpretation: 'speakers',\n  detune: 0,\n  frequency: 350,\n  gain: 0,\n  type: 'lowpass'\n};\nexport var createBiquadFilterNodeConstructor = function createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) {\n  return /*#__PURE__*/function (_audioNodeConstructor) {\n    _inherits(BiquadFilterNode, _audioNodeConstructor);\n\n    var _super = _createSuper(BiquadFilterNode);\n\n    function BiquadFilterNode(context, options) {\n      var _this;\n\n      _classCallCheck(this, BiquadFilterNode);\n\n      var nativeContext = getNativeContext(context);\n\n      var mergedOptions = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);\n\n      var nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n      var isOffline = isNativeOfflineAudioContext(nativeContext);\n      var biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;\n      _this = _super.call(this, context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer); // Bug #80: Safari does not export the correct values for maxValue and minValue.\n\n      _this._Q = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT); // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      _this._detune = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT)); // Bug #77: Firefox & Safari do not export the correct value for minValue.\n\n      _this._frequency = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0); // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n\n      _this._gain = createAudioParam(_assertThisInitialized(_this), isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n      _this._nativeBiquadFilterNode = nativeBiquadFilterNode; // @todo Determine a meaningful tail-time instead of just using one second.\n\n      setAudioNodeTailTime(_assertThisInitialized(_this), 1);\n      return _this;\n    }\n\n    _createClass(BiquadFilterNode, [{\n      key: \"detune\",\n      get: function get() {\n        return this._detune;\n      }\n    }, {\n      key: \"frequency\",\n      get: function get() {\n        return this._frequency;\n      }\n    }, {\n      key: \"gain\",\n      get: function get() {\n        return this._gain;\n      }\n    }, {\n      key: \"Q\",\n      get: function get() {\n        return this._Q;\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        return this._nativeBiquadFilterNode.type;\n      },\n      set: function set(value) {\n        this._nativeBiquadFilterNode.type = value;\n      }\n    }, {\n      key: \"getFrequencyResponse\",\n      value: function getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n        // Bug #189: Safari does throw an InvalidStateError.\n        try {\n          this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        } catch (err) {\n          if (err.code === 11) {\n            throw createInvalidAccessError();\n          }\n\n          throw err;\n        } // Bug #68: Safari does not throw an error if the parameters differ in their length.\n\n\n        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n          throw createInvalidAccessError();\n        }\n      }\n    }]);\n\n    return BiquadFilterNode;\n  }(audioNodeConstructor);\n};","map":{"version":3,"mappings":"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","names":["MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","DEFAULT_OPTIONS","Q","channelCount","channelCountMode","channelInterpretation","detune","frequency","gain","type","createBiquadFilterNodeConstructor","audioNodeConstructor","createAudioParam","createBiquadFilterNodeRenderer","createInvalidAccessError","createNativeBiquadFilterNode","getNativeContext","isNativeOfflineAudioContext","setAudioNodeTailTime","context","options","nativeContext","mergedOptions","nativeBiquadFilterNode","isOffline","biquadFilterNodeRenderer","_Q","_detune","Math","log2","_frequency","sampleRate","_gain","log10","_nativeBiquadFilterNode","value","frequencyHz","magResponse","phaseResponse","getFrequencyResponse","err","code","length"],"sourceRoot":"","sources":["../../../src/factories/biquad-filter-node-constructor.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}