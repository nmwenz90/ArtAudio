{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\n\nexport var Panner3D = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Panner3D, _ToneAudioNode);\n\n  var _super = _createSuper(Panner3D);\n\n  function Panner3D() {\n    var _this;\n\n    _classCallCheck(this, Panner3D);\n\n    _this = _super.call(this, optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n    _this.name = \"Panner3D\";\n    var options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n    _this._panner = _this.input = _this.output = _this.context.createPanner(); // set some values\n\n    _this.panningModel = options.panningModel;\n    _this.maxDistance = options.maxDistance;\n    _this.distanceModel = options.distanceModel;\n    _this.coneOuterGain = options.coneOuterGain;\n    _this.coneOuterAngle = options.coneOuterAngle;\n    _this.coneInnerAngle = options.coneInnerAngle;\n    _this.refDistance = options.refDistance;\n    _this.rolloffFactor = options.rolloffFactor;\n    _this.positionX = new Param({\n      context: _this.context,\n      param: _this._panner.positionX,\n      value: options.positionX\n    });\n    _this.positionY = new Param({\n      context: _this.context,\n      param: _this._panner.positionY,\n      value: options.positionY\n    });\n    _this.positionZ = new Param({\n      context: _this.context,\n      param: _this._panner.positionZ,\n      value: options.positionZ\n    });\n    _this.orientationX = new Param({\n      context: _this.context,\n      param: _this._panner.orientationX,\n      value: options.orientationX\n    });\n    _this.orientationY = new Param({\n      context: _this.context,\n      param: _this._panner.orientationY,\n      value: options.orientationY\n    });\n    _this.orientationZ = new Param({\n      context: _this.context,\n      param: _this._panner.orientationZ,\n      value: options.orientationZ\n    });\n    return _this;\n  }\n\n  _createClass(Panner3D, [{\n    key: \"setPosition\",\n    value:\n    /**\n     * Sets the position of the source in 3d space.\n     */\n    function setPosition(x, y, z) {\n      this.positionX.value = x;\n      this.positionY.value = y;\n      this.positionZ.value = z;\n      return this;\n    }\n    /**\n     * Sets the orientation of the source in 3d space.\n     */\n\n  }, {\n    key: \"setOrientation\",\n    value: function setOrientation(x, y, z) {\n      this.orientationX.value = x;\n      this.orientationY.value = y;\n      this.orientationZ.value = z;\n      return this;\n    }\n    /**\n     * The panning model. Either \"equalpower\" or \"HRTF\".\n     */\n\n  }, {\n    key: \"panningModel\",\n    get: function get() {\n      return this._panner.panningModel;\n    },\n    set: function set(val) {\n      this._panner.panningModel = val;\n    }\n    /**\n     * A reference distance for reducing volume as source move further from the listener\n     */\n\n  }, {\n    key: \"refDistance\",\n    get: function get() {\n      return this._panner.refDistance;\n    },\n    set: function set(val) {\n      this._panner.refDistance = val;\n    }\n    /**\n     * Describes how quickly the volume is reduced as source moves away from listener.\n     */\n\n  }, {\n    key: \"rolloffFactor\",\n    get: function get() {\n      return this._panner.rolloffFactor;\n    },\n    set: function set(val) {\n      this._panner.rolloffFactor = val;\n    }\n    /**\n     * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n     */\n\n  }, {\n    key: \"distanceModel\",\n    get: function get() {\n      return this._panner.distanceModel;\n    },\n    set: function set(val) {\n      this._panner.distanceModel = val;\n    }\n    /**\n     * The angle, in degrees, inside of which there will be no volume reduction\n     */\n\n  }, {\n    key: \"coneInnerAngle\",\n    get: function get() {\n      return this._panner.coneInnerAngle;\n    },\n    set: function set(val) {\n      this._panner.coneInnerAngle = val;\n    }\n    /**\n     * The angle, in degrees, outside of which the volume will be reduced\n     * to a constant value of coneOuterGain\n     */\n\n  }, {\n    key: \"coneOuterAngle\",\n    get: function get() {\n      return this._panner.coneOuterAngle;\n    },\n    set: function set(val) {\n      this._panner.coneOuterAngle = val;\n    }\n    /**\n     * The gain outside of the coneOuterAngle\n     */\n\n  }, {\n    key: \"coneOuterGain\",\n    get: function get() {\n      return this._panner.coneOuterGain;\n    },\n    set: function set(val) {\n      this._panner.coneOuterGain = val;\n    }\n    /**\n     * The maximum distance between source and listener,\n     * after which the volume will not be reduced any further.\n     */\n\n  }, {\n    key: \"maxDistance\",\n    get: function get() {\n      return this._panner.maxDistance;\n    },\n    set: function set(val) {\n      this._panner.maxDistance = val;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Panner3D.prototype), \"dispose\", this).call(this);\n\n      this._panner.disconnect();\n\n      this.orientationX.dispose();\n      this.orientationY.dispose();\n      this.orientationZ.dispose();\n      this.positionX.dispose();\n      this.positionY.dispose();\n      this.positionZ.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        coneInnerAngle: 360,\n        coneOuterAngle: 360,\n        coneOuterGain: 0,\n        distanceModel: \"inverse\",\n        maxDistance: 10000,\n        orientationX: 0,\n        orientationY: 0,\n        orientationZ: 0,\n        panningModel: \"equalpower\",\n        positionX: 0,\n        positionY: 0,\n        positionZ: 0,\n        refDistance: 1,\n        rolloffFactor: 1\n      });\n    }\n  }]);\n\n  return Panner3D;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Param","ToneAudioNode","optionsFromArguments","Panner3D","getDefaults","arguments","options","_panner","input","output","context","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","positionX","param","value","positionY","positionZ","orientationX","orientationY","orientationZ","x","y","z","val","disconnect","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/channel/Panner3D.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}