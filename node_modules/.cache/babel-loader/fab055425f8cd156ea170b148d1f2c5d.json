{"ast":null,"code":"import _toConsumableArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { connectSeries, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { isNumber } from \"../../core/util/TypeCheck\";\nimport { Signal } from \"../../signal/Signal\";\nimport { assert } from \"../../core/util/Debug\";\nimport { BiquadFilter } from \"./BiquadFilter\";\n/**\n * Tone.Filter is a filter which allows for all of the same native methods\n * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).\n * Tone.Filter has the added ability to set the filter rolloff at -12\n * (default), -24 and -48.\n * @example\n * const filter = new Tone.Filter(1500, \"highpass\").toDestination();\n * filter.frequency.rampTo(20000, 10);\n * const noise = new Tone.Noise().connect(filter).start();\n * @category Component\n */\n\nexport var Filter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Filter, _ToneAudioNode);\n\n  var _super = _createSuper(Filter);\n\n  function Filter() {\n    var _this;\n\n    _classCallCheck(this, Filter);\n\n    _this = _super.call(this, optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]));\n    _this.name = \"Filter\";\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._filters = [];\n    var options = optionsFromArguments(Filter.getDefaults(), arguments, [\"frequency\", \"type\", \"rolloff\"]);\n    _this._filters = [];\n    _this.Q = new Signal({\n      context: _this.context,\n      units: \"positive\",\n      value: options.Q\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency\n    });\n    _this.detune = new Signal({\n      context: _this.context,\n      units: \"cents\",\n      value: options.detune\n    });\n    _this.gain = new Signal({\n      context: _this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain\n    });\n    _this._type = options.type;\n    _this.rolloff = options.rolloff;\n    readOnly(_assertThisInitialized(_this), [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n    return _this;\n  }\n\n  _createClass(Filter, [{\n    key: \"type\",\n    get:\n    /**\n     * The type of the filter. Types: \"lowpass\", \"highpass\",\n     * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".\n     */\n    function get() {\n      return this._type;\n    },\n    set: function set(type) {\n      var types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n      assert(types.indexOf(type) !== -1, \"Invalid filter type: \".concat(type));\n      this._type = type;\n\n      this._filters.forEach(function (filter) {\n        return filter.type = type;\n      });\n    }\n    /**\n     * The rolloff of the filter which is the drop in db\n     * per octave. Implemented internally by cascading filters.\n     * Only accepts the values -12, -24, -48 and -96.\n     */\n\n  }, {\n    key: \"rolloff\",\n    get: function get() {\n      return this._rolloff;\n    },\n    set: function set(rolloff) {\n      var rolloffNum = isNumber(rolloff) ? rolloff : parseInt(rolloff, 10);\n      var possibilities = [-12, -24, -48, -96];\n      var cascadingCount = possibilities.indexOf(rolloffNum); // check the rolloff is valid\n\n      assert(cascadingCount !== -1, \"rolloff can only be \".concat(possibilities.join(\", \")));\n      cascadingCount += 1;\n      this._rolloff = rolloffNum;\n      this.input.disconnect();\n\n      this._filters.forEach(function (filter) {\n        return filter.disconnect();\n      });\n\n      this._filters = new Array(cascadingCount);\n\n      for (var count = 0; count < cascadingCount; count++) {\n        var filter = new BiquadFilter({\n          context: this.context\n        });\n        filter.type = this._type;\n        this.frequency.connect(filter.frequency);\n        this.detune.connect(filter.detune);\n        this.Q.connect(filter.Q);\n        this.gain.connect(filter.gain);\n        this._filters[count] = filter;\n      }\n\n      this._internalChannels = this._filters;\n      connectSeries.apply(void 0, [this.input].concat(_toConsumableArray(this._internalChannels), [this.output]));\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n\n  }, {\n    key: \"getFrequencyResponse\",\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      var filterClone = new BiquadFilter({\n        frequency: this.frequency.value,\n        gain: this.gain.value,\n        Q: this.Q.value,\n        type: this._type,\n        detune: this.detune.value\n      }); // start with all 1s\n\n      var totalResponse = new Float32Array(len).map(function () {\n        return 1;\n      });\n\n      this._filters.forEach(function () {\n        var response = filterClone.getFrequencyResponse(len);\n        response.forEach(function (val, i) {\n          return totalResponse[i] *= val;\n        });\n      });\n\n      filterClone.dispose();\n      return totalResponse;\n    }\n    /**\n     * Clean up.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Filter.prototype), \"dispose\", this).call(this);\n\n      this._filters.forEach(function (filter) {\n        filter.dispose();\n      });\n\n      writable(this, [\"detune\", \"frequency\", \"gain\", \"Q\"]);\n      this.frequency.dispose();\n      this.Q.dispose();\n      this.detune.dispose();\n      this.gain.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        Q: 1,\n        detune: 0,\n        frequency: 350,\n        gain: 0,\n        rolloff: -12,\n        type: \"lowpass\"\n      });\n    }\n  }]);\n\n  return Filter;\n}(ToneAudioNode);","map":{"version":3,"mappings":"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","names":["Gain","connectSeries","ToneAudioNode","optionsFromArguments","readOnly","writable","isNumber","Signal","assert","BiquadFilter","Filter","getDefaults","arguments","context","options","_filters","Q","units","value","frequency","detune","gain","convert","_type","type","rolloff","types","indexOf","forEach","filter","_rolloff","rolloffNum","parseInt","possibilities","cascadingCount","join","input","disconnect","Array","count","connect","_internalChannels","output","len","filterClone","totalResponse","Float32Array","map","response","getFrequencyResponse","val","i","dispose","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/filter/Filter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}