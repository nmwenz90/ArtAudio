{"ast":null,"code":"import _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { dbToGain } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Get the current frequency data of the connected audio source using a fast Fourier transform.\n * @category Component\n */\n\nexport var FFT = /*#__PURE__*/function (_MeterBase) {\n  _inherits(FFT, _MeterBase);\n\n  var _super = _createSuper(FFT);\n\n  function FFT() {\n    var _this;\n\n    _classCallCheck(this, FFT);\n\n    _this = _super.call(this, optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]));\n    _this.name = \"FFT\";\n    var options = optionsFromArguments(FFT.getDefaults(), arguments, [\"size\"]);\n    _this.normalRange = options.normalRange;\n    _this._analyser.type = \"fft\";\n    _this.size = options.size;\n    return _this;\n  }\n\n  _createClass(FFT, [{\n    key: \"getValue\",\n    value:\n    /**\n     * Gets the current frequency data from the connected audio source.\n     * Returns the frequency data of length [[size]] as a Float32Array of decibel values.\n     */\n    function getValue() {\n      var _this2 = this;\n\n      var values = this._analyser.getValue();\n\n      return values.map(function (v) {\n        return _this2.normalRange ? dbToGain(v) : v;\n      });\n    }\n    /**\n     * The size of analysis. This must be a power of two in the range 16 to 16384.\n     * Determines the size of the array returned by [[getValue]] (i.e. the number of\n     * frequency bins). Large FFT sizes may be costly to compute.\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._analyser.size;\n    },\n    set: function set(size) {\n      this._analyser.size = size;\n    }\n    /**\n     * 0 represents no time averaging with the last analysis frame.\n     */\n\n  }, {\n    key: \"smoothing\",\n    get: function get() {\n      return this._analyser.smoothing;\n    },\n    set: function set(val) {\n      this._analyser.smoothing = val;\n    }\n    /**\n     * Returns the frequency value in hertz of each of the indices of the FFT's [[getValue]] response.\n     * @example\n     * const fft = new Tone.FFT(32);\n     * console.log([0, 1, 2, 3, 4].map(index => fft.getFrequencyOfIndex(index)));\n     */\n\n  }, {\n    key: \"getFrequencyOfIndex\",\n    value: function getFrequencyOfIndex(index) {\n      assert(0 <= index && index < this.size, \"index must be greater than or equal to 0 and less than \".concat(this.size));\n      return index * this.context.sampleRate / (this.size * 2);\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        normalRange: false,\n        size: 1024,\n        smoothing: 0.8\n      });\n    }\n  }]);\n\n  return FFT;\n}(MeterBase);","map":{"version":3,"mappings":";;;;AAAA,SAASA,aAAT,QAA8B,kCAA9B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,SAAT,QAA4C,aAA5C;AACA,SAASC,MAAT,QAAuB,uBAAvB;AAQA;;;;;AAIA,WAAaC,GAAb;AAAA;;AAAA;;AAgBC;AAAA;;AAAA;;AACC,8BAAMH,oBAAoB,CAACG,GAAG,CAACC,WAAJ,EAAD,EAAoBC,SAApB,EAA+B,CAAC,MAAD,CAA/B,CAA1B;AAfQ,iBAAe,KAAf;AAgBR,QAAMC,OAAO,GAAGN,oBAAoB,CAACG,GAAG,CAACC,WAAJ,EAAD,EAAoBC,SAApB,EAA+B,CAAC,MAAD,CAA/B,CAApC;AAEA,UAAKE,WAAL,GAAmBD,OAAO,CAACC,WAA3B;AACA,UAAKC,SAAL,CAAeC,IAAf,GAAsB,KAAtB;AACA,UAAKC,IAAL,GAAYJ,OAAO,CAACI,IAApB;AAND;AAOC;;AAvBF;AAAA;AAAA;AAiCC;;;;AAIA,wBAAQ;AAAA;;AACP,UAAMC,MAAM,GAAG,KAAKH,SAAL,CAAeI,QAAf,EAAf;;AACA,aAAOD,MAAM,CAACE,GAAP,CAAW,WAAC;AAAA,eAAI,MAAI,CAACN,WAAL,GAAmBR,QAAQ,CAACe,CAAD,CAA3B,GAAiCA,CAArC;AAAA,OAAZ,CAAP;AACA;AAED;;;;;;AA1CD;AAAA;AAAA,SA+CC,eAAQ;AACP,aAAO,KAAKN,SAAL,CAAeE,IAAtB;AACA,KAjDF;AAAA,SAkDC,aAASA,IAAT,EAAa;AACZ,WAAKF,SAAL,CAAeE,IAAf,GAAsBA,IAAtB;AACA;AAED;;;;AAtDD;AAAA;AAAA,SAyDC,eAAa;AACZ,aAAO,KAAKF,SAAL,CAAeO,SAAtB;AACA,KA3DF;AAAA,SA4DC,aAAcC,GAAd,EAAiB;AAChB,WAAKR,SAAL,CAAeO,SAAf,GAA2BC,GAA3B;AACA;AAED;;;;;;;AAhED;AAAA;AAAA,WAsEC,6BAAoBC,KAApB,EAAiC;AAChCf,YAAM,CAAC,KAAKe,KAAL,IAAcA,KAAK,GAAG,KAAKP,IAA5B,mEAA4F,KAAKA,IAAjG,EAAN;AACA,aAAOO,KAAK,GAAG,KAAKC,OAAL,CAAaC,UAArB,IAAmC,KAAKT,IAAL,GAAY,CAA/C,CAAP;AACA;AAzEF;AAAA;AAAA,WAyBC,uBAAkB;AACjB,aAAOU,MAAM,CAACC,MAAP,CAAcvB,aAAa,CAACM,WAAd,EAAd,EAA2C;AACjDG,mBAAW,EAAE,KADoC;AAEjDG,YAAI,EAAE,IAF2C;AAGjDK,iBAAS,EAAE;AAHsC,OAA3C,CAAP;AAKA;AA/BF;;AAAA;AAAA,EAAyBd,SAAzB","names":["ToneAudioNode","dbToGain","optionsFromArguments","MeterBase","assert","FFT","getDefaults","arguments","options","normalRange","_analyser","type","size","values","getValue","map","v","smoothing","val","index","context","sampleRate","Object","assign"],"sourceRoot":"","sources":["../../../../Tone/component/analysis/FFT.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}