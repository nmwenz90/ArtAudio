{"ast":null,"code":"import _toConsumableArray from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/natewamwenze/Documents/personalProjects/musicidea/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Scale } from \"../signal/Scale\";\nimport { Signal } from \"../signal/Signal\";\nimport { FeedbackCombFilter } from \"../component/filter/FeedbackCombFilter\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * an array of the comb filter delay time values\n */\n\nvar combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];\n/**\n * the resonances of each of the comb filters\n */\n\nvar combFilterResonances = [0.773, 0.802, 0.753, 0.733];\n/**\n * the allpass filter frequencies\n */\n\nvar allpassFilterFreqs = [347, 113, 37];\n/**\n * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n * tuned by John Chowning in 1970.\n * It is made up of three allpass filters and four [[FeedbackCombFilter]].\n * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const reverb = new Tone.JCReverb(0.4).toDestination();\n * const delay = new Tone.FeedbackDelay(0.5);\n * // connecting the synth to reverb through delay\n * const synth = new Tone.DuoSynth().chain(delay, reverb);\n * synth.triggerAttackRelease(\"A4\", \"8n\");\n *\n * @category Effect\n */\n\nexport var JCReverb = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(JCReverb, _StereoEffect);\n\n  var _super = _createSuper(JCReverb);\n\n  function JCReverb() {\n    var _this;\n\n    _classCallCheck(this, JCReverb);\n\n    _this = _super.call(this, optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]));\n    _this.name = \"JCReverb\";\n    /**\n     * a series of allpass filters\n     */\n\n    _this._allpassFilters = [];\n    /**\n     * parallel feedback comb filters\n     */\n\n    _this._feedbackCombFilters = [];\n    var options = optionsFromArguments(JCReverb.getDefaults(), arguments, [\"roomSize\"]);\n    _this.roomSize = new Signal({\n      context: _this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    });\n    _this._scaleRoomSize = new Scale({\n      context: _this.context,\n      min: -0.733,\n      max: 0.197\n    }); // make the allpass filters\n\n    _this._allpassFilters = allpassFilterFreqs.map(function (freq) {\n      var allpass = _this.context.createBiquadFilter();\n\n      allpass.type = \"allpass\";\n      allpass.frequency.value = freq;\n      return allpass;\n    }); // and the comb filters\n\n    _this._feedbackCombFilters = combFilterDelayTimes.map(function (delayTime, index) {\n      var fbcf = new FeedbackCombFilter({\n        context: _this.context,\n        delayTime: delayTime\n      });\n\n      _this._scaleRoomSize.connect(fbcf.resonance);\n\n      fbcf.resonance.value = combFilterResonances[index];\n\n      if (index < combFilterDelayTimes.length / 2) {\n        var _this2;\n\n        (_this2 = _this).connectEffectLeft.apply(_this2, _toConsumableArray(_this._allpassFilters).concat([fbcf]));\n      } else {\n        var _this3;\n\n        (_this3 = _this).connectEffectRight.apply(_this3, _toConsumableArray(_this._allpassFilters).concat([fbcf]));\n      }\n\n      return fbcf;\n    }); // chain the allpass filters together\n\n    _this.roomSize.connect(_this._scaleRoomSize);\n\n    readOnly(_assertThisInitialized(_this), [\"roomSize\"]);\n    return _this;\n  }\n\n  _createClass(JCReverb, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(JCReverb.prototype), \"dispose\", this).call(this);\n\n      this._allpassFilters.forEach(function (apf) {\n        return apf.disconnect();\n      });\n\n      this._feedbackCombFilters.forEach(function (fbcf) {\n        return fbcf.dispose();\n      });\n\n      this.roomSize.dispose();\n\n      this._scaleRoomSize.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        roomSize: 0.5\n      });\n    }\n  }]);\n\n  return JCReverb;\n}(StereoEffect);","map":{"version":3,"mappings":"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","names":["StereoEffect","optionsFromArguments","Scale","Signal","FeedbackCombFilter","readOnly","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","getDefaults","arguments","options","roomSize","context","value","units","_scaleRoomSize","min","max","_allpassFilters","map","allpass","createBiquadFilter","type","frequency","freq","_feedbackCombFilters","delayTime","index","fbcf","connect","resonance","length","connectEffectLeft","connectEffectRight","forEach","apf","disconnect","dispose","Object","assign"],"sourceRoot":"","sources":["../../../Tone/effect/JCReverb.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}